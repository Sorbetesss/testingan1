@page "/codeeditors"
@inject IStringLocalizer<CodeEditors> Localizer

<h3>@Localizer["Title"]</h3>

<PackageTips Name="BootstrapBlazor.CodeEditor"></PackageTips>

<Tips class="mt-3 mt-3">
    @((MarkupString)Localizer["Tips"].Value)
</Tips>

<DemoBlock Title="@Localizer["BasicTitle"]" Introduction="@Localizer["BasicIntro"]">
    <div class="row g-3">
        <div class="col-12">
            <div class="d-flex justify-content-between">
                <Select TValue="string" OnSelectedItemChanged="@OnSelectedItemChanged">
                    <Options>
                        <SelectOption Text="JavaScript" Value="javascript"></SelectOption>
                        <SelectOption Text="CSharp" Value="csharp"></SelectOption>
                        <SelectOption Text="Razor" Value="razor"></SelectOption>
                        <SelectOption Text="Json" Value="json"></SelectOption>
                    </Options>
                </Select>
                <Select TValue="string" OnSelectedItemChanged="@OnThemeSelectedItemChanged">
                    <Options>
                        <SelectOption Text="Visual Studio" Value="vs"></SelectOption>
                        <SelectOption Text="Visual Studio Dark" Value="vs-dark"></SelectOption>
                        <SelectOption Text="High Contrast Dark" Value="hc-black"></SelectOption>
                    </Options>
                </Select>
            </div>
        </div>
        <div class="col-12">
            <CodeEditor @bind-Value="@Code" Language="@Language" Theme="@Theme" OnValueChanged="OnValueChanged" />
        </div>
        <div class="col-12">
            <b>Language:</b> @Language; <b>Code:</b> @Code; <b>Theme:</b> @Theme
        </div>
        <div class="col-12">
            <ConsoleLogger @ref="Logger"></ConsoleLogger>
        </div>
    </div>
</DemoBlock>

@code {

    [NotNull]
    private ConsoleLogger? Logger { get; set; }

    [NotNull]
    private string? Code { get; set; }

    [NotNull]
    private string? Language { get; set; }

    [NotNull]
    private string? Theme { get; set; }

    private Task OnSelectedItemChanged(SelectedItem item)
    {
        if (item.Text == "JavaScript")
        {
            Language = "javascript";
            Code = @"
                     function main() {
                          console.log('Hello World!')
                     }
                    ";
        }

        if (item.Text == "CSharp")
        {
            Language = "csharp";
            Code = @"
             using System;

             void Main()
             {
                 Console.WriteLine(""Hello World"");
             }
                    ";
        }

        if (item.Text == "Json")
        {
            Language = "json";
            Code = @"
            {
                ""name"": ""Hello World"",
                ""age"": 25
            }
                    ";
        }

        if (item.Text == "Razor")
        {
            Language = "razor";
            Code = @"
            <Select TValue=""string"" OnSelectedItemChanged=""@OnSelectedItemChanged"">
                <Options>
                    <SelectOption Text=""JavaScript"" Value=""JavaScript""></ SelectOption>
                    <SelectOption Text=""CSharp"" Value=""CSharp"" ></ SelectOption >
                    <SelectOption Text=""Razor"" Value=""Razor"" ></ SelectOption >
                    <SelectOption Text=""Json"" Value=""Json"" ></ SelectOption >
                </Options>
            </Select>
                    ";
        }
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnValueChanged(string? value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            Logger.Log(value);
        }
        return Task.CompletedTask;
    }

    private Task OnThemeSelectedItemChanged(SelectedItem item)
    {
        if (item.Value == "vs-dark")
        {
            Theme = item.Value;
        }

        if (item.Value == "vs")
        {
            Theme = item.Value;
        }

        if (item.Value == "hc-black")
        {
            Theme = item.Value;
        }
        StateHasChanged();
        return Task.CompletedTask;
    }
}
