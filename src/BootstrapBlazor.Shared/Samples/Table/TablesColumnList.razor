@page "/table/column/list"
@inject IStringLocalizer<TablesColumn> Localizer
@inject IOptionsMonitor<WebsiteOptions> WebsiteOption
@inject IStringLocalizer<Foo> FooLocalizer

<h3>@Localizer["TablesColumnTitle"]</h3>

<h4>@Localizer["TablesColumnDescription"]</h4>

<DemoBlock Title="@Localizer["VisibleTitle"]"
           Introduction="@Localizer["VisibleIntro"]"
           Name="Visible">
    <p>@((MarkupString)Localizer["VisibleP1"].Value)</p>
    <p>@((MarkupString)Localizer["VisibleP2"].Value)</p>
    <p>@((MarkupString)Localizer["VisibleP3"].Value)</p>
    <p>@((MarkupString)Localizer["VisibleP4"].Value)</p>
    <p class="mb-3">@((MarkupString)Localizer["ResetVisibleColumnsDesc"].Value)</p>
    <Button Text="@Localizer["ResetVisibleColumnsButtonText"]" OnClickWithoutRender="ResetVisibleColumns"></Button>

    <Table TItem="Foo" @ref="TableColumnVisibles"
           IsPagination="true" PageItemsSource="@PageItemsSource"
           IsStriped="true" IsBordered="true" IsMultipleSelect="true"
           ShowToolbar="true" ShowAddButton="false" ShowEditButton="false" ShowDeleteButton="false"
           ShowExtendButtons="false" ShowColumnList="true"
           OnQueryAsync="@OnQueryAsync">
        <TableColumns>
            <TableColumn @bind-Field="@context.DateTime" Width="180" />
            <TableColumn @bind-Field="@context.Name" />
            <TableColumn @bind-Field="@context.Address" Width="290" />
            <TableColumn @bind-Field="@context.Education" />
            <TableColumn @bind-Field="@context.Count" Visible="false" />
            <TableColumn @bind-Field="@context.Complete" />
        </TableColumns>
    </Table>
</DemoBlock>

<DemoBlock Title="@Localizer["ShownWithBreakPointTitle"]"
           Introduction="@Localizer["ShownWithBreakPointIntro"]"
           Name="ShownWithBreakPoint">
    <p>@((MarkupString)Localizer["ShownWithBreakPointP1"].Value)</p>
    <ul class="ul-demo mb-3">
        <li>@((MarkupString)Localizer["ShownWithBreakPointLi1"].Value)</li>
        <li>@((MarkupString)Localizer["ShownWithBreakPointLi2"].Value)</li>
        <li>@((MarkupString)Localizer["ShownWithBreakPointLi3"].Value)</li>
        <li>@((MarkupString)Localizer["ShownWithBreakPointLi4"].Value)</li>
        <li>@((MarkupString)Localizer["ShownWithBreakPointLi5"].Value)</li>
    </ul>
    <p>@((MarkupString)Localizer["ShownWithBreakPointP2"].Value)</p>
    <p>@((MarkupString)Localizer["ShownWithBreakPointP3"].Value)</p>
    <p class="mb-3">@((MarkupString)Localizer["ShownWithBreakPointP4"].Value)</p>
    <Table TItem="Foo" RenderMode="TableRenderMode.Table"
           IsPagination="true" PageItemsSource="@PageItemsSource"
           IsStriped="true" IsBordered="true"
           ShowToolbar="false" IsMultipleSelect="true" ShowExtendButtons="false"
           OnQueryAsync="@OnQueryAsync">
        <TableColumns>
            <TableColumn @bind-Field="@context.DateTime" Width="120" FormatString="yyyy-MM-dd" Align="Alignment.Center" />
            <TableColumn @bind-Field="@context.Name" Width="100" />
            <TableColumn @bind-Field="@context.Address" ShownWithBreakPoint="BreakPoint.Medium" />
            <TableColumn @bind-Field="@context.Count" ShownWithBreakPoint="BreakPoint.Large" Formatter="@IntFormatter" Width="60" />
        </TableColumns>
    </Table>
</DemoBlock>

@code {
    /// <summary>
    /// Foo 类为Demo测试用，如有需要请自行下载源码查阅
    /// Foo class is used for Demo test, please download the source code if necessary
    /// https://gitee.com/LongbowEnterprise/BootstrapBlazor/blob/main/src/BootstrapBlazor.Shared/Data/Foo.cs
    /// </summary>
    [NotNull]
    private List<Foo>? Items { get; set; }

    private static IEnumerable<int> PageItemsSource => new int[] { 5, 10, 20 };

    [NotNull]
    private Table<Foo>? TableColumnVisibles { get; set; }

    /// <summary>
    /// IntFormatter
    /// </summary>
    /// <param name="d"></param>
    /// <returns></returns>
    private static Task<string> IntFormatter(object? d)
    {
        var ret = "";
        if (d is TableColumnContext<Foo, object?> data && data.Value != null)
        {
            var val = (int)data.Value;
            ret = val.ToString("0.00");
        }
        return Task.FromResult(ret);
    }

    /// <summary>
    /// OnInitialized 方法
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        Items = Foo.GenerateFoo(FooLocalizer);
    }

    private Task ResetVisibleColumns()
    {
        TableColumnVisibles.ResetVisibleColumns(new ColumnVisibleItem[]
        {
            new(nameof(Foo.DateTime), true),
            new(nameof(Foo.Name), false),
            new(nameof(Foo.Address), false),
            new(nameof(Foo.Education), false),
            new(nameof(Foo.Count), false),
            new(nameof(Foo.Complete), true)
            });
        return Task.CompletedTask;
    }

    private Task<QueryData<Foo>> OnQueryAsync(QueryPageOptions options)
    {
        IEnumerable<Foo> items = Items;

        // 过滤
        var isFiltered = false;
        if (options.Filters.Any())
        {
            items = items.Where(options.Filters.GetFilterFunc<Foo>());
            isFiltered = true;
        }

        // 排序
        var isSorted = false;
        if (!string.IsNullOrEmpty(options.SortName))
        {
            var invoker = Foo.GetNameSortFunc();
            items = invoker(items, options.SortName, options.SortOrder);
            isSorted = true;
        }

        // 设置记录总数
        var total = items.Count();

        // 内存分页
        items = items.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems).ToList();

        return Task.FromResult(new QueryData<Foo>()
        {
            Items = items,
            TotalCount = total,
            IsSorted = isSorted,
            IsFiltered = isFiltered,
            IsSearch = true
        });
    }
}
