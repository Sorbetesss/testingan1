@using BootstrapBlazor.Shared.Samples;
@inject IStringLocalizer<Stepss> Localizer

<Steps @ref="@_steps" Items="@Items" OnStatusChanged="@OnStatusChanged" />
<div class="mt-1">
    <Button OnClick="@PrevStep" IsOutline="true">上一步</Button>
    <Button OnClick="@NextStep" IsOutline="true">@Localizer["StepssNormalButton1Text"]</Button>
    <Button OnClick="@ResetStep" IsOutline="true">@Localizer["StepssNormalButton2Text"]</Button>
</div>
<ConsoleLogger @ref="Logger" class="mt-3" />

@code {
    [NotNull]
    private ConsoleLogger? Logger { get; set; }

    private Steps _steps;

    private List<StepItem> Items { get; set; } = new List<StepItem>();

    protected override void OnInitialized()
    {
        Items = new StepItem[3]
        {
            new StepItem() { Title = Localizer["StepItemI1Text"], Template = BootstrapDynamicComponent.CreateComponent<Counter>().Render(), IsActive = true },
            new StepItem() { Title = Localizer["StepItemI2Text"], Template = BootstrapDynamicComponent.CreateComponent<Counter>().Render() },
            new StepItem() { Title = Localizer["StepItemI3Text"], Template = BootstrapDynamicComponent.CreateComponent<Counter>().Render() }
        }.ToList();
    }

    private void PrevStep()
    {
        _steps.Prev();
    }

    private void NextStep()
    {
        _steps.Next();
    }

    private void ResetStep()
    {
        Items.ToList().ForEach(i =>
        {
            i.Status = StepStatus.Wait;
        });
    }

    private Task OnStatusChanged(StepStatus status)
    {
        Logger.Log($"Steps Status: {status}");
        return Task.CompletedTask;
    }
}
