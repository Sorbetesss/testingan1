@page "/pracregister"
@inject NavigationManager Navigation
@inject MessageService MessageService
@using System.ComponentModel;

<style>
    .bg-gradient-primary {
        background-color: #4e73df;
        background-image: linear-gradient(180deg, #4e73df 10%, #224abe 100%);
        background-size: cover;
        height: -webkit-fill-available;
        width: -webkit-fill-available;
        position: absolute;
    }

    .border-radius {
        font-size: .8rem;
        border-radius: 10rem;
        padding: .75rem 1rem;
    }
</style>

<div class="bg-gradient-primary">
    <div class="container">
        <Card class="shadow-lg o-hidden border-0 my-5">
            <BodyTemplate>
                <div class="row">
                    <div class="col-lg-5 d-none d-lg-flex">
                        <div class="flex-grow-1 bg-login-image">
                            <ImageViewer Url="_content/BootstrapBlazor.Shared/images/practicals/loginbg.png" ShowPlaceHolder="true" />
                        </div>
                    </div>
                    <div class="col-lg-7">
                        <div class="p-5">
                            <div class="text-center">
                                <h4 class="text-dark mb-4">欢迎使用BootstrapBlazor组件库!</h4>
                                <h4 class="text-dark mb-4">创建帐号!</h4>
                            </div>
                            <ValidateForm Model="@Model" @ref="ValidatorForm">
                                <div class="mb-3">
                                    <BootstrapInput @bind-Value="Model.UserName" class="border-radius" ShowLabel="false" PlaceHolder="请输入账号" />
                                </div>
                                <div class="row mb-3">
                                    <div class="col-sm-6 mb-3 mb-sm-0">
                                        <BootstrapPassword @bind-Value="Model.Password" class="border-radius" ShowLabel="false" PlaceHolder="请输入密码" />
                                    </div>
                                    <div class="col-sm-6">
                                        <BootstrapPassword @bind-Value="Model.ConfirmPassword" class="border-radius" ShowLabel="false" PlaceHolder="请重复密码" />
                                    </div>
                                </div>
                                <Button Text="注册帐号" OnClickWithoutRender="OnValidator" Color="Color.Primary" class="w-100"></Button>
                                <hr />
                                <a>
                                    <i class="fab" />
                                    <Button Text="忘记密码" Color="Color.Danger" class="border-radius w-100" OnClick="@ForgotPassword"></Button>
                                </a>
                                <a>
                                    <i class="fab" />
                                    <Button Text="用户登陆" Color="Color.Info" class="border-radius w-100" OnClick="@UserLogin"></Button>
                                </a>
                            </ValidateForm>
                        </div>
                    </div>
                </div>
            </BodyTemplate>
        </Card>
    </div>
</div>

@code {
    [NotNull]
    private RegisterModel? Model { get; set; } = new();

    [NotNull]
    private ValidateForm? ValidatorForm { get; set; }

    private Task UserLogin()
    {
        Navigation.NavigateTo("praclogin");
        return Task.CompletedTask;
    }

    private async Task ForgotPassword()
    {
        await MessageService.Show(new MessageOption() { Content = "忘了就忘了吧..." });
    }

    private async Task OnValidator()
    {
        var result = ValidatorForm.Validate();
        if (result)
        {
            await MessageService.Show(new MessageOption() { Content = "账号注册成功，即将跳转到登陆页面！" });
            Navigation.NavigateTo("praclogin");
        }
    }

    class RegisterModel
    {
        [DataType(DataType.Text)]
        [Display(Name = "账号")]
        [Required(ErrorMessage = "{0}不能为空")]
        public string? UserName { get; set; }

        [NotNull]
        [Required(ErrorMessage = "请输入密码")]
        [DataType(DataType.Password)]
        [Display(Name = "密码")]
        public string? Password { get; set; }

        [Required(ErrorMessage = "请确认密码")]
        [Compare(nameof(Password))]
        [DataType(DataType.Password)]
        [Display(Name = "确认密码")]
        public string? ConfirmPassword { get; set; }
    }
}
