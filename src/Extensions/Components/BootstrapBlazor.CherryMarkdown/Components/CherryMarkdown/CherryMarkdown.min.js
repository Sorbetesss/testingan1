import BlazorComponent from"../../../_content/BootstrapBlazor/modules/base/blazor-component.js";import{addLink as t}from"../../../_content/BootstrapBlazor/modules/base/utility.js";import{isVisible as i,getElementById as n}from"../../../_content/BootstrapBlazor/modules/base/index.js";export class CherryMarkdown extends BlazorComponent{_init(){t("_content/BootstrapBlazor.CherryMarkdown/css/bootstrap.blazor.cherrymarkdown.min.css");this._invoker=this._config.arguments[0];this._options=this._config.arguments[1];this._invokerMethod=this._config.arguments[2];this._options.toolbars.toolbar===null&&delete this._options.toolbars.toolbar;this._options.toolbars.bubble===null&&delete this._options.toolbars.bubble;this._options.toolbars.float===null&&delete this._options.toolbars.float;this._createEditor()}_createEditor(){const n=(n,t)=>{this._file=n,this._invoker.invokeMethodAsync(this._invokerMethod,{fileName:n.name,fileSize:n.size,contentType:n.type,lastModified:new Date(n.lastModified).toISOString()}).then(n=>{n!==""&&t(n)})};this._handler=window.setInterval(()=>{i(this._element)&&(window.clearInterval(this._handler),this._handler=null,this._editor=new Cherry({el:this._element,value:this._options.value,editor:this._options.editor,toolbars:this._options.toolbars,callback:{afterChange:(n,t)=>{this._invoker.invokeMethodAsync("Update",[n,t])}},fileUpload:n}))},100)}_execute(n){this._editor.setMarkdown(n[1],!0)}_invoke(n){var t,i,f,e;const o=n[0],r=n[1],u=n[2];if(this._editor){if(r.indexOf(".")<0)this._editor[r](...u);else{t=r.split(".");i=this._editor[t[0]];for(let n=1;n<t.length;n++)i=i[t[n]];i(...u)}f=this._editor.getMarkdown();e=this._editor.getHtml();o.invokeMethodAsync("Update",[f,e])}}_fetch(){return this._file}_dispose(){this._handler&&(window.clearInterval(this._handler),this._handler=null)}static invoke(t){if(t=n(t),t){const n=this.getInstance(t);n._invoke([].slice.call(arguments,1))}}static fetch(t){if(t=n(t),t){const n=this.getInstance(t);return n._fetch()}}}