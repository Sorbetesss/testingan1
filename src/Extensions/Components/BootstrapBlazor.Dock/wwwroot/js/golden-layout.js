(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["goldenLayout"] = factory();
	else
		root["goldenLayout"] = factory();
})(globalThis, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/ts/config/config.ts":
/*!*********************************!*\
  !*** ./src/ts/config/config.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentItemConfig": () => (/* binding */ ComponentItemConfig),
/* harmony export */   "HeaderedItemConfig": () => (/* binding */ HeaderedItemConfig),
/* harmony export */   "ItemConfig": () => (/* binding */ ItemConfig),
/* harmony export */   "LayoutConfig": () => (/* binding */ LayoutConfig),
/* harmony export */   "PopoutLayoutConfig": () => (/* binding */ PopoutLayoutConfig),
/* harmony export */   "RootItemConfig": () => (/* binding */ RootItemConfig),
/* harmony export */   "RowOrColumnItemConfig": () => (/* binding */ RowOrColumnItemConfig),
/* harmony export */   "StackItemConfig": () => (/* binding */ StackItemConfig),
/* harmony export */   "formatSize": () => (/* binding */ formatSize),
/* harmony export */   "formatUndefinableSize": () => (/* binding */ formatUndefinableSize),
/* harmony export */   "parseSize": () => (/* binding */ parseSize)
/* harmony export */ });
/* harmony import */ var _errors_external_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/external-error */ "./src/ts/errors/external-error.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_i18n_strings__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/i18n-strings */ "./src/ts/utils/i18n-strings.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _resolved_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolved-config */ "./src/ts/config/resolved-config.ts");






/** @public */
var ItemConfig;
(function (ItemConfig) {
    /** @internal */
    function resolve(itemConfig, rowAndColumnChildLegacySizeDefault) {
        switch (itemConfig.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
                throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.ConfigurationError('ItemConfig cannot specify type ground', JSON.stringify(itemConfig));
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
                return RowOrColumnItemConfig.resolve(itemConfig, rowAndColumnChildLegacySizeDefault);
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
                return StackItemConfig.resolve(itemConfig, rowAndColumnChildLegacySizeDefault);
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return ComponentItemConfig.resolve(itemConfig, rowAndColumnChildLegacySizeDefault);
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnreachableCaseError('UCUICR55499', itemConfig.type);
        }
    }
    ItemConfig.resolve = resolve;
    /** @internal */
    function resolveContent(content) {
        if (content === undefined) {
            return [];
        }
        else {
            const count = content.length;
            const result = new Array(count);
            for (let i = 0; i < count; i++) {
                result[i] = ItemConfig.resolve(content[i], false);
            }
            return result;
        }
    }
    ItemConfig.resolveContent = resolveContent;
    /** @internal */
    function resolveId(id) {
        if (id === undefined) {
            return _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.id;
        }
        else {
            if (Array.isArray(id)) {
                if (id.length === 0) {
                    return _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.id;
                }
                else {
                    return id[0];
                }
            }
            else {
                return id;
            }
        }
    }
    ItemConfig.resolveId = resolveId;
    /** @internal */
    function resolveSize(size, width, height, rowAndColumnChildLegacySizeDefault) {
        // Remove support for rowAndColumnChildLegacySizeDefault in a major version release
        if (size !== undefined) {
            return parseSize(size, [_utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Percent, _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Fractional]);
        }
        else {
            if (width !== undefined || height !== undefined) {
                if (width !== undefined) {
                    return { size: width, sizeUnit: _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Percent };
                }
                else {
                    if (height !== undefined) {
                        return { size: height, sizeUnit: _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Percent };
                    }
                    else {
                        throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnexpectedUndefinedError('CRS33390');
                    }
                }
            }
            else {
                if (rowAndColumnChildLegacySizeDefault) {
                    return { size: 50, sizeUnit: _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Percent };
                }
                else {
                    return { size: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.size, sizeUnit: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.sizeUnit };
                }
            }
        }
    }
    ItemConfig.resolveSize = resolveSize;
    /** @internal */
    function resolveMinSize(minSize, minWidth, minHeight) {
        if (minSize !== undefined) {
            return parseSize(minSize, [_utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Pixel]);
        }
        else {
            const minWidthDefined = minWidth !== undefined;
            const minHeightDefined = minHeight !== undefined;
            if (minWidthDefined || minHeightDefined) {
                if (minWidthDefined) {
                    return { size: minWidth, sizeUnit: _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Pixel };
                }
                else {
                    return { size: minHeight, sizeUnit: _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Pixel };
                }
            }
            else {
                return { size: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.minSize, sizeUnit: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.minSizeUnit };
            }
        }
    }
    ItemConfig.resolveMinSize = resolveMinSize;
    /** @internal */
    function calculateSizeWidthHeightSpecificationType(config) {
        if (config.size !== undefined) {
            return 1 /* Size */;
        }
        else {
            if (config.width !== undefined || config.height !== undefined) {
                return 2 /* WidthOrHeight */;
            }
            else {
                return 0 /* None */;
            }
        }
    }
    ItemConfig.calculateSizeWidthHeightSpecificationType = calculateSizeWidthHeightSpecificationType;
    function isGround(config) {
        return config.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground;
    }
    ItemConfig.isGround = isGround;
    function isRow(config) {
        return config.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row;
    }
    ItemConfig.isRow = isRow;
    function isColumn(config) {
        return config.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column;
    }
    ItemConfig.isColumn = isColumn;
    function isStack(config) {
        return config.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack;
    }
    ItemConfig.isStack = isStack;
    function isComponent(config) {
        return config.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component;
    }
    ItemConfig.isComponent = isComponent;
})(ItemConfig || (ItemConfig = {}));
/** @public */
var HeaderedItemConfig;
(function (HeaderedItemConfig) {
    const legacyMaximisedId = '__glMaximised';
    let Header;
    (function (Header) {
        function resolve(header, hasHeaders) {
            var _a;
            if (header === undefined && hasHeaders === undefined) {
                return undefined;
            }
            else {
                const result = {
                    show: (_a = header === null || header === void 0 ? void 0 : header.show) !== null && _a !== void 0 ? _a : (hasHeaders === undefined ? undefined : hasHeaders ? _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.show : false),
                    popout: header === null || header === void 0 ? void 0 : header.popout,
                    maximise: header === null || header === void 0 ? void 0 : header.maximise,
                    close: header === null || header === void 0 ? void 0 : header.close,
                    minimise: header === null || header === void 0 ? void 0 : header.minimise,
                    tabDropdown: header === null || header === void 0 ? void 0 : header.tabDropdown,
                };
                return result;
            }
        }
        Header.resolve = resolve;
    })(Header = HeaderedItemConfig.Header || (HeaderedItemConfig.Header = {}));
    /** @internal */
    function resolveIdAndMaximised(config) {
        let id;
        // To support legacy configs with Id saved as an array of string, assign config.id to a type which includes string array
        let legacyId = config.id;
        let legacyMaximised = false;
        if (legacyId === undefined) {
            id = _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.id;
        }
        else {
            if (Array.isArray(legacyId)) {
                const idx = legacyId.findIndex((id) => id === legacyMaximisedId);
                if (idx > 0) {
                    legacyMaximised = true;
                    legacyId = legacyId.splice(idx, 1);
                }
                if (legacyId.length > 0) {
                    id = legacyId[0];
                }
                else {
                    id = _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.id;
                }
            }
            else {
                id = legacyId;
            }
        }
        let maximised;
        if (config.maximised !== undefined) {
            maximised = config.maximised;
        }
        else {
            maximised = legacyMaximised;
        }
        return { id, maximised };
    }
    HeaderedItemConfig.resolveIdAndMaximised = resolveIdAndMaximised;
})(HeaderedItemConfig || (HeaderedItemConfig = {}));
/** @public */
var StackItemConfig;
(function (StackItemConfig) {
    /** @internal */
    function resolve(itemConfig, rowAndColumnChildLegacySizeDefault) {
        var _a, _b;
        const { id, maximised } = HeaderedItemConfig.resolveIdAndMaximised(itemConfig);
        const { size, sizeUnit } = ItemConfig.resolveSize(itemConfig.size, itemConfig.width, itemConfig.height, rowAndColumnChildLegacySizeDefault);
        const { size: minSize, sizeUnit: minSizeUnit } = ItemConfig.resolveMinSize(itemConfig.minSize, itemConfig.minWidth, itemConfig.minHeight);
        const result = {
            type: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack,
            content: resolveContent(itemConfig.content),
            size,
            sizeUnit,
            minSize,
            minSizeUnit,
            id,
            maximised,
            isClosable: (_a = itemConfig.isClosable) !== null && _a !== void 0 ? _a : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.isClosable,
            activeItemIndex: (_b = itemConfig.activeItemIndex) !== null && _b !== void 0 ? _b : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedStackItemConfig.defaultActiveItemIndex,
            header: HeaderedItemConfig.Header.resolve(itemConfig.header, itemConfig.hasHeaders),
        };
        return result;
    }
    StackItemConfig.resolve = resolve;
    /** @internal */
    function fromResolved(resolvedConfig) {
        const result = {
            type: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack,
            content: fromResolvedContent(resolvedConfig.content),
            size: formatSize(resolvedConfig.size, resolvedConfig.sizeUnit),
            minSize: formatUndefinableSize(resolvedConfig.minSize, resolvedConfig.minSizeUnit),
            id: resolvedConfig.id,
            maximised: resolvedConfig.maximised,
            isClosable: resolvedConfig.isClosable,
            activeItemIndex: resolvedConfig.activeItemIndex,
            header: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedHeaderedItemConfig.Header.createCopy(resolvedConfig.header),
        };
        return result;
    }
    StackItemConfig.fromResolved = fromResolved;
    /** @internal */
    function resolveContent(content) {
        if (content === undefined) {
            return [];
        }
        else {
            const count = content.length;
            const result = new Array(count);
            for (let i = 0; i < count; i++) {
                const childItemConfig = content[i];
                const itemConfig = ItemConfig.resolve(childItemConfig, false);
                if (!_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.isComponentItem(itemConfig)) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('UCUSICRC91114', JSON.stringify(itemConfig));
                }
                else {
                    result[i] = itemConfig;
                }
            }
            return result;
        }
    }
    /** @internal */
    function fromResolvedContent(resolvedContent) {
        const count = resolvedContent.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            const resolvedContentConfig = resolvedContent[i];
            result[i] = ComponentItemConfig.fromResolved(resolvedContentConfig);
        }
        return result;
    }
})(StackItemConfig || (StackItemConfig = {}));
/** @public */
var ComponentItemConfig;
(function (ComponentItemConfig) {
    /** @internal */
    function resolve(itemConfig, rowAndColumnChildLegacySizeDefault) {
        var _a, _b, _c;
        let componentType = itemConfig.componentType;
        if (componentType === undefined) {
            componentType = itemConfig.componentName;
        }
        if (componentType === undefined) {
            throw new Error('ComponentItemConfig.componentType is undefined');
        }
        else {
            const { id, maximised } = HeaderedItemConfig.resolveIdAndMaximised(itemConfig);
            let title;
            if (itemConfig.title === undefined || itemConfig.title === '') {
                title = ComponentItemConfig.componentTypeToTitle(componentType);
            }
            else {
                title = itemConfig.title;
            }
            const { size, sizeUnit } = ItemConfig.resolveSize(itemConfig.size, itemConfig.width, itemConfig.height, rowAndColumnChildLegacySizeDefault);
            const { size: minSize, sizeUnit: minSizeUnit } = ItemConfig.resolveMinSize(itemConfig.minSize, itemConfig.minWidth, itemConfig.minHeight);
            const result = {
                type: itemConfig.type,
                content: [],
                size,
                sizeUnit,
                minSize,
                minSizeUnit,
                id,
                maximised,
                isClosable: (_a = itemConfig.isClosable) !== null && _a !== void 0 ? _a : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.isClosable,
                reorderEnabled: (_b = itemConfig.reorderEnabled) !== null && _b !== void 0 ? _b : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedComponentItemConfig.defaultReorderEnabled,
                title,
                header: HeaderedItemConfig.Header.resolve(itemConfig.header, itemConfig.hasHeaders),
                componentType,
                componentState: (_c = itemConfig.componentState) !== null && _c !== void 0 ? _c : {},
            };
            return result;
        }
    }
    ComponentItemConfig.resolve = resolve;
    /** @internal */
    function fromResolved(resolvedConfig) {
        const result = {
            type: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component,
            size: formatSize(resolvedConfig.size, resolvedConfig.sizeUnit),
            minSize: formatUndefinableSize(resolvedConfig.minSize, resolvedConfig.minSizeUnit),
            id: resolvedConfig.id,
            maximised: resolvedConfig.maximised,
            isClosable: resolvedConfig.isClosable,
            reorderEnabled: resolvedConfig.reorderEnabled,
            title: resolvedConfig.title,
            header: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedHeaderedItemConfig.Header.createCopy(resolvedConfig.header),
            componentType: resolvedConfig.componentType,
            componentState: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.deepExtendValue)(undefined, resolvedConfig.componentState),
        };
        return result;
    }
    ComponentItemConfig.fromResolved = fromResolved;
    function componentTypeToTitle(componentType) {
        const componentTypeType = typeof componentType;
        switch (componentTypeType) {
            case 'string': return componentType;
            case 'number': return componentType.toString();
            case 'boolean': return componentType.toString();
            default: return '';
        }
    }
    ComponentItemConfig.componentTypeToTitle = componentTypeToTitle;
})(ComponentItemConfig || (ComponentItemConfig = {}));
/** @public */
var RowOrColumnItemConfig;
(function (RowOrColumnItemConfig) {
    function isChildItemConfig(itemConfig) {
        switch (itemConfig.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return true;
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
                return false;
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnreachableCaseError('UROCOSPCICIC13687', itemConfig.type);
        }
    }
    RowOrColumnItemConfig.isChildItemConfig = isChildItemConfig;
    /** @internal */
    function resolve(itemConfig, rowAndColumnChildLegacySizeDefault) {
        var _a;
        const { size, sizeUnit } = ItemConfig.resolveSize(itemConfig.size, itemConfig.width, itemConfig.height, rowAndColumnChildLegacySizeDefault);
        const { size: minSize, sizeUnit: minSizeUnit } = ItemConfig.resolveMinSize(itemConfig.minSize, itemConfig.minWidth, itemConfig.minHeight);
        const result = {
            type: itemConfig.type,
            content: RowOrColumnItemConfig.resolveContent(itemConfig.content),
            size,
            sizeUnit,
            minSize,
            minSizeUnit,
            id: ItemConfig.resolveId(itemConfig.id),
            isClosable: (_a = itemConfig.isClosable) !== null && _a !== void 0 ? _a : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedItemConfig.defaults.isClosable,
        };
        return result;
    }
    RowOrColumnItemConfig.resolve = resolve;
    /** @internal */
    function fromResolved(resolvedConfig) {
        const result = {
            type: resolvedConfig.type,
            content: fromResolvedContent(resolvedConfig.content),
            size: formatSize(resolvedConfig.size, resolvedConfig.sizeUnit),
            minSize: formatUndefinableSize(resolvedConfig.minSize, resolvedConfig.minSizeUnit),
            id: resolvedConfig.id,
            isClosable: resolvedConfig.isClosable,
        };
        return result;
    }
    RowOrColumnItemConfig.fromResolved = fromResolved;
    /** @internal */
    function resolveContent(content) {
        if (content === undefined) {
            return [];
        }
        else {
            const count = content.length;
            const childItemConfigs = new Array(count);
            let widthOrHeightSpecifiedAtLeastOnce = false;
            let sizeSpecifiedAtLeastOnce = false;
            for (let i = 0; i < count; i++) {
                const childItemConfig = content[i];
                if (!RowOrColumnItemConfig.isChildItemConfig(childItemConfig)) {
                    throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.ConfigurationError('ItemConfig is not Row, Column or Stack', childItemConfig);
                }
                else {
                    if (!sizeSpecifiedAtLeastOnce) {
                        const sizeWidthHeightSpecificationType = ItemConfig.calculateSizeWidthHeightSpecificationType(childItemConfig);
                        switch (sizeWidthHeightSpecificationType) {
                            case 0 /* None */:
                                break;
                            case 2 /* WidthOrHeight */:
                                widthOrHeightSpecifiedAtLeastOnce = true;
                                break;
                            case 1 /* Size */:
                                sizeSpecifiedAtLeastOnce = true;
                                break;
                            default:
                                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnreachableCaseError('ROCICRC87556', sizeWidthHeightSpecificationType);
                        }
                    }
                    childItemConfigs[i] = childItemConfig;
                }
            }
            let legacySizeDefault;
            if (sizeSpecifiedAtLeastOnce) {
                legacySizeDefault = false;
            }
            else {
                if (widthOrHeightSpecifiedAtLeastOnce) {
                    legacySizeDefault = true;
                }
                else {
                    legacySizeDefault = false;
                }
            }
            const result = new Array(count);
            for (let i = 0; i < count; i++) {
                const childItemConfig = childItemConfigs[i];
                const resolvedChildItemConfig = ItemConfig.resolve(childItemConfig, legacySizeDefault);
                if (!_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedRowOrColumnItemConfig.isChildItemConfig(resolvedChildItemConfig)) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('UROCOSPIC99512', JSON.stringify(resolvedChildItemConfig));
                }
                else {
                    result[i] = resolvedChildItemConfig;
                }
            }
            return result;
        }
    }
    RowOrColumnItemConfig.resolveContent = resolveContent;
    /** @internal */
    function fromResolvedContent(resolvedContent) {
        const count = resolvedContent.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            const resolvedContentConfig = resolvedContent[i];
            const type = resolvedContentConfig.type;
            let contentConfig;
            switch (type) {
                case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
                case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
                    contentConfig = RowOrColumnItemConfig.fromResolved(resolvedContentConfig);
                    break;
                case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
                    contentConfig = StackItemConfig.fromResolved(resolvedContentConfig);
                    break;
                case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                    contentConfig = ComponentItemConfig.fromResolved(resolvedContentConfig);
                    break;
                default:
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnreachableCaseError('ROCICFRC44797', type);
            }
            result[i] = contentConfig;
        }
        return result;
    }
})(RowOrColumnItemConfig || (RowOrColumnItemConfig = {}));
/** @public */
var RootItemConfig;
(function (RootItemConfig) {
    function isRootItemConfig(itemConfig) {
        switch (itemConfig.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return true;
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
                return false;
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnreachableCaseError('URICIR23687', itemConfig.type);
        }
    }
    RootItemConfig.isRootItemConfig = isRootItemConfig;
    /** @internal */
    function resolve(itemConfig) {
        if (itemConfig === undefined) {
            return undefined;
        }
        else {
            const result = ItemConfig.resolve(itemConfig, false);
            if (!_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedRootItemConfig.isRootItemConfig(result)) {
                throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.ConfigurationError('ItemConfig is not Row, Column or Stack', JSON.stringify(itemConfig));
            }
            else {
                return result;
            }
        }
    }
    RootItemConfig.resolve = resolve;
    /** @internal */
    function fromResolvedOrUndefined(resolvedItemConfig) {
        if (resolvedItemConfig === undefined) {
            return undefined;
        }
        else {
            const type = resolvedItemConfig.type;
            switch (type) {
                case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
                case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
                    return RowOrColumnItemConfig.fromResolved(resolvedItemConfig);
                case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
                    return StackItemConfig.fromResolved(resolvedItemConfig);
                case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                    return ComponentItemConfig.fromResolved(resolvedItemConfig);
                default:
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnreachableCaseError('RICFROU89921', type);
            }
        }
    }
    RootItemConfig.fromResolvedOrUndefined = fromResolvedOrUndefined;
})(RootItemConfig || (RootItemConfig = {}));
/** Use to specify LayoutConfig with defaults or deserialise a LayoutConfig.
 * Deserialisation will handle backwards compatibility.
 * Note that LayoutConfig should be used for serialisation (not LayoutConfig)
 * @public
 */
var LayoutConfig;
(function (LayoutConfig) {
    let Settings;
    (function (Settings) {
        function resolve(settings) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            const result = {
                useDragAndDrop: (_a = settings === null || settings === void 0 ? void 0 : settings.useDragAndDrop) !== null && _a !== void 0 ? _a : false,
                copyForDragImage: settings === null || settings === void 0 ? void 0 : settings.copyForDragImage,
                showOldPositionWhenDragging: (_b = settings === null || settings === void 0 ? void 0 : settings.showOldPositionWhenDragging) !== null && _b !== void 0 ? _b : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.showOldPositionWhenDragging,
                dragDataMimetype: (_c = settings === null || settings === void 0 ? void 0 : settings.dragDataMimetype) !== null && _c !== void 0 ? _c : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.dragDataMimetype,
                checkGlWindowKey: (_d = settings === null || settings === void 0 ? void 0 : settings.checkGlWindowKey) !== null && _d !== void 0 ? _d : true,
                constrainDragToContainer: (_e = settings === null || settings === void 0 ? void 0 : settings.constrainDragToContainer) !== null && _e !== void 0 ? _e : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.constrainDragToContainer,
                reorderEnabled: (_f = settings === null || settings === void 0 ? void 0 : settings.reorderEnabled) !== null && _f !== void 0 ? _f : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.reorderEnabled,
                popoutWholeStack: (_g = settings === null || settings === void 0 ? void 0 : settings.popoutWholeStack) !== null && _g !== void 0 ? _g : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.popoutWholeStack,
                blockedPopoutsThrowError: (_h = settings === null || settings === void 0 ? void 0 : settings.blockedPopoutsThrowError) !== null && _h !== void 0 ? _h : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.blockedPopoutsThrowError,
                closePopoutsOnUnload: (_j = settings === null || settings === void 0 ? void 0 : settings.closePopoutsOnUnload) !== null && _j !== void 0 ? _j : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.closePopoutsOnUnload,
                responsiveMode: (_k = settings === null || settings === void 0 ? void 0 : settings.responsiveMode) !== null && _k !== void 0 ? _k : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.responsiveMode,
                tabOverlapAllowance: (_l = settings === null || settings === void 0 ? void 0 : settings.tabOverlapAllowance) !== null && _l !== void 0 ? _l : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.tabOverlapAllowance,
                reorderOnTabMenuClick: (_m = settings === null || settings === void 0 ? void 0 : settings.reorderOnTabMenuClick) !== null && _m !== void 0 ? _m : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.reorderOnTabMenuClick,
                tabControlOffset: (_o = settings === null || settings === void 0 ? void 0 : settings.tabControlOffset) !== null && _o !== void 0 ? _o : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.tabControlOffset,
                popInOnClose: (_p = settings === null || settings === void 0 ? void 0 : settings.popInOnClose) !== null && _p !== void 0 ? _p : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.defaults.popInOnClose,
            };
            return result;
        }
        Settings.resolve = resolve;
    })(Settings = LayoutConfig.Settings || (LayoutConfig.Settings = {}));
    let Dimensions;
    (function (Dimensions) {
        /** @internal */
        function resolve(dimensions) {
            var _a, _b, _c, _d, _e, _f;
            const { size: defaultMinItemHeight, sizeUnit: defaultMinItemHeightUnit } = Dimensions.resolveDefaultMinItemHeight(dimensions);
            const { size: defaultMinItemWidth, sizeUnit: defaultMinItemWidthUnit } = Dimensions.resolveDefaultMinItemWidth(dimensions);
            const result = {
                borderWidth: (_a = dimensions === null || dimensions === void 0 ? void 0 : dimensions.borderWidth) !== null && _a !== void 0 ? _a : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.borderWidth,
                borderGrabWidth: (_b = dimensions === null || dimensions === void 0 ? void 0 : dimensions.borderGrabWidth) !== null && _b !== void 0 ? _b : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.borderGrabWidth,
                contentInset: (_c = dimensions === null || dimensions === void 0 ? void 0 : dimensions.contentInset) !== null && _c !== void 0 ? _c : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.contentInset,
                defaultMinItemHeight,
                defaultMinItemHeightUnit,
                defaultMinItemWidth,
                defaultMinItemWidthUnit,
                headerHeight: (_d = dimensions === null || dimensions === void 0 ? void 0 : dimensions.headerHeight) !== null && _d !== void 0 ? _d : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.headerHeight,
                dragProxyWidth: (_e = dimensions === null || dimensions === void 0 ? void 0 : dimensions.dragProxyWidth) !== null && _e !== void 0 ? _e : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.dragProxyWidth,
                dragProxyHeight: (_f = dimensions === null || dimensions === void 0 ? void 0 : dimensions.dragProxyHeight) !== null && _f !== void 0 ? _f : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.dragProxyHeight,
            };
            return result;
        }
        Dimensions.resolve = resolve;
        /** @internal */
        function fromResolved(resolvedDimensions) {
            const result = {
                borderWidth: resolvedDimensions.borderWidth,
                borderGrabWidth: resolvedDimensions.borderGrabWidth,
                defaultMinItemHeight: formatSize(resolvedDimensions.defaultMinItemHeight, resolvedDimensions.defaultMinItemHeightUnit),
                defaultMinItemWidth: formatSize(resolvedDimensions.defaultMinItemWidth, resolvedDimensions.defaultMinItemWidthUnit),
                headerHeight: resolvedDimensions.headerHeight,
                dragProxyWidth: resolvedDimensions.dragProxyWidth,
                dragProxyHeight: resolvedDimensions.dragProxyHeight,
            };
            return result;
        }
        Dimensions.fromResolved = fromResolved;
        /** @internal */
        function resolveDefaultMinItemHeight(dimensions) {
            const height = dimensions === null || dimensions === void 0 ? void 0 : dimensions.defaultMinItemHeight;
            if (height === undefined) {
                return { size: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.defaultMinItemHeight, sizeUnit: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.defaultMinItemHeightUnit };
            }
            else {
                return parseSize(height, [_utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Pixel]);
            }
        }
        Dimensions.resolveDefaultMinItemHeight = resolveDefaultMinItemHeight;
        /** @internal */
        function resolveDefaultMinItemWidth(dimensions) {
            const width = dimensions === null || dimensions === void 0 ? void 0 : dimensions.defaultMinItemWidth;
            if (width === undefined) {
                return { size: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.defaultMinItemWidth, sizeUnit: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Dimensions.defaults.defaultMinItemWidthUnit };
            }
            else {
                return parseSize(width, [_utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Pixel]);
            }
        }
        Dimensions.resolveDefaultMinItemWidth = resolveDefaultMinItemWidth;
    })(Dimensions = LayoutConfig.Dimensions || (LayoutConfig.Dimensions = {}));
    let Header;
    (function (Header) {
        /** @internal */
        function resolve(header, settings, labels) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
            let show;
            if ((header === null || header === void 0 ? void 0 : header.show) !== undefined) {
                show = header.show;
            }
            else {
                if (settings !== undefined && settings.hasHeaders !== undefined) {
                    show = settings.hasHeaders ? _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.show : false;
                }
                else {
                    show = _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.show;
                }
            }
            const result = {
                show,
                popout: (_b = (_a = header === null || header === void 0 ? void 0 : header.popout) !== null && _a !== void 0 ? _a : labels === null || labels === void 0 ? void 0 : labels.popout) !== null && _b !== void 0 ? _b : ((settings === null || settings === void 0 ? void 0 : settings.showPopoutIcon) === false ? false : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.popout),
                dock: (_d = (_c = header === null || header === void 0 ? void 0 : header.popin) !== null && _c !== void 0 ? _c : labels === null || labels === void 0 ? void 0 : labels.popin) !== null && _d !== void 0 ? _d : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.dock,
                maximise: (_f = (_e = header === null || header === void 0 ? void 0 : header.maximise) !== null && _e !== void 0 ? _e : labels === null || labels === void 0 ? void 0 : labels.maximise) !== null && _f !== void 0 ? _f : ((settings === null || settings === void 0 ? void 0 : settings.showMaximiseIcon) === false ? false : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.maximise),
                close: (_h = (_g = header === null || header === void 0 ? void 0 : header.close) !== null && _g !== void 0 ? _g : labels === null || labels === void 0 ? void 0 : labels.close) !== null && _h !== void 0 ? _h : ((settings === null || settings === void 0 ? void 0 : settings.showCloseIcon) === false ? false : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.close),
                minimise: (_k = (_j = header === null || header === void 0 ? void 0 : header.minimise) !== null && _j !== void 0 ? _j : labels === null || labels === void 0 ? void 0 : labels.minimise) !== null && _k !== void 0 ? _k : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.minimise,
                tabDropdown: (_m = (_l = header === null || header === void 0 ? void 0 : header.tabDropdown) !== null && _l !== void 0 ? _l : labels === null || labels === void 0 ? void 0 : labels.tabDropdown) !== null && _m !== void 0 ? _m : _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.defaults.tabDropdown,
            };
            return result;
        }
        Header.resolve = resolve;
    })(Header = LayoutConfig.Header || (LayoutConfig.Header = {}));
    function isPopout(config) {
        return 'parentId' in config || 'indexInParent' in config || 'window' in config;
    }
    LayoutConfig.isPopout = isPopout;
    /** @internal */
    function resolve(layoutConfig) {
        if (isPopout(layoutConfig)) {
            return PopoutLayoutConfig.resolve(layoutConfig);
        }
        else {
            let root;
            if (layoutConfig.root !== undefined) {
                root = layoutConfig.root;
            }
            else {
                if (layoutConfig.content !== undefined && layoutConfig.content.length > 0) {
                    root = layoutConfig.content[0];
                }
                else {
                    root = undefined;
                }
            }
            const config = {
                resolved: true,
                root: RootItemConfig.resolve(root),
                openPopouts: LayoutConfig.resolveOpenPopouts(layoutConfig.openPopouts),
                dimensions: LayoutConfig.Dimensions.resolve(layoutConfig.dimensions),
                settings: LayoutConfig.Settings.resolve(layoutConfig.settings),
                header: LayoutConfig.Header.resolve(layoutConfig.header, layoutConfig.settings, layoutConfig.labels),
            };
            return config;
        }
    }
    LayoutConfig.resolve = resolve;
    function fromResolved(config) {
        const result = {
            root: RootItemConfig.fromResolvedOrUndefined(config.root),
            openPopouts: PopoutLayoutConfig.fromResolvedArray(config.openPopouts),
            settings: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.createCopy(config.settings),
            dimensions: LayoutConfig.Dimensions.fromResolved(config.dimensions),
            header: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.createCopy(config.header),
        };
        return result;
    }
    LayoutConfig.fromResolved = fromResolved;
    function isResolved(configOrResolvedConfig) {
        const config = configOrResolvedConfig;
        return config.resolved !== undefined && (config.resolved === true);
    }
    LayoutConfig.isResolved = isResolved;
    /** @internal */
    function resolveOpenPopouts(popoutConfigs) {
        if (popoutConfigs === undefined) {
            return [];
        }
        else {
            const count = popoutConfigs.length;
            const result = new Array(count);
            for (let i = 0; i < count; i++) {
                result[i] = PopoutLayoutConfig.resolve(popoutConfigs[i]);
            }
            return result;
        }
    }
    LayoutConfig.resolveOpenPopouts = resolveOpenPopouts;
})(LayoutConfig || (LayoutConfig = {}));
/** @public */
var PopoutLayoutConfig;
(function (PopoutLayoutConfig) {
    let Window;
    (function (Window) {
        /** @internal */
        function resolve(window, dimensions) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            let result;
            const defaults = _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedPopoutLayoutConfig.Window.defaults;
            if (window !== undefined) {
                result = {
                    width: (_a = window.width) !== null && _a !== void 0 ? _a : defaults.width,
                    height: (_b = window.height) !== null && _b !== void 0 ? _b : defaults.height,
                    left: (_c = window.left) !== null && _c !== void 0 ? _c : defaults.left,
                    top: (_d = window.top) !== null && _d !== void 0 ? _d : defaults.top,
                };
            }
            else {
                result = {
                    width: (_e = dimensions === null || dimensions === void 0 ? void 0 : dimensions.width) !== null && _e !== void 0 ? _e : defaults.width,
                    height: (_f = dimensions === null || dimensions === void 0 ? void 0 : dimensions.height) !== null && _f !== void 0 ? _f : defaults.height,
                    left: (_g = dimensions === null || dimensions === void 0 ? void 0 : dimensions.left) !== null && _g !== void 0 ? _g : defaults.left,
                    top: (_h = dimensions === null || dimensions === void 0 ? void 0 : dimensions.top) !== null && _h !== void 0 ? _h : defaults.top,
                };
            }
            return result;
        }
        Window.resolve = resolve;
        /** @internal */
        function fromResolved(resolvedWindow) {
            const result = {
                width: resolvedWindow.width === null ? undefined : resolvedWindow.width,
                height: resolvedWindow.height === null ? undefined : resolvedWindow.height,
                left: resolvedWindow.left === null ? undefined : resolvedWindow.left,
                top: resolvedWindow.top === null ? undefined : resolvedWindow.top,
            };
            return result;
        }
        Window.fromResolved = fromResolved;
    })(Window = PopoutLayoutConfig.Window || (PopoutLayoutConfig.Window = {}));
    /** @internal */
    function resolve(popoutConfig) {
        var _a, _b;
        let root;
        if (popoutConfig.root !== undefined) {
            root = popoutConfig.root;
        }
        else {
            if (popoutConfig.content !== undefined && popoutConfig.content.length > 0) {
                root = popoutConfig.content[0];
            }
            else {
                root = undefined;
            }
        }
        const config = {
            root: RootItemConfig.resolve(root),
            openPopouts: LayoutConfig.resolveOpenPopouts(popoutConfig.openPopouts),
            dimensions: LayoutConfig.Dimensions.resolve(popoutConfig.dimensions),
            settings: LayoutConfig.Settings.resolve(popoutConfig.settings),
            header: LayoutConfig.Header.resolve(popoutConfig.header, popoutConfig.settings, popoutConfig.labels),
            parentId: (_a = popoutConfig.parentId) !== null && _a !== void 0 ? _a : null,
            indexInParent: (_b = popoutConfig.indexInParent) !== null && _b !== void 0 ? _b : null,
            window: PopoutLayoutConfig.Window.resolve(popoutConfig.window, popoutConfig.dimensions),
            resolved: true,
        };
        return config;
    }
    PopoutLayoutConfig.resolve = resolve;
    /** @internal */
    function fromResolved(resolvedConfig) {
        const result = {
            root: RootItemConfig.fromResolvedOrUndefined(resolvedConfig.root),
            openPopouts: fromResolvedArray(resolvedConfig.openPopouts),
            dimensions: LayoutConfig.Dimensions.fromResolved(resolvedConfig.dimensions),
            settings: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Settings.createCopy(resolvedConfig.settings),
            header: _resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.Header.createCopy(resolvedConfig.header),
            parentId: resolvedConfig.parentId,
            indexInParent: resolvedConfig.indexInParent,
            window: PopoutLayoutConfig.Window.fromResolved(resolvedConfig.window),
        };
        return result;
    }
    PopoutLayoutConfig.fromResolved = fromResolved;
    /** @internal */
    function fromResolvedArray(resolvedArray) {
        const resolvedOpenPopoutCount = resolvedArray.length;
        const result = new Array(resolvedOpenPopoutCount);
        for (let i = 0; i < resolvedOpenPopoutCount; i++) {
            const resolvedOpenPopout = resolvedArray[i];
            result[i] = PopoutLayoutConfig.fromResolved(resolvedOpenPopout);
        }
        return result;
    }
    PopoutLayoutConfig.fromResolvedArray = fromResolvedArray;
})(PopoutLayoutConfig || (PopoutLayoutConfig = {}));
/** @internal */
function parseSize(sizeString, allowableSizeUnits) {
    const { numericPart: digitsPart, firstNonNumericCharPart: firstNonDigitPart } = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.splitStringAtFirstNonNumericChar)(sizeString);
    const size = Number.parseInt(digitsPart, 10);
    if (isNaN(size)) {
        throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.ConfigurationError(`${_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_5__.i18nStrings[7]}: ${sizeString}`);
    }
    else {
        const sizeUnit = _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.tryParse(firstNonDigitPart);
        if (sizeUnit === undefined) {
            throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.ConfigurationError(`${_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_5__.i18nStrings[8]}: ${sizeString}`);
        }
        else {
            if (!allowableSizeUnits.includes(sizeUnit)) {
                throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.ConfigurationError(`${_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_5__.i18nStrings[9]}: ${sizeString}`);
            }
            else {
                return { size, sizeUnit };
            }
        }
    }
}
/** @internal */
function formatSize(size, sizeUnit) {
    return size.toString(10) + _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.format(sizeUnit);
}
/** @internal */
function formatUndefinableSize(size, sizeUnit) {
    if (size === undefined) {
        return undefined;
    }
    else {
        return size.toString(10) + _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.format(sizeUnit);
    }
}


/***/ }),

/***/ "./src/ts/config/resolved-config.ts":
/*!******************************************!*\
  !*** ./src/ts/config/resolved-config.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ResolvedComponentItemConfig": () => (/* binding */ ResolvedComponentItemConfig),
/* harmony export */   "ResolvedGroundItemConfig": () => (/* binding */ ResolvedGroundItemConfig),
/* harmony export */   "ResolvedHeaderedItemConfig": () => (/* binding */ ResolvedHeaderedItemConfig),
/* harmony export */   "ResolvedItemConfig": () => (/* binding */ ResolvedItemConfig),
/* harmony export */   "ResolvedLayoutConfig": () => (/* binding */ ResolvedLayoutConfig),
/* harmony export */   "ResolvedPopoutLayoutConfig": () => (/* binding */ ResolvedPopoutLayoutConfig),
/* harmony export */   "ResolvedRootItemConfig": () => (/* binding */ ResolvedRootItemConfig),
/* harmony export */   "ResolvedRowOrColumnItemConfig": () => (/* binding */ ResolvedRowOrColumnItemConfig),
/* harmony export */   "ResolvedStackItemConfig": () => (/* binding */ ResolvedStackItemConfig)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_config_minifier__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/config-minifier */ "./src/ts/utils/config-minifier.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");




/** @public */
var ResolvedItemConfig;
(function (ResolvedItemConfig) {
    ResolvedItemConfig.defaults = {
        type: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground,
        content: [],
        size: 1,
        sizeUnit: _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Fractional,
        minSize: undefined,
        minSizeUnit: _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Pixel,
        id: '',
        isClosable: true,
    };
    /** Creates a copy of the original ResolvedItemConfig using an alternative content if specified */
    function createCopy(original, content) {
        switch (original.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
                return ResolvedRowOrColumnItemConfig.createCopy(original, content);
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
                return ResolvedStackItemConfig.createCopy(original, content);
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return ResolvedComponentItemConfig.createCopy(original);
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnreachableCaseError('CICC91354', original.type, 'Invalid Config Item type specified');
        }
    }
    ResolvedItemConfig.createCopy = createCopy;
    function createDefault(type) {
        switch (type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.AssertError('CICCDR91562'); // Get default root from LayoutConfig
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
                return ResolvedRowOrColumnItemConfig.createDefault(type);
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
                return ResolvedStackItemConfig.createDefault();
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return ResolvedComponentItemConfig.createDefault();
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnreachableCaseError('CICCDD91563', type, 'Invalid Config Item type specified');
        }
    }
    ResolvedItemConfig.createDefault = createDefault;
    function isComponentItem(itemConfig) {
        return itemConfig.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component;
    }
    ResolvedItemConfig.isComponentItem = isComponentItem;
    function isStackItem(itemConfig) {
        return itemConfig.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack;
    }
    ResolvedItemConfig.isStackItem = isStackItem;
    /** @internal */
    function isGroundItem(itemConfig) {
        return itemConfig.type === _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground;
    }
    ResolvedItemConfig.isGroundItem = isGroundItem;
})(ResolvedItemConfig || (ResolvedItemConfig = {}));
/** @public */
var ResolvedHeaderedItemConfig;
(function (ResolvedHeaderedItemConfig) {
    ResolvedHeaderedItemConfig.defaultMaximised = false;
    let Header;
    (function (Header) {
        function createCopy(original, show) {
            if (original === undefined) {
                return undefined;
            }
            else {
                return {
                    show: show !== null && show !== void 0 ? show : original.show,
                    popout: original.popout,
                    close: original.close,
                    maximise: original.maximise,
                    minimise: original.minimise,
                    tabDropdown: original.tabDropdown,
                };
            }
        }
        Header.createCopy = createCopy;
    })(Header = ResolvedHeaderedItemConfig.Header || (ResolvedHeaderedItemConfig.Header = {}));
})(ResolvedHeaderedItemConfig || (ResolvedHeaderedItemConfig = {}));
/** @public */
var ResolvedStackItemConfig;
(function (ResolvedStackItemConfig) {
    ResolvedStackItemConfig.defaultActiveItemIndex = 0;
    function createCopy(original, content) {
        const result = {
            type: original.type,
            content: content !== undefined ? copyContent(content) : copyContent(original.content),
            size: original.size,
            sizeUnit: original.sizeUnit,
            minSize: original.minSize,
            minSizeUnit: original.minSizeUnit,
            id: original.id,
            maximised: original.maximised,
            isClosable: original.isClosable,
            activeItemIndex: original.activeItemIndex,
            header: ResolvedHeaderedItemConfig.Header.createCopy(original.header),
        };
        return result;
    }
    ResolvedStackItemConfig.createCopy = createCopy;
    function copyContent(original) {
        const count = original.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            result[i] = ResolvedItemConfig.createCopy(original[i]);
        }
        return result;
    }
    ResolvedStackItemConfig.copyContent = copyContent;
    function createDefault() {
        const result = {
            type: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack,
            content: [],
            size: ResolvedItemConfig.defaults.size,
            sizeUnit: ResolvedItemConfig.defaults.sizeUnit,
            minSize: ResolvedItemConfig.defaults.minSize,
            minSizeUnit: ResolvedItemConfig.defaults.minSizeUnit,
            id: ResolvedItemConfig.defaults.id,
            maximised: ResolvedHeaderedItemConfig.defaultMaximised,
            isClosable: ResolvedItemConfig.defaults.isClosable,
            activeItemIndex: ResolvedStackItemConfig.defaultActiveItemIndex,
            header: undefined,
        };
        return result;
    }
    ResolvedStackItemConfig.createDefault = createDefault;
})(ResolvedStackItemConfig || (ResolvedStackItemConfig = {}));
/** @public */
var ResolvedComponentItemConfig;
(function (ResolvedComponentItemConfig) {
    ResolvedComponentItemConfig.defaultReorderEnabled = true;
    function resolveComponentTypeName(itemConfig) {
        const componentType = itemConfig.componentType;
        if (typeof componentType === 'string') {
            return componentType;
        }
        else {
            return undefined;
        }
    }
    ResolvedComponentItemConfig.resolveComponentTypeName = resolveComponentTypeName;
    function createCopy(original) {
        const result = {
            type: original.type,
            content: [],
            size: original.size,
            sizeUnit: original.sizeUnit,
            minSize: original.minSize,
            minSizeUnit: original.minSizeUnit,
            id: original.id,
            maximised: original.maximised,
            isClosable: original.isClosable,
            reorderEnabled: original.reorderEnabled,
            title: original.title,
            header: ResolvedHeaderedItemConfig.Header.createCopy(original.header),
            componentType: original.componentType,
            componentState: (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.deepExtendValue)(undefined, original.componentState),
        };
        return result;
    }
    ResolvedComponentItemConfig.createCopy = createCopy;
    function createDefault(componentType = '', componentState, title = '') {
        const result = {
            type: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component,
            content: [],
            size: ResolvedItemConfig.defaults.size,
            sizeUnit: ResolvedItemConfig.defaults.sizeUnit,
            minSize: ResolvedItemConfig.defaults.minSize,
            minSizeUnit: ResolvedItemConfig.defaults.minSizeUnit,
            id: ResolvedItemConfig.defaults.id,
            maximised: ResolvedHeaderedItemConfig.defaultMaximised,
            isClosable: ResolvedItemConfig.defaults.isClosable,
            reorderEnabled: ResolvedComponentItemConfig.defaultReorderEnabled,
            title,
            header: undefined,
            componentType,
            componentState,
        };
        return result;
    }
    ResolvedComponentItemConfig.createDefault = createDefault;
    function copyComponentType(componentType) {
        return (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.deepExtendValue)({}, componentType);
    }
    ResolvedComponentItemConfig.copyComponentType = copyComponentType;
})(ResolvedComponentItemConfig || (ResolvedComponentItemConfig = {}));
/** @public */
var ResolvedRowOrColumnItemConfig;
(function (ResolvedRowOrColumnItemConfig) {
    function isChildItemConfig(itemConfig) {
        switch (itemConfig.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return true;
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
                return false;
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnreachableCaseError('CROCOSPCICIC13687', itemConfig.type);
        }
    }
    ResolvedRowOrColumnItemConfig.isChildItemConfig = isChildItemConfig;
    function createCopy(original, content) {
        const result = {
            type: original.type,
            content: content !== undefined ? copyContent(content) : copyContent(original.content),
            size: original.size,
            sizeUnit: original.sizeUnit,
            minSize: original.minSize,
            minSizeUnit: original.minSizeUnit,
            id: original.id,
            isClosable: original.isClosable,
        };
        return result;
    }
    ResolvedRowOrColumnItemConfig.createCopy = createCopy;
    function copyContent(original) {
        const count = original.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            result[i] = ResolvedItemConfig.createCopy(original[i]);
        }
        return result;
    }
    ResolvedRowOrColumnItemConfig.copyContent = copyContent;
    function createDefault(type) {
        const result = {
            type,
            content: [],
            size: ResolvedItemConfig.defaults.size,
            sizeUnit: ResolvedItemConfig.defaults.sizeUnit,
            minSize: ResolvedItemConfig.defaults.minSize,
            minSizeUnit: ResolvedItemConfig.defaults.minSizeUnit,
            id: ResolvedItemConfig.defaults.id,
            isClosable: ResolvedItemConfig.defaults.isClosable,
        };
        return result;
    }
    ResolvedRowOrColumnItemConfig.createDefault = createDefault;
})(ResolvedRowOrColumnItemConfig || (ResolvedRowOrColumnItemConfig = {}));
/** @public */
var ResolvedRootItemConfig;
(function (ResolvedRootItemConfig) {
    function createCopy(config) {
        return ResolvedItemConfig.createCopy(config);
    }
    ResolvedRootItemConfig.createCopy = createCopy;
    function isRootItemConfig(itemConfig) {
        switch (itemConfig.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.column:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.stack:
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.component:
                return true;
            case _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground:
                return false;
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnreachableCaseError('CROCOSPCICIC13687', itemConfig.type);
        }
    }
    ResolvedRootItemConfig.isRootItemConfig = isRootItemConfig;
})(ResolvedRootItemConfig || (ResolvedRootItemConfig = {}));
/** @internal */
var ResolvedGroundItemConfig;
(function (ResolvedGroundItemConfig) {
    function create(rootItemConfig) {
        const content = rootItemConfig === undefined ? [] : [rootItemConfig];
        return {
            type: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ItemType.ground,
            content,
            size: 100,
            sizeUnit: _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Percent,
            minSize: 0,
            minSizeUnit: _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Pixel,
            id: '',
            isClosable: false,
            title: '',
            reorderEnabled: false,
        };
    }
    ResolvedGroundItemConfig.create = create;
})(ResolvedGroundItemConfig || (ResolvedGroundItemConfig = {}));
/** @public */
var ResolvedLayoutConfig;
(function (ResolvedLayoutConfig) {
    let Settings;
    (function (Settings) {
        Settings.defaults = {
            useDragAndDrop: true,
            copyForDragImage: undefined,
            showOldPositionWhenDragging: true,
            dragDataMimetype: 'text/gl-drag-data',
            checkGlWindowKey: true,
            constrainDragToContainer: true,
            reorderEnabled: true,
            popoutWholeStack: false,
            blockedPopoutsThrowError: true,
            closePopoutsOnUnload: true,
            responsiveMode: _utils_types__WEBPACK_IMPORTED_MODULE_0__.ResponsiveMode.none,
            tabOverlapAllowance: 0,
            reorderOnTabMenuClick: true,
            tabControlOffset: 10,
            popInOnClose: false,
        };
        function createCopy(original) {
            return {
                useDragAndDrop: original.useDragAndDrop,
                copyForDragImage: original.copyForDragImage,
                showOldPositionWhenDragging: original.showOldPositionWhenDragging,
                dragDataMimetype: original.dragDataMimetype,
                checkGlWindowKey: original.checkGlWindowKey,
                constrainDragToContainer: original.constrainDragToContainer,
                reorderEnabled: original.reorderEnabled,
                popoutWholeStack: original.popoutWholeStack,
                blockedPopoutsThrowError: original.blockedPopoutsThrowError,
                closePopoutsOnUnload: original.closePopoutsOnUnload,
                responsiveMode: original.responsiveMode,
                tabOverlapAllowance: original.tabOverlapAllowance,
                reorderOnTabMenuClick: original.reorderOnTabMenuClick,
                tabControlOffset: original.tabControlOffset,
                popInOnClose: original.popInOnClose,
            };
        }
        Settings.createCopy = createCopy;
    })(Settings = ResolvedLayoutConfig.Settings || (ResolvedLayoutConfig.Settings = {}));
    let Dimensions;
    (function (Dimensions) {
        function createCopy(original) {
            return {
                borderWidth: original.borderWidth,
                borderGrabWidth: original.borderGrabWidth,
                contentInset: original.contentInset,
                defaultMinItemHeight: original.defaultMinItemHeight,
                defaultMinItemHeightUnit: original.defaultMinItemHeightUnit,
                defaultMinItemWidth: original.defaultMinItemWidth,
                defaultMinItemWidthUnit: original.defaultMinItemWidthUnit,
                headerHeight: original.headerHeight,
                dragProxyWidth: original.dragProxyWidth,
                dragProxyHeight: original.dragProxyHeight,
            };
        }
        Dimensions.createCopy = createCopy;
        Dimensions.defaults = {
            borderWidth: 5,
            borderGrabWidth: 5,
            contentInset: 0,
            defaultMinItemHeight: 0,
            defaultMinItemHeightUnit: _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Pixel,
            defaultMinItemWidth: 10,
            defaultMinItemWidthUnit: _utils_types__WEBPACK_IMPORTED_MODULE_0__.SizeUnitEnum.Pixel,
            headerHeight: 20,
            dragProxyWidth: 300,
            dragProxyHeight: 200
        };
    })(Dimensions = ResolvedLayoutConfig.Dimensions || (ResolvedLayoutConfig.Dimensions = {}));
    let Header;
    (function (Header) {
        function createCopy(original) {
            return {
                show: original.show,
                popout: original.popout,
                dock: original.dock,
                close: original.close,
                maximise: original.maximise,
                minimise: original.minimise,
                tabDropdown: original.tabDropdown,
            };
        }
        Header.createCopy = createCopy;
        Header.defaults = {
            show: _utils_types__WEBPACK_IMPORTED_MODULE_0__.Side.top,
            popout: 'open in new window',
            dock: 'dock',
            maximise: 'maximise',
            minimise: 'minimise',
            close: 'close',
            tabDropdown: 'additional tabs'
        };
    })(Header = ResolvedLayoutConfig.Header || (ResolvedLayoutConfig.Header = {}));
    function isPopout(config) {
        return 'parentId' in config;
    }
    ResolvedLayoutConfig.isPopout = isPopout;
    function createDefault() {
        const result = {
            root: undefined,
            openPopouts: [],
            dimensions: ResolvedLayoutConfig.Dimensions.defaults,
            settings: ResolvedLayoutConfig.Settings.defaults,
            header: ResolvedLayoutConfig.Header.defaults,
            resolved: true,
        };
        return result;
    }
    ResolvedLayoutConfig.createDefault = createDefault;
    function createCopy(config) {
        if (isPopout(config)) {
            return ResolvedPopoutLayoutConfig.createCopy(config);
        }
        else {
            const result = {
                root: config.root === undefined ? undefined : ResolvedRootItemConfig.createCopy(config.root),
                openPopouts: ResolvedLayoutConfig.copyOpenPopouts(config.openPopouts),
                settings: ResolvedLayoutConfig.Settings.createCopy(config.settings),
                dimensions: ResolvedLayoutConfig.Dimensions.createCopy(config.dimensions),
                header: ResolvedLayoutConfig.Header.createCopy(config.header),
                resolved: config.resolved,
            };
            return result;
        }
    }
    ResolvedLayoutConfig.createCopy = createCopy;
    function copyOpenPopouts(original) {
        const count = original.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            result[i] = ResolvedPopoutLayoutConfig.createCopy(original[i]);
        }
        return result;
    }
    ResolvedLayoutConfig.copyOpenPopouts = copyOpenPopouts;
    /**
     * Takes a GoldenLayout configuration object and
     * replaces its keys and values recursively with
     * one letter counterparts
     */
    function minifyConfig(layoutConfig) {
        return _utils_config_minifier__WEBPACK_IMPORTED_MODULE_3__.ConfigMinifier.translateObject(layoutConfig, true);
    }
    ResolvedLayoutConfig.minifyConfig = minifyConfig;
    /**
     * Takes a configuration Object that was previously minified
     * using minifyConfig and returns its original version
     */
    function unminifyConfig(minifiedConfig) {
        return _utils_config_minifier__WEBPACK_IMPORTED_MODULE_3__.ConfigMinifier.translateObject(minifiedConfig, false);
    }
    ResolvedLayoutConfig.unminifyConfig = unminifyConfig;
})(ResolvedLayoutConfig || (ResolvedLayoutConfig = {}));
/** @public */
var ResolvedPopoutLayoutConfig;
(function (ResolvedPopoutLayoutConfig) {
    let Window;
    (function (Window) {
        function createCopy(original) {
            return {
                width: original.width,
                height: original.height,
                left: original.left,
                top: original.top,
            };
        }
        Window.createCopy = createCopy;
        Window.defaults = {
            width: null,
            height: null,
            left: null,
            top: null,
        };
    })(Window = ResolvedPopoutLayoutConfig.Window || (ResolvedPopoutLayoutConfig.Window = {}));
    function createCopy(original) {
        const result = {
            root: original.root === undefined ? undefined : ResolvedRootItemConfig.createCopy(original.root),
            openPopouts: ResolvedLayoutConfig.copyOpenPopouts(original.openPopouts),
            settings: ResolvedLayoutConfig.Settings.createCopy(original.settings),
            dimensions: ResolvedLayoutConfig.Dimensions.createCopy(original.dimensions),
            header: ResolvedLayoutConfig.Header.createCopy(original.header),
            parentId: original.parentId,
            indexInParent: original.indexInParent,
            window: ResolvedPopoutLayoutConfig.Window.createCopy(original.window),
            resolved: original.resolved,
        };
        return result;
    }
    ResolvedPopoutLayoutConfig.createCopy = createCopy;
})(ResolvedPopoutLayoutConfig || (ResolvedPopoutLayoutConfig = {}));


/***/ }),

/***/ "./src/ts/container/component-container.ts":
/*!*************************************************!*\
  !*** ./src/ts/container/component-container.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentContainer": () => (/* binding */ ComponentContainer)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");






/** @public */
class ComponentContainer extends _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /** @internal */
    constructor(
    /** @internal */
    _config, 
    /** @internal */
    _parent, 
    /** @internal */
    _layoutManager, 
    /** @internal */
    _updateItemConfigEvent, 
    /** @internal */
    _showEvent, 
    /** @internal */
    _hideEvent, 
    /** @internal */
    _focusEvent, 
    /** @internal */
    _blurEvent) {
        super();
        this._config = _config;
        this._parent = _parent;
        this._layoutManager = _layoutManager;
        this._updateItemConfigEvent = _updateItemConfigEvent;
        this._showEvent = _showEvent;
        this._hideEvent = _hideEvent;
        this._focusEvent = _focusEvent;
        this._blurEvent = _blurEvent;
        /** @internal */
        this._stackMaximised = false;
        this._element = _layoutManager.createComponentElement(_config, this);
        if (this._element) {
            this._element.classList.add("lm_component" /* Component */);
            const content = this._element.querySelector(".lm_content");
            this.contentElement = content instanceof HTMLElement ? content
                : this._element;
        }
        this._width = 0;
        this._height = 0;
        this._visible = true;
        this._isShownWithZeroDimensions = true;
        this._componentType = _config.componentType;
        this._isClosable = _config.isClosable;
        this._initialState = _config.componentState;
        this._state = this._initialState;
        this._handle = this.layoutManager.bindComponent(this, _config);
        //FIXME:this.updateElementPositionPropertyFromBoundComponent();
    }
    get width() { return this._width; }
    get height() { return this._height; }
    get parent() { return this._parent; }
    /** @internal @deprecated use {@link (ComponentContainer:class).componentType} */
    get componentName() { return this._componentType; }
    get componentType() { return this._componentType; }
    get handle() { return this._handle; }
    get virtual() { return this._element === undefined; }
    get tab() { return this._tab; }
    get title() { return this._parent.title; }
    get layoutManager() { return this._layoutManager; }
    get isHidden() { return !this._visible; }
    get visible() { return this._visible; }
    get state() { return this._state; }
    /** Return the initial component state */
    get initialState() { return this._initialState; }
    /** The inner DOM element where the container's content is intended to live in */
    get element() { return this._element; }
    /** @internal */
    destroy() {
        this.releaseComponent();
        this.stateRequestEvent = undefined;
        this.emit('destroy');
    }
    /** @deprecated use {@link (ComponentContainer:class).element } */
    getElement() {
        return this._element;
    }
    /**
     * Hides the container's component item (and hence, the container) if not already hidden.
     * Emits hide event prior to hiding the container.
     */
    hide() {
        this._hideEvent();
    }
    /**
     * Shows the container's component item (and hence, the container) if not visible.
     * Emits show event prior to hiding the container.
     */
    show() {
        this._showEvent();
    }
    /**
     * Focus this component in Layout.
     */
    focus(suppressEvent = false) {
        this._focusEvent(suppressEvent);
    }
    /**
     * Remove focus from this component in Layout.
     */
    blur(suppressEvent = false) {
        this._blurEvent(suppressEvent);
    }
    /**
     * Set the size from within the container. Traverses up
     * the item tree until it finds a row or column element
     * and resizes its items accordingly.
     *
     * If this container isn't a descendant of a row or column
     * it returns false
     * @param width - The new width in pixel
     * @param height - The new height in pixel
     *
     * @returns resizeSuccesful
     *
     * @internal
     */
    setSize(width, height) {
        let ancestorItem = this._parent;
        if (ancestorItem.isColumn || ancestorItem.isRow || ancestorItem.parent === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.AssertError('ICSSPRC', 'ComponentContainer cannot have RowColumn Parent');
        }
        else {
            let ancestorChildItem;
            do {
                ancestorChildItem = ancestorItem;
                ancestorItem = ancestorItem.parent;
            } while (ancestorItem !== null && !ancestorItem.isColumn && !ancestorItem.isRow);
            if (ancestorItem === null) {
                // no Row or Column found
                return false;
            }
            else {
                // ancestorItem is Row or Column
                const direction = ancestorItem.isColumn ? 'height' : 'width';
                const currentSize = this[direction];
                if (currentSize === null) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('ICSSCS11194');
                }
                else {
                    const newSize = direction === 'height' ? height : width;
                    const totalPixel = currentSize * (1 / (ancestorChildItem.size / 100));
                    const percentage = (newSize / totalPixel) * 100;
                    const delta = (ancestorChildItem.size - percentage) / (ancestorItem.contentItems.length - 1);
                    for (let i = 0; i < ancestorItem.contentItems.length; i++) {
                        const ancestorItemContentItem = ancestorItem.contentItems[i];
                        if (ancestorItemContentItem === ancestorChildItem) {
                            ancestorItemContentItem.size = percentage;
                        }
                        else {
                            ancestorItemContentItem.size += delta;
                        }
                    }
                    ancestorItem.updateSize();
                    return true;
                }
            }
        }
    }
    /**
     * Closes the container if it is closable. Can be called by
     * both the component within at as well as the contentItem containing
     * it. Emits a close event before the container itself is closed.
     */
    close() {
        if (this._isClosable) {
            this.emit('close');
            this._parent.close();
        }
    }
    /** Replaces component without affecting layout */
    replaceComponent(itemConfig) {
        var _a, _b, _c, _d;
        this.releaseComponent();
        if (!_config_config__WEBPACK_IMPORTED_MODULE_2__.ItemConfig.isComponent(itemConfig)) {
            throw new Error('ReplaceComponent not passed a component ItemConfig');
        }
        else {
            const config = _config_config__WEBPACK_IMPORTED_MODULE_2__.ComponentItemConfig.resolve(itemConfig, false);
            this._initialState = config.componentState;
            this._state = this._initialState;
            this._componentType = config.componentType;
            this._updateItemConfigEvent(config);
            this._handle = this.layoutManager.bindComponent(this, config);
            this.updateElementPositionPropertyFromBoundComponent();
            if (this.virtualVisibilityChangeRequiredEvent !== undefined) {
                this.virtualVisibilityChangeRequiredEvent(this, this._visible);
            }
            if (this.virtualRectingRequiredEvent !== undefined) {
                (_b = (_a = this._layoutManager).beforeVirtualRectingEvent) === null || _b === void 0 ? void 0 : _b.call(_a, 1);
                try {
                    this.virtualRectingRequiredEvent(this, this._width, this._height);
                }
                finally {
                    (_d = (_c = this._layoutManager).afterVirtualRectingEvent) === null || _d === void 0 ? void 0 : _d.call(_c);
                }
            }
            this.setBaseLogicalZIndex();
            this.emit('stateChanged');
        }
    }
    /**
     * Returns the initial component state or the latest passed in setState()
     * @returns state
     * @deprecated Use {@link (ComponentContainer:class).initialState}
     */
    getState() {
        return this._state;
    }
    /**
     * Merges the provided state into the current one
     * @deprecated Use {@link (ComponentContainer:class).stateRequestEvent}
     */
    extendState(state) {
        const extendedState = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.deepExtend)(this._state, state);
        this.setState(extendedState);
    }
    /**
     * Sets the component state
     * @deprecated Use {@link (ComponentContainer:class).stateRequestEvent}
     */
    setState(state) {
        this._state = state;
        this._parent.emitBaseBubblingEvent('stateChanged');
    }
    /**
     * Set's the components title
     */
    setTitle(title) {
        this._parent.setTitle(title);
    }
    setTitleRenderer(renderer) {
        this._parent.setTitleRenderer(renderer);
    }
    /** @internal */
    setTab(tab) {
        this._tab = tab;
        this.emit('tab', tab);
    }
    /** @internal */
    setVisibility(value) {
        if (this.virtualVisibilityChangeRequiredEvent !== undefined) {
            this.virtualVisibilityChangeRequiredEvent(this, value);
        }
        if (this._element)
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.setElementDisplayVisibility)(this._element, value);
        if (value) {
            if (!this._visible) {
                this._visible = true;
                if (this._height === 0 && this._width === 0) {
                    this._isShownWithZeroDimensions = true;
                }
                else {
                    this._isShownWithZeroDimensions = false;
                    this.parent.updateNodeSize();
                    this.emitShow();
                }
            }
            else {
                if (this._isShownWithZeroDimensions && (this._height !== 0 || this._width !== 0)) {
                    this._isShownWithZeroDimensions = false;
                    this.parent.updateNodeSize();
                    this.emitShow();
                }
            }
        }
        else {
            if (this._visible) {
                this._visible = false;
                this._isShownWithZeroDimensions = false;
                this.emitHide();
            }
        }
    }
    setBaseLogicalZIndex() {
        this.setLogicalZIndex(_utils_types__WEBPACK_IMPORTED_MODULE_4__.LogicalZIndex.base);
    }
    setLogicalZIndex(logicalZIndex) {
        if (logicalZIndex !== this._logicalZIndex) {
            this._logicalZIndex = logicalZIndex;
            this.notifyVirtualZIndexChangeRequired();
        }
    }
    /**
     * Set the container's size, but considered temporary (for dragging)
     * so don't emit any events.
     * @internal
     */
    enterDragMode(width, height) {
        this._width = width;
        this._height = height;
        if (this._element) {
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.setElementWidth)(this._element, width);
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.setElementHeight)(this._element, height);
        }
        this.setLogicalZIndex(_utils_types__WEBPACK_IMPORTED_MODULE_4__.LogicalZIndex.drag);
        this.drag();
    }
    /** @internal */
    exitDragMode() {
        this.setBaseLogicalZIndex();
    }
    /** @internal */
    enterStackMaximised() {
        this._stackMaximised = true;
        this.setLogicalZIndex(_utils_types__WEBPACK_IMPORTED_MODULE_4__.LogicalZIndex.stackMaximised);
    }
    /** @internal */
    exitStackMaximised() {
        this.setBaseLogicalZIndex();
        this._stackMaximised = false;
    }
    /** @internal */
    drag() {
        var _a, _b, _c, _d;
        if (this.virtualRectingRequiredEvent !== undefined) {
            (_b = (_a = this._layoutManager).beforeVirtualRectingEvent) === null || _b === void 0 ? void 0 : _b.call(_a, 1);
            try {
                this.virtualRectingRequiredEvent(this, this._width, this._height);
            }
            finally {
                (_d = (_c = this._layoutManager).afterVirtualRectingEvent) === null || _d === void 0 ? void 0 : _d.call(_c);
            }
        }
    }
    /** @internal */
    notifyVirtualRectingRequired() {
        if (this.virtualRectingRequiredEvent !== undefined
            || this.notifyResize) {
            if (this.virtualRectingRequiredEvent)
                this.virtualRectingRequiredEvent(this, this._width, this._height);
            const element = this.parent.element;
            //let left = 0, top = 0, width = 0, height = 0;
            if (this.notifyResize && element) {
                const bounds = element.getBoundingClientRect();
                this.notifyResize(this, bounds.left, bounds.top, bounds.width, bounds.height);
            }
            this.emit('resize');
            this.checkShownFromZeroDimensions();
        }
    }
    /** @internal */
    notifyVirtualZIndexChangeRequired() {
        if (this.virtualZIndexChangeRequiredEvent !== undefined) {
            const logicalZIndex = this._logicalZIndex;
            const defaultZIndex = _utils_types__WEBPACK_IMPORTED_MODULE_4__.LogicalZIndexToDefaultMap[logicalZIndex];
            this.virtualZIndexChangeRequiredEvent(this, logicalZIndex, defaultZIndex);
        }
    }
    /** @internal */
    updateElementPositionPropertyFromBoundComponent() {
        if (this._element) {
            if (this.virtual) {
                this._element.style.position = 'static';
            }
            else {
                this._element.style.position = ''; // set it back to attribute value
            }
        }
    }
    /** @internal */
    checkShownFromZeroDimensions() {
        if (this._isShownWithZeroDimensions && (this._height !== 0 || this._width !== 0)) {
            this._isShownWithZeroDimensions = false;
            this.emitShow();
        }
    }
    /** @internal */
    emitShow() {
        this.emit('shown');
        this.emit('show');
    }
    /** @internal */
    emitHide() {
        this.emit('hide');
    }
    /** @internal */
    releaseComponent() {
        if (this._stackMaximised) {
            this.exitStackMaximised();
        }
        this.emit('beforeComponentRelease', this._handle);
        this.layoutManager.unbindComponent(this, this._handle);
    }
}


/***/ }),

/***/ "./src/ts/controls/browser-popout.ts":
/*!*******************************************!*\
  !*** ./src/ts/controls/browser-popout.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BrowserPopout": () => (/* binding */ BrowserPopout)
/* harmony export */ });
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _errors_external_error__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../errors/external-error */ "./src/ts/errors/external-error.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");





/**
 * Pops a content item out into a new browser window.
 * This is achieved by
 *
 *    - Creating a new configuration with the content item as root element
 *    - Serializing and minifying the configuration
 *    - Opening the current window's URL with the configuration as a GET parameter
 *    - GoldenLayout when opened in the new window will look for the GET parameter
 *      and use it instead of the provided configuration
 * @public
 */
class BrowserPopout extends _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /**
     * @param _config - GoldenLayout item config
     * @param _initialWindowSize - A map with width, height, top and left
     * @internal
     */
    constructor(
    /** @internal */
    _config, 
    /** @internal */
    _initialWindowSize, 
    /** @internal */
    _layoutManager) {
        super();
        this._config = _config;
        this._initialWindowSize = _initialWindowSize;
        this._layoutManager = _layoutManager;
        this._isInitialised = false;
        this._popoutWindow = null;
        this.createWindow();
    }
    toConfig() {
        var _a, _b;
        if (this._isInitialised === false) {
            throw new Error('Can\'t create config, layout not yet initialised');
        }
        const glInstance = this.getGlInstance();
        const glInstanceConfig = glInstance.saveLayout();
        let left;
        let top;
        if (this._popoutWindow === null) {
            left = null;
            top = null;
        }
        else {
            left = (_a = this._popoutWindow.screenX) !== null && _a !== void 0 ? _a : this._popoutWindow.screenLeft;
            top = (_b = this._popoutWindow.screenY) !== null && _b !== void 0 ? _b : this._popoutWindow.screenTop;
        }
        const window = {
            width: this.getGlInstance().width,
            height: this.getGlInstance().height,
            left,
            top,
        };
        const config = {
            root: glInstanceConfig.root,
            openPopouts: glInstanceConfig.openPopouts,
            settings: glInstanceConfig.settings,
            dimensions: glInstanceConfig.dimensions,
            header: glInstanceConfig.header,
            window,
            parentId: this._config.parentId,
            indexInParent: this._config.indexInParent,
            resolved: true,
        };
        return config;
    }
    getGlInstance() {
        if (this._popoutWindow === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('BPGGI24693');
        }
        return this._popoutWindow.__glInstance;
    }
    /**
     * Retrieves the native BrowserWindow backing this popout.
     * Might throw an UnexpectedNullError exception when the window is not initialized yet.
     * @public
     */
    getWindow() {
        if (this._popoutWindow === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('BPGW087215');
        }
        return this._popoutWindow;
    }
    close() {
        if (this.getGlInstance()) {
            this.getGlInstance().closeWindow();
        }
        else {
            try {
                this.getWindow().close();
            }
            catch (e) {
                //
            }
        }
    }
    /**
     * Returns the popped out item to its original position. If the original
     * parent isn't available anymore it falls back to the layout's topmost element
     */
    popIn() {
        let parentItem;
        let index = this._config.indexInParent;
        if (!this._config.parentId) {
            return;
        }
        /*
        * The deepExtend call seems a bit pointless, but it's crucial to
        * copy the config returned by this.getGlInstance().toConfig()
        * onto a new object. Internet Explorer keeps the references
        * to objects on the child window, resulting in the following error
        * once the child window is closed:
        *
        * The callee (server [not server application]) is not available and disappeared
        */
        const glInstanceLayoutConfig = this.getGlInstance().saveLayout();
        const copiedGlInstanceLayoutConfig = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.deepExtend)({}, glInstanceLayoutConfig);
        const copiedRoot = copiedGlInstanceLayoutConfig.root;
        if (copiedRoot === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedUndefinedError('BPPIR19998');
        }
        const groundItem = this._layoutManager.groundItem;
        if (groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedUndefinedError('BPPIG34972');
        }
        parentItem = groundItem.getItemsByPopInParentId(this._config.parentId)[0];
        /*
        * Fallback if parentItem is not available. Either add it to the topmost
        * item or make it the topmost item if the layout is empty
        */
        if (!parentItem) {
            if (groundItem.contentItems.length > 0) {
                parentItem = groundItem.contentItems[0];
            }
            else {
                parentItem = groundItem;
            }
            index = 0;
        }
        const newContentItem = this._layoutManager.createAndInitContentItem(copiedRoot, parentItem);
        parentItem.addChild(newContentItem, index);
        if (this._layoutManager.layoutConfig.settings.popInOnClose) {
            this._onClose();
        }
        else {
            this.close();
        }
    }
    /**
     * Creates the URL and window parameter
     * and opens a new window
     * @internal
     */
    createWindow() {
        const url = this.createUrl();
        /**
         * Bogus title to prevent re-usage of existing window with the
         * same title. The actual title will be set by the new window's
         * GoldenLayout instance if it detects that it is in subWindowMode
         */
        const target = Math.floor(Math.random() * 1000000).toString(36);
        /**
         * The options as used in the window.open string
         */
        const features = this.serializeWindowFeatures({
            width: this._initialWindowSize.width,
            height: this._initialWindowSize.height,
            innerWidth: this._initialWindowSize.width,
            innerHeight: this._initialWindowSize.height,
            menubar: 'no',
            toolbar: 'no',
            location: 'no',
            personalbar: 'no',
            resizable: 'yes',
            scrollbars: 'no',
            status: 'no'
        });
        this._popoutWindow = globalThis.open(url, target, features);
        if (!this._popoutWindow) {
            if (this._layoutManager.layoutConfig.settings.blockedPopoutsThrowError === true) {
                const error = new _errors_external_error__WEBPACK_IMPORTED_MODULE_3__.PopoutBlockedError('Popout blocked');
                throw error;
            }
            else {
                return;
            }
        }
        this._popoutWindow.addEventListener('load', () => this.positionWindow(), { passive: true });
        this._popoutWindow.addEventListener('beforeunload', () => {
            if (this._layoutManager.layoutConfig.settings.popInOnClose) {
                this.popIn();
            }
            else {
                this._onClose();
            }
        }, { passive: true });
        /**
         * Polling the childwindow to find out if GoldenLayout has been initialised
         * doesn't seem optimal, but the alternatives - adding a callback to the parent
         * window or raising an event on the window object - both would introduce knowledge
         * about the parent to the child window which we'd rather avoid
         */
        this._checkReadyInterval = setInterval(() => this.checkReady(), 10);
    }
    /** @internal */
    checkReady() {
        if (this._popoutWindow === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('BPCR01844');
        }
        else {
            if (this._popoutWindow.__glInstance && this._popoutWindow.__glInstance.isInitialised) {
                this.onInitialised();
                if (this._checkReadyInterval !== undefined) {
                    clearInterval(this._checkReadyInterval);
                    this._checkReadyInterval = undefined;
                }
            }
        }
    }
    /**
     * Serialises a map of key:values to a window options string
     *
     * @param windowOptions -
     *
     * @returns serialised window options
     * @internal
     */
    serializeWindowFeatures(windowOptions) {
        const windowOptionsString = [];
        for (const key in windowOptions) {
            windowOptionsString.push(key + '=' + windowOptions[key].toString());
        }
        return windowOptionsString.join(',');
    }
    /**
     * Creates the URL for the new window, including the
     * config GET parameter
     *
     * @returns URL
     * @internal
     */
    createUrl() {
        const storageKey = 'gl-window-config-' + (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId)();
        const config = _config_resolved_config__WEBPACK_IMPORTED_MODULE_4__.ResolvedLayoutConfig.minifyConfig(this._config);
        try {
            localStorage.setItem(storageKey, JSON.stringify(config));
        }
        catch (e) {
            throw new Error('Error while writing to localStorage ' + (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.getErrorMessage)(e));
        }
        const url = new URL(location.href);
        url.searchParams.set('gl-window', storageKey);
        return url.toString();
    }
    /**
     * Move the newly created window roughly to
     * where the component used to be.
     * @internal
     */
    positionWindow() {
        if (this._popoutWindow === null) {
            throw new Error('BrowserPopout.positionWindow: null popoutWindow');
        }
        else {
            this._popoutWindow.moveTo(this._initialWindowSize.left, this._initialWindowSize.top);
            this._popoutWindow.focus();
        }
    }
    /**
     * Callback when the new window is opened and the GoldenLayout instance
     * within it is initialised
     * @internal
     */
    onInitialised() {
        this._isInitialised = true;
        this.getGlInstance().on('popIn', () => this.popIn());
        this.emit('initialised');
    }
    /**
     * Invoked 50ms after the window unload event
     * @internal
     */
    _onClose() {
        setTimeout(() => this.emit('closed'), 50);
    }
}


/***/ }),

/***/ "./src/ts/controls/drag-proxy.ts":
/*!***************************************!*\
  !*** ./src/ts/controls/drag-proxy.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DragProxy": () => (/* binding */ DragProxy)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _items_stack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../items/stack */ "./src/ts/items/stack.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");





/**
 * This class creates a temporary container
 * for the component whilst it is being dragged
 * and handles drag events
 * @internal
 */
class DragProxy extends _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /**
     * @param x - The initial x position
     * @param y - The initial y position
     * @internal
     */
    constructor(x, y, _dragListener, _layoutManager, _componentItem, _originalParent) {
        super();
        this._dragListener = _dragListener;
        this._layoutManager = _layoutManager;
        this._componentItem = _componentItem;
        this._originalParent = _originalParent;
        this._area = null;
        this._lastValidArea = null;
        this._dragListener.on('drag', (offsetX, offsetY, event) => this.onDrag(offsetX, offsetY, event));
        this._dragListener.on('dragStop', () => this.onDrop());
        this.createDragProxyElements(x, y);
        if (this._componentItem.parent === null) {
            // Note that _contentItem will have dummy GroundItem as parent if initiated by a external drag source
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('DPC10097');
        }
        this._componentItemFocused = this._componentItem.focused;
        if (this._componentItemFocused) {
            this._componentItem.blur();
        }
        this._componentItem.parent.removeChild(this._componentItem, true);
        this.setDimensions();
        document.body.appendChild(this._element);
        this.determineMinMaxXY();
        this._layoutManager.calculateItemAreas();
        this.setDropPosition(x, y);
    }
    get element() { return this._element; }
    /** Create Stack-like structure to contain the dragged component */
    createDragProxyElements(initialX, initialY) {
        this._element = document.createElement('div');
        this._element.classList.add("lm_dragProxy" /* DragProxy */);
        const headerElement = document.createElement('div');
        headerElement.classList.add("lm_header" /* Header */);
        const tabsElement = document.createElement('div');
        tabsElement.classList.add("lm_tabs" /* Tabs */);
        const tabElement = document.createElement('div');
        tabElement.classList.add("lm_tab" /* Tab */);
        const titleElement = document.createElement('span');
        titleElement.classList.add("lm_title" /* Title */);
        tabElement.appendChild(titleElement);
        tabsElement.appendChild(tabElement);
        headerElement.appendChild(tabsElement);
        this._proxyContainerElement = document.createElement('div');
        this._proxyContainerElement.classList.add("lm_content" /* Content */);
        this._element.appendChild(headerElement);
        this._element.appendChild(this._proxyContainerElement);
        if (this._originalParent instanceof _items_stack__WEBPACK_IMPORTED_MODULE_2__.Stack && this._originalParent.headerShow) {
            this._sided = this._originalParent.headerLeftRightSided;
            this._element.classList.add('lm_' + this._originalParent.headerSide);
            if ([_utils_types__WEBPACK_IMPORTED_MODULE_3__.Side.right, _utils_types__WEBPACK_IMPORTED_MODULE_3__.Side.bottom].indexOf(this._originalParent.headerSide) >= 0) {
                this._proxyContainerElement.insertAdjacentElement('afterend', headerElement);
            }
        }
        this._element.style.left = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(initialX);
        this._element.style.top = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(initialY);
        tabElement.setAttribute('title', this._componentItem.title);
        titleElement.insertAdjacentText('afterbegin', this._componentItem.title);
        this._proxyContainerElement.appendChild(this._componentItem.element);
    }
    determineMinMaxXY() {
        const groundItem = this._layoutManager.groundItem;
        if (groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedUndefinedError('DPDMMXY73109');
        }
        else {
            const groundElement = groundItem.element;
            const rect = groundElement.getBoundingClientRect();
            this._minX = rect.left + document.body.scrollLeft;
            this._minY = rect.top + document.body.scrollTop;
            this._maxX = this._minX + rect.width;
            this._maxY = this._minY + rect.height;
        }
    }
    /**
     * Callback on every mouseMove event during a drag. Determines if the drag is
     * still within the valid drag area and calls the layoutManager to highlight the
     * current drop area
     *
     * @param offsetX - The difference from the original x position in px
     * @param offsetY - The difference from the original y position in px
     * @param event -
     * @internal
     */
    onDrag(offsetX, offsetY, event) {
        const x = event.pageX;
        const y = event.pageY;
        this.setDropPosition(x, y);
        this._componentItem.drag();
    }
    /**
     * Sets the target position, highlighting the appropriate area
     *
     * @param x - The x position in px
     * @param y - The y position in px
     *
     * @internal
     */
    setDropPosition(x, y) {
        if (this._layoutManager.layoutConfig.settings.constrainDragToContainer) {
            if (x <= this._minX) {
                x = Math.ceil(this._minX);
            }
            else if (x >= this._maxX) {
                x = Math.floor(this._maxX);
            }
            if (y <= this._minY) {
                y = Math.ceil(this._minY);
            }
            else if (y >= this._maxY) {
                y = Math.floor(this._maxY);
            }
        }
        this._element.style.left = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(x);
        this._element.style.top = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(y);
        // FIXME set component.contentElement postion to that of this._proxyContainerElement
        this._area = this._layoutManager.getArea(x, y);
        if (this._area !== null) {
            this._lastValidArea = this._area;
            this._area.contentItem.highlightDropZone(x, y, this._area);
        }
    }
    /**
     * Callback when the drag has finished. Determines the drop area
     * and adds the child to it
     * @internal
     */
    onDrop() {
        const dropTargetIndicator = this._layoutManager.dropTargetIndicator;
        if (dropTargetIndicator === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('DPOD30011');
        }
        else {
            dropTargetIndicator.hide();
        }
        this._componentItem.exitDragMode();
        /*
         * Valid drop area found
         */
        let droppedComponentItem;
        if (this._area !== null) {
            droppedComponentItem = this._componentItem;
            this._area.contentItem.onDrop(droppedComponentItem, this._area);
            /**
             * No valid drop area available at present, but one has been found before.
             * Use it
             */
        }
        else if (this._lastValidArea !== null) {
            droppedComponentItem = this._componentItem;
            const newParentContentItem = this._lastValidArea.contentItem;
            newParentContentItem.onDrop(droppedComponentItem, this._lastValidArea);
            /**
             * No valid drop area found during the duration of the drag. Return
             * content item to its original position if a original parent is provided.
             * (Which is not the case if the drag had been initiated by createDragSource)
             */
        }
        else if (this._originalParent) {
            droppedComponentItem = this._componentItem;
            this._originalParent.addChild(droppedComponentItem);
            /**
             * The drag didn't ultimately end up with adding the content item to
             * any container. In order to ensure clean up happens, destroy the
             * content item.
             */
        }
        else {
            this._componentItem.destroy(); // contentItem children are now destroyed as well
        }
        this._element.remove();
        this._layoutManager.emit('itemDropped', this._componentItem);
        if (this._componentItemFocused && droppedComponentItem !== undefined) {
            droppedComponentItem.focus();
        }
    }
    /**
     * Updates the Drag Proxy's dimensions
     * @internal
     */
    setDimensions() {
        const dimensions = this._layoutManager.layoutConfig.dimensions;
        if (dimensions === undefined) {
            throw new Error('DragProxy.setDimensions: dimensions undefined');
        }
        let width = dimensions.dragProxyWidth;
        let height = dimensions.dragProxyHeight;
        if (width === undefined || height === undefined) {
            throw new Error('DragProxy.setDimensions: width and/or height undefined');
        }
        const headerHeight = this._layoutManager.layoutConfig.header.show === false ? 0 : dimensions.headerHeight;
        this._element.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(width);
        this._element.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(height);
        width -= (this._sided ? headerHeight : 0);
        height -= (!this._sided ? headerHeight : 0);
        this._proxyContainerElement.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(width);
        this._proxyContainerElement.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(height);
        this._componentItem.enterDragMode(width, height);
        this._componentItem.show();
    }
}


/***/ }),

/***/ "./src/ts/controls/drag-source.ts":
/*!****************************************!*\
  !*** ./src/ts/controls/drag-source.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DragSource": () => (/* binding */ DragSource)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _items_component_item__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../items/component-item */ "./src/ts/items/component-item.ts");
/* harmony import */ var _items_ground_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../items/ground-item */ "./src/ts/items/ground-item.ts");
/* harmony import */ var _utils_drag_listener__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/drag-listener */ "./src/ts/utils/drag-listener.ts");
/* harmony import */ var _drag_proxy__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./drag-proxy */ "./src/ts/controls/drag-proxy.ts");
 // remove alias in version 3






/**
 * Allows for any DOM item to create a component on drag
 * start to be dragged into the Layout
 * @public
 */
class DragSource {
    /** @internal */
    constructor(
    /** @internal */
    _layoutManager, 
    /** @internal */
    _element, 
    /** @internal */
    _componentTypeOrFtn, 
    /** @internal @deprecated remove in version 3 */
    _componentState, 
    /** @internal @deprecated remove in version 3 */
    _title) {
        this._layoutManager = _layoutManager;
        this._element = _element;
        this._componentTypeOrFtn = _componentTypeOrFtn;
        this._componentState = _componentState;
        this._title = _title;
        this._dragListener = null;
        this._dummyGroundContainer = document.createElement('div');
        const dummyRootItemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_0__.ResolvedRowOrColumnItemConfig.createDefault('row');
        this._dummyGroundContentItem = new _items_ground_item__WEBPACK_IMPORTED_MODULE_1__.GroundItem(this._layoutManager, dummyRootItemConfig, this._dummyGroundContainer, null);
        this.createDragListener();
    }
    /**
     * Disposes of the drag listeners so the drag source is not usable any more.
     * @internal
     */
    destroy() {
        this.removeDragListener();
    }
    /**
     * Called initially and after every drag
     * @internal
     */
    createDragListener() {
        this.removeDragListener();
        this._dragListener = new _utils_drag_listener__WEBPACK_IMPORTED_MODULE_2__.DragListener(this._element);
        this._dragListener.on('dragStart', (x, y) => this.onDragStart(x, y));
        this._dragListener.on('dragStop', () => this.onDragStop());
    }
    /**
     * Callback for the DragListener's dragStart event
     *
     * @param x - The x position of the mouse on dragStart
     * @param y - The x position of the mouse on dragStart
     * @internal
     */
    onDragStart(x, y) {
        var _a;
        const type = 'component';
        let dragSourceItemConfig;
        if (typeof this._componentTypeOrFtn === "function") {
            const ftnDragSourceItemConfig = this._componentTypeOrFtn();
            // If the componentType property exists, then it is already a ComponentItemConfig so nothing to do
            if (DragSource.isDragSourceComponentItemConfig(ftnDragSourceItemConfig)) {
                dragSourceItemConfig = {
                    type,
                    componentState: ftnDragSourceItemConfig.state,
                    componentType: ftnDragSourceItemConfig.type,
                    title: (_a = ftnDragSourceItemConfig.title) !== null && _a !== void 0 ? _a : this._title,
                };
            }
            else {
                dragSourceItemConfig = ftnDragSourceItemConfig;
            }
        }
        else {
            dragSourceItemConfig = {
                type,
                componentState: this._componentState,
                componentType: this._componentTypeOrFtn,
                title: this._title,
            };
        }
        // Create a dummy ContentItem only for drag purposes
        // All ContentItems (except for GroundItem) need a parent.  When dragging, the parent is not used.
        // Instead of allowing null parents (as Javascript version did), use a temporary dummy GroundItem parent and add ContentItem to that
        // If this does not work, need to create alternative GroundItem class
        const resolvedItemConfig = _config_config__WEBPACK_IMPORTED_MODULE_3__.ComponentItemConfig.resolve(dragSourceItemConfig, false);
        const componentItem = new _items_component_item__WEBPACK_IMPORTED_MODULE_4__.ComponentItem(this._layoutManager, resolvedItemConfig, this._dummyGroundContentItem);
        this._dummyGroundContentItem.contentItems.push(componentItem);
        if (this._dragListener === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedNullError('DSODSD66746');
        }
        else {
            new _drag_proxy__WEBPACK_IMPORTED_MODULE_6__.DragProxy(x, y, this._dragListener, this._layoutManager, componentItem, this._dummyGroundContentItem);
        }
    }
    /** @internal */
    onDragStop() {
        // if (this._dummyGroundContentItem === undefined) {
        //     throw new UnexpectedUndefinedError('DSODSDRU08116');
        // } else {
        //     this._dummyGroundContentItem._$destroy
        //     this._dummyGroundContentItem = undefined;
        // }
        this.createDragListener();
    }
    /**
     * Called after every drag and when the drag source is being disposed of.
     * @internal
     */
    removeDragListener() {
        if (this._dragListener !== null) {
            this._dragListener.destroy();
            this._dragListener = null;
        }
    }
}
/** @public */
(function (DragSource) {
    /** @deprecated remove in version 3 */
    function isDragSourceComponentItemConfig(config) {
        return !("componentType" in config);
    }
    DragSource.isDragSourceComponentItemConfig = isDragSourceComponentItemConfig;
})(DragSource || (DragSource = {}));


/***/ }),

/***/ "./src/ts/controls/drop-target-indicator.ts":
/*!**************************************************!*\
  !*** ./src/ts/controls/drop-target-indicator.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DropTargetIndicator": () => (/* binding */ DropTargetIndicator)
/* harmony export */ });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");

/** @internal */
class DropTargetIndicator {
    constructor(parent = document.body, before = null) {
        // Maybe use container instead of Document Body?
        this._element = document.createElement('div');
        this._element.classList.add("lm_dropTargetIndicator" /* DropTargetIndicator */);
        const innerElement = document.createElement('div');
        innerElement.classList.add("lm_inner" /* Inner */);
        this._element.appendChild(innerElement);
        parent.insertBefore(this._element, before);
    }
    destroy() {
        this._element.remove();
    }
    highlightArea(area, margin) {
        this._element.style.left = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(area.x1 + margin);
        this._element.style.top = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(area.y1 + margin);
        this._element.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(area.x2 - area.x1 - margin);
        this._element.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(area.y2 - area.y1 - margin);
        this._element.style.display = 'block';
    }
    hide() {
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.setElementDisplayVisibility)(this._element, false);
    }
}


/***/ }),

/***/ "./src/ts/controls/header-button.ts":
/*!******************************************!*\
  !*** ./src/ts/controls/header-button.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HeaderButton": () => (/* binding */ HeaderButton)
/* harmony export */ });
/** @internal */
class HeaderButton {
    constructor(_header, label, cssClass, _pushEvent) {
        this._header = _header;
        this._pushEvent = _pushEvent;
        this._clickEventListener = (ev) => this.onClick(ev);
        this._touchStartEventListener = (ev) => this.onTouchStart(ev);
        this._element = document.createElement('div');
        this._element.classList.add(cssClass);
        this._element.title = label;
        this._header.on('destroy', () => this.destroy());
        this._element.addEventListener('click', this._clickEventListener, { passive: true });
        this._element.addEventListener('touchstart', this._touchStartEventListener, { passive: true });
        this._header.controlsContainerElement.appendChild(this._element);
    }
    get element() { return this._element; }
    destroy() {
        var _a;
        this._element.removeEventListener('click', this._clickEventListener);
        this._element.removeEventListener('touchstart', this._touchStartEventListener);
        (_a = this._element.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this._element);
    }
    onClick(ev) {
        this._pushEvent(ev);
    }
    onTouchStart(ev) {
        this._pushEvent(ev);
    }
}


/***/ }),

/***/ "./src/ts/controls/header.ts":
/*!***********************************!*\
  !*** ./src/ts/controls/header.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Header": () => (/* binding */ Header)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _header_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./header-button */ "./src/ts/controls/header-button.ts");
/* harmony import */ var _tabs_container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tabs-container */ "./src/ts/controls/tabs-container.ts");






/**
 * This class represents a header above a Stack ContentItem.
 * @public
 */
class Header extends _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /** @internal */
    constructor(
    /** @internal */
    _layoutManager, 
    /** @internal */
    _parent, settings, 
    /** @internal */
    _configClosable, 
    /** @internal */
    _getActiveComponentItemEvent, closeEvent, 
    /** @internal */
    _popoutEvent, 
    /** @internal */
    _maximiseToggleEvent, 
    /** @internal */
    _clickEvent, 
    /** @internal */
    _touchStartEvent, 
    /** @internal */
    _componentRemoveEvent, 
    /** @internal */
    _componentFocusEvent, 
    /** @internal */
    _componentDragStartEvent) {
        super();
        this._layoutManager = _layoutManager;
        this._parent = _parent;
        this._configClosable = _configClosable;
        this._getActiveComponentItemEvent = _getActiveComponentItemEvent;
        this._popoutEvent = _popoutEvent;
        this._maximiseToggleEvent = _maximiseToggleEvent;
        this._clickEvent = _clickEvent;
        this._touchStartEvent = _touchStartEvent;
        this._componentRemoveEvent = _componentRemoveEvent;
        this._componentFocusEvent = _componentFocusEvent;
        this._componentDragStartEvent = _componentDragStartEvent;
        /** @internal */
        this._clickListener = (ev) => this.onClick(ev);
        /** @internal */
        this._touchStartListener = (ev) => this.onTouchStart(ev);
        /** @internal */
        this._rowColumnClosable = true;
        /** @internal */
        this._closeButton = null;
        /** @internal */
        this._popoutButton = null;
        /** @internal */
        this._updateRequested = 0;
        this._tabsContainer = new _tabs_container__WEBPACK_IMPORTED_MODULE_1__.TabsContainer(this._layoutManager, (item) => this.handleTabInitiatedComponentRemoveEvent(item), (item) => this.handleTabInitiatedComponentFocusEvent(item), (x, y, dragListener, item) => this.handleTabInitiatedDragStartEvent(x, y, dragListener, item), () => this.processTabDropdownActiveChanged());
        this._show = settings.show;
        this._popoutEnabled = settings.popoutEnabled;
        this._popoutLabel = settings.popoutLabel;
        this._maximiseEnabled = settings.maximiseEnabled;
        this._maximiseLabel = settings.maximiseLabel;
        this._minimiseEnabled = settings.minimiseEnabled;
        this._minimiseLabel = settings.minimiseLabel;
        this._closeEnabled = settings.closeEnabled;
        this._closeLabel = settings.closeLabel;
        this._tabDropdownEnabled = settings.tabDropdownEnabled;
        this._tabDropdownLabel = settings.tabDropdownLabel;
        this.setSide(settings.side);
        this._canRemoveComponent = this._configClosable;
        this._element = document.createElement('section');
        this._element.classList.add("lm_header" /* Header */);
        this._controlsContainerElement = document.createElement('section');
        this._controlsContainerElement.classList.add("lm_controls" /* Controls */);
        this.layoutDefault();
        this._element.addEventListener('click', this._clickListener, { passive: true });
        //this._element.addEventListener('touchstart', this._touchStartListener, { passive: true });
        this._documentMouseUpListener = () => this._tabsContainer.hideAdditionalTabsDropdown();
        globalThis.document.addEventListener('mouseup', this._documentMouseUpListener, { passive: true });
        this._tabControlOffset = this._layoutManager.layoutConfig.settings.tabControlOffset;
        if (this._tabDropdownEnabled) {
            this._tabDropdownButton = new _header_button__WEBPACK_IMPORTED_MODULE_2__.HeaderButton(this, this._tabDropdownLabel, "lm_tabdropdown" /* TabDropdown */, () => this._tabsContainer.showAdditionalTabsDropdown());
        }
        if (this._popoutEnabled) {
            this._popoutButton = new _header_button__WEBPACK_IMPORTED_MODULE_2__.HeaderButton(this, this._popoutLabel, "lm_popout" /* Popout */, (ev) => this.handleButtonPopoutEvent(ev));
        }
        /**
         * Maximise control - set the component to the full size of the layout
         */
        if (this._maximiseEnabled) {
            this._maximiseButton = new _header_button__WEBPACK_IMPORTED_MODULE_2__.HeaderButton(this, this._maximiseLabel, "lm_maximise" /* Maximise */, (ev) => this.handleButtonMaximiseToggleEvent(ev));
        }
        /**
         * Close button
         */
        if (this._configClosable) {
            this._closeButton = new _header_button__WEBPACK_IMPORTED_MODULE_2__.HeaderButton(this, this._closeLabel, "lm_close" /* Close */, () => closeEvent());
        }
        this.processTabDropdownActiveChanged();
    }
    // /** @internal */
    // private _activeComponentItem: ComponentItem | null = null; // only used to identify active tab
    get show() { return this._show; }
    get side() { return this._side; }
    get leftRightSided() { return this._leftRightSided; }
    get layoutManager() { return this._layoutManager; }
    get parent() { return this._parent; }
    get tabs() { return this._tabsContainer.tabs; }
    get lastVisibleTabIndex() { return this._tabsContainer.lastVisibleTabIndex; }
    get element() { return this._element; }
    get tabsContainerElement() { return this._tabsContainer.element; }
    get controlsContainerElement() { return this._controlsContainerElement; }
    layoutDefault() {
        const el = this._element;
        while (el.firstChild)
            el.removeChild(el.firstChild);
        el.appendChild(this._tabsContainer.element);
        el.appendChild(this._controlsContainerElement);
        el.appendChild(this._tabsContainer.dropdownElement);
    }
    /**
     * Destroys the entire header
     * @internal
     */
    destroy() {
        this._element.style.opacity = '0';
        this.layoutManager.deferIfDragging((cancel) => {
            if (cancel) {
                this._element.style.opacity = '';
            }
            else {
                this.emit('destroy');
                this._popoutEvent = undefined;
                this._maximiseToggleEvent = undefined;
                this._clickEvent = undefined;
                this._touchStartEvent = undefined;
                this._componentRemoveEvent = undefined;
                this._componentFocusEvent = undefined;
                this._componentDragStartEvent = undefined;
                this._tabsContainer.destroy();
                globalThis.document.removeEventListener('mouseup', this._documentMouseUpListener);
                this._element.remove();
            }
        });
    }
    /**
     * Creates a new tab and associates it with a contentItem
     * @param index - The position of the tab
     * @internal
     */
    createTab(componentItem, index) {
        this._tabsContainer.createTab(componentItem, index);
    }
    /**
     * Finds a tab based on the contentItem its associated with and removes it.
     * Cannot remove tab if it has the active ComponentItem
     * @internal
     */
    removeTab(componentItem) {
        this._tabsContainer.removeTab(componentItem);
    }
    /** @internal */
    processActiveComponentChanged(newActiveComponentItem) {
        this._tabsContainer.processActiveComponentChanged(newActiveComponentItem);
        this.updateTabSizes();
    }
    /** @internal */
    setSide(value) {
        this._side = value;
        this._leftRightSided = [_utils_types__WEBPACK_IMPORTED_MODULE_3__.Side.right, _utils_types__WEBPACK_IMPORTED_MODULE_3__.Side.left].includes(this._side);
    }
    /**
     * Programmatically set closability.
     * @param value - Whether to enable/disable closability.
     * @returns Whether the action was successful
     * @internal
     */
    setRowColumnClosable(value) {
        this._rowColumnClosable = value;
        this.updateClosability();
    }
    /**
     * Updates the header's closability. If a stack/header is able
     * to close, but has a non closable component added to it, the stack is no
     * longer closable until all components are closable.
     * @internal
     */
    updateClosability() {
        let isClosable;
        if (!this._configClosable) {
            isClosable = false;
        }
        else {
            if (!this._rowColumnClosable) {
                isClosable = false;
            }
            else {
                isClosable = true;
                const len = this.tabs.length;
                for (let i = 0; i < len; i++) {
                    const tab = this._tabsContainer.tabs[i];
                    const item = tab.componentItem;
                    if (!item.isClosable) {
                        isClosable = false;
                        break;
                    }
                }
            }
        }
        if (this._closeButton !== null) {
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementDisplayVisibility)(this._closeButton.element, isClosable);
        }
        if (this._popoutButton !== null) {
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementDisplayVisibility)(this._popoutButton.element, isClosable);
        }
        this._canRemoveComponent = isClosable || this._tabsContainer.tabCount > 1;
    }
    /** @internal */
    applyFocusedValue(value) {
        if (value) {
            this._element.classList.add("lm_focused" /* Focused */);
        }
        else {
            this._element.classList.remove("lm_focused" /* Focused */);
        }
    }
    /** @internal */
    processMaximised() {
        if (this._maximiseButton === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HPMAX16997');
        }
        else {
            this._maximiseButton.element.setAttribute('title', this._minimiseLabel);
        }
    }
    /** @internal */
    processMinimised() {
        if (this._maximiseButton === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HPMIN16997');
        }
        else {
            this._maximiseButton.element.setAttribute('title', this._maximiseLabel);
        }
    }
    /**
     * Pushes the tabs to the tab dropdown if the available space is not sufficient
     * @internal
     */
    updateTabSizes() {
        if (this._updateRequested)
            return;
        this._updateRequested = window.requestAnimationFrame(() => {
            this._updateRequested = 0;
            if (this._tabsContainer.tabCount > 0) {
                /* We need explicit this._element.style.width
                * if the header is in an lm_header container.
                const headerHeight = this._show ? this._layoutManager.layoutConfig.dimensions.headerHeight : 0;
                if (this._leftRightSided) {
                    this._element.style.height = '';
                    this._element.style.width = `${headerHeight}px;
                } else {
                    this._element.style.width = '';
                    this._element.style.height = `${headerHeight}px`;
                }
                */
                this._tabsContainer.updateTabSizes(this, this._getActiveComponentItemEvent());
            }
        });
    }
    availableTabsSize() {
        const el = this._element;
        let avail = this._leftRightSided ? el.offsetHeight : el.offsetWidth;
        for (let ch = el.firstElementChild; ch; ch = ch.nextElementSibling) {
            if (ch !== this.tabsContainerElement && ch instanceof HTMLElement) {
                avail -= this._leftRightSided ? ch.offsetHeight : ch.offsetWidth;
            }
        }
        return avail;
    }
    /** @internal */
    handleTabInitiatedComponentRemoveEvent(componentItem) {
        if (this._canRemoveComponent) {
            if (this._componentRemoveEvent === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HHTCE22294');
            }
            else {
                this._componentRemoveEvent(componentItem);
            }
        }
    }
    /** @internal */
    handleTabInitiatedComponentFocusEvent(componentItem) {
        if (this._componentFocusEvent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HHTAE22294');
        }
        else {
            this._componentFocusEvent(componentItem);
        }
    }
    /** @internal */
    handleTabInitiatedDragStartEvent(x, y, dragListener, componentItem) {
        if (!this._canRemoveComponent) {
            dragListener.cancelDrag();
        }
        else {
            if (this._componentDragStartEvent === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HHTDSE22294');
            }
            else {
                this._componentDragStartEvent(x, y, dragListener, componentItem);
            }
        }
    }
    /** @internal */
    processTabDropdownActiveChanged() {
        if (this._tabDropdownButton !== undefined) {
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementDisplayVisibility)(this._tabDropdownButton.element, this._tabsContainer.dropdownActive);
        }
    }
    /** @internal */
    handleButtonPopoutEvent(ev) {
        if (this._layoutManager.popoutClickHandler(this.parent, ev))
            return;
        if (this._layoutManager.layoutConfig.settings.popoutWholeStack) {
            if (this._popoutEvent === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HHBPOE17834');
            }
            else {
                this._popoutEvent();
            }
        }
        else {
            const activeComponentItem = this._getActiveComponentItemEvent();
            if (activeComponentItem) {
                activeComponentItem.popout();
            }
            // else: if the stack is empty there won't be an active item (and nothing to popout)
        }
    }
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    handleButtonMaximiseToggleEvent(ev) {
        if (this._maximiseToggleEvent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HHBMTE16834');
        }
        else {
            this._maximiseToggleEvent();
        }
    }
    /**
     * Invoked when the header's background is clicked (not its tabs or controls)
     * @internal
     */
    onClick(event) {
        if (event.target === this._element) {
            this.notifyClick(event);
        }
    }
    /**
     * Invoked when the header's background is touched (not its tabs or controls)
     * @internal
     */
    onTouchStart(event) {
        if (event.target === this._element) {
            this.notifyTouchStart(event);
        }
    }
    /** @internal */
    notifyClick(ev) {
        if (this._clickEvent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HNHC46834');
        }
        else {
            this._clickEvent(ev);
        }
    }
    /** @internal */
    notifyTouchStart(ev) {
        if (this._touchStartEvent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('HNHTS46834');
        }
        else {
            this._touchStartEvent(ev);
        }
    }
}


/***/ }),

/***/ "./src/ts/controls/splitter.ts":
/*!*************************************!*\
  !*** ./src/ts/controls/splitter.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Splitter": () => (/* binding */ Splitter)
/* harmony export */ });
/* harmony import */ var _utils_drag_listener__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/drag-listener */ "./src/ts/utils/drag-listener.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");


/** @internal */
class Splitter {
    constructor(_isVertical, _size, grabSize) {
        this._isVertical = _isVertical;
        this._size = _size;
        this._grabSize = grabSize < this._size ? this._size : grabSize;
        this._element = document.createElement('div');
        this._element.classList.add("lm_splitter" /* Splitter */);
        this._backgroundElement = document.createElement('div');
        const dragHandleElement = document.createElement('div');
        this._dragHandleElement = dragHandleElement;
        dragHandleElement.classList.add("lm_drag_handle" /* DragHandle */);
        this._backgroundElement.classList.add("lm_bg" /* Bg */);
        this._element.setAttribute('draggable', 'true');
        const handleExcessSize = this._grabSize - this._size;
        const handleExcessPos = handleExcessSize / 2;
        this._dragHandleOffset = handleExcessPos;
        const padding = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(handleExcessPos);
        if (this._isVertical) {
            dragHandleElement.style.top = `${-handleExcessPos}px`;
            dragHandleElement.style.paddingTop = padding;
            dragHandleElement.style.paddingBottom = padding;
            dragHandleElement.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(this._size);
            this._backgroundElement.style.top = `${-handleExcessPos}px`;
            this._backgroundElement.style.height = `${this._grabSize}px`;
            this._element.classList.add("lm_vertical" /* Vertical */);
            this._element.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(this._size);
        }
        else {
            dragHandleElement.style.left = `${-handleExcessPos}px`;
            dragHandleElement.style.paddingLeft = padding;
            dragHandleElement.style.paddingRight = padding;
            dragHandleElement.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(this._size);
            this._backgroundElement.style.left = `${-handleExcessPos}px`;
            this._backgroundElement.style.width = `${this._grabSize}px`;
            this._element.classList.add("lm_horizontal" /* Horizontal */);
            this._element.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.numberToPixels)(this._size);
        }
        this._element.appendChild(this._backgroundElement);
        this._element.appendChild(dragHandleElement);
        this._dragListener = new _utils_drag_listener__WEBPACK_IMPORTED_MODULE_1__.DragListener(this._element);
    }
    get element() { return this._element; }
    get dragHandleElement() { return this._dragHandleElement; }
    get backgroundElement() { return this._backgroundElement; }
    get dragHandleOffset() { return this._dragHandleOffset; }
    destroy() {
        this._element.remove();
    }
    on(eventName, callback) {
        this._dragListener.on(eventName, callback);
    }
}


/***/ }),

/***/ "./src/ts/controls/tab.ts":
/*!********************************!*\
  !*** ./src/ts/controls/tab.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Tab": () => (/* binding */ Tab)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _items_stack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../items/stack */ "./src/ts/items/stack.ts");
/* harmony import */ var _utils_drag_listener__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/drag-listener */ "./src/ts/utils/drag-listener.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");




/**
 * Represents an individual tab within a Stack's header
 * @public
 */
class Tab {
    /** @internal */
    constructor(
    /** @internal */
    _layoutManager, 
    /** @internal */
    _componentItem, 
    /** @internal */
    _closeEvent, 
    /** @internal */
    _focusEvent, 
    /** @internal */
    _dragStartEvent) {
        var _a;
        this._layoutManager = _layoutManager;
        this._componentItem = _componentItem;
        this._closeEvent = _closeEvent;
        this._focusEvent = _focusEvent;
        this._dragStartEvent = _dragStartEvent;
        /** @internal */
        this._isActive = false;
        /** @internal */
        this._tabTouchStartListener = (ev) => this.onTabTouchStart(ev);
        /** @internal */
        this._closeClickListener = () => this.onCloseClick();
        /** @internal */
        this._closeTouchStartListener = () => this.onCloseTouchStart();
        // /** @internal */
        // private readonly _closeMouseDownListener = () => this.onCloseMousedown();
        /** @internal */
        this._dragStartListenerOld = (x, y) => this.onDragStartOld(x, y);
        /** @internal */
        this._dragStartListener = (e) => this.onDragStart(e);
        /** @internal */
        this._contentItemDestroyListener = () => this.onContentItemDestroy();
        /** @internal */
        this._tabTitleChangedListener = (title) => this.setTitle(title);
        this.tabClickListener = (ev) => this.onTabClickDown(ev);
        this._element = document.createElement('div');
        this._element.classList.add("lm_tab" /* Tab */);
        this._titleElement = document.createElement('span');
        this._titleElement.classList.add("lm_title" /* Title */);
        this._closeElement = document.createElement('div');
        this._closeElement.classList.add("lm_close_tab" /* CloseTab */);
        this._element.setAttribute('draggable', 'true');
        this._closeElement.setAttribute('draggable', 'false');
        this._element.appendChild(this._titleElement);
        this._element.appendChild(this._closeElement);
        if (_componentItem.isClosable) {
            this._closeElement.style.display = '';
        }
        else {
            this._closeElement.style.display = 'none';
        }
        this.setTitle(_componentItem.title);
        this._componentItem.on('titleChanged', this._tabTitleChangedListener);
        const reorderEnabled = (_a = _componentItem.reorderEnabled) !== null && _a !== void 0 ? _a : this._layoutManager.layoutConfig.settings.reorderEnabled;
        if (reorderEnabled) {
            this.enableReorder();
        }
        this._element.addEventListener('click', this.tabClickListener, { passive: true });
        //this._element.addEventListener('touchstart', this._tabTouchStartListener, { passive: true });
        if (this._componentItem.isClosable) {
            this._closeElement.addEventListener('click', this._closeClickListener, { passive: true });
            this._closeElement.addEventListener('touchstart', this._closeTouchStartListener, { passive: true });
            // this._closeElement.addEventListener('mousedown', this._closeMouseDownListener, { passive: true });
        }
        else {
            this._closeElement.remove();
            this._closeElement = undefined;
        }
        this._componentItem.setTab(this);
        this._layoutManager.emit('tabCreated', this);
    }
    get isActive() { return this._isActive; }
    // get header(): Header { return this._header; }
    get componentItem() { return this._componentItem; }
    /** @deprecated use {@link (Tab:class).componentItem} */
    get contentItem() { return this._componentItem; }
    get element() { return this._element; }
    get titleElement() { return this._titleElement; }
    get closeElement() { return this._closeElement; }
    get reorderEnabled() { return this._dragListener !== undefined; }
    set reorderEnabled(value) {
        if (value !== this.reorderEnabled) {
            if (value) {
                this.enableReorder();
            }
            else {
                this.disableReorder();
            }
        }
    }
    /**
     * Sets the tab's title to the provided string and sets
     * its title attribute to a pure text representation (without
     * html tags) of the same string.
     */
    setTitle(title) {
        this._element.title = title;
        const parent = this.componentItem.parent;
        if (parent instanceof _items_stack__WEBPACK_IMPORTED_MODULE_0__.Stack)
            parent.header.updateTabSizes();
    }
    /**
     * Sets this tab's active state. To programmatically
     * switch tabs, use Stack.setActiveComponentItem( item ) instead.
     */
    setActive(isActive) {
        if (isActive === this._isActive) {
            return;
        }
        this._isActive = isActive;
        if (isActive) {
            this._element.classList.add("lm_active" /* Active */);
        }
        else {
            this._element.classList.remove("lm_active" /* Active */);
        }
    }
    /**
     * Destroys the tab
     * @internal
     */
    destroy() {
        const action = (cancel) => {
            var _a, _b;
            if (cancel) {
                return;
            }
            this._closeEvent = undefined;
            this._focusEvent = undefined;
            this._dragStartEvent = undefined;
            this._element.removeEventListener('click', this.tabClickListener);
            this._element.removeEventListener('touchstart', this._tabTouchStartListener);
            (_a = this._closeElement) === null || _a === void 0 ? void 0 : _a.removeEventListener('click', this._closeClickListener);
            (_b = this._closeElement) === null || _b === void 0 ? void 0 : _b.removeEventListener('touchstart', this._closeTouchStartListener);
            // this._closeElement?.removeEventListener('mousedown', this._closeMouseDownListener);
            this._componentItem.off('titleChanged', this._tabTitleChangedListener);
            if (this.reorderEnabled) {
                this.disableReorder();
            }
        };
        const lm = this._layoutManager;
        if (lm.currentlyDragging()) {
            lm.deferIfDragging(action);
        }
        else {
            action(false);
        }
        lm.deferIfDragging((cancel) => {
            if (!cancel)
                this._element.remove();
        });
    }
    /** @internal */
    setBlurred() {
        this._element.classList.remove("lm_focused" /* Focused */);
        this._titleElement.classList.remove("lm_focused" /* Focused */);
    }
    /** @internal */
    setFocused() {
        this._element.classList.add("lm_focused" /* Focused */);
        this._titleElement.classList.add("lm_focused" /* Focused */);
    }
    /**
     * Old callback for the DragListener
     * @param x - The tabs absolute x position
     * @param y - The tabs absolute y position
     * @internal
     */
    onDragStartOld(x, y) {
        if (this._dragListener === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedUndefinedError('TODSDLU10093');
        }
        else {
            if (this._dragStartEvent === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedUndefinedError('TODS23309');
            }
            else {
                this._dragStartEvent(x, y, this._dragListener, this.componentItem);
            }
        }
    }
    onDragStart(e) {
        // See drag-listener#startDrag
        const tabElement = this._element;
        document.body.classList.add("lm_dragging" /* Dragging */);
        tabElement.classList.add("lm_dragging" /* Dragging */);
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.enableIFramePointerEvents)(false);
        // FIXME: set non-maximized
        this._layoutManager.startComponentDrag(e, this.componentItem);
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this._layoutManager.deferIfDragging((_cancel) => {
            document.body.classList.remove("lm_dragging" /* Dragging */);
            tabElement.classList.remove("lm_dragging" /* Dragging */);
        });
    }
    /** @internal */
    onContentItemDestroy() {
        if (this._dragListener !== undefined) {
            this._dragListener.destroy();
            this._dragListener = undefined;
        }
    }
    /**
     * Callback when the tab is clicked
     * @internal
     */
    onTabClickDown(event) {
        const target = event.target;
        // return if clicking child of tab unless inside an lm_title
        if (target !== this._element) {
            for (let p = target; !p.classList.contains("lm_title"); p = p.parentNode) {
                if (p == this._element || p == document.body)
                    return;
            }
        }
        // left mouse button
        if (event.button === 0) {
            // event.stopPropagation();
            this.notifyFocus();
            // middle mouse button
        }
        else if (event.button === 1 && this._componentItem.isClosable) {
            // event.stopPropagation();
            this.notifyClose();
        }
    }
    /** @internal */
    onTabTouchStart(event) {
        if (event.target === this._element) {
            this.notifyFocus();
        }
    }
    /**
     * Callback when the tab's close button is clicked
     * @internal
     */
    onCloseClick() {
        this.notifyClose();
        this._layoutManager.emit("tabClosed", this._componentItem);
    }
    /** @internal */
    onCloseTouchStart() {
        this.notifyClose();
        this._layoutManager.emit("tabClosed", this._componentItem);
    }
    /**
     * Callback to capture tab close button mousedown
     * to prevent tab from activating.
     * @internal
     */
    // private onCloseMousedown(): void {
    //     // event.stopPropagation();
    // }
    /** @internal */
    notifyClose() {
        if (this._closeEvent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedUndefinedError('TNC15007');
        }
        else {
            this._closeEvent(this._componentItem);
        }
    }
    /** @internal */
    notifyFocus() {
        if (this._focusEvent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedUndefinedError('TNA15007');
        }
        else {
            this._focusEvent(this._componentItem);
        }
    }
    /** @internal */
    enableReorder() {
        var _a;
        if (this._layoutManager.useNativeDragAndDrop()) {
            this._element.addEventListener('dragstart', this._dragStartListener, { passive: true });
        }
        else {
            this._dragListener = new _utils_drag_listener__WEBPACK_IMPORTED_MODULE_3__.DragListener(this._element);
            (_a = this._dragListener) === null || _a === void 0 ? void 0 : _a.on('dragStart', this._dragStartListenerOld);
        }
        this._componentItem.on('destroy', this._contentItemDestroyListener);
    }
    /** @internal */
    disableReorder() {
        if (this._layoutManager.useNativeDragAndDrop()) {
            this._element.removeEventListener('dragstart', this._dragStartListener);
        }
        else if (this._dragListener === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedUndefinedError('TDR87745');
        }
        else {
            this._componentItem.off('destroy', this._contentItemDestroyListener);
            this._dragListener.off('dragStart', this._dragStartListenerOld);
            this._dragListener = undefined;
        }
    }
}
/** @public */
(function (Tab) {
    let RenderFlags;
    (function (RenderFlags) {
        RenderFlags[RenderFlags["DropdownActive"] = 1] = "DropdownActive";
        RenderFlags[RenderFlags["InDropdownMenu"] = 2] = "InDropdownMenu";
        RenderFlags[RenderFlags["IsActiveTab"] = 4] = "IsActiveTab";
    })(RenderFlags = Tab.RenderFlags || (Tab.RenderFlags = {}));
})(Tab || (Tab = {}));


/***/ }),

/***/ "./src/ts/controls/tabs-container.ts":
/*!*******************************************!*\
  !*** ./src/ts/controls/tabs-container.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TabsContainer": () => (/* binding */ TabsContainer)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _tab__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tab */ "./src/ts/controls/tab.ts");



/** @internal */
class TabsContainer {
    constructor(_layoutManager, _componentRemoveEvent, _componentFocusEvent, _componentDragStartEvent, _dropdownActiveChangedEvent) {
        this._layoutManager = _layoutManager;
        this._componentRemoveEvent = _componentRemoveEvent;
        this._componentFocusEvent = _componentFocusEvent;
        this._componentDragStartEvent = _componentDragStartEvent;
        this._dropdownActiveChangedEvent = _dropdownActiveChangedEvent;
        // There is one tab per ComponentItem in stack.  However they may not be ordered the same
        this._tabs = [];
        this._lastVisibleTabIndex = -1;
        this._dropdownActive = false;
        this._element = document.createElement('section');
        this._element.classList.add("lm_tabs" /* Tabs */);
        this._dropdownElement = document.createElement('section');
        this._dropdownElement.classList.add("lm_tabdropdown_list" /* TabDropdownList */);
        this._dropdownElement.style.display = 'none';
    }
    get tabs() { return this._tabs; }
    get tabCount() { return this._tabs.length; }
    get lastVisibleTabIndex() { return this._lastVisibleTabIndex; }
    get element() { return this._element; }
    get dropdownElement() { return this._dropdownElement; }
    get dropdownActive() { return this._dropdownActive; }
    destroy() {
        for (let i = 0; i < this._tabs.length; i++) {
            this._tabs[i].destroy();
        }
    }
    /**
     * Creates a new tab and associates it with a contentItem
     * @param index - The position of the tab
     */
    createTab(componentItem, index) {
        //If there's already a tab relating to the
        //content item, don't do anything
        for (let i = 0; i < this._tabs.length; i++) {
            if (this._tabs[i].componentItem === componentItem) {
                return;
            }
        }
        const tab = new _tab__WEBPACK_IMPORTED_MODULE_0__.Tab(this._layoutManager, componentItem, (item) => this.handleTabCloseEvent(item), (item) => this.handleTabFocusEvent(item), (x, y, dragListener, item) => this.handleTabDragStartEvent(x, y, dragListener, item));
        if (index === undefined) {
            index = this._tabs.length;
        }
        this.markAsSingle(this._tabs.length == 0);
        this._tabs.splice(index, 0, tab);
        if (index < this._element.childNodes.length) {
            this._element.insertBefore(tab.element, this._element.childNodes[index]);
        }
        else {
            this._element.appendChild(tab.element);
        }
    }
    /** @internal */
    markAsSingle(is_single) {
        var _a, _b;
        const stackNode = (_b = (_a = this.element) === null || _a === void 0 ? void 0 : _a.parentNode) === null || _b === void 0 ? void 0 : _b.parentNode;
        if (is_single) {
            stackNode.classList.add("lm_single");
        }
        else {
            stackNode.classList.remove("lm_single");
        }
    }
    removeTab(componentItem) {
        // componentItem cannot be ActiveComponentItem
        for (let i = 0; i < this._tabs.length; i++) {
            if (this._tabs[i].componentItem === componentItem) {
                const tab = this._tabs[i];
                tab.destroy();
                this._layoutManager.deferIfDragging((cancel) => {
                    if (!cancel) {
                        this._tabs.splice(i, 1);
                        if (this._tabs.length <= 1)
                            this.markAsSingle(true);
                        if (i <= this._lastVisibleTabIndex)
                            --this._lastVisibleTabIndex;
                    }
                });
                return;
            }
        }
        throw new Error('contentItem is not controlled by this header');
    }
    processActiveComponentChanged(newActiveComponentItem) {
        let activeIndex = -1;
        for (let i = 0; i < this._tabs.length; i++) {
            const isActive = this._tabs[i].componentItem === newActiveComponentItem;
            this._tabs[i].setActive(isActive);
            if (isActive) {
                activeIndex = i;
            }
        }
        if (activeIndex < 0) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.AssertError('HSACI56632');
        }
        else {
            if (this._layoutManager.layoutConfig.settings.reorderOnTabMenuClick) {
                /**
                 * If the tab selected was in the dropdown, move everything down one to make way for this one to be the first.
                 * This will make sure the most used tabs stay visible.
                 */
                if (this._lastVisibleTabIndex !== -1 && activeIndex > this._lastVisibleTabIndex) {
                    const activeTab = this._tabs[activeIndex];
                    for (let j = activeIndex; j > 0; j--) {
                        this._tabs[j] = this._tabs[j - 1];
                    }
                    this._tabs[0] = activeTab;
                    // updateTabSizes will always be called after this and it will reposition tab elements
                }
            }
        }
    }
    /**
     * Pushes the tabs to the tab dropdown if the available space is not sufficient
     */
    updateTabSizes(header, activeComponentItem) {
        let dropDownActive = false;
        const success = this.tryUpdateTabSizes(dropDownActive, header, activeComponentItem);
        if (!success) {
            dropDownActive = true;
            // this will always succeed
            this.tryUpdateTabSizes(dropDownActive, header, activeComponentItem);
        }
        if (dropDownActive !== this._dropdownActive) {
            this._dropdownActive = dropDownActive;
            this._dropdownActiveChangedEvent();
        }
    }
    tryUpdateTabSizes(dropdownActive, header, activeComponentItem) {
        const headerNode = this.element.parentNode;
        headerNode.classList.remove("lm_tight_mode");
        let availableWidth = header.availableTabsSize();
        this.element.style.width = ''; //numberToPixels(availableWidth);
        if (this._tabs.length > 0) {
            if (activeComponentItem === undefined) {
                throw new Error('non-empty tabs must have active component item');
            }
            let cumulativeTabWidth = 0;
            const tabOverlapAllowance = this._layoutManager.layoutConfig.settings.tabOverlapAllowance || (dropdownActive ? 6 : 0);
            const activeIndex = this._tabs.indexOf(activeComponentItem.tab);
            const activeTab = this._tabs[activeIndex];
            while (dropdownActive && this._dropdownElement.firstChild) {
                this._dropdownElement.removeChild(this._dropdownElement.firstChild);
            }
            const tabMarginRightPixels = getComputedStyle(activeTab.element).marginRight;
            const tabMarginRight = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.pixelsToNumber)(tabMarginRightPixels);
            let tabAvail, activeTabAvail;
            const numTabs = this._tabs.length;
            if (!dropdownActive || numTabs <= 1) {
                tabAvail = availableWidth - tabMarginRight;
                activeTabAvail = tabAvail;
            }
            else {
                // the active tab gets a double share of the available width.
                tabAvail = (availableWidth - numTabs * tabMarginRight)
                    / (numTabs + 1);
                activeTabAvail = 2 * tabAvail;
            }
            let tight_mode = false;
            this._lastVisibleTabIndex = numTabs - 1;
            for (let i = 0; i < numTabs; i++) {
                const tab = this._tabs[i];
                const tabElement = tab.element;
                const isActiveTab = activeIndex === i;
                tabElement.style.marginLeft = '';
                tabElement.style.zIndex = '';
                const component = tab.componentItem;
                const renderer = (container, el, width, flags) => {
                    if (component.titleRenderer) {
                        component.titleRenderer(container, el, width, flags);
                    }
                    else {
                        while (el.lastChild) {
                            el.removeChild(el.lastChild);
                        }
                        el.appendChild(document.createTextNode(component.title));
                    }
                };
                //Put the tab in the tabContainer so its true width can be checked
                if (tabElement.parentElement !== this._element) {
                    this._element.appendChild(tabElement);
                }
                renderer(component.container, tab.titleElement, isActiveTab ? activeTabAvail : tabAvail, (isActiveTab ? _tab__WEBPACK_IMPORTED_MODULE_0__.Tab.RenderFlags.IsActiveTab : 0) |
                    (dropdownActive ? _tab__WEBPACK_IMPORTED_MODULE_0__.Tab.RenderFlags.DropdownActive : 0));
                cumulativeTabWidth = tabElement.offsetLeft - this._element.offsetLeft + tabElement.offsetWidth + tabMarginRight;
                if (dropdownActive) {
                    const el = document.createElement('span');
                    el.classList.add("lm_title" /* Title */);
                    const w = availableWidth * 0.9;
                    renderer(component.container, el, w, (isActiveTab ? _tab__WEBPACK_IMPORTED_MODULE_0__.Tab.RenderFlags.IsActiveTab : 0) |
                        _tab__WEBPACK_IMPORTED_MODULE_0__.Tab.RenderFlags.DropdownActive |
                        _tab__WEBPACK_IMPORTED_MODULE_0__.Tab.RenderFlags.InDropdownMenu);
                    this._dropdownElement.appendChild(el);
                    el === null || el === void 0 ? void 0 : el.addEventListener('click', tab.tabClickListener, { passive: true });
                }
                if (cumulativeTabWidth > availableWidth && numTabs > 1
                    && !tight_mode) {
                    tight_mode = true;
                    headerNode.classList.add("lm_tight_mode");
                    // If tight-mode makes the controls (header buttons)
                    // take less space, we should have more available space.
                    availableWidth = header.availableTabsSize();
                    this.element.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.numberToPixels)(availableWidth);
                    cumulativeTabWidth = tabElement.offsetLeft - this._element.offsetLeft + tabElement.offsetWidth + tabMarginRight;
                }
            }
            if (cumulativeTabWidth > availableWidth) {
                if (numTabs <= 1) {
                    return false;
                }
                let overlap = (cumulativeTabWidth - availableWidth)
                    / (numTabs - 1);
                //Check overlap against allowance.
                if (overlap >= tabOverlapAllowance) {
                    if (!dropdownActive) {
                        //We now know the tab menu must be shown, so we have to recalculate everything.
                        return false;
                    }
                    overlap = tabOverlapAllowance;
                }
                for (let j = 0; j < numTabs; j++) {
                    const marginLeft = j === 0 ? ''
                        : '-' + (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.numberToPixels)(overlap);
                    this._tabs[j].element.style.zIndex =
                        '' + ((j <= activeIndex ? j - activeIndex
                            : activeIndex - j) + numTabs);
                    this._tabs[j].element.style.marginLeft = marginLeft;
                }
                const activeElement = activeTab.element;
                if (activeElement.offsetLeft + activeElement.clientWidth
                    > availableWidth) {
                    if (!dropdownActive)
                        return false;
                    if (activeIndex > 0) {
                        // If active tab isn't fully visible, shift it and
                        // earlier elements left as needed (and possible)
                        const maxPrior = Math.max((availableWidth - activeElement.clientWidth) / activeIndex, 0);
                        for (let j = 1; j <= activeIndex; j++) {
                            const rightExcess = this._tabs[j].element.offsetLeft - j * maxPrior;
                            if (rightExcess > 0) {
                                this._tabs[j].element.style.marginLeft = '-' + (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.numberToPixels)(overlap + rightExcess);
                            }
                        }
                    }
                }
                this._lastVisibleTabIndex = activeIndex;
                for (let j = activeIndex + 1; j < numTabs; j++) {
                    const tabElement = this._tabs[j].element;
                    if (tabElement.offsetLeft + tabElement.offsetWidth
                        > availableWidth + tabOverlapAllowance)
                        break;
                    this._lastVisibleTabIndex = j;
                }
            }
        }
        return true;
    }
    /**
     * Shows drop down for additional tabs when there are too many to display.
     */
    showAdditionalTabsDropdown() {
        this._dropdownElement.style.display = '';
    }
    /**
     * Hides drop down for additional tabs when there are too many to display.
     */
    hideAdditionalTabsDropdown() {
        this._dropdownElement.style.display = 'none';
    }
    handleTabCloseEvent(componentItem) {
        this._componentRemoveEvent(componentItem);
    }
    handleTabFocusEvent(componentItem) {
        this._componentFocusEvent(componentItem);
    }
    handleTabDragStartEvent(x, y, dragListener, componentItem) {
        this._componentDragStartEvent(x, y, dragListener, componentItem);
    }
}


/***/ }),

/***/ "./src/ts/errors/external-error.ts":
/*!*****************************************!*\
  !*** ./src/ts/errors/external-error.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApiError": () => (/* binding */ ApiError),
/* harmony export */   "BindError": () => (/* binding */ BindError),
/* harmony export */   "ConfigurationError": () => (/* binding */ ConfigurationError),
/* harmony export */   "ExternalError": () => (/* binding */ ExternalError),
/* harmony export */   "PopoutBlockedError": () => (/* binding */ PopoutBlockedError)
/* harmony export */ });
/** @public */
class ExternalError extends Error {
    /** @internal */
    constructor(type, message) {
        super(message);
        this.type = type;
    }
}
/** @public */
class ConfigurationError extends ExternalError {
    /** @internal */
    constructor(message, node) {
        super('Configuration', message);
        this.node = node;
    }
}
/** @public */
class PopoutBlockedError extends ExternalError {
    /** @internal */
    constructor(message) {
        super('PopoutBlocked', message);
    }
}
/** @public */
class ApiError extends ExternalError {
    /** @internal */
    constructor(message) {
        super('API', message);
    }
}
/** @public */
class BindError extends ExternalError {
    /** @internal */
    constructor(message) {
        super('Bind', message);
    }
}


/***/ }),

/***/ "./src/ts/errors/internal-error.ts":
/*!*****************************************!*\
  !*** ./src/ts/errors/internal-error.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AssertError": () => (/* binding */ AssertError),
/* harmony export */   "UnexpectedNullError": () => (/* binding */ UnexpectedNullError),
/* harmony export */   "UnexpectedUndefinedError": () => (/* binding */ UnexpectedUndefinedError),
/* harmony export */   "UnreachableCaseError": () => (/* binding */ UnreachableCaseError)
/* harmony export */ });
/** @internal */
class InternalError extends Error {
    constructor(type, code, message) {
        super(`${type}: ${code}${message === undefined ? '' : ': ' + message}`);
    }
}
/** @internal */
class AssertError extends InternalError {
    constructor(code, message) {
        super('Assert', code, message);
    }
}
/** @internal */
class UnreachableCaseError extends InternalError {
    constructor(code, variableValue, message) {
        super('UnreachableCase', code, `${variableValue}${message === undefined ? '' : ': ' + message}`);
    }
}
/** @internal */
class UnexpectedNullError extends InternalError {
    constructor(code, message) {
        super('UnexpectedNull', code, message);
    }
}
/** @internal */
class UnexpectedUndefinedError extends InternalError {
    constructor(code, message) {
        super('UnexpectedUndefined', code, message);
    }
}


/***/ }),

/***/ "./src/ts/golden-layout.ts":
/*!*********************************!*\
  !*** ./src/ts/golden-layout.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GoldenLayout": () => (/* binding */ GoldenLayout)
/* harmony export */ });
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _errors_external_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors/external-error */ "./src/ts/errors/external-error.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/i18n-strings */ "./src/ts/utils/i18n-strings.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _virtual_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./virtual-layout */ "./src/ts/virtual-layout.ts");






/** @public */
class GoldenLayout extends _virtual_layout__WEBPACK_IMPORTED_MODULE_0__.VirtualLayout {
    /** @internal */
    constructor(configOrOptionalContainer, containerOrBindComponentEventHandler, unbindComponentEventHandler) {
        super(configOrOptionalContainer, containerOrBindComponentEventHandler, unbindComponentEventHandler, true);
        /** @internal */
        this._componentTypesMap = new Map();
        /** @internal */
        this._registeredComponentMap = new Map();
        /** @internal */
        this._virtuableComponentMap = new Map(); // FIXME remove
        /** @internal */
        this._containerVirtualVisibilityChangeRequiredEventListener = (container, visible) => this.handleContainerVirtualVisibilityChangeRequiredEvent(container, visible);
        /** @internal */
        this._containerVirtualZIndexChangeRequiredEventListener = (container, logicalZIndex, defaultZIndex) => this.handleContainerVirtualZIndexChangeRequiredEvent(container, logicalZIndex, defaultZIndex);
        // we told VirtualLayout to not call init() (skipInit set to true) so that Golden Layout can initialise its properties before init is called
        if (!this.deprecatedConstructor) {
            this.init();
        }
    }
    //  REMOVE   registerComponentFactoryFunction(typeName: string, componentFactoryFunction: GoldenLayout.ComponentFactoryFunction, virtual = false): void {
    /**
     * Register a new component with the layout manager.
     */
    registerComponent(typeName, componentFactoryFunction) {
        if (typeof componentFactoryFunction !== 'function') {
            throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.BindError('Please register a constructor function');
        }
        const existingComponentType = this._componentTypesMap.get(typeName);
        if (existingComponentType !== undefined) {
            throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.BindError(`${_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.i18nStrings[3]}: ${typeName}`);
        }
        this._componentTypesMap.set(typeName, componentFactoryFunction);
    }
    registerComponentDefault(componentFactoryFunction) {
        if (typeof componentFactoryFunction !== 'function') {
            throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.BindError('Please register a constructor function');
        }
        if (this._componentTypesDefault !== undefined) {
            throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.BindError(`${_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.i18nStrings[3]} - default`);
        }
        this._componentTypesDefault = componentFactoryFunction;
    }
    getRegisteredComponentTypeNames() {
        const typeNamesIterableIterator = this._componentTypesMap.keys();
        return Array.from(typeNamesIterableIterator);
    }
    /**
     * Returns a previously registered component instantiator.  Attempts to utilize registered
     * component type by first, then falls back to the component constructor callback function (if registered).
     * If neither gets an instantiator, then returns `undefined`.
     * Note that `undefined` will return if config.componentType is not a string
     *
     * @param config - The item config
     * @public
     */
    getComponentInstantiator(config) {
        let instantiator;
        const typeName = _config_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedComponentItemConfig.resolveComponentTypeName(config);
        if (typeName !== undefined) {
            instantiator = this._componentTypesMap.get(typeName);
        }
        return instantiator || this._componentTypesDefault;
    }
    /** @internal */
    bindComponent(container, itemConfig) {
        const factoryFunction = this.getComponentInstantiator(itemConfig);
        let result = undefined;
        if (factoryFunction !== undefined) {
            // handle case where component is obtained by name or component constructor callback
            let componentState;
            if (itemConfig.componentState === undefined) {
                componentState = undefined;
            }
            else {
                // make copy
                componentState = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.deepExtendValue)({}, itemConfig.componentState);
            }
            if (factoryFunction !== undefined) {
                result = factoryFunction(container, componentState);
            }
            /*
            if (virtual) {
                if (component === undefined) {
                    throw new UnexpectedUndefinedError('GLBCVCU988774');
                } else {
                    const virtuableComponent = component as GoldenLayout.VirtuableComponent;
                    const componentRootElement = virtuableComponent.rootHtmlElement;
                    if (componentRootElement === undefined) {
                        throw new BindError(`${i18nStrings[I18nStringId.VirtualComponentDoesNotHaveRootHtmlElement]}: ${typeName}`);
                    } else {
                        ensureElementPositionAbsolute(componentRootElement);
                        this.container.appendChild(componentRootElement);
                        this._virtuableComponentMap.set(container, virtuableComponent);
                        container.virtualVisibilityChangeRequiredEvent = this._containerVirtualVisibilityChangeRequiredEventListener;
                        container.virtualZIndexChangeRequiredEvent = this._containerVirtualZIndexChangeRequiredEventListener;
                    }
                }
            }

            this._registeredComponentMap.set(container, component);

            result = {
                virtual: instantiator.virtual,
                component,
                };
            */
        }
        else {
            //result = super.bindComponent(container, itemConfig);
        }
        return result;
    }
    /** @internal */
    unbindComponent(container, handle) {
        /*
        const registeredComponent = this._registeredComponentMap.get(container);
        if (registeredComponent === undefined) {
            super.unbindComponent(container, handle); // was not created from registration so use virtual unbind events
        } else {
            const virtuableComponent = this._virtuableComponentMap.get(container);
            if (virtuableComponent !== undefined) {
                const componentRootElement = virtuableComponent.rootHtmlElement;
                if (componentRootElement === undefined) {
                    throw new AssertError('GLUC77743', container.title);
                } else {
                    this.container.removeChild(componentRootElement);
                    this._virtuableComponentMap.delete(container);
                }
            }
        }
        */
    }
    /** @internal */
    handleContainerVirtualVisibilityChangeRequiredEvent(container, visible) {
        const virtuableComponent = this._virtuableComponentMap.get(container);
        if (virtuableComponent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('GLHCVVCRE55934');
        }
        else {
            const rootElement = virtuableComponent.rootHtmlElement;
            if (rootElement === undefined) {
                throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.BindError(_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.i18nStrings[4] + ' ' + container.title);
            }
            else {
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementDisplayVisibility)(rootElement, visible);
            }
        }
    }
    /** @internal */
    handleContainerVirtualZIndexChangeRequiredEvent(container, logicalZIndex, defaultZIndex) {
        const virtuableComponent = this._virtuableComponentMap.get(container);
        if (virtuableComponent === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_5__.UnexpectedUndefinedError('GLHCVZICRE55935');
        }
        else {
            const rootElement = virtuableComponent.rootHtmlElement;
            if (rootElement === undefined) {
                throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_1__.BindError(_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.i18nStrings[4] + ' ' + container.title);
            }
            else {
                rootElement.style.zIndex = defaultZIndex;
            }
        }
    }
}


/***/ }),

/***/ "./src/ts/items/component-item.ts":
/*!****************************************!*\
  !*** ./src/ts/items/component-item.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentItem": () => (/* binding */ ComponentItem)
/* harmony export */ });
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _container_component_container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../container/component-container */ "./src/ts/container/component-container.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _content_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./content-item */ "./src/ts/items/content-item.ts");
/* harmony import */ var _stack__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./stack */ "./src/ts/items/stack.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");







/** @public */
class ComponentItem extends _content_item__WEBPACK_IMPORTED_MODULE_0__.ContentItem {
    /** @internal */
    constructor(layoutManager, config, 
    /** @internal */
    _parentItem) {
        super(layoutManager, config, _parentItem, _content_item__WEBPACK_IMPORTED_MODULE_0__.ContentItem.createElement());
        this._parentItem = _parentItem;
        /** @internal */
        this._focused = false;
        this.isComponent = true;
        this._reorderEnabled = config.reorderEnabled;
        this.applyUpdatableConfig(config);
        this._initialWantMaximise = config.maximised;
        this._container = new _container_component_container__WEBPACK_IMPORTED_MODULE_1__.ComponentContainer(config, this, layoutManager, (itemConfig) => this.handleUpdateItemConfigEvent(itemConfig), () => this.show(), () => this.hide(), (suppressEvent) => this.focus(suppressEvent), (suppressEvent) => this.blur(suppressEvent));
    }
    /** @internal @deprecated use {@link (ComponentItem:class).componentType} */
    get componentName() { return this._container.componentType; }
    get componentType() { return this._container.componentType; }
    get reorderEnabled() { return this._reorderEnabled; }
    /** @internal */
    get initialWantMaximise() { return this._initialWantMaximise; }
    get container() { return this._container; }
    get parentItem() { return this._parentItem; }
    get headerConfig() { return this._headerConfig; }
    get title() { return this._title; }
    get titleRenderer() { return this._titleRenderer; }
    get tab() { return this._tab; }
    get focused() { return this._focused; }
    /** @internal */
    destroy() {
        const element = this.element;
        if (element)
            element.style.opacity = '0.1';
        const wasDragging = this.layoutManager.currentlyDragging();
        this.layoutManager.deferIfDragging((cancel) => {
            if (element)
                element.style.opacity = '';
            if (!cancel && !wasDragging) {
                this._container.destroy();
                super.destroy();
            }
        });
    }
    applyUpdatableConfig(config) {
        this.setTitle(config.title);
        this._headerConfig = config.header;
    }
    toConfig() {
        const stateRequestEvent = this._container.stateRequestEvent;
        const state = stateRequestEvent === undefined ? this._container.state : stateRequestEvent();
        const result = {
            type: _utils_types__WEBPACK_IMPORTED_MODULE_2__.ItemType.component,
            content: [],
            size: this.size,
            sizeUnit: this.sizeUnit,
            minSize: this.minSize,
            minSizeUnit: this.minSizeUnit,
            id: this.id,
            maximised: false,
            isClosable: this.isClosable,
            reorderEnabled: this._reorderEnabled,
            title: this._title,
            header: _config_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedHeaderedItemConfig.Header.createCopy(this._headerConfig),
            componentType: _config_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedComponentItemConfig.copyComponentType(this.componentType),
            componentState: state,
        };
        return result;
    }
    close() {
        if (this.parent === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_4__.UnexpectedNullError('CIC68883');
        }
        else {
            this.parent.removeChild(this, false);
        }
    }
    // Used by Drag Proxy
    /** @internal */
    enterDragMode(width, height) {
        const style = this.element.style;
        style.height = `${height}px`;
        style.width = `${width}px`;
        this._container.enterDragMode(width, height);
    }
    /** @internal */
    exitDragMode() {
        const style = this.element.style;
        style.height = '';
        style.width = '';
        this._container.exitDragMode();
    }
    /** @internal */
    enterStackMaximised() {
        this._container.enterStackMaximised();
    }
    /** @internal */
    exitStackMaximised() {
        this._container.exitStackMaximised();
    }
    // Used by Drag Proxy
    /** @internal */
    drag() {
        this._container.drag();
    }
    /** @internal */
    init() {
        this.updateNodeSize();
        super.init();
        this._container.emit('open');
        this.initContentItems();
    }
    /**
     * Set this component's title
     *
     * @public
     * @param title -
     */
    setTitle(title) {
        this._title = title;
        this.emit('titleChanged', title);
        this.emit('stateChanged');
    }
    setTitleRenderer(renderer) {
        this._titleRenderer = renderer;
        this.emit('titleChanged', this._title);
        this.emit('stateChanged');
    }
    setTab(tab) {
        this._tab = tab;
        this.emit('tab', tab);
        this._container.setTab(tab);
    }
    /** @internal */
    hide() {
        this._container.setVisibility(false);
    }
    /** @internal */
    show() {
        this._container.setVisibility(true);
    }
    /**
     * Focuses the item if it is not already focused
     */
    focus(suppressEvent = false) {
        this.parentItem.setActiveComponentItem(this, true, suppressEvent);
    }
    /** @internal */
    setFocused(suppressEvent) {
        this._focused = true;
        this.tab.setFocused();
        if (!suppressEvent) {
            this.emitBaseBubblingEvent('focus');
        }
    }
    /**
     * Blurs (defocuses) the item if it is focused
     */
    blur(suppressEvent = false) {
        if (this._focused) {
            this.layoutManager.setFocusedComponentItem(undefined, suppressEvent);
        }
    }
    /** @internal */
    setBlurred(suppressEvent) {
        this._focused = false;
        this.tab.setBlurred();
        if (!suppressEvent) {
            this.emitBaseBubblingEvent('blur');
        }
    }
    /** @internal */
    setParent(parent) {
        this._parentItem = parent;
        super.setParent(parent);
    }
    /** @internal */
    handleUpdateItemConfigEvent(itemConfig) {
        this.applyUpdatableConfig(itemConfig);
    }
    /** @internal */
    updateNodeSize() {
        // OLD:  this._container.setSizeToNodeSize(width, height, force)
        const contentInset = this.layoutManager.layoutConfig.dimensions.contentInset;
        this.element.style.margin = contentInset ? `${contentInset}px` : '';
        const contentElement = this.container.contentElement;
        const componentElement = this.container.element;
        if (contentElement instanceof HTMLElement
            // && contentElement.style.display !== 'none'
            && this.parentItem instanceof _stack__WEBPACK_IMPORTED_MODULE_5__.Stack) {
            // Do not update size of hidden components to prevent unwanted reflows
            const stackElement = this.parentItem.element;
            let stackBounds;
            const itemElement = this.element;
            const itemBounds = itemElement.getBoundingClientRect();
            const layoutBounds = this.layoutManager.container.getBoundingClientRect();
            if (componentElement instanceof HTMLElement
                && contentElement !== componentElement) {
                stackBounds = stackElement.getBoundingClientRect();
                componentElement.style.top = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_6__.numberToPixels)(stackBounds.top - layoutBounds.top);
                componentElement.style.left = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_6__.numberToPixels)(stackBounds.left - layoutBounds.left);
                componentElement.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_6__.numberToPixels)(stackBounds.width);
                componentElement.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_6__.numberToPixels)(stackBounds.height);
            }
            else {
                stackBounds = layoutBounds;
            }
            contentElement.style.position = "absolute";
            contentElement.style.top = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_6__.numberToPixels)(itemBounds.top - stackBounds.top);
            contentElement.style.left = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_6__.numberToPixels)(itemBounds.left - stackBounds.left);
            contentElement.style.width = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_6__.numberToPixels)(itemBounds.width);
            contentElement.style.height = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_6__.numberToPixels)(itemBounds.height);
        }
        else
            console.log('updateNodeSize ignored');
        this.layoutManager.addVirtualSizedContainer(this.container);
    }
}


/***/ }),

/***/ "./src/ts/items/component-parentable-item.ts":
/*!***************************************************!*\
  !*** ./src/ts/items/component-parentable-item.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ComponentParentableItem": () => (/* binding */ ComponentParentableItem)
/* harmony export */ });
/* harmony import */ var _content_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./content-item */ "./src/ts/items/content-item.ts");

class ComponentParentableItem extends _content_item__WEBPACK_IMPORTED_MODULE_0__.ContentItem {
    constructor() {
        super(...arguments);
        /** @internal */
        this._focused = false;
    }
    get focused() { return this._focused; }
    /** @internal */
    setFocusedValue(value) {
        this._focused = value;
    }
}


/***/ }),

/***/ "./src/ts/items/content-item.ts":
/*!**************************************!*\
  !*** ./src/ts/items/content-item.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ContentItem": () => (/* binding */ ContentItem)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");



/**
 * This is the baseclass that all content items inherit from.
 * Most methods provide a subset of what the sub-classes do.
 *
 * It also provides a number of functions for tree traversal
 * @public
 */
class ContentItem extends _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /** @internal */
    constructor(layoutManager, config, 
    /** @internal */
    _parent, 
    /** @internal */
    _element) {
        super();
        this.layoutManager = layoutManager;
        this._parent = _parent;
        this._element = _element;
        /** @internal */
        this._popInParentIds = [];
        this.ignoring = false;
        this.ignoringChild = false;
        this._type = config.type;
        this._id = config.id;
        this._isInitialised = false;
        this.isGround = false;
        this.isRow = false;
        this.isColumn = false;
        this.isStack = false;
        this.isComponent = false;
        this.size = config.size;
        this.sizeUnit = config.sizeUnit;
        this.minSize = config.minSize;
        this.minSizeUnit = config.minSizeUnit;
        this._isClosable = config.isClosable;
        this._pendingEventPropagations = {};
        this._throttledEvents = ['stateChanged'];
        this._contentItems = this.createContentItems(config.content);
    }
    get type() { return this._type; }
    get id() { return this._id; }
    set id(value) { this._id = value; }
    /** @internal */
    get popInParentIds() { return this._popInParentIds; }
    get parent() { return this._parent; }
    get contentItems() { return this._contentItems; }
    get isClosable() { return this._isClosable; }
    get element() { return this._element; }
    get isInitialised() { return this._isInitialised; }
    static isStack(item) {
        return item.isStack;
    }
    static isComponentItem(item) {
        return item.isComponent;
    }
    static isComponentParentableItem(item) {
        return item.isStack || item.isGround;
    }
    /**
     * Updaters the size of the component and its children, called recursively
     * Called whenever the dimensions of this item or one of its parents change
     * @internal
     */
    updateSize() {
        this.layoutManager.beginVirtualSizedContainerAdding();
        try {
            this.updateNodeSize();
            this.updateContentItemsSize();
        }
        finally {
            this.layoutManager.endVirtualSizedContainerAdding();
        }
    }
    /**
     * Removes a child node (and its children) from the tree
     * @param contentItem - The child item to remove
     * @param keepChild - Whether to destroy the removed item
     */
    removeChild(contentItem, keepChild = false) {
        /*
         * Get the position of the item that's to be removed within all content items this node contains
         */
        const index = this._contentItems.indexOf(contentItem);
        /*
         * Make sure the content item to be removed is actually a child of this item
         */
        if (index === -1) {
            throw new Error('Can\'t remove child item. Unknown content item');
        }
        /**
     * Call destroy on the content item.
     * All children are destroyed as well
     */
        if (!keepChild) {
            this._contentItems[index].destroy();
        }
        /**
         * Remove the content item from this nodes array of children
         */
        this.layoutManager.deferIfDragging((cancel) => {
            this.ignoringChild = false;
            contentItem.ignoring = false;
            if (!cancel) {
                this._contentItems.splice(index, 1);
            }
        });
        /**
         * If this node still contains other content items, adjust their size
         */
        if (this._contentItems.length > (this.layoutManager.currentlyDragging() ? 1 : 0)) {
            this.updateSize();
        }
        else {
            /**
             * If this was the last content item, remove this node as well
             */
            if (!this.isGround && this._isClosable === true) {
                if (this._parent === null) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('CIUC00874');
                }
                else {
                    this._parent.removeChild(this, keepChild);
                }
            }
        }
    }
    /**
     * Sets up the tree structure for the newly added child
     * The responsibility for the actual DOM manipulations lies
     * with the concrete item
     *
     * @param contentItem -
     * @param index - If omitted item will be appended
     * @param suspendResize - Used by descendent implementations
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    addChild(contentItem, index, suspendResize) {
        index !== null && index !== void 0 ? index : (index = this._contentItems.length);
        this._contentItems.splice(index, 0, contentItem);
        contentItem.setParent(this);
        if (this._isInitialised === true && contentItem._isInitialised === false) {
            contentItem.init();
        }
        return index;
    }
    /**
     * Replaces oldChild with newChild
     * @param oldChild -
     * @param newChild -
     * @internal
     */
    replaceChild(oldChild, newChild, destroyOldChild = false) {
        // Do not try to replace ComponentItem - will not work
        const index = this._contentItems.indexOf(oldChild);
        const parentNode = oldChild._element.parentNode;
        if (index === -1) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.AssertError('CIRCI23232', 'Can\'t replace child. oldChild is not child of this');
        }
        if (parentNode === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('CIRCP23232');
        }
        else {
            parentNode.replaceChild(newChild._element, oldChild._element);
            /*
            * Optionally destroy the old content item
            */
            if (destroyOldChild === true) {
                oldChild._parent = null;
                oldChild.destroy(); // will now also destroy all children of oldChild
            }
            //            }
            /*
            * Wire the new contentItem into the tree
            */
            this._contentItems[index] = newChild;
            newChild.setParent(this);
            // newChild inherits the sizes from the old child:
            newChild.size = oldChild.size;
            newChild.sizeUnit = oldChild.sizeUnit;
            newChild.minSize = oldChild.minSize;
            newChild.minSizeUnit = oldChild.minSizeUnit;
            //TODO This doesn't update the config... refactor to leave item nodes untouched after creation
            if (newChild._parent === null) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('CIRCNC45699');
            }
            else {
                if (newChild._parent._isInitialised === true && newChild._isInitialised === false) {
                    newChild.init();
                }
                this.updateSize();
            }
        }
    }
    /**
     * Convenience method.
     * Shorthand for this.parent.removeChild( this )
     */
    remove() {
        if (this._parent === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('CIR11110');
        }
        else {
            this._parent.removeChild(this);
        }
    }
    /**
     * Removes the component from the layout and creates a new
     * browser window with the component and its children inside
     */
    popout() {
        const parentId = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.getUniqueId)();
        const browserPopout = this.layoutManager.createPopoutFromContentItem(this, undefined, parentId, undefined);
        this.emitBaseBubblingEvent('stateChanged');
        return browserPopout;
    }
    /** @internal */
    calculateConfigContent() {
        const contentItems = this._contentItems;
        const count = contentItems.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            const item = contentItems[i];
            result[i] = item.toConfig();
        }
        return result;
    }
    /** @internal */
    highlightDropZone(x, y, area) {
        const dropTargetIndicator = this.layoutManager.dropTargetIndicator;
        if (dropTargetIndicator === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('ACIHDZ5593');
        }
        else {
            dropTargetIndicator.highlightArea(area, 1);
        }
    }
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onDrop(contentItem, area) {
        this.addChild(contentItem);
    }
    /** @internal */
    show() {
        // Not sure why showAllActiveContentItems() was called. GoldenLayout seems to work fine without it.  Left commented code
        // in source in case a reason for it becomes apparent.
        // this.layoutManager.showAllActiveContentItems();
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.setElementDisplayVisibility)(this._element, true);
        this.layoutManager.updateSizeFromContainer();
        for (let i = 0; i < this._contentItems.length; i++) {
            this._contentItems[i].show();
        }
    }
    /**
     * Destroys this item ands its children
     * @internal
     */
    destroy() {
        for (let i = 0; i < this._contentItems.length; i++) {
            this._contentItems[i].destroy();
        }
        const element = this._element;
        element.style.display = 'none';
        this.layoutManager.deferIfDragging((cancel) => {
            if (cancel) {
                element.style.display = '';
            }
            else {
                this._contentItems = [];
                this.emitBaseBubblingEvent('beforeItemDestroyed');
                this._element.remove();
                this.emitBaseBubblingEvent('itemDestroyed');
            }
        });
    }
    /**
     * Returns the area the component currently occupies
     * @internal
     */
    getElementArea(element) {
        element = element !== null && element !== void 0 ? element : this._element;
        const rect = element.getBoundingClientRect();
        const top = rect.top + document.body.scrollTop;
        const left = rect.left + document.body.scrollLeft;
        const width = rect.width;
        const height = rect.height;
        return {
            x1: left,
            y1: top,
            x2: left + width,
            y2: top + height,
            surface: width * height,
            contentItem: this
        };
    }
    /**
     * The tree of content items is created in two steps: First all content items are instantiated,
     * then init is called recursively from top to bottem. This is the basic init function,
     * it can be used, extended or overwritten by the content items
     *
     * Its behaviour depends on the content item
     * @internal
     */
    init() {
        this._isInitialised = true;
        this.emitBaseBubblingEvent('itemCreated');
        this.emitUnknownBubblingEvent(this.type + 'Created');
    }
    /** @internal */
    setParent(parent) {
        this._parent = parent;
    }
    /** @internal */
    addPopInParentId(id) {
        if (!this.popInParentIds.includes(id)) {
            this.popInParentIds.push(id);
        }
    }
    /** @internal */
    initContentItems() {
        for (let i = 0; i < this._contentItems.length; i++) {
            this._contentItems[i].init();
        }
    }
    /** @internal */
    hide() {
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_2__.setElementDisplayVisibility)(this._element, false);
        this.layoutManager.updateSizeFromContainer();
    }
    /** @internal */
    updateContentItemsSize() {
        for (let i = 0; i < this._contentItems.length; i++) {
            if (!this._contentItems[i].ignoring)
                this._contentItems[i].updateSize();
        }
    }
    /**
     * creates all content items for this node at initialisation time
     * PLEASE NOTE, please see addChild for adding contentItems at runtime
     * @internal
     */
    createContentItems(content) {
        const count = content.length;
        const result = new Array(count);
        for (let i = 0; i < content.length; i++) {
            result[i] = this.layoutManager.createContentItem(content[i], this);
        }
        return result;
    }
    /**
     * Called for every event on the item tree. Decides whether the event is a bubbling
     * event and propagates it to its parent
     *
     * @param name - The name of the event
     * @param event -
     * @internal
     */
    propagateEvent(name, args) {
        if (args.length === 1) {
            const event = args[0];
            if (event instanceof _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter.BubblingEvent &&
                event.isPropagationStopped === false &&
                this._isInitialised === true) {
                /**
                 * In some cases (e.g. if an element is created from a DragSource) it
                 * doesn't have a parent and is not a child of GroundItem. If that's the case
                 * propagate the bubbling event from the top level of the substree directly
                 * to the layoutManager
                 */
                if (this.isGround === false && this._parent) {
                    this._parent.emitUnknown(name, event);
                }
                else {
                    this.scheduleEventPropagationToLayoutManager(name, event);
                }
            }
        }
    }
    tryBubbleEvent(name, args) {
        if (args.length === 1) {
            const event = args[0];
            if (event instanceof _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter.BubblingEvent &&
                event.isPropagationStopped === false &&
                this._isInitialised === true) {
                /**
                 * In some cases (e.g. if an element is created from a DragSource) it
                 * doesn't have a parent and is not a child of GroundItem. If that's the case
                 * propagate the bubbling event from the top level of the substree directly
                 * to the layoutManager
                 */
                if (this.isGround === false && this._parent) {
                    this._parent.emitUnknown(name, event);
                }
                else {
                    this.scheduleEventPropagationToLayoutManager(name, event);
                }
            }
        }
    }
    /**
     * All raw events bubble up to the Ground element. Some events that
     * are propagated to - and emitted by - the layoutManager however are
     * only string-based, batched and sanitized to make them more usable
     *
     * @param name - The name of the event
     * @internal
     */
    scheduleEventPropagationToLayoutManager(name, event) {
        if (this._throttledEvents.indexOf(name) === -1) {
            this.layoutManager.emitUnknown(name, event);
        }
        else {
            if (this._pendingEventPropagations[name] !== true) {
                this._pendingEventPropagations[name] = true;
                globalThis.requestAnimationFrame(() => this.propagateEventToLayoutManager(name, event));
            }
        }
    }
    /**
     * Callback for events scheduled by _scheduleEventPropagationToLayoutManager
     *
     * @param name - The name of the event
     * @internal
     */
    propagateEventToLayoutManager(name, event) {
        this._pendingEventPropagations[name] = false;
        this.layoutManager.emitUnknown(name, event);
    }
}
/** @public */
(function (ContentItem) {
    /** @internal */
    function createElement(kindClass) {
        const element = document.createElement('div');
        element.classList.add("lm_item" /* Item */);
        if (kindClass) {
            element.classList.add(kindClass);
        }
        return element;
    }
    ContentItem.createElement = createElement;
})(ContentItem || (ContentItem = {}));


/***/ }),

/***/ "./src/ts/items/ground-item.ts":
/*!*************************************!*\
  !*** ./src/ts/items/ground-item.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GroundItem": () => (/* binding */ GroundItem)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _component_item__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./component-item */ "./src/ts/items/component-item.ts");
/* harmony import */ var _component_parentable_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component-parentable-item */ "./src/ts/items/component-parentable-item.ts");
/* harmony import */ var _content_item__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./content-item */ "./src/ts/items/content-item.ts");
/* harmony import */ var _row_or_column__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./row-or-column */ "./src/ts/items/row-or-column.ts");









/**
 * GroundItem is the ContentItem whose one child is the root ContentItem (Root is planted in Ground).
 * (Previously it was called root however this was incorrect as its child is the root item)
 * There is only one instance of GroundItem and it is automatically created by the Layout Manager
 * @internal
 */
class GroundItem extends _component_parentable_item__WEBPACK_IMPORTED_MODULE_0__.ComponentParentableItem {
    constructor(layoutManager, rootItemConfig, containerElement, containerPosition) {
        super(layoutManager, _config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedGroundItemConfig.create(rootItemConfig), null, _createRootElement(containerElement, containerPosition));
        this.element.classList.add("lm_goldenlayout" /* GoldenLayout */);
        this.isGround = true;
        this._childElementContainer = this.element;
        this._containerElement = containerElement;
    }
    init() {
        if (this.isInitialised === true)
            return;
        this.updateNodeSize();
        for (let i = 0; i < this.contentItems.length; i++) {
            this._childElementContainer.appendChild(this.contentItems[i].element);
        }
        super.init();
        this.initContentItems();
    }
    /**
     * Loads a new Layout
     * Internal only.  To load a new layout with API, use {@link (LayoutManager:class).loadLayout}
     */
    loadRoot(rootItemConfig) {
        // Remove existing root if it exists
        this.clearRoot();
        if (rootItemConfig !== undefined) {
            const rootContentItem = this.layoutManager.createAndInitContentItem(rootItemConfig, this);
            this.addChild(rootContentItem, 0);
        }
    }
    clearRoot() {
        // Remove existing root if it exists
        const contentItems = this.contentItems;
        switch (contentItems.length) {
            case 0: {
                return;
            }
            case 1: {
                const existingRootContentItem = contentItems[0];
                existingRootContentItem.remove();
                return;
            }
            default: {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('GILR07721');
            }
        }
    }
    /**
     * Adds a ContentItem child to root ContentItem.
     * Internal only.  To load a add with API, use {@link (LayoutManager:class).addItem}
     * @returns -1 if added as root otherwise index in root ContentItem's content
     */
    addItem(itemConfig, index) {
        this.layoutManager.checkMinimiseMaximisedStack();
        const resolvedItemConfig = _config_config__WEBPACK_IMPORTED_MODULE_3__.ItemConfig.resolve(itemConfig, false);
        let parent;
        if (this.contentItems.length > 0) {
            parent = this.contentItems[0];
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            parent = this;
        }
        if (parent.isComponent) {
            throw new Error('Cannot add item as child to ComponentItem');
        }
        else {
            const contentItem = this.layoutManager.createAndInitContentItem(resolvedItemConfig, parent);
            index = parent.addChild(contentItem, index);
            return (parent === this) ? -1 : index;
        }
    }
    loadComponentAsRoot(itemConfig) {
        // Remove existing root if it exists
        this.clearRoot();
        const resolvedItemConfig = _config_config__WEBPACK_IMPORTED_MODULE_3__.ItemConfig.resolve(itemConfig, false);
        if (resolvedItemConfig.maximised) {
            throw new Error('Root Component cannot be maximised');
        }
        else {
            const rootContentItem = new _component_item__WEBPACK_IMPORTED_MODULE_4__.ComponentItem(this.layoutManager, resolvedItemConfig, this);
            rootContentItem.init();
            this.addChild(rootContentItem, 0);
        }
    }
    /**
     * Adds a Root ContentItem.
     * Internal only.  To replace Root ContentItem with API, use {@link (LayoutManager:class).loadLayout}
     */
    addChild(contentItem, index) {
        if (this.contentItems.length > 0) {
            throw new Error('Ground node can only have a single child');
        }
        else {
            // contentItem = this.layoutManager._$normalizeContentItem(contentItem, this);
            this._childElementContainer.appendChild(contentItem.element);
            index = super.addChild(contentItem, index);
            this.updateSize();
            this.emitBaseBubblingEvent('stateChanged');
            return index;
        }
    }
    /** @internal */
    calculateConfigContent() {
        const contentItems = this.contentItems;
        const count = contentItems.length;
        const result = new Array(count);
        for (let i = 0; i < count; i++) {
            const item = contentItems[i];
            const itemConfig = item.toConfig();
            if (_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedRootItemConfig.isRootItemConfig(itemConfig)) {
                result[i] = itemConfig;
            }
            else {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('RCCC66832');
            }
        }
        return result;
    }
    /** @internal */
    setSize(width, height) {
        if (width === undefined || height === undefined) {
            this.updateSize(); // For backwards compatibility with v1.x API
        }
        else {
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementWidth)(this.element, width);
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementHeight)(this.element, height);
            // GroundItem can be empty
            if (this.contentItems.length > 0) {
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementWidth)(this.contentItems[0].element, width);
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementHeight)(this.contentItems[0].element, height);
            }
            //this.updateContentItemsSize();
            this.updateSize();
        }
    }
    createSideAreas() {
        const areaSize = 50;
        const oppositeSides = GroundItem.Area.oppositeSides;
        const result = new Array(Object.keys(oppositeSides).length);
        let idx = 0;
        for (const key in oppositeSides) {
            const side = key;
            const area = this.getElementArea();
            if (area === null) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnexpectedNullError('RCSA77553');
            }
            else {
                area.side = side;
                if (oppositeSides[side][1] === '2')
                    area[side] = area[oppositeSides[side]] - areaSize;
                else
                    area[side] = area[oppositeSides[side]] + areaSize;
                area.surface = (area.x2 - area.x1) * (area.y2 - area.y1);
                result[idx++] = area;
            }
        }
        return result;
    }
    highlightDropZone(x, y, area) {
        this.layoutManager.tabDropPlaceholder.remove();
        super.highlightDropZone(x, y, area);
    }
    onDrop(contentItem, area) {
        if (contentItem.isComponent) {
            const itemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedStackItemConfig.createDefault();
            // since ResolvedItemConfig.contentItems not set up, we need to add header from Component
            const component = contentItem;
            itemConfig.header = _config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedHeaderedItemConfig.Header.createCopy(component.headerConfig);
            const stack = this.layoutManager.createAndInitContentItem(itemConfig, this);
            stack.addChild(contentItem);
            contentItem = stack;
        }
        if (this.contentItems.length === 0) {
            this.addChild(contentItem);
        }
        else {
            /*
             * If the contentItem that's being dropped is not dropped on a Stack (cases which just passed above and
             * which would wrap the contentItem in a Stack) we need to check whether contentItem is a RowOrColumn.
             * If it is, we need to re-wrap it in a Stack like it was when it was dragged by its Tab (it was dragged!).
             */
            if (contentItem.type === _utils_types__WEBPACK_IMPORTED_MODULE_6__.ItemType.row || contentItem.type === _utils_types__WEBPACK_IMPORTED_MODULE_6__.ItemType.column) {
                const itemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedStackItemConfig.createDefault();
                const stack = this.layoutManager.createContentItem(itemConfig, this);
                stack.addChild(contentItem);
                contentItem = stack;
            }
            const type = area.side[0] == 'x' ? _utils_types__WEBPACK_IMPORTED_MODULE_6__.ItemType.row : _utils_types__WEBPACK_IMPORTED_MODULE_6__.ItemType.column;
            const insertBefore = area.side[1] == '2';
            const column = this.contentItems[0];
            if (!(column instanceof _row_or_column__WEBPACK_IMPORTED_MODULE_7__.RowOrColumn) || column.type !== type) {
                const itemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedItemConfig.createDefault(type);
                const rowOrColumn = this.layoutManager.createContentItem(itemConfig, this);
                this.replaceChild(column, rowOrColumn);
                rowOrColumn.addChild(contentItem, insertBefore ? 0 : undefined, true);
                rowOrColumn.addChild(column, insertBefore ? undefined : 0, true);
                column.size = 50;
                contentItem.size = 50;
                contentItem.sizeUnit = _utils_types__WEBPACK_IMPORTED_MODULE_6__.SizeUnitEnum.Percent;
                rowOrColumn.updateSize();
            }
            else {
                const sibling = column.contentItems[insertBefore ? 0 : column.contentItems.length - 1];
                column.addChild(contentItem, insertBefore ? 0 : undefined, true);
                sibling.size *= 0.5;
                contentItem.size = sibling.size;
                contentItem.sizeUnit = _utils_types__WEBPACK_IMPORTED_MODULE_6__.SizeUnitEnum.Percent;
                column.updateSize();
            }
        }
    }
    // No ContentItem can dock with groundItem.  However Stack can have a GroundItem parent and Stack requires that
    // its parent implement dock() function.  Accordingly this function is implemented but throws an exception as it should
    // never be called
    dock() {
        throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('GID87731');
    }
    // No ContentItem can dock with groundItem.  However Stack can have a GroundItem parent and Stack requires that
    // its parent implement validateDocking() function.  Accordingly this function is implemented but throws an exception as it should
    // never be called
    validateDocking() {
        throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('GIVD87732');
    }
    getAllContentItems() {
        const result = [this];
        this.deepGetAllContentItems(this.contentItems, result);
        return result;
    }
    getConfigMaximisedItems() {
        const result = [];
        this.deepFilterContentItems(this.contentItems, result, (item) => {
            if (_content_item__WEBPACK_IMPORTED_MODULE_8__.ContentItem.isStack(item) && item.initialWantMaximise) {
                return true;
            }
            else {
                if (_content_item__WEBPACK_IMPORTED_MODULE_8__.ContentItem.isComponentItem(item) && item.initialWantMaximise) {
                    return true;
                }
                else {
                    return false;
                }
            }
        });
        return result;
    }
    getItemsByPopInParentId(popInParentId) {
        const result = [];
        this.deepFilterContentItems(this.contentItems, result, (item) => item.popInParentIds.includes(popInParentId));
        return result;
    }
    toConfig() {
        throw new Error('Cannot generate GroundItem config');
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setActiveComponentItem(item, focus, suppressFocusEvent) {
        // only applicable if ComponentItem is root and then it always has focus
    }
    updateNodeSize() {
        const { width, height } = this.layoutManager.containerWidthAndHeight();
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementWidth)(this.element, width);
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementHeight)(this.element, height);
        /*
         * GroundItem can be empty
         */
        if (this.contentItems.length > 0) {
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementWidth)(this.contentItems[0].element, width);
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_5__.setElementHeight)(this.contentItems[0].element, height);
        }
    }
    deepGetAllContentItems(content, result) {
        for (let i = 0; i < content.length; i++) {
            const contentItem = content[i];
            const children = contentItem.contentItems;
            if (!contentItem.ignoring) {
                if (!contentItem.ignoringChild
                    || (contentItem.type !== _utils_types__WEBPACK_IMPORTED_MODULE_6__.ItemType.row && contentItem.type !== _utils_types__WEBPACK_IMPORTED_MODULE_6__.ItemType.column)
                    || children.length > 2)
                    result.push(contentItem);
                this.deepGetAllContentItems(children, result);
            }
        }
    }
    deepFilterContentItems(content, result, checkAcceptFtn) {
        for (let i = 0; i < content.length; i++) {
            const contentItem = content[i];
            if (checkAcceptFtn(contentItem)) {
                result.push(contentItem);
            }
            this.deepFilterContentItems(contentItem.contentItems, result, checkAcceptFtn);
        }
    }
}
function _createRootElement(containerElement, containerPosition) {
    const element = _content_item__WEBPACK_IMPORTED_MODULE_8__.ContentItem.createElement("lm_root" /* Root */);
    containerElement.insertBefore(element, containerPosition);
    return element;
}
/** @internal */
(function (GroundItem) {
    let Area;
    (function (Area) {
        Area.oppositeSides = {
            y2: 'y1',
            x2: 'x1',
            y1: 'y2',
            x1: 'x2',
        };
    })(Area = GroundItem.Area || (GroundItem.Area = {}));
})(GroundItem || (GroundItem = {}));


/***/ }),

/***/ "./src/ts/items/row-or-column.ts":
/*!***************************************!*\
  !*** ./src/ts/items/row-or-column.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RowOrColumn": () => (/* binding */ RowOrColumn)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _controls_splitter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../controls/splitter */ "./src/ts/controls/splitter.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _content_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./content-item */ "./src/ts/items/content-item.ts");






/** @public */
class RowOrColumn extends _content_item__WEBPACK_IMPORTED_MODULE_0__.ContentItem {
    /** @internal */
    constructor(isColumn, layoutManager, config, 
    /** @internal */
    _rowOrColumnParent) {
        super(layoutManager, config, _rowOrColumnParent, _content_item__WEBPACK_IMPORTED_MODULE_0__.ContentItem.createElement(isColumn ? "lm_column" /* Column */ : "lm_row" /* Row */));
        this._rowOrColumnParent = _rowOrColumnParent;
        /** @internal */
        this._splitter = [];
        this.isRow = !isColumn;
        this.isColumn = isColumn;
        this._childElementContainer = this.element;
        this._splitterSize = layoutManager.layoutConfig.dimensions.borderWidth;
        this._splitterGrabSize = layoutManager.layoutConfig.dimensions.borderGrabWidth;
        this._isColumn = isColumn;
        this._dimension = isColumn ? 'height' : 'width';
        this._splitterPosition = null;
        this._splitterMinPosition = null;
        this._splitterMaxPosition = null;
        switch (config.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_1__.ItemType.row:
            case _utils_types__WEBPACK_IMPORTED_MODULE_1__.ItemType.column:
                this._configType = config.type;
                break;
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('ROCCCT00925');
        }
    }
    newComponent(componentType, componentState, title, index) {
        const itemConfig = {
            type: 'component',
            componentType,
            componentState,
            title,
        };
        return this.newItem(itemConfig, index);
    }
    addComponent(componentType, componentState, title, index) {
        const itemConfig = {
            type: 'component',
            componentType,
            componentState,
            title,
        };
        return this.addItem(itemConfig, index);
    }
    newItem(itemConfig, index) {
        index = this.addItem(itemConfig, index);
        const createdItem = this.contentItems[index];
        if (_content_item__WEBPACK_IMPORTED_MODULE_0__.ContentItem.isStack(createdItem) && (_config_config__WEBPACK_IMPORTED_MODULE_3__.ItemConfig.isComponent(itemConfig))) {
            // createdItem is a Stack which was created to hold wanted component.  Return component
            return createdItem.contentItems[0];
        }
        else {
            return createdItem;
        }
    }
    addItem(itemConfig, index) {
        this.layoutManager.checkMinimiseMaximisedStack();
        const resolvedItemConfig = _config_config__WEBPACK_IMPORTED_MODULE_3__.ItemConfig.resolve(itemConfig, false);
        const contentItem = this.layoutManager.createAndInitContentItem(resolvedItemConfig, this);
        return this.addChild(contentItem, index, false);
    }
    /**
     * Add a new contentItem to the Row or Column
     *
     * @param contentItem -
     * @param index - The position of the new item within the Row or Column.
     *                If no index is provided the item will be added to the end
     * @param suspendResize - If true the items won't be resized. This will leave the item in
     *                        an inconsistent state and is only intended to be used if multiple
     *                        children need to be added in one go and resize is called afterwards
     *
     * @returns
     */
    addChild(contentItem, index, suspendResize) {
        // contentItem = this.layoutManager._$normalizeContentItem(contentItem, this);
        if (index === undefined) {
            index = this.contentItems.length;
        }
        if (this.contentItems.length > 0) {
            const splitterElement = this.createSplitter(Math.max(0, index - 1)).element;
            if (index > 0) {
                this.contentItems[index - 1].element.insertAdjacentElement('afterend', splitterElement);
                splitterElement.insertAdjacentElement('afterend', contentItem.element);
            }
            else {
                this.contentItems[0].element.insertAdjacentElement('beforebegin', splitterElement);
                splitterElement.insertAdjacentElement('beforebegin', contentItem.element);
            }
        }
        else {
            this._childElementContainer.appendChild(contentItem.element);
        }
        super.addChild(contentItem, index);
        const newItemSize = (1 / this.contentItems.length) * 100;
        if (suspendResize === true) {
            this.emitBaseBubblingEvent('stateChanged');
            return index;
        }
        for (let i = 0; i < this.contentItems.length; i++) {
            const indexedContentItem = this.contentItems[i];
            if (indexedContentItem === contentItem) {
                contentItem.size = newItemSize;
            }
            else {
                const itemSize = indexedContentItem.size *= (100 - newItemSize) / 100;
                indexedContentItem.size = itemSize;
            }
        }
        this.updateSize();
        this.emitBaseBubblingEvent('stateChanged');
        return index;
    }
    /**
     * Removes a child of this element
     *
     * @param contentItem -
     * @param keepChild - If true the child will be removed, but not destroyed
     *
     */
    removeChild(contentItem, keepChild) {
        const index = this.contentItems.indexOf(contentItem);
        const splitterIndex = Math.max(index - 1, 0);
        if (index === -1) {
            throw new Error('Can\'t remove child. ContentItem is not child of this Row or Column');
        }
        /**
         * Remove the splitter before the item or after if the item happens
         * to be the first in the row/column
         */
        const splitter = this._splitter[splitterIndex];
        if (splitter) {
            splitter.element.style.display = 'none';
            this.layoutManager.deferIfDragging((cancel) => {
                if (cancel) {
                    splitter.element.style.display = '';
                }
                else {
                    splitter.destroy();
                    this._splitter.splice(splitterIndex, 1);
                }
            });
        }
        super.removeChild(contentItem, keepChild);
        this.layoutManager.deferIfDragging((cancel) => {
            if (!cancel
                && this.contentItems.length === 1 && this.isClosable === true) {
                const childItem = this.contentItems[0];
                this.contentItems.length = 0;
                this._rowOrColumnParent.replaceChild(this, childItem, true);
                return;
            }
            this.updateSize();
            this.emitBaseBubblingEvent('stateChanged');
        });
        if (this.layoutManager.currentlyDragging()) {
            this.updateSize();
            //this.emitBaseBubblingEvent('stateChanged');
        }
    }
    /**
     * Replaces a child of this Row or Column with another contentItem
     */
    replaceChild(oldChild, newChild) {
        const size = oldChild.size;
        super.replaceChild(oldChild, newChild);
        newChild.size = size;
        this.updateSize();
        this.emitBaseBubblingEvent('stateChanged');
    }
    /**
     * Invoked recursively by the layout manager. ContentItem.init appends
     * the contentItem's DOM elements to the container, RowOrColumn init adds splitters
     * in between them
     * @internal
     */
    init() {
        if (this.isInitialised === true)
            return;
        this.updateNodeSize();
        for (let i = 0; i < this.contentItems.length; i++) {
            this._childElementContainer.appendChild(this.contentItems[i].element);
        }
        super.init();
        for (let i = 0; i < this.contentItems.length - 1; i++) {
            this.contentItems[i].element.insertAdjacentElement('afterend', this.createSplitter(i).element);
        }
        this.initContentItems();
    }
    toConfig() {
        const result = {
            type: this.type,
            content: this.calculateConfigContent(),
            size: this.size,
            sizeUnit: this.sizeUnit,
            minSize: this.minSize,
            minSizeUnit: this.minSizeUnit,
            id: this.id,
            isClosable: this.isClosable,
        };
        return result;
    }
    /** @internal */
    setParent(parent) {
        this._rowOrColumnParent = parent;
        super.setParent(parent);
    }
    /** @internal */
    updateNodeSize() {
        if (this.contentItems.length > 0) {
            this.calculateRelativeSizes();
            this.setAbsoluteSizes();
        }
        this.emitBaseBubblingEvent('stateChanged');
        this.emit('resize');
    }
    /**
     * Turns the relative sizes calculated by calculateRelativeSizes into
     * absolute pixel values and applies them to the children's DOM elements
     *
     * Assigns additional pixels to counteract Math.floor
     * @internal
     */
    setAbsoluteSizes() {
        const absoluteSizes = this.calculateAbsoluteSizes();
        for (let i = 0; i < this.contentItems.length; i++) {
            const item = this.contentItems[i];
            if (item.ignoring)
                continue;
            if (absoluteSizes.additionalPixel - i > 0) {
                absoluteSizes.itemSizes[i]++;
            }
            if (this._isColumn) {
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementWidth)(item.element, absoluteSizes.crossAxisSize);
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementHeight)(item.element, absoluteSizes.itemSizes[i]);
            }
            else {
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementWidth)(item.element, absoluteSizes.itemSizes[i]);
                (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementHeight)(item.element, absoluteSizes.crossAxisSize);
            }
        }
    }
    /**
     * Calculates the absolute sizes of all of the children of this Item.
     * @returns Set with absolute sizes and additional pixels.
     * @internal
     */
    calculateAbsoluteSizes() {
        const totalSplitterSize = (this.contentItems.length - (this.ignoringChild ? 2 : 1))
            * this._splitterSize;
        const { width: elementWidth, height: elementHeight } = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.getElementWidthAndHeight)(this.element);
        let totalSize;
        let crossAxisSize;
        if (this._isColumn) {
            totalSize = elementHeight - totalSplitterSize;
            crossAxisSize = elementWidth;
        }
        else {
            totalSize = elementWidth - totalSplitterSize;
            crossAxisSize = elementHeight;
        }
        let totalAssigned = 0;
        const itemSizes = [];
        for (const contentItem of this.contentItems) {
            let itemSize;
            if (contentItem.ignoring) {
                itemSize = 0;
            }
            else if (contentItem.sizeUnit === _utils_types__WEBPACK_IMPORTED_MODULE_1__.SizeUnitEnum.Percent) {
                itemSize = Math.floor(totalSize * (contentItem.size / 100));
            }
            else {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('ROCCAS6692');
            }
            totalAssigned += itemSize;
            itemSizes.push(itemSize);
        }
        const additionalPixel = Math.floor(totalSize - totalAssigned);
        return {
            itemSizes,
            additionalPixel,
            totalSize,
            crossAxisSize,
        };
    }
    /**
     * Calculates the relative sizes of all children of this Item. The logic
     * is as follows:
     *
     * - Add up the total size of all items that have a configured size
     *
     * - If the total == 100 (check for floating point errors)
     *        Excellent, job done
     *
     * - If the total is \> 100,
     *        set the size of items without set dimensions to 1/3 and add this to the total
     *        set the size off all items so that the total is hundred relative to their original size
     *
     * - If the total is \< 100
     *        If there are items without set dimensions, distribute the remainder to 100 evenly between them
     *        If there are no items without set dimensions, increase all items sizes relative to
     *        their original size so that they add up to 100
     *
     * @internal
     */
    calculateRelativeSizes() {
        let total = 0;
        const itemsWithFractionalSize = [];
        let totalFractionalSize = 0;
        for (let i = 0; i < this.contentItems.length; i++) {
            if (this.contentItems[i].ignoring)
                continue;
            const contentItem = this.contentItems[i];
            const sizeUnit = contentItem.sizeUnit;
            switch (sizeUnit) {
                case _utils_types__WEBPACK_IMPORTED_MODULE_1__.SizeUnitEnum.Percent: {
                    total += contentItem.size;
                    break;
                }
                case _utils_types__WEBPACK_IMPORTED_MODULE_1__.SizeUnitEnum.Fractional: {
                    itemsWithFractionalSize.push(contentItem);
                    totalFractionalSize += contentItem.size;
                    break;
                }
                default:
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('ROCCRS49110', JSON.stringify(contentItem));
            }
        }
        /**
         * Everything adds up to hundred, all good :-)
         */
        if (Math.round(total) === 100) {
            this.respectMinItemSize();
            return;
        }
        else {
            /**
             * Allocate the remaining size to the items with a fractional size
             */
            if (Math.round(total) < 100 && itemsWithFractionalSize.length > 0) {
                const fractionalAllocatedSize = 100 - total;
                for (let i = 0; i < itemsWithFractionalSize.length; i++) {
                    const contentItem = itemsWithFractionalSize[i];
                    contentItem.size = fractionalAllocatedSize * (contentItem.size / totalFractionalSize);
                    contentItem.sizeUnit = _utils_types__WEBPACK_IMPORTED_MODULE_1__.SizeUnitEnum.Percent;
                }
                this.respectMinItemSize();
                return;
            }
            else {
                /**
                 * If the total is > 100, but there are also items with a fractional size, assign another 50%
                 * to the fractional items
                 *
                 * This will be reset in the next step
                 */
                if (Math.round(total) > 100 && itemsWithFractionalSize.length > 0) {
                    for (let i = 0; i < itemsWithFractionalSize.length; i++) {
                        const contentItem = itemsWithFractionalSize[i];
                        contentItem.size = 50 * (contentItem.size / totalFractionalSize);
                        contentItem.sizeUnit = _utils_types__WEBPACK_IMPORTED_MODULE_1__.SizeUnitEnum.Percent;
                    }
                    total += 50;
                }
                /**
                 * Set every items size relative to 100 relative to its size to total
                 */
                for (let i = 0; i < this.contentItems.length; i++) {
                    const contentItem = this.contentItems[i];
                    contentItem.size = (contentItem.size / total) * 100;
                }
                this.respectMinItemSize();
            }
        }
    }
    /**
     * Adjusts the column widths to respect the dimensions minItemWidth if set.
     * @internal
     */
    respectMinItemSize() {
        const minItemSize = this.calculateContentItemMinSize(this);
        if (minItemSize <= 0 || this.contentItems.length <= 1) {
            return;
        }
        else {
            let totalOverMin = 0;
            let totalUnderMin = 0;
            const entriesOverMin = [];
            const allEntries = [];
            const absoluteSizes = this.calculateAbsoluteSizes();
            /**
             * Figure out how much we are under the min item size total and how much room we have to use.
             */
            for (let i = 0; i < absoluteSizes.itemSizes.length; i++) {
                const itemSize = absoluteSizes.itemSizes[i];
                let entry;
                if (itemSize < minItemSize) {
                    totalUnderMin += minItemSize - itemSize;
                    entry = {
                        size: minItemSize
                    };
                }
                else {
                    totalOverMin += itemSize - minItemSize;
                    entry = {
                        size: itemSize
                    };
                    entriesOverMin.push(entry);
                }
                allEntries.push(entry);
            }
            /**
             * If there is nothing under min, or there is not enough over to make up the difference, do nothing.
             */
            if (totalUnderMin === 0 || totalUnderMin > totalOverMin) {
                return;
            }
            else {
                /**
                 * Evenly reduce all columns that are over the min item width to make up the difference.
                 */
                const reducePercent = totalUnderMin / totalOverMin;
                let remainingSize = totalUnderMin;
                for (let i = 0; i < entriesOverMin.length; i++) {
                    const entry = entriesOverMin[i];
                    const reducedSize = Math.round((entry.size - minItemSize) * reducePercent);
                    remainingSize -= reducedSize;
                    entry.size -= reducedSize;
                }
                /**
                 * Take anything remaining from the last item.
                 */
                if (remainingSize !== 0) {
                    allEntries[allEntries.length - 1].size -= remainingSize;
                }
                /**
                 * Set every items size relative to 100 relative to its size to total
                 */
                for (let i = 0; i < this.contentItems.length; i++) {
                    const contentItem = this.contentItems[i];
                    contentItem.size = (allEntries[i].size / absoluteSizes.totalSize) * 100;
                }
            }
        }
    }
    /**
     * Instantiates a new Splitter, binds events to it and adds
     * it to the array of splitters at the position specified as the index argument
     *
     * What it doesn't do though is append the splitter to the DOM
     *
     * @param index - The position of the splitter
     *
     * @returns
     * @internal
     */
    createSplitter(index) {
        const splitter = new _controls_splitter__WEBPACK_IMPORTED_MODULE_5__.Splitter(this._isColumn, this._splitterSize, this._splitterGrabSize);
        splitter.on('drag', (offsetX, offsetY) => this.onSplitterDrag(splitter, offsetX, offsetY));
        splitter.on('dragStop', () => this.onSplitterDragStop(splitter));
        splitter.on('dragStart', () => this.onSplitterDragStart(splitter));
        this._splitter.splice(index, 0, splitter);
        return splitter;
    }
    /**
     * Locates the instance of Splitter in the array of
     * registered splitters and returns a map containing the contentItem
     * before and after the splitters, both of which are affected if the
     * splitter is moved
     *
     * @returns A map of contentItems that the splitter affects
     * @internal
     */
    getSplitItems(splitter) {
        const index = this._splitter.indexOf(splitter);
        return {
            before: this.contentItems[index],
            after: this.contentItems[index + 1]
        };
    }
    calculateContentItemMinSize(contentItem) {
        const minSize = contentItem.minSize;
        if (minSize !== undefined) {
            if (contentItem.minSizeUnit === _utils_types__WEBPACK_IMPORTED_MODULE_1__.SizeUnitEnum.Pixel) {
                return minSize;
            }
            else {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.AssertError('ROCGMD98831', JSON.stringify(contentItem));
            }
        }
        else {
            const dimensions = this.layoutManager.layoutConfig.dimensions;
            return this._isColumn ? dimensions.defaultMinItemHeight : dimensions.defaultMinItemWidth;
        }
    }
    /**
     * Gets the minimum dimensions for the given item configuration array
     * @internal
     */
    calculateContentItemsTotalMinSize(contentItems) {
        let totalMinSize = 0;
        for (const contentItem of contentItems) {
            totalMinSize += this.calculateContentItemMinSize(contentItem);
        }
        return totalMinSize;
    }
    /**
     * Invoked when a splitter's dragListener fires dragStart. Calculates the splitters
     * movement area once (so that it doesn't need calculating on every mousemove event)
     * @internal
     */
    onSplitterDragStart(splitter) {
        const items = this.getSplitItems(splitter);
        const beforeWidth = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.pixelsToNumber)(items.before.element.style[this._dimension]);
        const afterSize = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.pixelsToNumber)(items.after.element.style[this._dimension]);
        const beforeMinSize = this.calculateContentItemsTotalMinSize(items.before.contentItems);
        const afterMinSize = this.calculateContentItemsTotalMinSize(items.after.contentItems);
        this._splitterPosition = 0;
        this._splitterMinPosition = -1 * (beforeWidth - beforeMinSize);
        this._splitterMaxPosition = afterSize - afterMinSize;
    }
    /**
     * Invoked when a splitter's DragListener fires drag. Updates the splitter's DOM position,
     * but not the sizes of the elements the splitter controls in order to minimize resize events
     *
     * @param splitter -
     * @param offsetX - Relative pixel values to the splitter's original position. Can be negative
     * @param offsetY - Relative pixel values to the splitter's original position. Can be negative
     * @internal
     */
    onSplitterDrag(splitter, offsetX, offsetY) {
        let offset = this._isColumn ? offsetY : offsetX;
        if (this._splitterMinPosition === null || this._splitterMaxPosition === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnexpectedNullError('ROCOSD59226');
        }
        offset = Math.max(offset, this._splitterMinPosition);
        offset = Math.min(offset, this._splitterMaxPosition);
        this._splitterPosition = offset;
        const offsetPixels = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.numberToPixels)(offset - splitter.dragHandleOffset);
        if (this._isColumn) {
            splitter.dragHandleElement.style.top = offsetPixels;
        }
        else {
            splitter.dragHandleElement.style.left = offsetPixels;
        }
    }
    /**
     * Invoked when a splitter's DragListener fires dragStop. Resets the splitters DOM position,
     * and applies the new sizes to the elements before and after the splitter and their children
     * on the next animation frame
     * @internal
     */
    onSplitterDragStop(splitter) {
        if (this._splitterPosition === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_2__.UnexpectedNullError('ROCOSDS66932');
        }
        else {
            const items = this.getSplitItems(splitter);
            const sizeBefore = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.pixelsToNumber)(items.before.element.style[this._dimension]);
            const sizeAfter = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.pixelsToNumber)(items.after.element.style[this._dimension]);
            const splitterPositionInRange = (this._splitterPosition + sizeBefore) / (sizeBefore + sizeAfter);
            const totalRelativeSize = items.before.size + items.after.size;
            items.before.size = splitterPositionInRange * totalRelativeSize;
            items.after.size = (1 - splitterPositionInRange) * totalRelativeSize;
            const offset = splitter.dragHandleOffset;
            if (this._isColumn)
                splitter.dragHandleElement.style.top = `${-offset}px`;
            else
                splitter.dragHandleElement.style.left = `${-offset}px`;
            globalThis.requestAnimationFrame(() => this.updateSize());
        }
    }
}
/** @public */
(function (RowOrColumn) {
    /** @internal */
    function getElementDimensionSize(element, dimension) {
        if (dimension === 'width') {
            return (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.getElementWidth)(element);
        }
        else {
            return (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.getElementHeight)(element);
        }
    }
    RowOrColumn.getElementDimensionSize = getElementDimensionSize;
    /** @internal */
    function setElementDimensionSize(element, dimension, value) {
        if (dimension === 'width') {
            return (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementWidth)(element, value);
        }
        else {
            return (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementHeight)(element, value);
        }
    }
    RowOrColumn.setElementDimensionSize = setElementDimensionSize;
})(RowOrColumn || (RowOrColumn = {}));


/***/ }),

/***/ "./src/ts/items/stack.ts":
/*!*******************************!*\
  !*** ./src/ts/items/stack.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Stack": () => (/* binding */ Stack)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _controls_header__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../controls/header */ "./src/ts/controls/header.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/utils */ "./src/ts/utils/utils.ts");
/* harmony import */ var _component_item__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./component-item */ "./src/ts/items/component-item.ts");
/* harmony import */ var _component_parentable_item__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component-parentable-item */ "./src/ts/items/component-parentable-item.ts");
/* harmony import */ var _content_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./content-item */ "./src/ts/items/content-item.ts");










/** @public */
class Stack extends _component_parentable_item__WEBPACK_IMPORTED_MODULE_0__.ComponentParentableItem {
    /** @internal */
    constructor(layoutManager, config, parent) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        super(layoutManager, config, parent, _content_item__WEBPACK_IMPORTED_MODULE_1__.ContentItem.createElement("lm_stack" /* Stack */));
        /** @internal */
        this._headerSideChanged = false;
        /** @internal */
        this._resizeListener = () => this.updateTabSizes();
        /** @internal */
        this._maximisedListener = () => this.handleMaximised();
        /** @internal */
        this._minimisedListener = () => this.handleMinimised();
        this._headerConfig = config.header;
        const layoutHeaderConfig = layoutManager.layoutConfig.header;
        const configContent = config.content;
        // If stack has only one component, then we can also check this for header settings
        let componentHeaderConfig;
        if (configContent.length !== 1) {
            componentHeaderConfig = undefined;
        }
        else {
            const firstChildItemConfig = configContent[0];
            componentHeaderConfig = firstChildItemConfig.header; // will be undefined if not component (and wont be stack)
        }
        this._initialWantMaximise = config.maximised;
        this._initialActiveItemIndex = (_a = config.activeItemIndex) !== null && _a !== void 0 ? _a : 0; // make sure defined
        // check for defined value for each item in order of Stack (this Item), Component (first child), Manager.
        const show = (_d = (_c = (_b = this._headerConfig) === null || _b === void 0 ? void 0 : _b.show) !== null && _c !== void 0 ? _c : componentHeaderConfig === null || componentHeaderConfig === void 0 ? void 0 : componentHeaderConfig.show) !== null && _d !== void 0 ? _d : layoutHeaderConfig.show;
        const popout = (_g = (_f = (_e = this._headerConfig) === null || _e === void 0 ? void 0 : _e.popout) !== null && _f !== void 0 ? _f : componentHeaderConfig === null || componentHeaderConfig === void 0 ? void 0 : componentHeaderConfig.popout) !== null && _g !== void 0 ? _g : layoutHeaderConfig.popout;
        const maximise = (_k = (_j = (_h = this._headerConfig) === null || _h === void 0 ? void 0 : _h.maximise) !== null && _j !== void 0 ? _j : componentHeaderConfig === null || componentHeaderConfig === void 0 ? void 0 : componentHeaderConfig.maximise) !== null && _k !== void 0 ? _k : layoutHeaderConfig.maximise;
        const close = (_o = (_m = (_l = this._headerConfig) === null || _l === void 0 ? void 0 : _l.close) !== null && _m !== void 0 ? _m : componentHeaderConfig === null || componentHeaderConfig === void 0 ? void 0 : componentHeaderConfig.close) !== null && _o !== void 0 ? _o : layoutHeaderConfig.close;
        const minimise = (_r = (_q = (_p = this._headerConfig) === null || _p === void 0 ? void 0 : _p.minimise) !== null && _q !== void 0 ? _q : componentHeaderConfig === null || componentHeaderConfig === void 0 ? void 0 : componentHeaderConfig.minimise) !== null && _r !== void 0 ? _r : layoutHeaderConfig.minimise;
        const tabDropdown = (_u = (_t = (_s = this._headerConfig) === null || _s === void 0 ? void 0 : _s.tabDropdown) !== null && _t !== void 0 ? _t : componentHeaderConfig === null || componentHeaderConfig === void 0 ? void 0 : componentHeaderConfig.tabDropdown) !== null && _u !== void 0 ? _u : layoutHeaderConfig.tabDropdown;
        this._maximisedEnabled = maximise !== false;
        const headerSettings = {
            show: show !== false,
            side: show === false ? _utils_types__WEBPACK_IMPORTED_MODULE_2__.Side.top : show,
            popoutEnabled: popout !== false,
            popoutLabel: popout === false ? '' : popout,
            maximiseEnabled: this._maximisedEnabled,
            maximiseLabel: maximise === false ? '' : maximise,
            closeEnabled: close !== false,
            closeLabel: close === false ? '' : close,
            minimiseEnabled: true,
            minimiseLabel: minimise,
            tabDropdownEnabled: tabDropdown !== false,
            tabDropdownLabel: tabDropdown === false ? '' : tabDropdown,
        };
        this._header = new _controls_header__WEBPACK_IMPORTED_MODULE_3__.Header(layoutManager, this, headerSettings, config.isClosable && close !== false, () => this.getActiveComponentItem(), () => this.remove(), () => this.handlePopoutEvent(), () => this.toggleMaximise(), (ev) => this.handleHeaderClickEvent(ev), (ev) => this.handleHeaderTouchStartEvent(ev), (item) => this.handleHeaderComponentRemoveEvent(item), (item) => this.handleHeaderComponentFocusEvent(item), (x, y, dragListener, item) => this.handleHeaderComponentStartDragEvent(x, y, dragListener, item));
        // this._dropZones = {};
        this.isStack = true;
        this._childElementContainer = document.createElement('section');
        this._childElementContainer.classList.add("lm_items" /* Items */);
        this.on('resize', this._resizeListener);
        if (this._maximisedEnabled) {
            this.on('maximised', this._maximisedListener);
            this.on('minimised', this._minimisedListener);
        }
        this.element.appendChild(this._header.element);
        this.element.appendChild(this._childElementContainer);
        this.setupHeaderPosition();
        this._header.updateClosability();
    }
    get childElementContainer() { return this._childElementContainer; }
    get header() { return this._header; }
    get headerShow() { return this._header.show; }
    get headerSide() { return this._header.side; }
    get headerLeftRightSided() { return this._header.leftRightSided; }
    /** @internal */
    get contentAreaDimensions() { return this._contentAreaDimensions; }
    /** @internal */
    get initialWantMaximise() { return this._initialWantMaximise; }
    get isMaximised() { return this === this.layoutManager.maximisedStack; }
    get stackParent() {
        if (!this.parent) {
            throw new Error('Stack should always have a parent');
        }
        return this.parent;
    }
    /** @internal */
    init() {
        if (this.isInitialised === true)
            return;
        this.updateNodeSize();
        for (let i = 0; i < this.contentItems.length; i++) {
            this._childElementContainer.appendChild(this.contentItems[i].element);
        }
        super.init();
        const contentItems = this.contentItems;
        const contentItemCount = contentItems.length;
        if (contentItemCount > 0) { // contentItemCount will be 0 on drag drop
            if (this._initialActiveItemIndex < 0 || this._initialActiveItemIndex >= contentItemCount) {
                throw new Error(`ActiveItemIndex out of range: ${this._initialActiveItemIndex} id: ${this.id}`);
            }
            else {
                for (let i = 0; i < contentItemCount; i++) {
                    const contentItem = contentItems[i];
                    if (!(contentItem instanceof _component_item__WEBPACK_IMPORTED_MODULE_4__.ComponentItem)) {
                        throw new Error(`Stack Content Item is not of type ComponentItem: ${i} id: ${this.id}`);
                    }
                    else {
                        this._header.createTab(contentItem, i);
                        contentItem.hide();
                        contentItem.container.setBaseLogicalZIndex();
                    }
                }
                this.setActiveComponentItem(contentItems[this._initialActiveItemIndex], false);
                this.updateTabSizes();
            }
        }
        this._header.updateClosability();
        this.initContentItems();
    }
    /** @deprecated Use {@link (Stack:class).setActiveComponentItem} */
    setActiveContentItem(item) {
        if (!_content_item__WEBPACK_IMPORTED_MODULE_1__.ContentItem.isComponentItem(item)) {
            throw new Error('Stack.setActiveContentItem: item is not a ComponentItem');
        }
        else {
            this.setActiveComponentItem(item, false);
        }
    }
    setActiveComponentItem(componentItem, focus, suppressFocusEvent = false) {
        if (this._activeComponentItem !== componentItem) {
            if (this.contentItems.indexOf(componentItem) === -1) {
                throw new Error('componentItem is not a child of this stack');
            }
            else {
                if (this._activeComponentItem !== undefined) {
                    this._activeComponentItem.hide();
                }
                this._activeComponentItem = componentItem;
                this._header.processActiveComponentChanged(componentItem);
                componentItem.show();
                this.emit('activeContentItemChanged', componentItem);
                this.layoutManager.emit('activeContentItemChanged', componentItem);
                this.emitStateChangedEvent();
            }
        }
        if (this.focused || focus) {
            this.layoutManager.setFocusedComponentItem(componentItem, suppressFocusEvent);
        }
    }
    /** @deprecated Use {@link (Stack:class).getActiveComponentItem} */
    getActiveContentItem() {
        var _a;
        return (_a = this.getActiveComponentItem()) !== null && _a !== void 0 ? _a : null;
    }
    getActiveComponentItem() {
        return this._activeComponentItem;
    }
    /** @internal */
    focusActiveContentItem() {
        var _a;
        (_a = this._activeComponentItem) === null || _a === void 0 ? void 0 : _a.focus();
    }
    /** @internal */
    setFocusedValue(value) {
        if (value) {
            this.element.classList.add("lm_focused" /* Focused */);
        }
        else {
            this.element.classList.remove("lm_focused" /* Focused */);
        }
        this._header.applyFocusedValue(value);
        super.setFocusedValue(value);
    }
    /** @internal */
    setRowColumnClosable(value) {
        this._header.setRowColumnClosable(value);
    }
    newComponent(componentType, componentState, title, index) {
        const itemConfig = {
            type: 'component',
            componentType,
            componentState,
            title,
        };
        return this.newItem(itemConfig, index);
    }
    addComponent(componentType, componentState, title, index) {
        const itemConfig = {
            type: 'component',
            componentType,
            componentState,
            title,
        };
        return this.addItem(itemConfig, index);
    }
    newItem(itemConfig, index) {
        index = this.addItem(itemConfig, index);
        return this.contentItems[index];
    }
    addItem(itemConfig, index) {
        this.layoutManager.checkMinimiseMaximisedStack();
        const resolvedItemConfig = _config_config__WEBPACK_IMPORTED_MODULE_5__.ItemConfig.resolve(itemConfig, false);
        const contentItem = this.layoutManager.createAndInitContentItem(resolvedItemConfig, this);
        return this.addChild(contentItem, index);
    }
    addChild(contentItem, index, focus = false) {
        if (index !== undefined && index > this.contentItems.length) {
            index -= 1;
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('SAC99728'); // undisplayChild() removed so this condition should no longer occur
        }
        if (!(contentItem instanceof _component_item__WEBPACK_IMPORTED_MODULE_4__.ComponentItem)) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('SACC88532'); // Stacks can only have Component children
        }
        else {
            index = super.addChild(contentItem, index);
            this._childElementContainer.appendChild(contentItem.element);
            this._header.createTab(contentItem, index);
            this.setActiveComponentItem(contentItem, focus);
            this._header.updateTabSizes();
            this.updateSize();
            contentItem.container.setBaseLogicalZIndex();
            this._header.updateClosability();
            this.emitStateChangedEvent();
            return index;
        }
    }
    removeChild(contentItem, keepChild) {
        const componentItem = contentItem;
        const index = this.contentItems.indexOf(componentItem);
        const stackWillBeDeleted = this.contentItems.length === 1;
        if (this._activeComponentItem === componentItem) {
            if (componentItem.focused) {
                componentItem.blur();
            }
            if (!stackWillBeDeleted) {
                // At this point we're already sure we have at least one content item left *after*
                // removing contentItem, so we can safely assume index 1 is a valid one if
                // the index of contentItem is 0, otherwise we just use the previous content item.
                const newActiveComponentIdx = index === 0 ? 1 : index - 1;
                this.setActiveComponentItem(this.contentItems[newActiveComponentIdx], false);
            }
        }
        this._header.removeTab(componentItem);
        super.removeChild(componentItem, keepChild);
        if (!stackWillBeDeleted) {
            this._header.updateClosability();
        }
        this.emitStateChangedEvent();
    }
    /**
     * Maximises the Item or minimises it if it is already maximised
     */
    toggleMaximise() {
        if (this.isMaximised) {
            this.minimise();
        }
        else {
            this.maximise();
        }
    }
    maximise() {
        if (!this.isMaximised) {
            this.layoutManager.setMaximisedStack(this);
            const contentItems = this.contentItems;
            const contentItemCount = contentItems.length;
            for (let i = 0; i < contentItemCount; i++) {
                const contentItem = contentItems[i];
                if (contentItem instanceof _component_item__WEBPACK_IMPORTED_MODULE_4__.ComponentItem) {
                    contentItem.enterStackMaximised();
                }
                else {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('SMAXI87773');
                }
            }
            this.emitStateChangedEvent();
        }
    }
    minimise() {
        if (this.isMaximised) {
            this.layoutManager.setMaximisedStack(undefined);
            const contentItems = this.contentItems;
            const contentItemCount = contentItems.length;
            for (let i = 0; i < contentItemCount; i++) {
                const contentItem = contentItems[i];
                if (contentItem instanceof _component_item__WEBPACK_IMPORTED_MODULE_4__.ComponentItem) {
                    contentItem.exitStackMaximised();
                }
                else {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('SMINI87773');
                }
            }
            this.emitStateChangedEvent();
        }
    }
    /** @internal */
    destroy() {
        var _a;
        if ((_a = this._activeComponentItem) === null || _a === void 0 ? void 0 : _a.focused) {
            this._activeComponentItem.blur();
        }
        super.destroy();
        this.off('resize', this._resizeListener);
        if (this._maximisedEnabled) {
            this.off('maximised', this._maximisedListener);
            this.off('minimised', this._minimisedListener);
        }
        this._header.destroy();
    }
    toConfig() {
        let activeItemIndex;
        if (this._activeComponentItem) {
            activeItemIndex = this.contentItems.indexOf(this._activeComponentItem);
            if (activeItemIndex < 0) {
                throw new Error('active component item not found in stack');
            }
        }
        if (this.contentItems.length > 0 && activeItemIndex === undefined) {
            throw new Error('expected non-empty stack to have an active component item');
        }
        else {
            const result = {
                type: 'stack',
                content: this.calculateConfigContent(),
                size: this.size,
                sizeUnit: this.sizeUnit,
                minSize: this.minSize,
                minSizeUnit: this.minSizeUnit,
                id: this.id,
                isClosable: this.isClosable,
                maximised: this.isMaximised,
                header: this.createHeaderConfig(),
                activeItemIndex,
            };
            return result;
        }
    }
    /**
     * Ok, this one is going to be the tricky one: The user has dropped a {@link (ContentItem:class)} onto this stack.
     *
     * It was dropped on either the stacks header or the top, right, bottom or left bit of the content area
     * (which one of those is stored in this._dropSegment). Now, if the user has dropped on the header the case
     * is relatively clear: We add the item to the existing stack... job done (might be good to have
     * tab reordering at some point, but lets not sweat it right now)
     *
     * If the item was dropped on the content part things are a bit more complicated. If it was dropped on either the
     * top or bottom region we need to create a new column and place the items accordingly.
     * Unless, of course if the stack is already within a column... in which case we want
     * to add the newly created item to the existing column...
     * either prepend or append it, depending on wether its top or bottom.
     *
     * Same thing for rows and left / right drop segments... so in total there are 9 things that can potentially happen
     * (left, top, right, bottom) * is child of the right parent (row, column) + header drop
     *
     * @internal
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onDrop(contentItem, area) {
        /*
         * The item was dropped on the header area. Just add it as a child of this stack and
         * get the hell out of this logic
         */
        if (this._dropSegment === "header" /* Header */) {
            this.resetHeaderDropZone();
            if (this._dropIndex === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('SODDI68990');
            }
            else {
                this.addChild(contentItem, this._dropIndex);
                return;
            }
        }
        /*
         * The stack is empty. Let's just add the element.
         */
        if (this._dropSegment === "body" /* Body */) {
            this.addChild(contentItem, 0, true);
            return;
        }
        /*
         * The item was dropped on the top-, left-, bottom- or right- part of the content. Let's
         * aggregate some conditions to make the if statements later on more readable
         */
        const isVertical = this._dropSegment === "top" /* Top */ || this._dropSegment === "bottom" /* Bottom */;
        const isHorizontal = this._dropSegment === "left" /* Left */ || this._dropSegment === "right" /* Right */;
        const insertBefore = this._dropSegment === "top" /* Top */ || this._dropSegment === "left" /* Left */;
        const hasCorrectParent = (isVertical && this.stackParent.isColumn) || (isHorizontal && this.stackParent.isRow);
        /*
         * The content item can be either a component or a stack. If it is a component, wrap it into a stack
         */
        if (contentItem.isComponent) {
            const itemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_7__.ResolvedStackItemConfig.createDefault();
            itemConfig.header = this.createHeaderConfig();
            const stack = this.layoutManager.createAndInitContentItem(itemConfig, this);
            stack.addChild(contentItem);
            contentItem = stack;
        }
        /*
         * If the contentItem that's being dropped is not dropped on a Stack (cases which just passed above and
         * which would wrap the contentItem in a Stack) we need to check whether contentItem is a RowOrColumn.
         * If it is, we need to re-wrap it in a Stack like it was when it was dragged by its Tab (it was dragged!).
         */
        if (contentItem.type === _utils_types__WEBPACK_IMPORTED_MODULE_2__.ItemType.row || contentItem.type === _utils_types__WEBPACK_IMPORTED_MODULE_2__.ItemType.column) {
            const itemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_7__.ResolvedStackItemConfig.createDefault();
            itemConfig.header = this.createHeaderConfig();
            const stack = this.layoutManager.createContentItem(itemConfig, this);
            stack.addChild(contentItem);
            contentItem = stack;
        }
        /*
         * If the item is dropped on top or bottom of a column or left and right of a row, it's already
         * layd out in the correct way. Just add it as a child
         */
        if (hasCorrectParent) {
            const index = this.stackParent.contentItems.indexOf(this);
            this.stackParent.addChild(contentItem, insertBefore ? index : index + 1, true);
            this.size *= 0.5;
            contentItem.size = this.size;
            contentItem.sizeUnit = this.sizeUnit;
            this.stackParent.updateSize();
            /*
             * This handles items that are dropped on top or bottom of a row or left / right of a column. We need
             * to create the appropriate contentItem for them to live in
             */
        }
        else {
            const type = isVertical ? _utils_types__WEBPACK_IMPORTED_MODULE_2__.ItemType.column : _utils_types__WEBPACK_IMPORTED_MODULE_2__.ItemType.row;
            const itemConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_7__.ResolvedItemConfig.createDefault(type);
            const rowOrColumn = this.layoutManager.createContentItem(itemConfig, this);
            this.stackParent.replaceChild(this, rowOrColumn);
            rowOrColumn.addChild(contentItem, insertBefore ? 0 : undefined, true);
            rowOrColumn.addChild(this, insertBefore ? undefined : 0, true);
            this.size = 50;
            contentItem.size = 50;
            contentItem.sizeUnit = _utils_types__WEBPACK_IMPORTED_MODULE_2__.SizeUnitEnum.Percent;
            rowOrColumn.updateSize();
        }
    }
    /**
     * If the user hovers above the header part of the stack, indicate drop positions for tabs.
     * otherwise indicate which segment of the body the dragged item would be dropped on
     *
     * @param x - Absolute Screen X
     * @param y - Absolute Screen Y
     * @internal
     */
    highlightDropZone(x, y) {
        for (const key in this._contentAreaDimensions) {
            const segment = key;
            const area = this._contentAreaDimensions[segment].hoverArea;
            if (area.x1 < x && area.x2 > x && area.y1 < y && area.y2 > y) {
                if (segment === "header" /* Header */) {
                    this._dropSegment = "header" /* Header */;
                    this.highlightHeaderDropZone(this._header.leftRightSided ? y : x);
                }
                else {
                    this.resetHeaderDropZone();
                    this.highlightBodyDropZone(segment);
                }
                return;
            }
        }
    }
    /** @internal */
    getArea() {
        if (this.element.style.display === 'none') {
            return null;
        }
        const headerArea = super.getElementArea(this._header.element);
        const contentArea = super.getElementArea(this._childElementContainer);
        if (headerArea === null || contentArea === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedNullError('SGAHC13086');
        }
        const contentWidth = contentArea.x2 - contentArea.x1;
        const contentHeight = contentArea.y2 - contentArea.y1;
        this._contentAreaDimensions = {
            header: {
                hoverArea: {
                    x1: headerArea.x1,
                    y1: headerArea.y1,
                    x2: headerArea.x2,
                    y2: headerArea.y2
                },
                highlightArea: {
                    x1: headerArea.x1,
                    y1: headerArea.y1,
                    x2: headerArea.x2,
                    y2: headerArea.y2
                }
            }
        };
        /**
         * Highlight the entire body if the stack is empty
         */
        if (this.contentItems.length === 0) {
            this._contentAreaDimensions.body = {
                hoverArea: {
                    x1: contentArea.x1,
                    y1: contentArea.y1,
                    x2: contentArea.x2,
                    y2: contentArea.y2
                },
                highlightArea: {
                    x1: contentArea.x1,
                    y1: contentArea.y1,
                    x2: contentArea.x2,
                    y2: contentArea.y2
                }
            };
            return super.getElementArea(this.element);
        }
        else {
            this._contentAreaDimensions.left = {
                hoverArea: {
                    x1: contentArea.x1,
                    y1: contentArea.y1,
                    x2: contentArea.x1 + contentWidth * 0.25,
                    y2: contentArea.y2
                },
                highlightArea: {
                    x1: contentArea.x1,
                    y1: contentArea.y1,
                    x2: contentArea.x1 + contentWidth * 0.5,
                    y2: contentArea.y2
                }
            };
            this._contentAreaDimensions.top = {
                hoverArea: {
                    x1: contentArea.x1 + contentWidth * 0.25,
                    y1: contentArea.y1,
                    x2: contentArea.x1 + contentWidth * 0.75,
                    y2: contentArea.y1 + contentHeight * 0.5
                },
                highlightArea: {
                    x1: contentArea.x1,
                    y1: contentArea.y1,
                    x2: contentArea.x2,
                    y2: contentArea.y1 + contentHeight * 0.5
                }
            };
            this._contentAreaDimensions.right = {
                hoverArea: {
                    x1: contentArea.x1 + contentWidth * 0.75,
                    y1: contentArea.y1,
                    x2: contentArea.x2,
                    y2: contentArea.y2
                },
                highlightArea: {
                    x1: contentArea.x1 + contentWidth * 0.5,
                    y1: contentArea.y1,
                    x2: contentArea.x2,
                    y2: contentArea.y2
                }
            };
            this._contentAreaDimensions.bottom = {
                hoverArea: {
                    x1: contentArea.x1 + contentWidth * 0.25,
                    y1: contentArea.y1 + contentHeight * 0.5,
                    x2: contentArea.x1 + contentWidth * 0.75,
                    y2: contentArea.y2
                },
                highlightArea: {
                    x1: contentArea.x1,
                    y1: contentArea.y1 + contentHeight * 0.5,
                    x2: contentArea.x2,
                    y2: contentArea.y2
                }
            };
            return super.getElementArea(this.element);
        }
    }
    /**
     * Programmatically operate with header position.
     *
     * @param position -
     *
     * @returns previous header position
     * @internal
     */
    positionHeader(position) {
        if (this._header.side !== position) {
            this._header.setSide(position);
            this._headerSideChanged = true;
            this.setupHeaderPosition();
        }
    }
    /** @internal */
    updateNodeSize() {
        if (this.element.style.display !== 'none') {
            this.emit('resize');
            this.emitStateChangedEvent();
        }
    }
    /** @internal */
    highlightHeaderDropZone(x) {
        var _a;
        const tabDropPlaceholder = this.layoutManager.tabDropPlaceholder;
        tabDropPlaceholder.remove();
        const tabsContainerElement = this._header.tabsContainerElement;
        const tabsContainerElementChildNodes = tabsContainerElement.childNodes;
        // Only walk over the visible tabs
        const visibleTabsLength = tabsContainerElementChildNodes.length;
        /*
        // Create shallow copy of childNodes list, excluding DropPlaceHolder, as we will be modifying the childNodes list
        const visibleTabElements = new Array<HTMLElement>(visibleTabsLength);
        let tabIndex = 0;
        let tabCount = 0;
        while (tabCount < visibleTabsLength) {
            const visibleTabElement = tabsContainerElementChildNodes[tabIndex++] as HTMLElement;
            if (visibleTabElement !== this.layoutManager.tabDropPlaceholder) {
                visibleTabElements[tabCount++] = visibleTabElement;
            }
            }
        */
        const dropTargetIndicator = this.layoutManager.dropTargetIndicator;
        if (dropTargetIndicator === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedNullError('SHHDZDTI97110');
        }
        let area;
        // Empty stack
        if (visibleTabsLength === 0) {
            const headerRect = this._header.element.getBoundingClientRect();
            const headerTop = headerRect.top + document.body.scrollTop;
            const headerLeft = headerRect.left + document.body.scrollLeft;
            area = {
                x1: headerLeft,
                x2: headerLeft + 100,
                y1: headerTop + headerRect.height - 20,
                y2: headerTop + headerRect.height,
            };
            this._dropIndex = 0;
        }
        else {
            let tabIndex = 0;
            // This indicates whether our cursor is exactly over a tab
            let isAboveTab = false;
            let tabTop;
            let tabLeft;
            let tabWidth;
            let tabElement;
            let afterDrag = 0;
            do {
                tabElement = tabsContainerElementChildNodes[tabIndex];
                //tabElement = visibleTabElements[tabIndex] as HTMLElement;
                const tabRect = tabElement.getBoundingClientRect();
                const tabRectTop = tabRect.top + document.body.scrollTop;
                const tabRectLeft = tabRect.left + document.body.scrollLeft;
                if (this._header.leftRightSided) {
                    tabLeft = tabRectTop;
                    tabTop = tabRectLeft;
                    tabWidth = tabRect.height;
                }
                else {
                    tabLeft = tabRectLeft;
                    tabTop = tabRectTop;
                    tabWidth = tabRect.width;
                }
                if (tabElement.classList.contains("lm_dragging" /* Dragging */)) {
                    afterDrag++;
                }
                if (x >= tabLeft && x < tabLeft + tabWidth) {
                    isAboveTab = true;
                }
                else {
                    tabIndex++;
                }
            } while (tabIndex < visibleTabsLength && !isAboveTab);
            // If we're not above any tabs, or to the right of any tab, we are out of the area, so give up
            if (isAboveTab === false && x < tabLeft) {
                return;
            }
            const preferNext = x >= (tabLeft + tabWidth / 2);
            this._dropIndex = tabIndex + (tabIndex < visibleTabsLength && preferNext ? 1 : 0) - afterDrag;
            (_a = tabElement.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(tabDropPlaceholder, preferNext ? tabElement.nextSibling : tabElement);
            const tabDropPlaceholderRect = this.layoutManager.tabDropPlaceholder.getBoundingClientRect();
            const tabDropPlaceholderRectTop = tabDropPlaceholderRect.top + document.body.scrollTop;
            const tabDropPlaceholderRectLeft = tabDropPlaceholderRect.left + document.body.scrollLeft;
            const tabDropPlaceholderRectWidth = tabDropPlaceholderRect.width;
            if (this._header.leftRightSided) {
                const placeHolderTop = tabDropPlaceholderRectTop;
                area = {
                    x1: tabTop,
                    x2: tabTop + tabElement.clientHeight,
                    y1: placeHolderTop,
                    y2: placeHolderTop + tabDropPlaceholderRectWidth,
                };
            }
            else {
                const placeHolderLeft = tabDropPlaceholderRectLeft;
                area = {
                    x1: placeHolderLeft,
                    x2: placeHolderLeft + tabDropPlaceholderRectWidth,
                    y1: tabTop,
                    y2: tabTop + tabElement.clientHeight,
                };
            }
        }
        dropTargetIndicator.highlightArea(area, 0);
        return;
    }
    /** @internal */
    resetHeaderDropZone() {
        this.layoutManager.tabDropPlaceholder.remove();
    }
    /** @internal */
    setupHeaderPosition() {
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_8__.setElementDisplayVisibility)(this._header.element, this._header.show);
        this.element.classList.remove("lm_left" /* Left */, "lm_right" /* Right */, "lm_bottom" /* Bottom */);
        if (this._header.leftRightSided) {
            this.element.classList.add('lm_' + this._header.side);
        }
        //if ([Side.right, Side.bottom].includes(this._header.side)) {
        //    // move the header behind the content.
        //    this.element.appendChild(this._header.element);
        //}
        this.updateSize();
    }
    /** @internal */
    highlightBodyDropZone(segment) {
        if (this._contentAreaDimensions === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('SHBDZC82265');
        }
        else {
            const highlightArea = this._contentAreaDimensions[segment].highlightArea;
            const dropTargetIndicator = this.layoutManager.dropTargetIndicator;
            if (dropTargetIndicator === null) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedNullError('SHBDZD96110');
            }
            else {
                dropTargetIndicator.highlightArea(highlightArea, 1);
                this._dropSegment = segment;
            }
        }
    }
    updateTabSizes() {
        if (this._header)
            this._header.updateTabSizes();
    }
    /** @internal */
    handleMaximised() {
        this._header.processMaximised();
    }
    /** @internal */
    handleMinimised() {
        this._header.processMinimised();
    }
    /** @internal */
    handlePopoutEvent() {
        this.popout();
    }
    /** @internal */
    handleHeaderClickEvent(ev) {
        // Forces updates if click is when top-level window has lost focus.
        if (this._activeComponentItem)
            this.setActiveComponentItem(this._activeComponentItem, true);
        const eventName = _utils_event_emitter__WEBPACK_IMPORTED_MODULE_9__.EventEmitter.headerClickEventName;
        const bubblingEvent = new _utils_event_emitter__WEBPACK_IMPORTED_MODULE_9__.EventEmitter.ClickBubblingEvent(eventName, this, ev);
        this.emit(eventName, bubblingEvent);
    }
    /** @internal */
    handleHeaderTouchStartEvent(ev) {
        const eventName = _utils_event_emitter__WEBPACK_IMPORTED_MODULE_9__.EventEmitter.headerTouchStartEventName;
        const bubblingEvent = new _utils_event_emitter__WEBPACK_IMPORTED_MODULE_9__.EventEmitter.TouchStartBubblingEvent(eventName, this, ev);
        this.emit(eventName, bubblingEvent);
    }
    /** @internal */
    handleHeaderComponentRemoveEvent(item) {
        this.removeChild(item, false);
    }
    /** @internal */
    handleHeaderComponentFocusEvent(item) {
        this.setActiveComponentItem(item, true);
    }
    /** @internal */
    handleHeaderComponentStartDragEvent(x, y, dragListener, componentItem) {
        if (this.isMaximised === true) {
            this.toggleMaximise();
        }
        this.layoutManager.startComponentDragOld(x, y, dragListener, componentItem, this);
    }
    /** @internal */
    createHeaderConfig() {
        if (!this._headerSideChanged) {
            return _config_resolved_config__WEBPACK_IMPORTED_MODULE_7__.ResolvedHeaderedItemConfig.Header.createCopy(this._headerConfig);
        }
        else {
            const show = this._header.show ? this._header.side : false;
            let result = _config_resolved_config__WEBPACK_IMPORTED_MODULE_7__.ResolvedHeaderedItemConfig.Header.createCopy(this._headerConfig, show);
            if (result === undefined) {
                result = {
                    show,
                    popout: undefined,
                    maximise: undefined,
                    close: undefined,
                    minimise: undefined,
                    tabDropdown: undefined,
                };
            }
            return result;
        }
    }
    /** @internal */
    emitStateChangedEvent() {
        this.emitBaseBubblingEvent('stateChanged');
    }
}


/***/ }),

/***/ "./src/ts/layout-manager.ts":
/*!**********************************!*\
  !*** ./src/ts/layout-manager.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LayoutManager": () => (/* binding */ LayoutManager)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _controls_browser_popout__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./controls/browser-popout */ "./src/ts/controls/browser-popout.ts");
/* harmony import */ var _controls_drag_proxy__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./controls/drag-proxy */ "./src/ts/controls/drag-proxy.ts");
/* harmony import */ var _controls_drag_source__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./controls/drag-source */ "./src/ts/controls/drag-source.ts");
/* harmony import */ var _controls_drop_target_indicator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./controls/drop-target-indicator */ "./src/ts/controls/drop-target-indicator.ts");
/* harmony import */ var _errors_external_error__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./errors/external-error */ "./src/ts/errors/external-error.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _items_component_item__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./items/component-item */ "./src/ts/items/component-item.ts");
/* harmony import */ var _items_content_item__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./items/content-item */ "./src/ts/items/content-item.ts");
/* harmony import */ var _items_ground_item__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./items/ground-item */ "./src/ts/items/ground-item.ts");
/* harmony import */ var _items_row_or_column__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./items/row-or-column */ "./src/ts/items/row-or-column.ts");
/* harmony import */ var _items_stack__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./items/stack */ "./src/ts/items/stack.ts");
/* harmony import */ var _utils_config_minifier__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/config-minifier */ "./src/ts/utils/config-minifier.ts");
/* harmony import */ var _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils_event_hub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/event-hub */ "./src/ts/utils/event-hub.ts");
/* harmony import */ var _utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/i18n-strings */ "./src/ts/utils/i18n-strings.ts");
/* harmony import */ var _utils_types__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/utils */ "./src/ts/utils/utils.ts");



















var DragState;
(function (DragState) {
    DragState[DragState["NotDragging"] = 0] = "NotDragging";
    DragState[DragState["DroppedInThisWindow"] = 1] = "DroppedInThisWindow";
    DragState[DragState["DroppedElsewhere"] = 2] = "DroppedElsewhere";
    DragState[DragState["CurrentlyDragging"] = 3] = "CurrentlyDragging";
})(DragState || (DragState = {}));
/**
 * The main class that will be exposed as GoldenLayout.
 */
/** @public */
class LayoutManager extends _utils_event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /**
    * @param container - A Dom HTML element. Defaults to body
    * @internal
    */
    constructor(parameters) {
        super();
        /** Whether the layout will be automatically be resized to container whenever the container's size is changed
         * Default is true if <body> is the container otherwise false
         * Default will be changed to true for any container in the future
         */
        this.resizeWithContainerAutomatically = false;
        /** The debounce interval (in milliseconds) used whenever a layout is automatically resized.  0 means next tick */
        this.resizeDebounceInterval = 100;
        /** Extend the current debounce delay time period if it is triggered during the delay.
         * If this is true, the layout will only resize when its container has stopped being resized.
         * If it is false, the layout will resize at intervals while its container is being resized.
         */
        this.resizeDebounceExtendedWhenPossible = true;
        /** @internal */
        this._isInitialised = false;
        /** @internal */
        this._groundItem = undefined;
        /** @internal */
        this._openPopouts = [];
        /** @internal */
        this._dropTargetIndicator = null;
        /** @internal */
        this._itemAreas = null;
        this._dragState = DragState.NotDragging;
        this._lastDragLeaveTime = 0;
        /** @internal */
        this._dragEnterCount = 0;
        /** @internal */
        this._maximisePlaceholder = LayoutManager.createMaximisePlaceElement(document);
        /** @internal */
        this._tabDropPlaceholder = LayoutManager.createTabDropPlaceholderElement(document);
        /** @internal */
        this._dragSources = [];
        /** @internal */
        this._updatingColumnsResponsive = false;
        /** @internal */
        this._firstLoad = true;
        /** @internal */
        this._eventHub = new _utils_event_hub__WEBPACK_IMPORTED_MODULE_1__.EventHub(this);
        /** @internal */
        this._width = null;
        /** @internal */
        this._height = null;
        /** @internal */
        this._virtualSizedContainers = [];
        /** @internal */
        this._virtualSizedContainerAddingBeginCount = 0;
        /** @internal */
        this._resizeObserver = new ResizeObserver(() => this.handleContainerResize());
        /** @internal @deprecated to be removed in version 3 */
        this._windowBeforeUnloadListener = () => this.onBeforeUnload();
        /** @internal @deprecated to be removed in version 3 */
        this._windowBeforeUnloadListening = false;
        /** @internal */
        this._maximisedStackBeforeDestroyedListener = (ev) => this.cleanupBeforeMaximisedStackDestroyed(ev);
        this._area = null;
        this._lastValidArea = null;
        this._actionsOnDragEnd = [];
        this.popoutClickHandler = () => false;
        this._removeItem = undefined;
        // May be set by client code.
        this.inSomeWindow = false;
        this.delayedDragEndFunction = undefined;
        this.createComponentElement = (config, component) => {
            var _a, _b;
            let parent = ((_a = this.groundItem) === null || _a === void 0 ? void 0 : _a.element) || document.body;
            const contentElement = document.createElement('div');
            let componentElement = contentElement;
            if ((_b = this.layoutConfig.settings.copyForDragImage) !== null && _b !== void 0 ? _b : this.layoutConfig.settings.useDragAndDrop) {
                componentElement = document.createElement('div');
                parent.appendChild(componentElement);
                parent = componentElement;
            }
            parent.appendChild(contentElement);
            contentElement.classList.add("lm_content" /* Content */);
            return componentElement;
        };
        this.isSubWindow = parameters.isSubWindow;
        this._constructorOrSubWindowLayoutConfig = parameters.constructorOrSubWindowLayoutConfig;
        _utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.I18nStrings.checkInitialise();
        _utils_config_minifier__WEBPACK_IMPORTED_MODULE_3__.ConfigMinifier.checkInitialise();
        if (parameters.containerElement !== undefined) {
            this._containerElement = parameters.containerElement;
        }
        if (parameters.containerPosition !== undefined) {
            this._containerPosition = parameters.containerPosition;
        }
        this.containerWidthAndHeight = () => (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.getElementWidthAndHeight)(this._containerElement);
    }
    enterOrLeaveSomeWindow(entering) {
        this.inSomeWindow = entering;
        if (!entering) {
            this._lastDragLeaveTime = Date.now();
        }
    }
    get container() { return this._containerElement; }
    get isInitialised() { return this._isInitialised; }
    /** @internal */
    get groundItem() { return this._groundItem; }
    /** @internal @deprecated use {@link (LayoutManager:class).groundItem} instead */
    get root() { return this._groundItem; }
    get openPopouts() { return this._openPopouts; }
    /** @internal */
    get dropTargetIndicator() { return this._dropTargetIndicator; }
    get width() { return this._width; }
    get height() { return this._height; }
    /**
     * Retrieves the {@link (EventHub:class)} instance associated with this layout manager.
     * This can be used to propagate events between the windows
     * @public
     */
    get eventHub() { return this._eventHub; }
    get rootItem() {
        if (this._groundItem === undefined) {
            throw new Error('Cannot access rootItem before init');
        }
        else {
            const groundContentItems = this._groundItem.contentItems;
            if (groundContentItems.length === 0) {
                return undefined;
            }
            else {
                return this._groundItem.contentItems[0];
            }
        }
    }
    get focusedComponentItem() { return this._focusedComponentItem; }
    /** @internal */
    get tabDropPlaceholder() { return this._tabDropPlaceholder; }
    get maximisedStack() { return this._maximisedStack; }
    /** @deprecated indicates deprecated constructor use */
    get deprecatedConstructor() { return !this.isSubWindow && this._constructorOrSubWindowLayoutConfig !== undefined; }
    /**
     * Destroys the LayoutManager instance itself as well as every ContentItem
     * within it. After this is called nothing should be left of the LayoutManager.
     *
     * This function only needs to be called if an application wishes to destroy the Golden Layout object while
     * a page remains loaded. When a page is unloaded, all resources claimed by Golden Layout will automatically
     * be released.
     */
    destroy() {
        if (this._isInitialised) {
            if (this._windowBeforeUnloadListening) {
                globalThis.removeEventListener('beforeunload', this._windowBeforeUnloadListener);
                this._windowBeforeUnloadListening = false;
            }
            if (this.layoutConfig.settings.closePopoutsOnUnload === true) {
                this.closeAllOpenPopouts();
            }
            this._resizeObserver.disconnect();
            this.checkClearResizeTimeout();
            if (this._groundItem !== undefined) {
                this._groundItem.destroy();
            }
            this._tabDropPlaceholder.remove();
            if (this._dropTargetIndicator !== null) {
                this._dropTargetIndicator.destroy();
            }
            this._eventHub.destroy();
            for (const dragSource of this._dragSources) {
                dragSource.destroy();
            }
            this._dragSources = [];
            this._isInitialised = false;
        }
    }
    /**
     * Takes a GoldenLayout configuration object and
     * replaces its keys and values recursively with
     * one letter codes
     * @deprecated use {@link (ResolvedLayoutConfig:namespace).minifyConfig} instead
     */
    minifyConfig(config) {
        return _config_resolved_config__WEBPACK_IMPORTED_MODULE_5__.ResolvedLayoutConfig.minifyConfig(config);
    }
    useNativeDragAndDrop() { return this.layoutConfig.settings.useDragAndDrop; }
    currentlyDragging() { return this._dragState == DragState.CurrentlyDragging; }
    dragDataMimetype() { return this.layoutConfig.settings.dragDataMimetype; }
    validDragEvent(e) {
        var _a;
        // FIXME. Might be a good idea to check that all componentTypes in the
        // dataTransfer value are registered types.
        // That should make it more robust even if dragDataMimetype is the default.
        return ((_a = e.dataTransfer) === null || _a === void 0 ? void 0 : _a.types.includes(this.dragDataMimetype())) || false;
    }
    /**
     * Takes a configuration Object that was previously minified
     * using minifyConfig and returns its original version
     * @deprecated use {@link (ResolvedLayoutConfig:namespace).unminifyConfig} instead
     */
    unminifyConfig(config) {
        return _config_resolved_config__WEBPACK_IMPORTED_MODULE_5__.ResolvedLayoutConfig.unminifyConfig(config);
    }
    _hideTargetIndicator() {
        const dropTargetIndicator = this.dropTargetIndicator;
        if (dropTargetIndicator === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedNullError('DPOD30011');
        }
        else {
            dropTargetIndicator.hide();
        }
    }
    /**
     * Called from GoldenLayout class. Finishes of init
     * @internal
     */
    init() {
        this.setContainer();
        this.updateSizeFromContainer();
        let subWindowRootConfig;
        if (this.isSubWindow) {
            if (this._constructorOrSubWindowLayoutConfig === undefined) {
                // SubWindow LayoutConfig should have been generated by constructor
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMIU07155');
            }
            else {
                const root = this._constructorOrSubWindowLayoutConfig.root;
                if (root === undefined) {
                    // SubWindow LayoutConfig must not be empty
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('LMIC07156');
                }
                else {
                    if (_config_config__WEBPACK_IMPORTED_MODULE_7__.ItemConfig.isComponent(root)) {
                        subWindowRootConfig = root;
                    }
                    else {
                        // SubWindow LayoutConfig must have Component as Root
                        throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('LMIC07157');
                    }
                }
                const resolvedLayoutConfig = _config_config__WEBPACK_IMPORTED_MODULE_7__.LayoutConfig.resolve(this._constructorOrSubWindowLayoutConfig);
                // remove root from layoutConfig
                this.layoutConfig = Object.assign(Object.assign({}, resolvedLayoutConfig), { root: undefined });
            }
        }
        else {
            if (this._constructorOrSubWindowLayoutConfig === undefined) {
                this.layoutConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_5__.ResolvedLayoutConfig.createDefault(); // will overwritten be loaded via loadLayout
            }
            else {
                // backwards compatibility
                this.layoutConfig = _config_config__WEBPACK_IMPORTED_MODULE_7__.LayoutConfig.resolve(this._constructorOrSubWindowLayoutConfig);
            }
        }
        const layoutConfig = this.layoutConfig;
        this._groundItem = new _items_ground_item__WEBPACK_IMPORTED_MODULE_8__.GroundItem(this, layoutConfig.root, this._containerElement, this._containerPosition);
        this._groundItem.init();
        const element = this._groundItem.element;
        this._dropTargetIndicator = new _controls_drop_target_indicator__WEBPACK_IMPORTED_MODULE_9__.DropTargetIndicator(element, element.firstChild);
        this.checkLoadedLayoutMaximiseItem();
        this._resizeObserver.observe(this._containerElement);
        this._isInitialised = true;
        this.adjustColumnsResponsive();
        this.emit('initialised');
        if (subWindowRootConfig !== undefined) {
            // must be SubWindow
            this.loadComponentAsRoot(subWindowRootConfig);
        }
        const elm = document.body; //this._groundItem.element;
        if (this.useNativeDragAndDrop()) {
            elm.addEventListener('dragover', (e) => this.onDragOver(e), true);
            elm.addEventListener('dragenter', (e) => this.onDragEnter(e), true);
            elm.addEventListener('dragleave', (e) => this.onDragLeave(e), true);
            elm.addEventListener('dragend', (e) => {
                const x = e.screenX, y = e.screenY;
                if (this._dragState === DragState.CurrentlyDragging) {
                    this.delayedDragEndFunction = () => {
                        if (this.delayedDragEndTimer)
                            clearTimeout(this.delayedDragEndTimer);
                        this.delayedDragEndTimer = undefined;
                        this.delayedDragEndFunction = undefined;
                        this.onDragEnd(x, y);
                    };
                    this.delayedDragEndTimer = globalThis.setTimeout(this.delayedDragEndFunction, 100);
                }
                else
                    this.onDragEnd(x, y, e);
            }, true);
            elm.addEventListener('drop', (e) => { console.log("drop event"); this.onDrop(e); });
        }
    }
    /**
    * Sets the target position, highlighting the appropriate area
    *
    * @param x - The x position in px
    * @param y - The y position in px
    *
    * @internal
    */
    setDropPosition(x, y) {
        // this._element.style.left = numberToPixels(x);
        // this._element.style.top = numberToPixels(y);
        this._area = this.getArea(x, y);
        if (this._area !== null) {
            this._lastValidArea = this._area;
            this._area.contentItem.highlightDropZone(x, y, this._area);
        }
    }
    onDrag(event) {
        const x = event.pageX;
        const y = event.pageY;
        if (this._itemAreas === null)
            this.calculateItemAreas();
        if (this._itemAreas === null || this._itemAreas.length === 0)
            return;
        this.setDropPosition(x, y);
    }
    /**
     * Loads a new layout
     * @param layoutConfig - New layout to be loaded
     */
    loadLayout(layoutConfig) {
        if (!this.isInitialised) {
            // In case application not correctly using legacy constructor
            throw new Error('GoldenLayout: Need to call init() if LayoutConfig with defined root passed to constructor');
        }
        else {
            if (this._groundItem === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMLL11119');
            }
            else {
                this.createSubWindows(); // still needs to be tested
                this.layoutConfig = _config_config__WEBPACK_IMPORTED_MODULE_7__.LayoutConfig.resolve(layoutConfig);
                this._groundItem.loadRoot(this.layoutConfig.root);
                this.checkLoadedLayoutMaximiseItem();
                this.adjustColumnsResponsive();
            }
        }
    }
    /**
     * Creates a layout configuration object based on the the current state
     *
     * @public
     * @returns GoldenLayout configuration
     */
    saveLayout() {
        if (this._isInitialised === false) {
            throw new Error('Can\'t create config, layout not yet initialised');
        }
        else {
            // if (root !== undefined && !(root instanceof ContentItem)) {
            //     throw new Error('Root must be a ContentItem');
            // }
            /*
            * Content
            */
            if (this._groundItem === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMTC18244');
            }
            else {
                const groundContent = this._groundItem.calculateConfigContent();
                let rootItemConfig;
                if (groundContent.length !== 1) {
                    rootItemConfig = undefined;
                }
                else {
                    rootItemConfig = groundContent[0];
                }
                /*
                * Retrieve config for subwindows
                */
                this.reconcilePopoutWindows();
                const openPopouts = [];
                for (let i = 0; i < this._openPopouts.length; i++) {
                    openPopouts.push(this._openPopouts[i].toConfig());
                }
                const config = {
                    root: rootItemConfig,
                    openPopouts,
                    settings: _config_resolved_config__WEBPACK_IMPORTED_MODULE_5__.ResolvedLayoutConfig.Settings.createCopy(this.layoutConfig.settings),
                    dimensions: _config_resolved_config__WEBPACK_IMPORTED_MODULE_5__.ResolvedLayoutConfig.Dimensions.createCopy(this.layoutConfig.dimensions),
                    header: _config_resolved_config__WEBPACK_IMPORTED_MODULE_5__.ResolvedLayoutConfig.Header.createCopy(this.layoutConfig.header),
                    resolved: true,
                };
                return config;
            }
        }
    }
    /**
     * Removes any existing layout. Effectively, an empty layout will be loaded.
     */
    clear() {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMCL11129');
        }
        else {
            this._groundItem.clearRoot();
        }
    }
    /**
     * @deprecated Use {@link (LayoutManager:class).saveLayout}
     */
    toConfig() {
        return this.saveLayout();
    }
    /**
     * Adds a new ComponentItem.  Will use default location selectors to ensure a location is found and
     * component is successfully added
     * @param componentTypeName - Name of component type to be created.
     * @param state - Optional initial state to be assigned to component
     * @returns New ComponentItem created.
     */
    newComponent(componentType, componentState, title) {
        const componentItem = this.newComponentAtLocation(componentType, componentState, title);
        if (componentItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('LMNC65588');
        }
        else {
            return componentItem;
        }
    }
    /**
     * Adds a ComponentItem at the first valid selector location.
     * @param componentTypeName - Name of component type to be created.
     * @param state - Optional initial state to be assigned to component
     * @param locationSelectors - Array of location selectors used to find location in layout where component
     * will be added. First location in array which is valid will be used. If locationSelectors is undefined,
     * {@link (LayoutManager:namespace).defaultLocationSelectors} will be used
     * @returns New ComponentItem created or undefined if no valid location selector was in array.
     */
    newComponentAtLocation(componentType, componentState, title, locationSelectors) {
        if (this._groundItem === undefined) {
            throw new Error('Cannot add component before init');
        }
        else {
            const location = this.addComponentAtLocation(componentType, componentState, title, locationSelectors);
            if (location === undefined) {
                return undefined;
            }
            else {
                const createdItem = location.parentItem.contentItems[location.index];
                if (!_items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem.isComponentItem(createdItem)) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('LMNC992877533');
                }
                else {
                    return createdItem;
                }
            }
        }
    }
    /**
     * Adds a new ComponentItem.  Will use default location selectors to ensure a location is found and
     * component is successfully added
     * @param componentType - Type of component to be created.
     * @param state - Optional initial state to be assigned to component
     * @returns Location of new ComponentItem created.
     */
    addComponent(componentType, componentState, title) {
        const location = this.addComponentAtLocation(componentType, componentState, title);
        if (location === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('LMAC99943');
        }
        else {
            return location;
        }
    }
    /**
     * Adds a ComponentItem at the first valid selector location.
     * @param componentType - Type of component to be created.
     * @param state - Optional initial state to be assigned to component
     * @param locationSelectors - Array of location selectors used to find determine location in layout where component
     * will be added. First location in array which is valid will be used. If undefined,
     * {@link (LayoutManager:namespace).defaultLocationSelectors} will be used.
     * @returns Location of new ComponentItem created or undefined if no valid location selector was in array.
     */
    addComponentAtLocation(componentType, componentState, title, locationSelectors) {
        const itemConfig = {
            type: 'component',
            componentType,
            componentState,
            title,
        };
        return this.addItemAtLocation(itemConfig, locationSelectors);
    }
    /**
     * Adds a new ContentItem.  Will use default location selectors to ensure a location is found and
     * component is successfully added
     * @param itemConfig - ResolvedItemConfig of child to be added.
     * @returns New ContentItem created.
    */
    newItem(itemConfig) {
        const contentItem = this.newItemAtLocation(itemConfig);
        if (contentItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('LMNC65588');
        }
        else {
            return contentItem;
        }
    }
    /**
     * Adds a new child ContentItem under the root ContentItem.  If a root does not exist, then create root ContentItem instead
     * @param itemConfig - ResolvedItemConfig of child to be added.
     * @param locationSelectors - Array of location selectors used to find determine location in layout where ContentItem
     * will be added. First location in array which is valid will be used. If undefined,
     * {@link (LayoutManager:namespace).defaultLocationSelectors} will be used.
     * @returns New ContentItem created or undefined if no valid location selector was in array. */
    newItemAtLocation(itemConfig, locationSelectors) {
        if (this._groundItem === undefined) {
            throw new Error('Cannot add component before init');
        }
        else {
            const location = this.addItemAtLocation(itemConfig, locationSelectors);
            if (location === undefined) {
                return undefined;
            }
            else {
                const createdItem = location.parentItem.contentItems[location.index];
                return createdItem;
            }
        }
    }
    /**
     * Adds a new ContentItem.  Will use default location selectors to ensure a location is found and
     * component is successfully added.
     * @param itemConfig - ResolvedItemConfig of child to be added.
     * @returns Location of new ContentItem created. */
    addItem(itemConfig) {
        const location = this.addItemAtLocation(itemConfig);
        if (location === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('LMAI99943');
        }
        else {
            return location;
        }
    }
    /**
     * Adds a ContentItem at the first valid selector location.
     * @param itemConfig - ResolvedItemConfig of child to be added.
     * @param locationSelectors - Array of location selectors used to find determine location in layout where ContentItem
     * will be added. First location in array which is valid will be used. If undefined,
     * {@link (LayoutManager:namespace).defaultLocationSelectors} will be used.
     * @returns Location of new ContentItem created or undefined if no valid location selector was in array. */
    addItemAtLocation(itemConfig, locationSelectors) {
        if (this._groundItem === undefined) {
            throw new Error('Cannot add component before init');
        }
        else {
            if (locationSelectors === undefined) {
                // defaultLocationSelectors should always find a location
                locationSelectors = LayoutManager.defaultLocationSelectors;
            }
            const location = this.findFirstLocation(locationSelectors);
            if (location === undefined) {
                return undefined;
            }
            else {
                let parentItem = location.parentItem;
                let addIdx;
                switch (parentItem.type) {
                    case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.ground: {
                        const groundItem = parentItem;
                        addIdx = groundItem.addItem(itemConfig, location.index);
                        if (addIdx >= 0) {
                            parentItem = this._groundItem.contentItems[0]; // was added to rootItem
                        }
                        else {
                            addIdx = 0; // was added as rootItem (which is the first and only ContentItem in GroundItem)
                        }
                        break;
                    }
                    case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.row:
                    case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.column: {
                        const rowOrColumn = parentItem;
                        addIdx = rowOrColumn.addItem(itemConfig, location.index);
                        break;
                    }
                    case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.stack: {
                        if (!_config_config__WEBPACK_IMPORTED_MODULE_7__.ItemConfig.isComponent(itemConfig)) {
                            throw Error(_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.i18nStrings[6]);
                        }
                        else {
                            const stack = parentItem;
                            addIdx = stack.addItem(itemConfig, location.index);
                            break;
                        }
                    }
                    case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.component: {
                        throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('LMAIALC87444602');
                    }
                    default:
                        throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnreachableCaseError('LMAIALU98881733', parentItem.type);
                }
                if (_config_config__WEBPACK_IMPORTED_MODULE_7__.ItemConfig.isComponent(itemConfig)) {
                    // see if stack was inserted
                    const item = parentItem.contentItems[addIdx];
                    if (_items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem.isStack(item)) {
                        parentItem = item;
                        addIdx = 0;
                    }
                }
                location.parentItem = parentItem;
                location.index = addIdx;
                return location;
            }
        }
    }
    /** Loads the specified component ResolvedItemConfig as root.
     * This can be used to display a Component all by itself.  The layout cannot be changed other than having another new layout loaded.
     * Note that, if this layout is saved and reloaded, it will reload with the Component as a child of a Stack.
    */
    loadComponentAsRoot(itemConfig) {
        if (this._groundItem === undefined) {
            throw new Error('Cannot add item before init');
        }
        else {
            this._groundItem.loadComponentAsRoot(itemConfig);
        }
    }
    /** @deprecated Use {@link (LayoutManager:class).setSize} */
    updateSize(width, height) {
        this.setSize(width, height);
    }
    /**
     * Updates the layout managers size
     *
     * @param width - Width in pixels
     * @param height - Height in pixels
     */
    setSize(width, height) {
        this._width = width;
        this._height = height;
        if (this._isInitialised === true) {
            if (this._groundItem === undefined) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMUS18881');
            }
            else {
                this._groundItem.setSize(this._width, this._height);
                if (this._maximisedStack) {
                    const { width, height } = this.containerWidthAndHeight();
                    (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementWidth)(this._maximisedStack.element, width);
                    (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementHeight)(this._maximisedStack.element, height);
                    this._maximisedStack.updateSize();
                }
                this.adjustColumnsResponsive();
            }
        }
    }
    /** @internal */
    updateSizeFromContainer() {
        const { width, height } = this.containerWidthAndHeight();
        this.setSize(width, height);
    }
    /**
     * Update the size of the root ContentItem.  This will update the size of all contentItems in the tree
     */
    updateRootSize() {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMURS28881');
        }
        else {
            this._groundItem.updateSize();
        }
    }
    /** @public */
    createAndInitContentItem(config, parent) {
        const newItem = this.createContentItem(config, parent);
        newItem.init();
        return newItem;
    }
    /**
     * Recursively creates new item tree structures based on a provided
     * ItemConfiguration object
     *
     * @param config - ResolvedItemConfig
     * @param parent - The item the newly created item should be a child of
     * @internal
     */
    createContentItem(config, parent) {
        if (typeof config.type !== 'string') {
            throw new _errors_external_error__WEBPACK_IMPORTED_MODULE_12__.ConfigurationError('Missing parameter \'type\'', JSON.stringify(config));
        }
        /**
         * We add an additional stack around every component that's not within a stack anyways.
         */
        if (
        // If this is a component
        _config_resolved_config__WEBPACK_IMPORTED_MODULE_5__.ResolvedItemConfig.isComponentItem(config) &&
            // and it's not already within a stack
            !(parent instanceof _items_stack__WEBPACK_IMPORTED_MODULE_13__.Stack) &&
            // and we have a parent
            !!parent &&
            // and it's not the topmost item in a new window
            !(this.isSubWindow === true && parent instanceof _items_ground_item__WEBPACK_IMPORTED_MODULE_8__.GroundItem)) {
            const stackConfig = {
                type: _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.stack,
                content: [config],
                size: config.size,
                sizeUnit: config.sizeUnit,
                minSize: config.minSize,
                minSizeUnit: config.minSizeUnit,
                id: config.id,
                maximised: config.maximised,
                isClosable: config.isClosable,
                activeItemIndex: 0,
                header: undefined,
            };
            config = stackConfig;
        }
        const contentItem = this.createContentItemFromConfig(config, parent);
        return contentItem;
    }
    findFirstComponentItemById(id) {
        if (this._groundItem === undefined) {
            return undefined;
        }
        else {
            return this.findFirstContentItemTypeByIdRecursive(_utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.component, id, this._groundItem);
        }
    }
    /**
     * Creates a popout window with the specified content at the specified position
     *
     * @param itemConfigOrContentItem - The content of the popout window's layout manager derived from either
     * a {@link (ContentItem:class)} or {@link (ItemConfig:interface)} or ResolvedItemConfig content (array of {@link (ItemConfig:interface)})
     * @param positionAndSize - The width, height, left and top of Popout window
     * @param parentId -The id of the element this item will be appended to when popIn is called
     * @param indexInParent - The position of this item within its parent element
     */
    createPopout(itemConfigOrContentItem, positionAndSize, parentId, indexInParent) {
        if (itemConfigOrContentItem instanceof _items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem) {
            return this.createPopoutFromContentItem(itemConfigOrContentItem, positionAndSize, parentId, indexInParent);
        }
        else {
            return this.createPopoutFromItemConfig(itemConfigOrContentItem, positionAndSize, parentId, indexInParent);
        }
    }
    /** @internal */
    createPopoutFromContentItem(item, window, parentId, indexInParent) {
        /**
         * If the item is the only component within a stack or for some
         * other reason the only child of its parent the parent will be destroyed
         * when the child is removed.
         *
         * In order to support this we move up the tree until we find something
         * that will remain after the item is being popped out
         */
        let parent = item.parent;
        let child = item;
        while (parent !== null && parent.contentItems.length === 1 && !parent.isGround) {
            child = parent;
            parent = parent.parent;
        }
        if (parent === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedNullError('LMCPFCI00834');
        }
        else {
            if (indexInParent === undefined) {
                indexInParent = parent.contentItems.indexOf(child);
            }
            if (parentId !== null) {
                parent.addPopInParentId(parentId);
            }
            if (window === undefined) {
                const windowLeft = globalThis.screenX || globalThis.screenLeft;
                const windowTop = globalThis.screenY || globalThis.screenTop;
                const offsetLeft = item.element.offsetLeft;
                const offsetTop = item.element.offsetTop;
                // const { left: offsetLeft, top: offsetTop } = getJQueryLeftAndTop(item.element);
                const { width, height } = (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.getElementWidthAndHeight)(item.element);
                window = {
                    left: windowLeft + offsetLeft,
                    top: windowTop + offsetTop,
                    width,
                    height,
                };
            }
            const itemConfig = item.toConfig();
            item.remove();
            if (!_config_resolved_config__WEBPACK_IMPORTED_MODULE_5__.ResolvedRootItemConfig.isRootItemConfig(itemConfig)) {
                throw new Error(`${_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_2__.i18nStrings[0]}`);
            }
            else {
                return this.createPopoutFromItemConfig(itemConfig, window, parentId, indexInParent);
            }
        }
    }
    /** @internal */
    beginVirtualSizedContainerAdding() {
        if (this._virtualSizedContainerAddingBeginCount++ === 0) {
            this._virtualSizedContainers.length = 0;
        }
    }
    /** @internal */
    addVirtualSizedContainer(container) {
        this._virtualSizedContainers.push(container);
    }
    /** @internal */
    endVirtualSizedContainerAdding() {
        var _a, _b;
        if (--this._virtualSizedContainerAddingBeginCount === 0) {
            const count = this._virtualSizedContainers.length;
            if (count > 0) {
                (_a = this.beforeVirtualRectingEvent) === null || _a === void 0 ? void 0 : _a.call(this, count);
                for (let i = 0; i < count; i++) {
                    const container = this._virtualSizedContainers[i];
                    container.notifyVirtualRectingRequired();
                }
                (_b = this.afterVirtualRectingEvent) === null || _b === void 0 ? void 0 : _b.call(this);
                this._virtualSizedContainers.length = 0;
            }
        }
    }
    /** @internal */
    createPopoutFromItemConfig(rootItemConfig, window, parentId, indexInParent) {
        const layoutConfig = this.toConfig();
        const popoutLayoutConfig = {
            root: rootItemConfig,
            openPopouts: [],
            settings: layoutConfig.settings,
            dimensions: layoutConfig.dimensions,
            header: layoutConfig.header,
            window,
            parentId,
            indexInParent,
            resolved: true,
        };
        return this.createPopoutFromPopoutLayoutConfig(popoutLayoutConfig);
    }
    /** @internal */
    createPopoutFromPopoutLayoutConfig(config) {
        var _a, _b, _c, _d;
        const configWindow = config.window;
        const initialWindow = {
            left: (_a = configWindow.left) !== null && _a !== void 0 ? _a : (globalThis.screenX || globalThis.screenLeft + 20),
            top: (_b = configWindow.top) !== null && _b !== void 0 ? _b : (globalThis.screenY || globalThis.screenTop + 20),
            width: (_c = configWindow.width) !== null && _c !== void 0 ? _c : 500,
            height: (_d = configWindow.height) !== null && _d !== void 0 ? _d : 309,
        };
        const browserPopout = new _controls_browser_popout__WEBPACK_IMPORTED_MODULE_14__.BrowserPopout(config, initialWindow, this);
        browserPopout.on('initialised', () => this.emit('windowOpened', browserPopout));
        browserPopout.on('closed', () => this.reconcilePopoutWindows());
        this._openPopouts.push(browserPopout);
        if (this.layoutConfig.settings.closePopoutsOnUnload && !this._windowBeforeUnloadListening) {
            globalThis.addEventListener('beforeunload', this._windowBeforeUnloadListener, { passive: true });
            this._windowBeforeUnloadListening = true;
        }
        return browserPopout;
    }
    /**
     * Closes all Open Popouts
     * Applications can call this method when a page is unloaded to remove its open popouts
     */
    closeAllOpenPopouts() {
        for (let i = 0; i < this._openPopouts.length; i++) {
            this._openPopouts[i].close();
        }
        this._openPopouts.length = 0;
        if (this._windowBeforeUnloadListening) {
            globalThis.removeEventListener('beforeunload', this._windowBeforeUnloadListener);
            this._windowBeforeUnloadListening = false;
        }
    }
    newDragSource(element, componentTypeOrItemConfigCallback, componentState, title) {
        const dragSource = new _controls_drag_source__WEBPACK_IMPORTED_MODULE_15__.DragSource(this, element, componentTypeOrItemConfigCallback, componentState, title);
        this._dragSources.push(dragSource);
        return dragSource;
    }
    /**
     * Removes a DragListener added by createDragSource() so the corresponding
     * DOM element is not a drag source any more.
     */
    removeDragSource(dragSource) {
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.removeFromArray)(dragSource, this._dragSources);
        dragSource.destroy();
    }
    removeElementEventually(element) {
        if (this.currentlyDragging()) {
            element.style.opacity = '0';
            this._actionsOnDragEnd.push((cancel) => {
                if (cancel)
                    element.style.opacity = '';
                else
                    element.remove();
            });
        }
        else {
            element.remove();
        }
    }
    deferIfDragging(action) {
        if (this.currentlyDragging())
            this._actionsOnDragEnd.push(action);
        else
            action(false);
    }
    doDeferredActions(cancel) {
        for (const action of this._actionsOnDragEnd) {
            action(cancel);
        }
        this._actionsOnDragEnd.length = 0;
    }
    /** @internal */
    startComponentDragOld(x, y, dragListener, componentItem, stack) {
        if (this.createDragProxy) {
            this.createDragProxy(componentItem, x, y);
            // return;
        }
        new _controls_drag_proxy__WEBPACK_IMPORTED_MODULE_16__.DragProxy(x, y, dragListener, this, componentItem, stack);
    }
    /** @internal */
    startComponentDrag(ev, componentItem) {
        var _a;
        this._dragState = DragState.CurrentlyDragging;
        this._draggedComponentItem = componentItem;
        const data = { config: componentItem.toConfig() };
        if (ev instanceof DragEvent && ev.dataTransfer) {
            const jdata = JSON.stringify(data);
            ev.dataTransfer.setData(this.dragDataMimetype(), jdata);
        }
        // Make drag-image
        const tabElement = componentItem.tab.element;
        //tabElement.style.visibility="visible";
        const stack = componentItem.parent;
        const isActiveTab = stack.getActiveComponentItem() === componentItem;
        const headerElement = stack.header.element;
        //headerElement.style.visibility="hidden";
        const tabClone = tabElement.cloneNode(true);
        const tabsContainer = document.createElement('section');
        tabsContainer.classList.add("lm_tabs" /* Tabs */);
        tabsContainer.appendChild(tabClone);
        const headerClone = document.createElement('section');
        headerClone.classList.add("lm_header" /* Header */);
        headerClone.appendChild(tabsContainer);
        let image;
        const element = componentItem.container.element;
        const contentElement = componentItem.container.contentElement;
        // usually same as effective copyForDragImage - see createComponentElement
        const useFreshDragImage = !element || element === contentElement;
        if (useFreshDragImage) {
            image = document.createElement('section');
            image.classList.add("lm_dragImage" /* DragImage */);
            const inner = document.createElement('div');
            inner.classList.add("lm_dragImageInner" /* DragImageInner */);
            image.appendChild(headerClone);
            image.appendChild(inner);
            document.body.appendChild(image);
            const stackBounds = stack.element.getBoundingClientRect();
            image.style.top = `${stackBounds.top}px`;
            image.style.left = `${stackBounds.left}px`;
            image.style.width = `${stackBounds.width}px`;
            image.style.height = `${stackBounds.height}px`;
            inner.style.left = "0px";
            inner.style.right = "0px";
            inner.style.height = `${stackBounds.height - tabsContainer.clientHeight}px`;
            inner.style.top = `${tabsContainer.clientHeight}px`;
            inner.style.bottom = "0px";
        }
        else {
            image = element;
            image.insertBefore(headerClone, image.firstChild);
        }
        headerClone.style.background = "transparent";
        headerClone.style.position = "absolute";
        headerClone.style.top = "0px";
        if (!isActiveTab) {
            for (const sibling of stack.contentItems) {
                if (sibling !== componentItem)
                    sibling.element.style.opacity = '0';
            }
        }
        const oldOpacity = image.style.opacity;
        //Ideally we'd like to have the drag image be partially transparent.
        //That is the default on Firefox, so we're OK.
        //The following works on GtkWebKit and presumably Safari
        //THE FOLLOWING SEEMS TO BE NEEDED IF !useFreshDragImage
        //(ON Chrome/Electron/Qt AND WebKit BUT NOT Firefox).
        image.style.opacity = "0.6";
        //However, it semi-breaks Firefox, making it too transparent.
        //It also seems to have no effect on Chrome/Electron.
        //Maybe this needs to be a browser-dependent setting.  FIXME.
        //The offset from the mouse pointer is wrong on GtkWebKit:
        //- It seems to ignore the offset and just center the image over
        //- the mouse cursor. FIXME.
        //Perhaps scale the image if it is really large. FIXME.
        const etarget = ev.target;
        const dX = ev.offsetX + etarget.offsetLeft;
        const dY = ev.offsetY + etarget.offsetTop;
        tabsContainer.style.marginLeft = `${ev.target.offsetLeft}px`;
        (_a = ev.dataTransfer) === null || _a === void 0 ? void 0 : _a.setDragImage(image, dX, dY);
        this.emit('dragstart', ev, componentItem);
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.enableIFramePointerEvents)(false);
        // We need to visibly remove the componentItem during dragging.
        // However, this needs to happen at a later 'tick' than setDragImage,
        // at least if !useFreshDragImage.
        this._removeItem = () => {
            var _a;
            if (!this._removeItem)
                return;
            this._removeItem = undefined;
            // Set 'ignoring' property so calculateItemAreas works.
            // The latter is called from onDragEnter, which may happen
            // before the requestAnimationFrame action.
            for (let item = componentItem;;) {
                const parent = item.parent;
                if (!parent)
                    break;
                if (item.contentItems.length >= 2) {
                    break;
                }
                if (item === componentItem || item.isStack) {
                    item.ignoring = true;
                    parent.ignoringChild = true;
                }
                if (parent.isGround)
                    break;
                item = parent;
            }
            // Take the lm_item out of the layout (set position to absolute),
            // so remaining elements can be re-positioned.
            // Whle doing so, add a dashed border (at the old position)
            // as a visual feedbakc.
            const ielement = componentItem.element;
            const oparent = stack.element.offsetParent;
            const draggingWholeStack = stack.contentItems.length <= 1;
            // FUTURE: draggingWholeStack should also be set if dragging
            // an enture stack as a unit.
            if (this.layoutConfig.settings.showOldPositionWhenDragging
                && stack.parent && oparent //&& stack.parent.isGround
                && ielement.style.position === '') {
                const stackBounds = stack.element.getBoundingClientRect();
                const parentBounds = oparent.getBoundingClientRect();
                stack.element.classList.add("lm_drag_old_position");
                stack.element.style.zIndex = '4';
                if (draggingWholeStack) {
                    const sstyle = stack.element.style;
                    sstyle.top = `${stackBounds.top - parentBounds.top}px`;
                    sstyle.left = `${stackBounds.left - parentBounds.left}px`;
                    sstyle.width = `${stackBounds.width - 2}px`;
                    sstyle.height = `${stackBounds.height - 2}px`;
                    sstyle.position = 'absolute';
                }
                this._actionsOnDragEnd.push((cancel) => {
                    stack.element.classList.remove("lm_drag_old_position");
                    stack.element.style.zIndex = '';
                    if (draggingWholeStack) {
                        const sstyle = stack.element.style;
                        sstyle.top = '';
                        sstyle.left = '';
                        sstyle.width = '';
                        sstyle.height = '';
                        sstyle.position = '';
                    }
                });
            }
            headerClone.remove();
            if (!isActiveTab) {
                for (const sibling of stack.contentItems) {
                    if (sibling !== componentItem)
                        sibling.element.style.opacity = '';
                }
            }
            tabElement.style.visibility = '';
            headerElement.style.visibility = '';
            if (useFreshDragImage)
                image.remove();
            else
                image.style.opacity = oldOpacity;
            (_a = componentItem.parent) === null || _a === void 0 ? void 0 : _a.removeChild(componentItem, true);
            const container = componentItem.container;
            if (container.visible) {
                container.setVisibility(false);
                this._actionsOnDragEnd.push((cancel) => {
                    container.setVisibility(true);
                });
            }
            console.log("after removeChild");
        };
        window.requestAnimationFrame(this._removeItem);
    }
    /**
     * Programmatically focuses an item. This focuses the specified component item
     * and the item emits a focus event
     *
     * @param item - The component item to be focused
     * @param suppressEvent - Whether to emit focus event
     */
    focusComponent(item, suppressEvent = false) {
        item.focus(suppressEvent);
    }
    /**
     * Programmatically blurs (defocuses) the currently focused component.
     * If a component item is focused, then it is blurred and and the item emits a blur event
     *
     * @param item - The component item to be blurred
     * @param suppressEvent - Whether to emit blur event
     */
    clearComponentFocus(suppressEvent = false) {
        this.setFocusedComponentItem(undefined, suppressEvent);
    }
    /**
     * Programmatically focuses a component item or removes focus (blurs) from an existing focused component item.
     *
     * @param item - If defined, specifies the component item to be given focus.  If undefined, clear component focus.
     * @param suppressEvents - Whether to emit focus and blur events
     * @internal
     */
    setFocusedComponentItem(item, suppressEvents = false) {
        if (item !== this._focusedComponentItem) {
            let newFocusedParentItem;
            if (item === undefined) {
                newFocusedParentItem === undefined;
            }
            else {
                newFocusedParentItem = item.parentItem;
            }
            if (this._focusedComponentItem !== undefined) {
                const oldFocusedItem = this._focusedComponentItem;
                this._focusedComponentItem = undefined;
                oldFocusedItem.setBlurred(suppressEvents);
                const oldFocusedParentItem = oldFocusedItem.parentItem;
                if (newFocusedParentItem === oldFocusedParentItem) {
                    newFocusedParentItem = undefined;
                }
                else {
                    oldFocusedParentItem.setFocusedValue(false);
                }
            }
            if (item !== undefined) {
                this._focusedComponentItem = item;
                item.setFocused(suppressEvents);
                if (newFocusedParentItem !== undefined) {
                    newFocusedParentItem.setFocusedValue(true);
                }
            }
        }
    }
    /** @internal */
    createContentItemFromConfig(config, parent) {
        switch (config.type) {
            case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.ground: throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('LMCCIFC68871');
            case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.row: return new _items_row_or_column__WEBPACK_IMPORTED_MODULE_17__.RowOrColumn(false, this, config, parent);
            case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.column: return new _items_row_or_column__WEBPACK_IMPORTED_MODULE_17__.RowOrColumn(true, this, config, parent);
            case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.stack: return new _items_stack__WEBPACK_IMPORTED_MODULE_13__.Stack(this, config, parent);
            case _utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.component:
                return new _items_component_item__WEBPACK_IMPORTED_MODULE_18__.ComponentItem(this, config, parent);
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnreachableCaseError('CCC913564', config.type, 'Invalid Config Item type specified');
        }
    }
    /**
     * This should only be called from stack component.
     * Stack will look after docking processing associated with maximise/minimise
     * @internal
     **/
    setMaximisedStack(stack) {
        if (stack === undefined) {
            if (this._maximisedStack !== undefined) {
                this.processMinimiseMaximisedStack();
            }
        }
        else {
            if (stack !== this._maximisedStack) {
                if (this._maximisedStack !== undefined) {
                    this.processMinimiseMaximisedStack();
                }
                this.processMaximiseStack(stack);
            }
        }
    }
    checkMinimiseMaximisedStack() {
        if (this._maximisedStack !== undefined) {
            this._maximisedStack.minimise();
        }
    }
    // showAllActiveContentItems() was called from ContentItem.show().  Not sure what its purpose was so have commented out
    // Everything seems to work ok without this.  Have left commented code just in case there was a reason for it becomes
    // apparent
    // /** @internal */
    // showAllActiveContentItems(): void {
    //     const allStacks = this.getAllStacks();
    //     for (let i = 0; i < allStacks.length; i++) {
    //         const stack = allStacks[i];
    //         const activeContentItem = stack.getActiveComponentItem();
    //         if (activeContentItem !== undefined) {
    //             if (!(activeContentItem instanceof ComponentItem)) {
    //                 throw new AssertError('LMSAACIS22298');
    //             } else {
    //                 activeContentItem.container.show();
    //             }
    //         }
    //     }
    // }
    // hideAllActiveContentItems() was called from ContentItem.hide().  Not sure what its purpose was so have commented out
    // Everything seems to work ok without this.  Have left commented code just in case there was a reason for it becomes
    // apparent
    // /** @internal */
    // hideAllActiveContentItems(): void {
    //     const allStacks = this.getAllStacks();
    //     for (let i = 0; i < allStacks.length; i++) {
    //         const stack = allStacks[i];
    //         const activeContentItem = stack.getActiveComponentItem();
    //         if (activeContentItem !== undefined) {
    //             if (!(activeContentItem instanceof ComponentItem)) {
    //                 throw new AssertError('LMSAACIH22298');
    //             } else {
    //                 activeContentItem.container.hide();
    //             }
    //         }
    //     }
    // }
    /** @internal */
    cleanupBeforeMaximisedStackDestroyed(event) {
        if (this._maximisedStack !== null && this._maximisedStack === event.target) {
            this._maximisedStack.off('beforeItemDestroyed', this._maximisedStackBeforeDestroyedListener);
            this._maximisedStack = undefined;
        }
    }
    /**
     * This method is used to get around sandboxed iframe restrictions.
     * If 'allow-top-navigation' is not specified in the iframe's 'sandbox' attribute
     * (as is the case with codepens) the parent window is forbidden from calling certain
     * methods on the child, such as window.close() or setting document.location.href.
     *
     * This prevented GoldenLayout popouts from popping in in codepens. The fix is to call
     * _$closeWindow on the child window's gl instance which (after a timeout to disconnect
     * the invoking method from the close call) closes itself.
     *
     * @internal
     */
    closeWindow() {
        globalThis.setTimeout(() => globalThis.close(), 1);
    }
    /** @internal */
    getArea(x, y) {
        let matchingArea = null;
        let smallestSurface = Infinity;
        if (this._itemAreas === null)
            this.calculateItemAreas();
        const itemAreas = this._itemAreas;
        for (let i = 0; i < itemAreas.length; i++) {
            const area = itemAreas[i];
            if (x >= area.x1 &&
                x < area.x2 && // x2 is not included in area
                y >= area.y1 &&
                y < area.y2 && // y2 is not included in area
                smallestSurface > area.surface) {
                smallestSurface = area.surface;
                matchingArea = area;
            }
        }
        return matchingArea;
    }
    /** @internal */
    calculateItemAreas() {
        const allContentItems = this.getAllContentItems();
        /**
         * If the last item is dragged out, highlight the entire container size to
         * allow to re-drop it. this.ground.contentiItems.length === 0 at this point
         *
         * Don't include ground into the possible drop areas though otherwise since it
         * will used for every gap in the layout, e.g. splitters
         */
        const groundItem = this._groundItem;
        if (groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMCIAR44365');
        }
        else {
            if (allContentItems.length === 1) {
                // No root ContentItem (just Ground ContentItem)
                const groundArea = groundItem.getElementArea();
                if (groundArea === null) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedNullError('LMCIARA44365');
                }
                else {
                    this._itemAreas = [groundArea];
                }
                return;
            }
            else {
                if (allContentItems[1].isStack) {
                    // No rows/columns (except ones we're ignoring).
                    // if root is Stack, then split stack and sides of Layout are same, so skip sides
                    this._itemAreas = [];
                }
                else {
                    // sides of layout
                    this._itemAreas = groundItem.createSideAreas();
                }
                for (let i = 0; i < allContentItems.length; i++) {
                    const stack = allContentItems[i];
                    if (_items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem.isStack(stack)) {
                        const area = stack.getArea();
                        if (area === null) {
                            continue;
                        }
                        else {
                            this._itemAreas.push(area);
                            const stackContentAreaDimensions = stack.contentAreaDimensions;
                            if (stackContentAreaDimensions === undefined) {
                                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMCIASC45599');
                            }
                            else {
                                const highlightArea = stackContentAreaDimensions.header.highlightArea;
                                const surface = (highlightArea.x2 - highlightArea.x1) * (highlightArea.y2 - highlightArea.y1);
                                const header = {
                                    x1: highlightArea.x1,
                                    x2: highlightArea.x2,
                                    y1: highlightArea.y1,
                                    y2: highlightArea.y2,
                                    contentItem: stack,
                                    surface,
                                };
                                this._itemAreas.push(header);
                            }
                        }
                    }
                }
            }
        }
        console.log("l-m calculateItemAreas: " + this._itemAreas.length + " areas");
    }
    /**
     * Called as part of loading a new layout (including initial init()).
     * Checks to see layout has a maximised item. If so, it maximises that item.
     * @internal
     */
    checkLoadedLayoutMaximiseItem() {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMCLLMI43432');
        }
        else {
            const configMaximisedItems = this._groundItem.getConfigMaximisedItems();
            if (configMaximisedItems.length > 0) {
                let item = configMaximisedItems[0];
                if (_items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem.isComponentItem(item)) {
                    const stack = item.parent;
                    if (stack === null) {
                        throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedNullError('LMXLLMI69999');
                    }
                    else {
                        item = stack;
                    }
                }
                if (!_items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem.isStack(item)) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('LMCLLMI19993');
                }
                else {
                    item.maximise();
                }
            }
        }
    }
    /** @internal */
    processMaximiseStack(stack) {
        this._maximisedStack = stack;
        stack.on('beforeItemDestroyed', this._maximisedStackBeforeDestroyedListener);
        stack.element.classList.add("lm_maximised" /* Maximised */);
        stack.element.insertAdjacentElement('afterend', this._maximisePlaceholder);
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMMXI19993');
        }
        else {
            this._groundItem.element.prepend(stack.element);
            const { width, height } = this.containerWidthAndHeight();
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementWidth)(stack.element, width);
            (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.setElementHeight)(stack.element, height);
            stack.updateSize();
            stack.focusActiveContentItem();
            this._maximisedStack.emit('maximised');
            this.emit('stateChanged');
        }
    }
    /** @internal */
    processMinimiseMaximisedStack() {
        if (this._maximisedStack === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('LMMMS74422');
        }
        else {
            const stack = this._maximisedStack;
            if (stack.parent === null) {
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedNullError('LMMI13668');
            }
            else {
                stack.element.classList.remove("lm_maximised" /* Maximised */);
                this._maximisePlaceholder.insertAdjacentElement('afterend', stack.element);
                this._maximisePlaceholder.remove();
                stack.parent.updateSize();
                this._maximisedStack = undefined;
                stack.off('beforeItemDestroyed', this._maximisedStackBeforeDestroyedListener);
                stack.emit('minimised');
                this.emit('stateChanged');
            }
        }
    }
    /**
     * Iterates through the array of open popout windows and removes the ones
     * that are effectively closed. This is necessary due to the lack of reliably
     * listening for window.close / unload events in a cross browser compatible fashion.
     * @internal
     */
    reconcilePopoutWindows() {
        const openPopouts = [];
        for (let i = 0; i < this._openPopouts.length; i++) {
            if (this._openPopouts[i].getWindow().closed === false) {
                openPopouts.push(this._openPopouts[i]);
            }
            else {
                this.emit('windowClosed', this._openPopouts[i]);
            }
        }
        if (this._openPopouts.length !== openPopouts.length) {
            this._openPopouts = openPopouts;
            this.emit('stateChanged');
        }
    }
    /**
     * Returns a flattened array of all content items,
     * regardles of level or type
     * @internal
     */
    getAllContentItems() {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMGACI13130');
        }
        else {
            return this._groundItem.getAllContentItems();
        }
    }
    /**
     * Creates Subwindows (if there are any). Throws an error
     * if popouts are blocked.
     * @internal
     */
    createSubWindows() {
        for (let i = 0; i < this.layoutConfig.openPopouts.length; i++) {
            const popoutConfig = this.layoutConfig.openPopouts[i];
            this.createPopoutFromPopoutLayoutConfig(popoutConfig);
        }
    }
    /**
     * Debounces resize events
     * @internal
     */
    handleContainerResize() {
        if (this.resizeWithContainerAutomatically) {
            this.processResizeWithDebounce();
        }
    }
    /**
     * Debounces resize events
     * @internal
     */
    processResizeWithDebounce() {
        if (this.resizeDebounceExtendedWhenPossible) {
            this.checkClearResizeTimeout();
        }
        if (this._resizeTimeoutId === undefined) {
            this._resizeTimeoutId = setTimeout(() => {
                this._resizeTimeoutId = undefined;
                this.updateSizeFromContainer();
            }, this.resizeDebounceInterval);
        }
    }
    checkClearResizeTimeout() {
        if (this._resizeTimeoutId !== undefined) {
            clearTimeout(this._resizeTimeoutId);
            this._resizeTimeoutId = undefined;
        }
    }
    /**
     * Determines what element the layout will be created in
     * @internal
     */
    setContainer() {
        var _a;
        const bodyElement = document.body;
        const containerElement = (_a = this._containerElement) !== null && _a !== void 0 ? _a : bodyElement;
        if (containerElement === bodyElement
            && bodyElement.firstElementChild === null) {
            this.resizeWithContainerAutomatically = true;
            const documentElement = document.documentElement;
            documentElement.style.height = '100%';
            documentElement.style.margin = '0';
            documentElement.style.padding = '0';
            documentElement.style.overflow = 'clip';
            bodyElement.style.height = '100%';
            bodyElement.style.margin = '0';
            bodyElement.style.padding = '0';
            bodyElement.style.overflow = 'clip';
        }
        this._containerElement = containerElement;
    }
    /**
     * Called when the window is closed or the user navigates away
     * from the page
     * @internal
     * @deprecated to be removed in version 3
     */
    onBeforeUnload() {
        this.destroy();
    }
    /**
     * Adjusts the number of columns to be lower to fit the screen and still maintain minItemWidth.
     * @internal
     */
    adjustColumnsResponsive() {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMACR20883');
        }
        else {
            this._firstLoad = false;
            // If there is no min width set, or not content items, do nothing.
            if (this.useResponsiveLayout() &&
                !this._updatingColumnsResponsive &&
                this._groundItem.contentItems.length > 0 &&
                this._groundItem.contentItems[0].isRow) {
                if (this._groundItem === undefined || this._width === null) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMACR77412');
                }
                else {
                    // If there is only one column, do nothing.
                    const columnCount = this._groundItem.contentItems[0].contentItems.length;
                    if (columnCount <= 1) {
                        return;
                    }
                    else {
                        // If they all still fit, do nothing.
                        const minItemWidth = this.layoutConfig.dimensions.defaultMinItemWidth;
                        const totalMinWidth = columnCount * minItemWidth;
                        if (totalMinWidth <= this._width) {
                            return;
                        }
                        else {
                            // Prevent updates while it is already happening.
                            this._updatingColumnsResponsive = true;
                            // Figure out how many columns to stack, and put them all in the first stack container.
                            const finalColumnCount = Math.max(Math.floor(this._width / minItemWidth), 1);
                            const stackColumnCount = columnCount - finalColumnCount;
                            const rootContentItem = this._groundItem.contentItems[0];
                            const allStacks = this.getAllStacks();
                            if (allStacks.length === 0) {
                                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.AssertError('LMACRS77413');
                            }
                            else {
                                const firstStackContainer = allStacks[0];
                                for (let i = 0; i < stackColumnCount; i++) {
                                    // Stack from right.
                                    const column = rootContentItem.contentItems[rootContentItem.contentItems.length - 1];
                                    this.addChildContentItemsToContainer(firstStackContainer, column);
                                }
                                this._updatingColumnsResponsive = false;
                            }
                        }
                    }
                }
            }
        }
    }
    /**
     * Determines if responsive layout should be used.
     *
     * @returns True if responsive layout should be used; otherwise false.
     * @internal
     */
    useResponsiveLayout() {
        const settings = this.layoutConfig.settings;
        const alwaysResponsiveMode = settings.responsiveMode === _utils_types__WEBPACK_IMPORTED_MODULE_11__.ResponsiveMode.always;
        const onLoadResponsiveModeAndFirst = settings.responsiveMode === _utils_types__WEBPACK_IMPORTED_MODULE_11__.ResponsiveMode.onload && this._firstLoad;
        return alwaysResponsiveMode || onLoadResponsiveModeAndFirst;
    }
    /**
     * Adds all children of a node to another container recursively.
     * @param container - Container to add child content items to.
     * @param node - Node to search for content items.
     * @internal
     */
    addChildContentItemsToContainer(container, node) {
        const contentItems = node.contentItems;
        if (node instanceof _items_stack__WEBPACK_IMPORTED_MODULE_13__.Stack) {
            for (let i = 0; i < contentItems.length; i++) {
                const item = contentItems[i];
                node.removeChild(item, true);
                container.addChild(item);
            }
        }
        else {
            for (let i = 0; i < contentItems.length; i++) {
                const item = contentItems[i];
                this.addChildContentItemsToContainer(container, item);
            }
        }
    }
    onDragEnter(e) {
        if (this._removeItem)
            this._removeItem();
        e.stopPropagation();
        if (e instanceof DragEvent) {
            if (e.dataTransfer)
                e.dataTransfer.dropEffect = 'move';
            if (!this.validDragEvent(e))
                return;
        }
        if (this._dragEnterCount == 0) {
            this.emit('drag-enter-window', e);
            this.calculateItemAreas();
        }
        this._dragEnterCount++;
        e.preventDefault();
    }
    onDragLeave(e) {
        this._lastDragLeaveTime = Date.now();
        e.stopPropagation();
        if (e instanceof DragEvent) {
            if (!this.validDragEvent(e))
                return;
        }
        this._dragEnterCount--;
        if (this._dragEnterCount <= 0) {
            this.exitDrag();
            this.emit('drag-leave-window', e);
        }
    }
    onDragOver(e) {
        if (e instanceof DragEvent && e.dataTransfer)
            e.dataTransfer.dropEffect = 'move';
        const valid = e instanceof DragEvent && this.validDragEvent(e);
        //console.log("dragover "+(e.target as HTMLElement).getAttribute("class")+" valid:"+valid+" entercount:"+this._dragEnterCount+(e instanceof DragEvent ? (" dropEffect:"+e.dataTransfer?.dropEffect):""));
        //      drag-listener.onPointerMove -> emit('drag', ...)
        this.onDrag(e);
        if (valid && this._area)
            e.preventDefault(); // allow drop
    }
    onDragEnd(screenX, screenY, event = null) {
        var _a;
        console.log("onDragEnd st:" + this._dragState + " timer:" + this.delayedDragEndTimer);
        // There are four cases we want to handle. Unfortunately, it is not
        // possible to reliably distinguish them on all browsers we care about.
        // (1) Normal drop in this window (_dragState == DroppedInThisWindow)
        // (2) Normal drop in other window (_dragState == DroppedElsewhere)
        // We can't detect this case unless we get an external notification
        // (the application calls droppedInOtherWindow). The notification may
        // happen after the dragend event, which is one reason we wait a bit.
        // If we don't get the notification in time, we handle it as case (3).
        // (3) Drop to desktop
        // (4) Drag was cancelled (by typing Esc).
        // Try to detact a cancelled drag. There doesn't seem to be a way
        // to detect this reliably except on Firefox (with mozUserCancelled).
        // Note that while the specification says dropEffect is supposed
        // to be "none" if the drag was cancelled, this is unreliable.
        let cancel = false;
        if (event instanceof DragEvent
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            && event.dataTransfer.mozUserCancelled)
            cancel = true;
        if (this._dragState == DragState.CurrentlyDragging && !cancel) {
            // Heuristic: If the most recent dragleave was less than 200ms ago,
            // it was probably caused by a 'cancel' (Escape pressed).
            const now = Date.now();
            if (now >= this._lastDragLeaveTime
                && now - this._lastDragLeaveTime <= 200) {
                cancel = true;
            }
        }
        const component = this._draggedComponentItem;
        console.log("onDragEnd now:" + Date.now() + " cancel:" + cancel + " comp:" + component + " cur-drag:" + this._dragState + " in-win:" + this.inSomeWindow + " ecnt:" + this._dragEnterCount);
        // if this is the only component, and it is dropped to the desktop,
        // just reuse the window (though move it - if possible).
        const onlyWindow = (component === null || component === void 0 ? void 0 : component.parent)
            && component.parent.type === "stack"
            && component.parent.contentItems.length === 1
            && component.parent.contentItems[0] === component
            && ((_a = component.parent.parent) === null || _a === void 0 ? void 0 : _a.type) === "ground";
        let dropItem = undefined;
        if (this._draggedComponentItem
            && this._dragState == DragState.DroppedInThisWindow) {
            if (onlyWindow)
                cancel = true;
            else {
                dropItem = this._draggedComponentItem;
            }
        }
        const moveWindow = !cancel && !this.inSomeWindow && onlyWindow;
        if (!(cancel || moveWindow)
            && component && component.container
            && this._dragState >= DragState.DroppedElsewhere) {
            // dropped in other window or to desktop
            const parent = component.parent;
            // dragExported callback may need size/position of element,
            // which it can't get if display is 'none'.
            if (parent && parent.type === 'stack')
                parent.element.style.display = '';
            component.container.emit('dragExported', screenX, screenY, component);
        }
        this.doDeferredActions(cancel || !!moveWindow);
        if (dropItem && this._area)
            this._area.contentItem.onDrop(dropItem, this._area);
        //console.log("dragend ev-handler enter-count:"+this._dragEnterCount);
        // FIXME incorporate drag-listener:processDragStop
        // See processDragStop in drag-listener
        //document.body.classList.remove(DomConstants.ClassName.Dragging);
        // if iframe: clear style.pointer-events
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.enableIFramePointerEvents)(true);
        if (moveWindow && component && component.container) {
            component.container.emit('dragMoved', screenX, screenY, component);
        }
        this._draggedComponentItem = undefined;
        this._dragState = DragState.NotDragging;
        this.emit('dragend');
    }
    exitDrag() {
        this._dragEnterCount = 0;
        this._hideTargetIndicator();
        //this.dropTargetIndicator.hide();
        //this._componentItem.exitDragMode();
    }
    // A drag was started/ending in another (top-level) window
    // Needs to be called from application.
    draggingInOtherWindow(ending) {
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_4__.enableIFramePointerEvents)(ending);
    }
    // Dropped to another (top-level) window.
    // Needs to be called from application.
    droppedInOtherWindow() {
        this._dragState = DragState.DroppedElsewhere;
        if (this.delayedDragEndFunction)
            this.delayedDragEndFunction();
    }
    onDrop(e) {
        var _a;
        this.emit('drop', e);
        let data;
        if (e instanceof DragEvent) {
            if (e.dataTransfer)
                e.dataTransfer.dropEffect = "move";
            const dvalue = (_a = e.dataTransfer) === null || _a === void 0 ? void 0 : _a.getData(this.dragDataMimetype());
            data = dvalue && JSON.parse(dvalue);
        }
        else if (this._draggedComponentItem) {
            data = { config: this._draggedComponentItem.toConfig() };
        }
        console.log("onDrop area:" + this._area);
        // JSON.parse(data);
        e.preventDefault();
        this.exitDrag();
        // FIXME check type
        // SEE drag-proxy:onDrop
        //let droppedComponentItem: ComponentItem | undefined;
        if (this._area !== null) {
            if (this._draggedComponentItem) {
                //this.doDeferredActions(false);
                /*
                droppedComponentItem = this._draggedComponentItem;
                this._area.contentItem.onDrop(droppedComponentItem, this._area);
                (droppedComponentItem.container.component as HTMLElement).style.zIndex = "";
                */
            }
            else {
                console.log("dropped from different window " + JSON.stringify(data.config));
                const item = new _items_component_item__WEBPACK_IMPORTED_MODULE_18__.ComponentItem(this, data.config, this.groundItem);
                this._area.contentItem.onDrop(item, this._area);
            }
        }
        this._dragState = DragState.DroppedInThisWindow;
        if (this.delayedDragEndFunction)
            this.delayedDragEndFunction();
    }
    /**
     * Finds all the stacks.
     * @returns The found stack containers.
     * @internal
     */
    getAllStacks() {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMFASC52778');
        }
        else {
            const stacks = [];
            this.findAllStacksRecursive(stacks, this._groundItem);
            return stacks;
        }
    }
    /** @internal */
    findFirstContentItemType(type) {
        if (this._groundItem === undefined) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMFFCIT82446');
        }
        else {
            return this.findFirstContentItemTypeRecursive(type, this._groundItem);
        }
    }
    /** @internal */
    findFirstContentItemTypeRecursive(type, node) {
        const contentItems = node.contentItems;
        const contentItemCount = contentItems.length;
        if (contentItemCount === 0) {
            return undefined;
        }
        else {
            for (let i = 0; i < contentItemCount; i++) {
                const contentItem = contentItems[i];
                if (contentItem.type === type) {
                    return contentItem;
                }
            }
            for (let i = 0; i < contentItemCount; i++) {
                const contentItem = contentItems[i];
                const foundContentItem = this.findFirstContentItemTypeRecursive(type, contentItem);
                if (foundContentItem !== undefined) {
                    return foundContentItem;
                }
            }
            return undefined;
        }
    }
    /** @internal */
    findFirstContentItemTypeByIdRecursive(type, id, node) {
        const contentItems = node.contentItems;
        const contentItemCount = contentItems.length;
        if (contentItemCount === 0) {
            return undefined;
        }
        else {
            for (let i = 0; i < contentItemCount; i++) {
                const contentItem = contentItems[i];
                if (contentItem.type === type && contentItem.id === id) {
                    return contentItem;
                }
            }
            for (let i = 0; i < contentItemCount; i++) {
                const contentItem = contentItems[i];
                const foundContentItem = this.findFirstContentItemTypeByIdRecursive(type, id, contentItem);
                if (foundContentItem !== undefined) {
                    return foundContentItem;
                }
            }
            return undefined;
        }
    }
    /**
     * Finds all the stack containers.
     *
     * @param stacks - Set of containers to populate.
     * @param node - Current node to process.
     * @internal
     */
    findAllStacksRecursive(stacks, node) {
        const contentItems = node.contentItems;
        for (let i = 0; i < contentItems.length; i++) {
            const item = contentItems[i];
            if (item instanceof _items_stack__WEBPACK_IMPORTED_MODULE_13__.Stack) {
                stacks.push(item);
            }
            else {
                if (!item.isComponent) {
                    this.findAllStacksRecursive(stacks, item);
                }
            }
        }
    }
    /** @internal */
    findFirstLocation(selectors) {
        const count = selectors.length;
        for (let i = 0; i < count; i++) {
            const selector = selectors[i];
            const location = this.findLocation(selector);
            if (location !== undefined) {
                return location;
            }
        }
        return undefined;
    }
    /** @internal */
    findLocation(selector) {
        const selectorIndex = selector.index;
        switch (selector.typeId) {
            case 0 /* FocusedItem */: {
                if (this._focusedComponentItem === undefined) {
                    return undefined;
                }
                else {
                    const parentItem = this._focusedComponentItem.parentItem;
                    const parentContentItems = parentItem.contentItems;
                    const parentContentItemCount = parentContentItems.length;
                    if (selectorIndex === undefined) {
                        return { parentItem, index: parentContentItemCount };
                    }
                    else {
                        const focusedIndex = parentContentItems.indexOf(this._focusedComponentItem);
                        const index = focusedIndex + selectorIndex;
                        if (index < 0 || index > parentContentItemCount) {
                            return undefined;
                        }
                        else {
                            return { parentItem, index };
                        }
                    }
                }
            }
            case 1 /* FocusedStack */: {
                if (this._focusedComponentItem === undefined) {
                    return undefined;
                }
                else {
                    const parentItem = this._focusedComponentItem.parentItem;
                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                }
            }
            case 2 /* FirstStack */: {
                const parentItem = this.findFirstContentItemType(_utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.stack);
                if (parentItem === undefined) {
                    return undefined;
                }
                else {
                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                }
            }
            case 3 /* FirstRowOrColumn */: {
                let parentItem = this.findFirstContentItemType(_utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.row);
                if (parentItem !== undefined) {
                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                }
                else {
                    parentItem = this.findFirstContentItemType(_utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.column);
                    if (parentItem !== undefined) {
                        return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                    }
                    else {
                        return undefined;
                    }
                }
            }
            case 4 /* FirstRow */: {
                const parentItem = this.findFirstContentItemType(_utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.row);
                if (parentItem === undefined) {
                    return undefined;
                }
                else {
                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                }
            }
            case 5 /* FirstColumn */: {
                const parentItem = this.findFirstContentItemType(_utils_types__WEBPACK_IMPORTED_MODULE_11__.ItemType.column);
                if (parentItem === undefined) {
                    return undefined;
                }
                else {
                    return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                }
            }
            case 6 /* Empty */: {
                if (this._groundItem === undefined) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMFLRIF18244');
                }
                else {
                    if (this.rootItem !== undefined) {
                        return undefined;
                    }
                    else {
                        if (selectorIndex === undefined || selectorIndex === 0)
                            return { parentItem: this._groundItem, index: 0 };
                        else {
                            return undefined;
                        }
                    }
                }
            }
            case 7 /* Root */: {
                if (this._groundItem === undefined) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_6__.UnexpectedUndefinedError('LMFLF18244');
                }
                else {
                    const groundContentItems = this._groundItem.contentItems;
                    if (groundContentItems.length === 0) {
                        if (selectorIndex === undefined || selectorIndex === 0)
                            return { parentItem: this._groundItem, index: 0 };
                        else {
                            return undefined;
                        }
                    }
                    else {
                        const parentItem = groundContentItems[0];
                        return this.tryCreateLocationFromParentItem(parentItem, selectorIndex);
                    }
                }
            }
        }
    }
    /** @internal */
    tryCreateLocationFromParentItem(parentItem, selectorIndex) {
        const parentContentItems = parentItem.contentItems;
        const parentContentItemCount = parentContentItems.length;
        if (selectorIndex === undefined) {
            return { parentItem, index: parentContentItemCount };
        }
        else {
            if (selectorIndex < 0 || selectorIndex > parentContentItemCount) {
                return undefined;
            }
            else {
                return { parentItem, index: selectorIndex };
            }
        }
    }
}
/** @public */
(function (LayoutManager) {
    /** @internal */
    function createMaximisePlaceElement(document) {
        const element = document.createElement('div');
        element.classList.add("lm_maximise_place" /* MaximisePlace */);
        return element;
    }
    LayoutManager.createMaximisePlaceElement = createMaximisePlaceElement;
    /** @internal */
    function createTabDropPlaceholderElement(document) {
        const element = document.createElement('div');
        element.classList.add("lm_drop_tab_placeholder" /* DropTabPlaceholder */);
        return element;
    }
    LayoutManager.createTabDropPlaceholderElement = createTabDropPlaceholderElement;
    /**
     * Default LocationSelectors array used if none is specified.  Will always find a location.
     * @public
     */
    LayoutManager.defaultLocationSelectors = [
        { typeId: 1 /* FocusedStack */, index: undefined },
        { typeId: 2 /* FirstStack */, index: undefined },
        { typeId: 3 /* FirstRowOrColumn */, index: undefined },
        { typeId: 7 /* Root */, index: undefined },
    ];
    /**
     * LocationSelectors to try to get location next to existing focused item
     * @public
     */
    LayoutManager.afterFocusedItemIfPossibleLocationSelectors = [
        { typeId: 0 /* FocusedItem */, index: 1 },
        { typeId: 2 /* FirstStack */, index: undefined },
        { typeId: 3 /* FirstRowOrColumn */, index: undefined },
        { typeId: 7 /* Root */, index: undefined },
    ];
})(LayoutManager || (LayoutManager = {}));


/***/ }),

/***/ "./src/ts/utils/config-minifier.ts":
/*!*****************************************!*\
  !*** ./src/ts/utils/config-minifier.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConfigMinifier": () => (/* binding */ ConfigMinifier)
/* harmony export */ });
/**
 * Minifies and unminifies configs by replacing frequent keys
 * and values with one letter substitutes. Config options must
 * retain array position/index, add new options at the end.
 * @internal
*/
var ConfigMinifier;
(function (ConfigMinifier) {
    const keys = [
        'settings',
        'hasHeaders',
        'constrainDragToContainer',
        'selectionEnabled',
        'dimensions',
        'borderWidth',
        'minItemHeight',
        'minItemWidth',
        'headerHeight',
        'dragProxyWidth',
        'dragProxyHeight',
        'labels',
        'close',
        'maximise',
        'minimise',
        'popout',
        'content',
        'componentType',
        'componentState',
        'id',
        'width',
        'type',
        'height',
        'isClosable',
        'title',
        'popoutWholeStack',
        'openPopouts',
        'parentId',
        'activeItemIndex',
        'reorderEnabled',
        'borderGrabWidth',
        //Maximum 36 entries, do not cross this line!
    ];
    const values = [
        true,
        false,
        'row',
        'column',
        'stack',
        'component',
        'close',
        'maximise',
        'minimise',
        'open in new window'
    ];
    function checkInitialise() {
        if (keys.length > 36) {
            throw new Error('Too many keys in config minifier map');
        }
    }
    ConfigMinifier.checkInitialise = checkInitialise;
    function translateObject(from, minify) {
        const to = {};
        for (const key in from) {
            if (from.hasOwnProperty(key)) { // In case something has extended Object prototypes
                let translatedKey;
                if (minify) {
                    translatedKey = minifyKey(key);
                }
                else {
                    translatedKey = unminifyKey(key);
                }
                const fromValue = from[key];
                to[translatedKey] = translateValue(fromValue, minify);
            }
        }
        return to;
    }
    ConfigMinifier.translateObject = translateObject;
    function translateArray(from, minify) {
        const length = from.length;
        const to = new Array(length);
        for (let i = 0; i < length; i++) {
            // In original code, array indices were numbers and not translated
            const fromValue = from[i];
            to[i] = translateValue(fromValue, minify);
        }
        return to;
    }
    function translateValue(from, minify) {
        if (typeof from === 'object') {
            if (from === null) {
                return null;
            }
            else {
                if (Array.isArray(from)) {
                    return translateArray(from, minify);
                }
                else {
                    return translateObject(from, minify);
                }
            }
        }
        else {
            if (minify) {
                return minifyValue(from);
            }
            else {
                return unminifyValue(from);
            }
        }
    }
    function minifyKey(value) {
        /**
         * If a value actually is a single character, prefix it
         * with ___ to avoid mistaking it for a minification code
         */
        if (typeof value === 'string' && value.length === 1) {
            return '___' + value;
        }
        const index = indexOfKey(value);
        /**
         * value not found in the dictionary, return it unmodified
         */
        if (index === -1) {
            return value;
            /**
             * value found in dictionary, return its base36 counterpart
             */
        }
        else {
            return index.toString(36);
        }
    }
    function unminifyKey(key) {
        /**
         * value is a single character. Assume that it's a translation
         * and return the original value from the dictionary
         */
        if (key.length === 1) {
            return keys[parseInt(key, 36)];
        }
        /**
         * value originally was a single character and was prefixed with ___
         * to avoid mistaking it for a translation. Remove the prefix
         * and return the original character
         */
        if (key.substr(0, 3) === '___') {
            return key[3];
        }
        /**
         * value was not minified
         */
        return key;
    }
    function minifyValue(value) {
        /**
         * If a value actually is a single character, prefix it
         * with ___ to avoid mistaking it for a minification code
         */
        if (typeof value === 'string' && value.length === 1) {
            return '___' + value;
        }
        const index = indexOfValue(value);
        /**
         * value not found in the dictionary, return it unmodified
         */
        if (index === -1) {
            return value;
            /**
             * value found in dictionary, return its base36 counterpart
             */
        }
        else {
            return index.toString(36);
        }
    }
    function unminifyValue(value) {
        /**
         * value is a single character. Assume that it's a translation
         * and return the original value from the dictionary
         */
        if (typeof value === 'string' && value.length === 1) {
            return values[parseInt(value, 36)];
        }
        /**
         * value originally was a single character and was prefixed with ___
         * to avoid mistaking it for a translation. Remove the prefix
         * and return the original character
         */
        if (typeof value === 'string' && value.substr(0, 3) === '___') {
            return value[3];
        }
        /**
         * value was not minified
         */
        return value;
    }
    function indexOfKey(key) {
        for (let i = 0; i < keys.length; i++) {
            if (keys[i] === key) {
                return i;
            }
        }
        return -1;
    }
    function indexOfValue(value) {
        for (let i = 0; i < values.length; i++) {
            if (values[i] === value) {
                return i;
            }
        }
        return -1;
    }
})(ConfigMinifier || (ConfigMinifier = {}));


/***/ }),

/***/ "./src/ts/utils/drag-listener.ts":
/*!***************************************!*\
  !*** ./src/ts/utils/drag-listener.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DragListener": () => (/* binding */ DragListener)
/* harmony export */ });
/* harmony import */ var _event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/ts/utils/utils.ts");


/** @internal */
class DragListener extends _event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    constructor(_eElement) {
        super();
        this._eElement = _eElement;
        this._pointerTracking = false;
        this._pointerDownEventListener = (ev) => this.onPointerDown(ev);
        this._pointerMoveEventListener = (ev) => this.onPointerMove(ev);
        this._pointerUpEventListener = (ev) => this.onPointerUp(ev);
        this._timeout = undefined;
        this._oDocument = document;
        this._eBody = document.body;
        /**
         * The delay after which to start the drag in milliseconds
         * Do NOT make too short (previous value of 200 was not long enough for my touchpad)
         * Should generally rely on the mouse move to start drag.  Not this delay.
         */
        this._nDelay = 1800;
        /**
         * The distance the mouse needs to be moved to qualify as a drag
         * Previous comment: works better with delay only
         * ???
         * Probably somehow needs tuning for different devices
         */
        this._nDistance = 10;
        this._nX = 0;
        this._nY = 0;
        this._nOriginalX = 0;
        this._nOriginalY = 0;
        this._dragging = false;
        this._eElement.addEventListener('pointerdown', this._pointerDownEventListener, { passive: true });
    }
    destroy() {
        this.checkRemovePointerTrackingEventListeners();
        this._eElement.removeEventListener('pointerdown', this._pointerDownEventListener);
    }
    cancelDrag() {
        this.processDragStop(undefined);
    }
    onPointerDown(oEvent) {
        for (let target = oEvent.target;; target = target.parentNode) {
            if (!(target instanceof HTMLElement))
                return;
            const draggable = target.getAttribute('draggable');
            if (draggable === 'true')
                break;
            if (draggable !== null)
                return;
        }
        this.processPointerDown(this.getPointerCoordinates(oEvent));
    }
    processPointerDown(coordinates) {
        this._nOriginalX = coordinates.x;
        this._nOriginalY = coordinates.y;
        this._oDocument.addEventListener('pointermove', this._pointerMoveEventListener);
        this._oDocument.addEventListener('pointerup', this._pointerUpEventListener, { passive: true });
        this._pointerTracking = true;
        this._timeout = setTimeout(() => {
            try {
                this.startDrag();
            }
            catch (err) {
                console.error(err);
                throw err;
            }
        }, this._nDelay);
    }
    onPointerMove(oEvent) {
        if (this._pointerTracking) {
            this.processDragMove(oEvent);
            oEvent.preventDefault();
        }
    }
    processDragMove(dragEvent) {
        this._nX = dragEvent.pageX - this._nOriginalX;
        this._nY = dragEvent.pageY - this._nOriginalY;
        if (this._dragging === false) {
            if (Math.abs(this._nX) > this._nDistance ||
                Math.abs(this._nY) > this._nDistance) {
                this.startDrag();
            }
        }
        if (this._dragging) {
            this.emit('drag', this._nX, this._nY, dragEvent);
        }
    }
    onPointerUp(oEvent) {
        this.processDragStop(oEvent);
    }
    processDragStop(dragEvent) {
        if (this._timeout !== undefined) {
            clearTimeout(this._timeout);
            this._timeout = undefined;
        }
        this.checkRemovePointerTrackingEventListeners();
        if (this._dragging === true) {
            this._eBody.classList.remove("lm_dragging" /* Dragging */);
            this._eElement.classList.remove("lm_dragging" /* Dragging */);
            (0,_utils__WEBPACK_IMPORTED_MODULE_1__.enableIFramePointerEvents)(true);
            this._dragging = false;
            this.emit('dragStop', dragEvent);
        }
    }
    checkRemovePointerTrackingEventListeners() {
        if (this._pointerTracking) {
            this._oDocument.removeEventListener('pointermove', this._pointerMoveEventListener);
            this._oDocument.removeEventListener('pointerup', this._pointerUpEventListener);
            this._pointerTracking = false;
        }
    }
    startDrag() {
        if (this._timeout !== undefined) {
            clearTimeout(this._timeout);
            this._timeout = undefined;
        }
        this._dragging = true;
        this._eBody.classList.add("lm_dragging" /* Dragging */);
        this._eElement.classList.add("lm_dragging" /* Dragging */);
        (0,_utils__WEBPACK_IMPORTED_MODULE_1__.enableIFramePointerEvents)(false);
        this.emit('dragStart', this._nOriginalX, this._nOriginalY);
    }
    getPointerCoordinates(event) {
        const result = {
            x: event.pageX,
            y: event.pageY
        };
        return result;
    }
}


/***/ }),

/***/ "./src/ts/utils/event-emitter.ts":
/*!***************************************!*\
  !*** ./src/ts/utils/event-emitter.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventEmitter": () => (/* binding */ EventEmitter)
/* harmony export */ });
/**
 * A generic and very fast EventEmitter implementation. On top of emitting the actual event it emits an
 * {@link (EventEmitter:namespace).ALL_EVENT} event for every event triggered. This allows to hook into it and proxy events forwards
 * @public
 */
class EventEmitter {
    constructor() {
        /** @internal */
        this._allEventSubscriptions = [];
        /** @internal */
        this._subscriptionsMap = new Map();
        /**
         * Alias for off
         */
        this.unbind = this.removeEventListener;
        /**
         * Alias for emit
         */
        this.trigger = this.emit;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    tryBubbleEvent(name, args) {
        // overridden by ContentItem
    }
    /**
     * Emit an event and notify listeners
     *
     * @param eventName - The name of the event
     * @param args - Additional arguments that will be passed to the listener
     */
    emit(eventName, ...args) {
        let subcriptions = this._subscriptionsMap.get(eventName);
        if (subcriptions !== undefined) {
            subcriptions = subcriptions.slice();
            for (let i = 0; i < subcriptions.length; i++) {
                const subscription = subcriptions[i];
                subscription(...args);
            }
        }
        this.emitAllEvent(eventName, args);
        this.tryBubbleEvent(eventName, args);
    }
    /** @internal */
    emitUnknown(eventName, ...args) {
        let subs = this._subscriptionsMap.get(eventName);
        if (subs !== undefined) {
            subs = subs.slice();
            for (let i = 0; i < subs.length; i++) {
                subs[i](...args);
            }
        }
        this.emitAllEvent(eventName, args);
        this.tryBubbleEvent(eventName, args);
    }
    /* @internal **/
    emitBaseBubblingEvent(eventName) {
        const event = new EventEmitter.BubblingEvent(eventName, this);
        this.emitUnknown(eventName, event);
    }
    /** @internal */
    emitUnknownBubblingEvent(eventName) {
        const event = new EventEmitter.BubblingEvent(eventName, this);
        this.emitUnknown(eventName, event);
    }
    /**
     * Removes a listener for an event.
     * @param eventName - The name of the event
     * @param callback - The previously registered callback method (optional)
     */
    removeEventListener(eventName, callback) {
        const unknownCallback = callback;
        this.removeUnknownEventListener(eventName, unknownCallback);
    }
    off(eventName, callback) {
        this.removeEventListener(eventName, callback);
    }
    /**
     * Listen for events
     *
     * @param eventName - The name of the event to listen to
     * @param callback - The callback to execute when the event occurs
     */
    addEventListener(eventName, callback) {
        const unknownCallback = callback;
        this.addUnknownEventListener(eventName, unknownCallback);
    }
    on(eventName, callback) {
        this.addEventListener(eventName, callback);
    }
    /** @internal */
    addUnknownEventListener(eventName, callback) {
        if (eventName === EventEmitter.ALL_EVENT) {
            this._allEventSubscriptions.push(callback);
        }
        else {
            let subscriptions = this._subscriptionsMap.get(eventName);
            if (subscriptions !== undefined) {
                subscriptions.push(callback);
            }
            else {
                subscriptions = [callback];
                this._subscriptionsMap.set(eventName, subscriptions);
            }
        }
    }
    /** @internal */
    removeUnknownEventListener(eventName, callback) {
        if (eventName === EventEmitter.ALL_EVENT) {
            this.removeSubscription(eventName, this._allEventSubscriptions, callback);
        }
        else {
            const subscriptions = this._subscriptionsMap.get(eventName);
            if (subscriptions === undefined) {
                throw new Error('No subscribtions to unsubscribe for event ' + eventName);
            }
            else {
                this.removeSubscription(eventName, subscriptions, callback);
            }
        }
    }
    /** @internal */
    removeSubscription(eventName, subscriptions, callback) {
        const idx = subscriptions.indexOf(callback);
        if (idx < 0) {
            throw new Error('Nothing to unbind for ' + eventName);
        }
        else {
            subscriptions.splice(idx, 1);
        }
    }
    /** @internal */
    emitAllEvent(eventName, args) {
        const allEventSubscriptionsCount = this._allEventSubscriptions.length;
        if (allEventSubscriptionsCount > 0) {
            const unknownArgs = args.slice();
            unknownArgs.unshift(eventName);
            const allEventSubcriptions = this._allEventSubscriptions.slice();
            for (let i = 0; i < allEventSubscriptionsCount; i++) {
                allEventSubcriptions[i](...unknownArgs);
            }
        }
    }
}
/** @public */
(function (EventEmitter) {
    /**
     * The name of the event that's triggered for every event
     */
    EventEmitter.ALL_EVENT = '__all';
    EventEmitter.headerClickEventName = 'stackHeaderClick';
    EventEmitter.headerTouchStartEventName = 'stackHeaderTouchStart';
    class BubblingEvent {
        /** @internal */
        constructor(
        /** @internal */
        _name, 
        /** @internal */
        _target) {
            this._name = _name;
            this._target = _target;
            /** @internal */
            this._isPropagationStopped = false;
        }
        get name() { return this._name; }
        get target() { return this._target; }
        /** @deprecated Use {@link (EventEmitter:namespace).(BubblingEvent:class).target} instead */
        get origin() { return this._target; }
        get isPropagationStopped() { return this._isPropagationStopped; }
        stopPropagation() {
            this._isPropagationStopped = true;
        }
    }
    EventEmitter.BubblingEvent = BubblingEvent;
    class ClickBubblingEvent extends BubblingEvent {
        /** @internal */
        constructor(name, target, 
        /** @internal */
        _mouseEvent) {
            super(name, target);
            this._mouseEvent = _mouseEvent;
        }
        get mouseEvent() { return this._mouseEvent; }
    }
    EventEmitter.ClickBubblingEvent = ClickBubblingEvent;
    class TouchStartBubblingEvent extends BubblingEvent {
        /** @internal */
        constructor(name, target, 
        /** @internal */
        _touchEvent) {
            super(name, target);
            this._touchEvent = _touchEvent;
        }
        get touchEvent() { return this._touchEvent; }
    }
    EventEmitter.TouchStartBubblingEvent = TouchStartBubblingEvent;
})(EventEmitter || (EventEmitter = {}));


/***/ }),

/***/ "./src/ts/utils/event-hub.ts":
/*!***********************************!*\
  !*** ./src/ts/utils/event-hub.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventHub": () => (/* binding */ EventHub)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _event_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./event-emitter */ "./src/ts/utils/event-emitter.ts");


/**
 * An EventEmitter singleton that propagates events
 * across multiple windows. This is a little bit trickier since
 * windows are allowed to open childWindows in their own right.
 *
 * This means that we deal with a tree of windows. Therefore, we do the event propagation in two phases:
 *
 * - Propagate events from this layout to the parent layout
 *   - Repeat until the event arrived at the root layout
 * - Propagate events to this layout and to all children
 *   - Repeat until all layouts got the event
 *
 * **WARNING**: Only userBroadcast events are propagated between windows.
 * This means the you have to take care of propagating state changes between windows yourself.
 *
 * @public
 */
class EventHub extends _event_emitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter {
    /**
     * Creates a new EventHub instance
     * @param _layoutManager - the layout manager to synchronize between the windows
     * @internal
     */
    constructor(
    /** @internal */
    _layoutManager) {
        super();
        this._layoutManager = _layoutManager;
        /** @internal */
        this._childEventListener = (childEvent) => this.onEventFromChild(childEvent);
        globalThis.addEventListener(EventHub.ChildEventName, this._childEventListener, { passive: true });
    }
    /**
     * Emit an event and notify listeners
     *
     * @param eventName - The name of the event
     * @param args - Additional arguments that will be passed to the listener
     * @public
     */
    emit(eventName, ...args) {
        if (eventName === 'userBroadcast') {
            // Explicitly redirect the user broadcast to our overridden method.
            this.emitUserBroadcast(...args);
        }
        else {
            super.emit(eventName, ...args);
        }
    }
    /**
     * Broadcasts a message to all other currently opened windows.
     * @public
     */
    emitUserBroadcast(...args) {
        // Step 1: Bubble up the event
        this.handleUserBroadcastEvent('userBroadcast', args);
    }
    /**
     * Destroys the EventHub
     * @internal
     */
    destroy() {
        globalThis.removeEventListener(EventHub.ChildEventName, this._childEventListener);
    }
    /**
     * Internal processor to process local events.
     * @internal
     */
    handleUserBroadcastEvent(eventName, args) {
        if (this._layoutManager.isSubWindow) {
            // We are a sub window and received an event from one of our children.
            // So propagate it to the Root.
            this.propagateToParent(eventName, args);
        }
        else {
            // We are the root window, propagate it to the subtree below us.
            this.propagateToThisAndSubtree(eventName, args);
        }
    }
    /**
     * Callback for child events raised on the window
     * @internal
     */
    onEventFromChild(event) {
        const detail = event.detail;
        this.handleUserBroadcastEvent(detail.eventName, detail.args);
    }
    /**
     * Propagates the event to the parent by emitting
     * it on the parent's DOM window
     * @internal
     */
    propagateToParent(eventName, args) {
        const detail = {
            layoutManager: this._layoutManager,
            eventName,
            args: args,
        };
        const eventInit = {
            bubbles: true,
            cancelable: true,
            detail,
        };
        const event = new CustomEvent(EventHub.ChildEventName, eventInit);
        const opener = globalThis.opener;
        if (opener === null) {
            throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedNullError('EHPTP15778');
        }
        opener.dispatchEvent(event);
    }
    /**
     * Propagate events to the whole subtree under this event hub.
     * @internal
     */
    propagateToThisAndSubtree(eventName, args) {
        this.emitUnknown(eventName, ...args);
        for (let i = 0; i < this._layoutManager.openPopouts.length; i++) {
            const childGl = this._layoutManager.openPopouts[i].getGlInstance();
            if (childGl) {
                childGl.eventHub.propagateToThisAndSubtree(eventName, args);
            }
        }
    }
}
/** @public */
(function (EventHub) {
    /** @internal */
    EventHub.ChildEventName = 'gl_child_event';
})(EventHub || (EventHub = {}));


/***/ }),

/***/ "./src/ts/utils/i18n-strings.ts":
/*!**************************************!*\
  !*** ./src/ts/utils/i18n-strings.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I18nStrings": () => (/* binding */ I18nStrings),
/* harmony export */   "i18nStrings": () => (/* binding */ i18nStrings)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");

/** @public */
var I18nStrings;
(function (I18nStrings) {
    /** @internal */
    let initialised = false;
    /** @internal */
    const infosObject = {
        PopoutCannotBeCreatedWithGroundItemConfig: {
            id: 0 /* PopoutCannotBeCreatedWithGroundItemConfig */,
            default: 'Popout cannot be created with ground ItemConfig'
        },
        PleaseRegisterAConstructorFunction: {
            id: 1 /* PleaseRegisterAConstructorFunction */,
            default: 'Please register a constructor function'
        },
        ComponentTypeNotRegisteredAndBindComponentEventHandlerNotAssigned: {
            id: 2 /* ComponentTypeNotRegisteredAndBindComponentEventHandlerNotAssigned */,
            default: 'Component type not registered and BindComponentEvent handler not assigned',
        },
        ComponentIsAlreadyRegistered: {
            id: 3 /* ComponentIsAlreadyRegistered */,
            default: 'Component is already registered',
        },
        ComponentIsNotVirtuable: {
            id: 4 /* ComponentIsNotVirtuable */,
            default: 'Component is not virtuable. Requires rootHtmlElement field/getter',
        },
        VirtualComponentDoesNotHaveRootHtmlElement: {
            id: 5 /* VirtualComponentDoesNotHaveRootHtmlElement */,
            default: 'Virtual component does not have getter "rootHtmlElement"',
        },
        ItemConfigIsNotTypeComponent: {
            id: 6 /* ItemConfigIsNotTypeComponent */,
            default: 'ItemConfig is not of type component',
        },
        InvalidNumberPartInSizeString: {
            id: 7 /* InvalidNumberPartInSizeString */,
            default: 'Invalid number part in size string',
        },
        UnknownUnitInSizeString: {
            id: 8 /* UnknownUnitInSizeString */,
            default: 'Unknown unit in size string',
        },
        UnsupportedUnitInSizeString: {
            id: 9 /* UnsupportedUnitInSizeString */,
            default: 'Unsupported unit in size string',
        },
    };
    I18nStrings.idCount = Object.keys(infosObject).length;
    /** @internal */
    const infos = Object.values(infosObject);
    function checkInitialise() {
        if (!initialised) {
            for (let i = 0; i < I18nStrings.idCount; i++) {
                const info = infos[i];
                if (info.id !== i) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_0__.AssertError('INSI00110', `${i}: ${info.id}`);
                }
                else {
                    i18nStrings[i] = info.default;
                }
            }
        }
        initialised = true;
    }
    I18nStrings.checkInitialise = checkInitialise;
})(I18nStrings || (I18nStrings = {}));
/** @public */
const i18nStrings = new Array(I18nStrings.idCount);


/***/ }),

/***/ "./src/ts/utils/style-constants.ts":
/*!*****************************************!*\
  !*** ./src/ts/utils/style-constants.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleConstants": () => (/* binding */ StyleConstants)
/* harmony export */ });
/** @public */
var StyleConstants;
(function (StyleConstants) {
    StyleConstants.defaultComponentBaseZIndex = 'auto';
    StyleConstants.defaultComponentDragZIndex = '32';
    StyleConstants.defaultComponentStackMaximisedZIndex = '41';
})(StyleConstants || (StyleConstants = {}));


/***/ }),

/***/ "./src/ts/utils/types.ts":
/*!*******************************!*\
  !*** ./src/ts/utils/types.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ItemType": () => (/* binding */ ItemType),
/* harmony export */   "JsonValue": () => (/* binding */ JsonValue),
/* harmony export */   "LogicalZIndex": () => (/* binding */ LogicalZIndex),
/* harmony export */   "LogicalZIndexToDefaultMap": () => (/* binding */ LogicalZIndexToDefaultMap),
/* harmony export */   "ResponsiveMode": () => (/* binding */ ResponsiveMode),
/* harmony export */   "Side": () => (/* binding */ Side),
/* harmony export */   "SizeUnitEnum": () => (/* binding */ SizeUnitEnum),
/* harmony export */   "WidthOrHeightPropertyName": () => (/* binding */ WidthOrHeightPropertyName)
/* harmony export */ });
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _style_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style-constants */ "./src/ts/utils/style-constants.ts");


/** @internal */
var WidthOrHeightPropertyName;
(function (WidthOrHeightPropertyName) {
    WidthOrHeightPropertyName.width = 'width';
    WidthOrHeightPropertyName.height = 'height';
})(WidthOrHeightPropertyName || (WidthOrHeightPropertyName = {}));
/** @public */
var Side;
(function (Side) {
    Side.top = 'top';
    Side.left = 'left';
    Side.right = 'right';
    Side.bottom = 'bottom';
})(Side || (Side = {}));
/** @public */
var LogicalZIndex;
(function (LogicalZIndex) {
    LogicalZIndex.base = 'base';
    LogicalZIndex.drag = 'drag';
    LogicalZIndex.stackMaximised = 'stackMaximised';
})(LogicalZIndex || (LogicalZIndex = {}));
/** @public */
const LogicalZIndexToDefaultMap = {
    base: _style_constants__WEBPACK_IMPORTED_MODULE_0__.StyleConstants.defaultComponentBaseZIndex,
    drag: _style_constants__WEBPACK_IMPORTED_MODULE_0__.StyleConstants.defaultComponentDragZIndex,
    stackMaximised: _style_constants__WEBPACK_IMPORTED_MODULE_0__.StyleConstants.defaultComponentStackMaximisedZIndex,
};
/** @public */
var JsonValue;
(function (JsonValue) {
    function isJson(value) {
        return isJsonObject(value);
    }
    JsonValue.isJson = isJson;
    // eslint-disable-next-line @typescript-eslint/ban-types
    function isJsonObject(value) {
        return !Array.isArray(value) && value !== null && typeof value === 'object';
    }
    JsonValue.isJsonObject = isJsonObject;
})(JsonValue || (JsonValue = {}));
/** @public */
var ItemType;
(function (ItemType) {
    ItemType.ground = 'ground';
    ItemType.row = 'row';
    ItemType.column = 'column';
    ItemType.stack = 'stack';
    ItemType.component = 'component';
})(ItemType || (ItemType = {}));
/** @public */
var ResponsiveMode;
(function (ResponsiveMode) {
    ResponsiveMode.none = 'none';
    ResponsiveMode.always = 'always';
    ResponsiveMode.onload = 'onload';
})(ResponsiveMode || (ResponsiveMode = {}));
/** @public */
var SizeUnitEnum;
(function (SizeUnitEnum) {
    SizeUnitEnum["Pixel"] = "px";
    SizeUnitEnum["Percent"] = "%";
    SizeUnitEnum["Fractional"] = "fr";
    SizeUnitEnum["Em"] = "em";
})(SizeUnitEnum || (SizeUnitEnum = {}));
/** @public */
(function (SizeUnitEnum) {
    function tryParse(value) {
        switch (value) {
            case SizeUnitEnum.Pixel: return SizeUnitEnum.Pixel;
            case SizeUnitEnum.Percent: return SizeUnitEnum.Percent;
            case SizeUnitEnum.Fractional: return SizeUnitEnum.Fractional;
            case SizeUnitEnum.Em: return SizeUnitEnum.Em;
            default: return undefined;
        }
    }
    SizeUnitEnum.tryParse = tryParse;
    function format(value) {
        switch (value) {
            case SizeUnitEnum.Pixel: return SizeUnitEnum.Pixel;
            case SizeUnitEnum.Percent: return SizeUnitEnum.Percent;
            case SizeUnitEnum.Fractional: return SizeUnitEnum.Fractional;
            case SizeUnitEnum.Em: return SizeUnitEnum.Em;
            default:
                throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnreachableCaseError('SUEF44998', value);
        }
    }
    SizeUnitEnum.format = format;
})(SizeUnitEnum || (SizeUnitEnum = {}));


/***/ }),

/***/ "./src/ts/utils/utils.ts":
/*!*******************************!*\
  !*** ./src/ts/utils/utils.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deepExtend": () => (/* binding */ deepExtend),
/* harmony export */   "deepExtendValue": () => (/* binding */ deepExtendValue),
/* harmony export */   "enableIFramePointerEvents": () => (/* binding */ enableIFramePointerEvents),
/* harmony export */   "ensureElementPositionAbsolute": () => (/* binding */ ensureElementPositionAbsolute),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "getElementHeight": () => (/* binding */ getElementHeight),
/* harmony export */   "getElementWidth": () => (/* binding */ getElementWidth),
/* harmony export */   "getElementWidthAndHeight": () => (/* binding */ getElementWidthAndHeight),
/* harmony export */   "getErrorMessage": () => (/* binding */ getErrorMessage),
/* harmony export */   "getUniqueId": () => (/* binding */ getUniqueId),
/* harmony export */   "isDigit": () => (/* binding */ isDigit),
/* harmony export */   "numberToPixels": () => (/* binding */ numberToPixels),
/* harmony export */   "pixelsToNumber": () => (/* binding */ pixelsToNumber),
/* harmony export */   "removeFromArray": () => (/* binding */ removeFromArray),
/* harmony export */   "setElementDisplayVisibility": () => (/* binding */ setElementDisplayVisibility),
/* harmony export */   "setElementHeight": () => (/* binding */ setElementHeight),
/* harmony export */   "setElementWidth": () => (/* binding */ setElementWidth),
/* harmony export */   "splitStringAtFirstNonNumericChar": () => (/* binding */ splitStringAtFirstNonNumericChar)
/* harmony export */ });
/** @internal */
function numberToPixels(value) {
    return value.toString(10) + 'px';
}
/** @internal */
function pixelsToNumber(value) {
    const numberStr = value.replace("px", "");
    return parseFloat(numberStr);
}
/** @internal */
function splitStringAtFirstNonNumericChar(value) {
    value = value.trimStart();
    const length = value.length;
    if (length === 0) {
        return { numericPart: '', firstNonNumericCharPart: '' };
    }
    else {
        let firstNonDigitPartIndex = length;
        let gotDecimalPoint = false;
        for (let i = 0; i < length; i++) {
            const char = value[i];
            if (!isDigit(char)) {
                if (char !== '.') {
                    firstNonDigitPartIndex = i;
                    break;
                }
                else {
                    if (gotDecimalPoint) {
                        firstNonDigitPartIndex = i;
                        break;
                    }
                    else {
                        gotDecimalPoint = true;
                    }
                }
            }
        }
        const digitsPart = value.substring(0, firstNonDigitPartIndex);
        const firstNonDigitPart = value.substring(firstNonDigitPartIndex).trim();
        return { numericPart: digitsPart, firstNonNumericCharPart: firstNonDigitPart };
    }
}
/** @internal */
function isDigit(char) {
    return char >= '0' && char <= '9';
}
/** @internal */
function getElementWidth(element) {
    return element.offsetWidth;
}
/** @internal */
function setElementWidth(element, width) {
    const widthAsPixels = numberToPixels(width);
    element.style.width = widthAsPixels;
}
/** @internal */
function getElementHeight(element) {
    return element.offsetHeight;
}
/** @internal */
function setElementHeight(element, height) {
    const heightAsPixels = numberToPixels(height);
    element.style.height = heightAsPixels;
}
/** @internal */
function getElementWidthAndHeight(element) {
    return {
        width: element.offsetWidth,
        height: element.offsetHeight,
    };
}
/** @internal */
function setElementDisplayVisibility(element, visible) {
    if (visible) {
        element.style.display = '';
    }
    else {
        element.style.display = 'none';
    }
}
/** @internal */
function enableIFramePointerEvents(enable) {
    document.querySelectorAll('iframe.lm_content').forEach((element) => element.style.setProperty('pointer-events', enable ? '' : 'none'));
}
/** @internal */
function ensureElementPositionAbsolute(element) {
    const absolutePosition = 'absolute';
    if (element.style.position !== absolutePosition) {
        element.style.position = absolutePosition;
    }
}
/**
 * Replacement for JQuery $.extend(target, obj)
 * @internal
*/
function extend(target, obj) {
    for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
            target[key] = obj[key];
        }
    }
    return target;
}
/**
 * Replacement for JQuery $.extend(true, target, obj)
 * @internal
*/
function deepExtend(target, obj) {
    if (obj !== undefined) {
        for (const key in obj) {
            if (obj.hasOwnProperty(key)) {
                const value = obj[key];
                const existingTarget = target[key];
                target[key] = deepExtendValue(existingTarget, value);
            }
        }
    }
    return target;
}
/** @internal */
function deepExtendValue(existingTarget, value) {
    if (typeof value !== 'object') {
        return value;
    }
    else {
        if (Array.isArray(value)) {
            const length = value.length;
            const targetArray = new Array(length);
            for (let i = 0; i < length; i++) {
                const element = value[i];
                targetArray[i] = deepExtendValue({}, element);
            }
            return targetArray;
        }
        else {
            if (value === null) {
                return null;
            }
            else {
                const valueObj = value;
                if (existingTarget === undefined) {
                    return deepExtend({}, valueObj); // overwrite
                }
                else {
                    if (typeof existingTarget !== "object") {
                        return deepExtend({}, valueObj); // overwrite
                    }
                    else {
                        if (Array.isArray(existingTarget)) {
                            return deepExtend({}, valueObj); // overwrite
                        }
                        else {
                            if (existingTarget === null) {
                                return deepExtend({}, valueObj); // overwrite
                            }
                            else {
                                const existingTargetObj = existingTarget;
                                return deepExtend(existingTargetObj, valueObj); // merge
                            }
                        }
                    }
                }
            }
        }
    }
}
/** @internal */
function removeFromArray(item, array) {
    const index = array.indexOf(item);
    if (index === -1) {
        throw new Error('Can\'t remove item from array. Item is not in the array');
    }
    array.splice(index, 1);
}
/** @internal */
function getUniqueId() {
    return (Math.random() * 1000000000000000)
        .toString(36)
        .replace('.', '');
}
/** @internal */
function getErrorMessage(e) {
    if (e instanceof Error) {
        return e.message;
    }
    else {
        if (typeof e === 'string') {
            return e;
        }
        else {
            return 'Unknown Error';
        }
    }
}


/***/ }),

/***/ "./src/ts/virtual-layout.ts":
/*!**********************************!*\
  !*** ./src/ts/virtual-layout.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VirtualLayout": () => (/* binding */ VirtualLayout)
/* harmony export */ });
/* harmony import */ var _config_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _config_resolved_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors/internal-error */ "./src/ts/errors/internal-error.ts");
/* harmony import */ var _layout_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layout-manager */ "./src/ts/layout-manager.ts");




/** @public */
class VirtualLayout extends _layout_manager__WEBPACK_IMPORTED_MODULE_0__.LayoutManager {
    /** @internal */
    constructor(configOrOptionalContainer, containerOrBindComponentEventHandler, unbindComponentEventHandler, skipInit) {
        super(VirtualLayout.createLayoutManagerConstructorParameters(configOrOptionalContainer, containerOrBindComponentEventHandler, unbindComponentEventHandler));
        /** @internal @deprecated use while constructor is not determinate */
        this._bindComponentEventHanlderPassedInConstructor = false; // remove when constructor is determinate
        /** @internal  @deprecated use while constructor is not determinate */
        this._creationTimeoutPassed = false; // remove when constructor is determinate
        if (containerOrBindComponentEventHandler !== undefined) {
            if (typeof containerOrBindComponentEventHandler === 'function') {
                this.bindComponentEvent = containerOrBindComponentEventHandler;
                this._bindComponentEventHanlderPassedInConstructor = true;
                if (typeof unbindComponentEventHandler === 'function') {
                    this.unbindComponentEvent = unbindComponentEventHandler;
                }
            }
        }
        if (!this._bindComponentEventHanlderPassedInConstructor) {
            // backward compatibility
            if (this.isSubWindow) {
                // document.body.style.visibility = 'hidden';
                // Set up layoutConfig since constructor is not determinate and may exit early. Other functions may need
                // this.layoutConfig. this.layoutConfig is again calculated in the same way when init() completes.
                // Remove this when constructor is determinate.
                if (this._constructorOrSubWindowLayoutConfig === undefined) {
                    throw new _errors_internal_error__WEBPACK_IMPORTED_MODULE_1__.UnexpectedUndefinedError('VLC98823');
                }
                else {
                    const resolvedLayoutConfig = _config_config__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.resolve(this._constructorOrSubWindowLayoutConfig);
                    // remove root from layoutConfig
                    this.layoutConfig = Object.assign(Object.assign({}, resolvedLayoutConfig), { root: undefined });
                }
            }
        }
        if (skipInit !== true) {
            if (!this.deprecatedConstructor) {
                this.init();
            }
        }
    }
    destroy() {
        this.bindComponentEvent = undefined;
        this.unbindComponentEvent = undefined;
        super.destroy();
    }
    /**
     * Creates the actual layout. Must be called after all initial components
     * are registered. Recurses through the configuration and sets up
     * the item tree.
     *
     * If called before the document is ready it adds itself as a listener
     * to the document.ready event
     * @deprecated LayoutConfig should not be loaded in {@link (LayoutManager:class)} constructor, but rather in a
     * {@link (LayoutManager:class).loadLayout} call.  If LayoutConfig is not specified in {@link (LayoutManager:class)} constructor,
     * then init() will be automatically called internally and should not be called externally.
     */
    init() {
        /**
         * If the document isn't ready yet, wait for it.
         */
        if (!this._bindComponentEventHanlderPassedInConstructor && (document.readyState === 'loading' || document.body === null)) {
            document.addEventListener('DOMContentLoaded', () => this.init(), { passive: true });
            return;
        }
        /**
         * If this is a subwindow, wait a few milliseconds for the original
         * page's js calls to be executed, then replace the bodies content
         * with GoldenLayout
         */
        if (!this._bindComponentEventHanlderPassedInConstructor && this.isSubWindow === true && !this._creationTimeoutPassed) {
            setTimeout(() => this.init(), 7);
            this._creationTimeoutPassed = true;
            return;
        }
        if (this.isSubWindow === true) {
            if (!this._bindComponentEventHanlderPassedInConstructor) {
                this.clearHtmlAndAdjustStylesForSubWindow();
            }
            // Expose this instance on the window object to allow the opening window to interact with it
            window.__glInstance = this;
        }
        super.init();
    }
    /**
     * Clears existing HTML and adjusts style to make window suitable to be a popout sub window
     * Curently is automatically called when window is a subWindow and bindComponentEvent is not passed in the constructor
     * If bindComponentEvent is not passed in the constructor, the application must either call this function explicitly or
     * (preferably) make the window suitable as a subwindow.
     * In the future, it is planned that this function is NOT automatically called in any circumstances.  Applications will
     * need to determine whether a window is a Golden Layout popout window and either call this function explicitly or
     * hide HTML not relevant to the popout.
     * See apitest for an example of how HTML is hidden when popout windows are displayed
     */
    clearHtmlAndAdjustStylesForSubWindow() {
        const headElement = document.head;
        const appendNodeLists = new Array(4);
        appendNodeLists[0] = document.querySelectorAll('body link');
        appendNodeLists[1] = document.querySelectorAll('body style');
        appendNodeLists[2] = document.querySelectorAll('template');
        appendNodeLists[3] = document.querySelectorAll('.gl_keep');
        for (let listIdx = 0; listIdx < appendNodeLists.length; listIdx++) {
            const appendNodeList = appendNodeLists[listIdx];
            for (let nodeIdx = 0; nodeIdx < appendNodeList.length; nodeIdx++) {
                const node = appendNodeList[nodeIdx];
                headElement.appendChild(node);
            }
        }
        const bodyElement = document.body;
        bodyElement.innerHTML = '';
        bodyElement.style.visibility = 'visible';
        this.checkAddDefaultPopinButton();
        /*
        * This seems a bit pointless, but actually causes a reflow/re-evaluation getting around
        * slickgrid's "Cannot find stylesheet." bug in chrome
        */
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const x = document.body.offsetHeight;
    }
    /**
     * Will add button if not popinOnClose specified in settings
     * @returns true if added otherwise false
     */
    checkAddDefaultPopinButton() {
        if (this.layoutConfig.settings.popInOnClose) {
            return false;
        }
        else {
            const popInButtonElement = document.createElement('div');
            popInButtonElement.classList.add("lm_popin" /* Popin */);
            popInButtonElement.setAttribute('title', this.layoutConfig.header.dock);
            const iconElement = document.createElement('div');
            iconElement.classList.add("lm_icon" /* Icon */);
            const bgElement = document.createElement('div');
            bgElement.classList.add("lm_bg" /* Bg */);
            popInButtonElement.appendChild(iconElement);
            popInButtonElement.appendChild(bgElement);
            popInButtonElement.addEventListener('click', () => this.emit('popIn'));
            document.body.appendChild(popInButtonElement);
            return true;
        }
    }
    /* * @internal * /
    override bindComponent(container: ComponentContainer, itemConfig: ResolvedComponentItemConfig): ComponentContainer.Handle {
        if (this.bindComponentEvent !== undefined) {
            const bindableComponent = this.bindComponentEvent(container, itemConfig);
            return bindableComponent;

        }
    }
    */
    /** @internal */
    unbindComponent(container, handle) {
        if (this.unbindComponentEvent !== undefined) {
            this.unbindComponentEvent(container);
        }
    }
}
/** @public */
(function (VirtualLayout) {
    /** @internal
     * Veriable to hold the state whether we already checked if we are running in a sub window.
     * Fixes popout and creation of nested golden-layouts.
     */
    let subWindowChecked = false;
    /** @internal */
    function createLayoutManagerConstructorParameters(configOrOptionalContainer, containerOrBindComponentEventHandler, unbindComponentEventHandler) {
        if (typeof configOrOptionalContainer === 'object'
            && !(configOrOptionalContainer instanceof HTMLElement)
            && configOrOptionalContainer.settings
            && configOrOptionalContainer.settings.checkGlWindowKey === false)
            subWindowChecked = true;
        const windowConfigKey = subWindowChecked ? null : new URL(document.location.href).searchParams.get('gl-window');
        subWindowChecked = true;
        const isSubWindow = windowConfigKey !== null;
        let containerElement;
        let containerPosition = null;
        let config;
        if (windowConfigKey !== null) {
            const windowConfigStr = localStorage.getItem(windowConfigKey);
            if (windowConfigStr === null) {
                throw new Error('Null gl-window Config');
            }
            localStorage.removeItem(windowConfigKey);
            const minifiedWindowConfig = JSON.parse(windowConfigStr);
            const resolvedConfig = _config_resolved_config__WEBPACK_IMPORTED_MODULE_3__.ResolvedLayoutConfig.unminifyConfig(minifiedWindowConfig);
            config = _config_config__WEBPACK_IMPORTED_MODULE_2__.LayoutConfig.fromResolved(resolvedConfig);
            if (configOrOptionalContainer instanceof HTMLElement) {
                containerElement = configOrOptionalContainer;
            }
        }
        else {
            if (configOrOptionalContainer === undefined) {
                config = undefined;
            }
            else {
                if (configOrOptionalContainer instanceof HTMLElement) {
                    config = undefined;
                    containerElement = configOrOptionalContainer;
                }
                else {
                    // backwards compatibility
                    config = configOrOptionalContainer;
                }
            }
            if (containerElement === undefined) {
                if (containerOrBindComponentEventHandler instanceof HTMLElement) {
                    containerElement = containerOrBindComponentEventHandler;
                    if (unbindComponentEventHandler instanceof Node)
                        containerPosition = unbindComponentEventHandler;
                }
            }
        }
        return {
            constructorOrSubWindowLayoutConfig: config,
            isSubWindow,
            containerElement,
            containerPosition,
        };
    }
    VirtualLayout.createLayoutManagerConstructorParameters = createLayoutManagerConstructorParameters;
})(VirtualLayout || (VirtualLayout = {}));


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApiError": () => (/* reexport safe */ _ts_errors_external_error__WEBPACK_IMPORTED_MODULE_7__.ApiError),
/* harmony export */   "BindError": () => (/* reexport safe */ _ts_errors_external_error__WEBPACK_IMPORTED_MODULE_7__.BindError),
/* harmony export */   "BrowserPopout": () => (/* reexport safe */ _ts_controls_browser_popout__WEBPACK_IMPORTED_MODULE_3__.BrowserPopout),
/* harmony export */   "ComponentContainer": () => (/* reexport safe */ _ts_container_component_container__WEBPACK_IMPORTED_MODULE_2__.ComponentContainer),
/* harmony export */   "ComponentItem": () => (/* reexport safe */ _ts_items_component_item__WEBPACK_IMPORTED_MODULE_9__.ComponentItem),
/* harmony export */   "ComponentItemConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.ComponentItemConfig),
/* harmony export */   "ConfigurationError": () => (/* reexport safe */ _ts_errors_external_error__WEBPACK_IMPORTED_MODULE_7__.ConfigurationError),
/* harmony export */   "ContentItem": () => (/* reexport safe */ _ts_items_content_item__WEBPACK_IMPORTED_MODULE_10__.ContentItem),
/* harmony export */   "DragSource": () => (/* reexport safe */ _ts_controls_drag_source__WEBPACK_IMPORTED_MODULE_4__.DragSource),
/* harmony export */   "EventEmitter": () => (/* reexport safe */ _ts_utils_event_emitter__WEBPACK_IMPORTED_MODULE_14__.EventEmitter),
/* harmony export */   "EventHub": () => (/* reexport safe */ _ts_utils_event_hub__WEBPACK_IMPORTED_MODULE_15__.EventHub),
/* harmony export */   "ExternalError": () => (/* reexport safe */ _ts_errors_external_error__WEBPACK_IMPORTED_MODULE_7__.ExternalError),
/* harmony export */   "GoldenLayout": () => (/* reexport safe */ _ts_golden_layout__WEBPACK_IMPORTED_MODULE_8__.GoldenLayout),
/* harmony export */   "Header": () => (/* reexport safe */ _ts_controls_header__WEBPACK_IMPORTED_MODULE_5__.Header),
/* harmony export */   "HeaderedItemConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.HeaderedItemConfig),
/* harmony export */   "I18nStrings": () => (/* reexport safe */ _ts_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_16__.I18nStrings),
/* harmony export */   "ItemConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.ItemConfig),
/* harmony export */   "ItemType": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.ItemType),
/* harmony export */   "JsonValue": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.JsonValue),
/* harmony export */   "LayoutConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.LayoutConfig),
/* harmony export */   "LayoutManager": () => (/* reexport safe */ _ts_layout_manager__WEBPACK_IMPORTED_MODULE_13__.LayoutManager),
/* harmony export */   "LogicalZIndex": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.LogicalZIndex),
/* harmony export */   "LogicalZIndexToDefaultMap": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.LogicalZIndexToDefaultMap),
/* harmony export */   "PopoutBlockedError": () => (/* reexport safe */ _ts_errors_external_error__WEBPACK_IMPORTED_MODULE_7__.PopoutBlockedError),
/* harmony export */   "PopoutLayoutConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.PopoutLayoutConfig),
/* harmony export */   "ResolvedComponentItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedComponentItemConfig),
/* harmony export */   "ResolvedGroundItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedGroundItemConfig),
/* harmony export */   "ResolvedHeaderedItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedHeaderedItemConfig),
/* harmony export */   "ResolvedItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedItemConfig),
/* harmony export */   "ResolvedLayoutConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedLayoutConfig),
/* harmony export */   "ResolvedPopoutLayoutConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedPopoutLayoutConfig),
/* harmony export */   "ResolvedRootItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedRootItemConfig),
/* harmony export */   "ResolvedRowOrColumnItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedRowOrColumnItemConfig),
/* harmony export */   "ResolvedStackItemConfig": () => (/* reexport safe */ _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__.ResolvedStackItemConfig),
/* harmony export */   "ResponsiveMode": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.ResponsiveMode),
/* harmony export */   "RootItemConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.RootItemConfig),
/* harmony export */   "RowOrColumn": () => (/* reexport safe */ _ts_items_row_or_column__WEBPACK_IMPORTED_MODULE_11__.RowOrColumn),
/* harmony export */   "RowOrColumnItemConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.RowOrColumnItemConfig),
/* harmony export */   "Side": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.Side),
/* harmony export */   "SizeUnitEnum": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.SizeUnitEnum),
/* harmony export */   "Stack": () => (/* reexport safe */ _ts_items_stack__WEBPACK_IMPORTED_MODULE_12__.Stack),
/* harmony export */   "StackItemConfig": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.StackItemConfig),
/* harmony export */   "StyleConstants": () => (/* reexport safe */ _ts_utils_style_constants__WEBPACK_IMPORTED_MODULE_17__.StyleConstants),
/* harmony export */   "Tab": () => (/* reexport safe */ _ts_controls_tab__WEBPACK_IMPORTED_MODULE_6__.Tab),
/* harmony export */   "VirtualLayout": () => (/* reexport safe */ _ts_virtual_layout__WEBPACK_IMPORTED_MODULE_19__.VirtualLayout),
/* harmony export */   "WidthOrHeightPropertyName": () => (/* reexport safe */ _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__.WidthOrHeightPropertyName),
/* harmony export */   "formatSize": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.formatSize),
/* harmony export */   "formatUndefinableSize": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.formatUndefinableSize),
/* harmony export */   "i18nStrings": () => (/* reexport safe */ _ts_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_16__.i18nStrings),
/* harmony export */   "parseSize": () => (/* reexport safe */ _ts_config_config__WEBPACK_IMPORTED_MODULE_0__.parseSize)
/* harmony export */ });
/* harmony import */ var _ts_config_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ts/config/config */ "./src/ts/config/config.ts");
/* harmony import */ var _ts_config_resolved_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ts/config/resolved-config */ "./src/ts/config/resolved-config.ts");
/* harmony import */ var _ts_container_component_container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ts/container/component-container */ "./src/ts/container/component-container.ts");
/* harmony import */ var _ts_controls_browser_popout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ts/controls/browser-popout */ "./src/ts/controls/browser-popout.ts");
/* harmony import */ var _ts_controls_drag_source__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ts/controls/drag-source */ "./src/ts/controls/drag-source.ts");
/* harmony import */ var _ts_controls_header__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ts/controls/header */ "./src/ts/controls/header.ts");
/* harmony import */ var _ts_controls_tab__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ts/controls/tab */ "./src/ts/controls/tab.ts");
/* harmony import */ var _ts_errors_external_error__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ts/errors/external-error */ "./src/ts/errors/external-error.ts");
/* harmony import */ var _ts_golden_layout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ts/golden-layout */ "./src/ts/golden-layout.ts");
/* harmony import */ var _ts_items_component_item__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ts/items/component-item */ "./src/ts/items/component-item.ts");
/* harmony import */ var _ts_items_content_item__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ts/items/content-item */ "./src/ts/items/content-item.ts");
/* harmony import */ var _ts_items_row_or_column__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ts/items/row-or-column */ "./src/ts/items/row-or-column.ts");
/* harmony import */ var _ts_items_stack__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ts/items/stack */ "./src/ts/items/stack.ts");
/* harmony import */ var _ts_layout_manager__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ts/layout-manager */ "./src/ts/layout-manager.ts");
/* harmony import */ var _ts_utils_event_emitter__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ts/utils/event-emitter */ "./src/ts/utils/event-emitter.ts");
/* harmony import */ var _ts_utils_event_hub__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ts/utils/event-hub */ "./src/ts/utils/event-hub.ts");
/* harmony import */ var _ts_utils_i18n_strings__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./ts/utils/i18n-strings */ "./src/ts/utils/i18n-strings.ts");
/* harmony import */ var _ts_utils_style_constants__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ts/utils/style-constants */ "./src/ts/utils/style-constants.ts");
/* harmony import */ var _ts_utils_types__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./ts/utils/types */ "./src/ts/utils/types.ts");
/* harmony import */ var _ts_virtual_layout__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./ts/virtual-layout */ "./src/ts/virtual-layout.ts");





















})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFTLEVBQUU7Z0JBQ2hDLElBQUksb0NBQW9DLFlBQVksV0FBVyxFQUFFO29CQUM3RCxnQkFBZ0IsR0FBRyxvQ0FBb0MsQ0FBQztvQkFDeEQsSUFBSSwyQkFBMkIsWUFBWSxJQUFJO3dCQUMzQyxpQkFBaUIsR0FBRywyQkFBMkIsQ0FBQztpQkFDdkQ7YUFDSjtTQUNKO1FBRUQsT0FBTztZQUNILGtDQUFrQyxFQUFFLE1BQU07WUFDMUMsV0FBVztZQUNYLGdCQUFnQjtZQUNoQixpQkFBaUI7U0FDcEIsQ0FBQztJQUNOLENBQUM7SUExRGUsc0RBQXdDLDJDQTBEdkQ7QUFDTCxDQUFDLEVBMUVnQixhQUFhLEtBQWIsYUFBYSxRQTBFN0I7Ozs7Ozs7VUNuU0Q7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7Ozs7V0N0QkE7V0FDQTtXQUNBO1dBQ0E7V0FDQSx5Q0FBeUMsd0NBQXdDO1dBQ2pGO1dBQ0E7V0FDQTs7Ozs7V0NQQTs7Ozs7V0NBQTtXQUNBO1dBQ0E7V0FDQSx1REFBdUQsaUJBQWlCO1dBQ3hFO1dBQ0EsZ0RBQWdELGFBQWE7V0FDN0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTm1DO0FBQ1M7QUFDNEI7QUFDWDtBQUNOO0FBQ1Q7QUFDTjtBQUNHO0FBQ087QUFDUTtBQUNKO0FBQ0M7QUFDZDtBQUNXO0FBQ0k7QUFDUjtBQUNSO0FBQ29CO0FBQzNCO0FBQ21CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29uZmlnL2NvbmZpZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29uZmlnL3Jlc29sdmVkLWNvbmZpZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29udGFpbmVyL2NvbXBvbmVudC1jb250YWluZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbnRyb2xzL2Jyb3dzZXItcG9wb3V0LnRzIiwid2VicGFjazovLy8uL3NyYy90cy9jb250cm9scy9kcmFnLXByb3h5LnRzIiwid2VicGFjazovLy8uL3NyYy90cy9jb250cm9scy9kcmFnLXNvdXJjZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29udHJvbHMvZHJvcC10YXJnZXQtaW5kaWNhdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9jb250cm9scy9oZWFkZXItYnV0dG9uLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9jb250cm9scy9oZWFkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbnRyb2xzL3NwbGl0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9jb250cm9scy90YWIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbnRyb2xzL3RhYnMtY29udGFpbmVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9lcnJvcnMvZXh0ZXJuYWwtZXJyb3IudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2Vycm9ycy9pbnRlcm5hbC1lcnJvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvZ29sZGVuLWxheW91dC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvaXRlbXMvY29tcG9uZW50LWl0ZW0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2l0ZW1zL2NvbXBvbmVudC1wYXJlbnRhYmxlLWl0ZW0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2l0ZW1zL2NvbnRlbnQtaXRlbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvaXRlbXMvZ3JvdW5kLWl0ZW0udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2l0ZW1zL3Jvdy1vci1jb2x1bW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2l0ZW1zL3N0YWNrLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9sYXlvdXQtbWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvdXRpbHMvY29uZmlnLW1pbmlmaWVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy91dGlscy9kcmFnLWxpc3RlbmVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy91dGlscy9ldmVudC1lbWl0dGVyLnRzIiwid2VicGFjazovLy8uL3NyYy90cy91dGlscy9ldmVudC1odWIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3V0aWxzL2kxOG4tc3RyaW5ncy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvdXRpbHMvc3R5bGUtY29uc3RhbnRzLnRzIiwid2VicGFjazovLy8uL3NyYy90cy91dGlscy90eXBlcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvdXRpbHMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3ZpcnR1YWwtbGF5b3V0LnRzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJnb2xkZW5MYXlvdXRcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiZ29sZGVuTGF5b3V0XCJdID0gZmFjdG9yeSgpO1xufSkoZ2xvYmFsVGhpcywgKCkgPT4ge1xucmV0dXJuICIsImltcG9ydCB7IENvbmZpZ3VyYXRpb25FcnJvciB9IGZyb20gJy4uL2Vycm9ycy9leHRlcm5hbC1lcnJvcic7XHJcbmltcG9ydCB7IEFzc2VydEVycm9yLCBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IsIFVucmVhY2hhYmxlQ2FzZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2ludGVybmFsLWVycm9yJztcclxuaW1wb3J0IHsgSTE4blN0cmluZ0lkLCBpMThuU3RyaW5ncyB9IGZyb20gJy4uL3V0aWxzL2kxOG4tc3RyaW5ncyc7XHJcbmltcG9ydCB7IEl0ZW1UeXBlLCBKc29uVmFsdWUsIFJlc3BvbnNpdmVNb2RlLCBTaWRlLCBTaXplVW5pdEVudW0gfSBmcm9tICcuLi91dGlscy90eXBlcyc7XHJcbmltcG9ydCB7IGRlZXBFeHRlbmRWYWx1ZSwgc3BsaXRTdHJpbmdBdEZpcnN0Tm9uTnVtZXJpY0NoYXIgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7XHJcbiAgICBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcsXHJcbiAgICBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZyxcclxuICAgIFJlc29sdmVkSXRlbUNvbmZpZyxcclxuICAgIFJlc29sdmVkTGF5b3V0Q29uZmlnLFxyXG4gICAgUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcsXHJcbiAgICBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnLFxyXG4gICAgUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcsXHJcbiAgICBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZ1xyXG59IGZyb20gXCIuL3Jlc29sdmVkLWNvbmZpZ1wiO1xyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGludGVyZmFjZSBJdGVtQ29uZmlnIHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGl0ZW0uIFBvc3NpYmxlIHZhbHVlcyBhcmUgJ3JvdycsICdjb2x1bW4nLCAnc3RhY2snLCAnY29tcG9uZW50Jy5cclxuICAgICAqL1xyXG4gICAgdHlwZTogSXRlbVR5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBhcnJheSBvZiBjb25maWd1cmF0aW9ucyBmb3IgaXRlbXMgdGhhdCB3aWxsIGJlIGNyZWF0ZWQgYXMgY2hpbGRyZW4gb2YgdGhpcyBpdGVtLlxyXG4gICAgICovXHJcbiAgICBjb250ZW50PzogSXRlbUNvbmZpZ1tdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHdpZHRoIG9mIHRoaXMgaXRlbSwgcmVsYXRpdmUgdG8gdGhlIG90aGVyIGNoaWxkcmVuIG9mIGl0cyBwYXJlbnQgaW4gcGVyY2VudFxyXG4gICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoSXRlbUNvbmZpZzppbnRlcmZhY2UpLnNpemV9IGluc3RlYWRcclxuICAgICAqL1xyXG4gICAgd2lkdGg/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWluaW11bSB3aWR0aCBvZiB0aGlzIGl0ZW0gaW4gcGl4ZWxzXHJcbiAgICAgKiBDQVVUSU9OIC0gTm90IHRlc3RlZCAtIGRvIG5vdCB1c2VcclxuICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKEl0ZW1Db25maWc6aW50ZXJmYWNlKS5taW5TaXplfSBpbnN0ZWFkXHJcbiAgICAgKi9cclxuICAgIG1pbldpZHRoPzogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGhlaWdodCBvZiB0aGlzIGl0ZW0sIHJlbGF0aXZlIHRvIHRoZSBvdGhlciBjaGlsZHJlbiBvZiBpdHMgcGFyZW50IGluIHBlcmNlbnRcclxuICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKEl0ZW1Db25maWc6aW50ZXJmYWNlKS5zaXplfSBpbnN0ZWFkXHJcbiAgICAgKi9cclxuICAgIGhlaWdodD86IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtaW5pbXVtIGhlaWdodCBvZiB0aGlzIGl0ZW0gaW4gcGl4ZWxzXHJcbiAgICAgKiBDQVVUSU9OIC0gTm90IHRlc3RlZCAtIGRvIG5vdCB1c2VcclxuICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKEl0ZW1Db25maWc6aW50ZXJmYWNlKS5taW5TaXplfSBpbnN0ZWFkXHJcbiAgICAgKi9cclxuICAgIG1pbkhlaWdodD86IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzaXplIG9mIHRoaXMgaXRlbS5cclxuICAgICAqIEZvciByb3dzLCBpdCBzcGVjaWZpZXMgaGVpZ2h0LiBGb3IgY29sdW1ucywgaXQgc3BlY2lmaWVzIHdpZHRoLlxyXG4gICAgICogSGFzIGZvcm1hdCBcXDxudW1iZXJcXD5cXDx7QGxpbmsgU2l6ZVVuaXR9XFw+LiBDdXJyZW50bHkgb25seSBzdXBwb3J0cyB1bml0cyBgZnJgIGFuZCBgJWAuXHJcbiAgICAgKlxyXG4gICAgICogU3BhY2UgaXMgZmlyc3QgcHJvcG9ydGlvbmFsbHkgYWxsb2NhdGVkIHRvIGl0ZW1zIHdpdGggc2l6ZVVuaXQgYCVgLlxyXG4gICAgICogSWYgdGhlcmUgaXMgYW55IHNwYWNlIGxlZnQgb3ZlciAobGVzcyB0aGFuIDEwMCUgYWxsb2NhdGVkKSwgdGhlbiB0aGVcclxuICAgICAqIHJlbWFpbmRlciBpcyBhbGxvY2F0ZWQgdG8gdGhlIGl0ZW1zIHdpdGggdW5pdCBgZnJgIGFjY29yZGluZyB0byB0aGUgZnJhY3Rpb25hbCBzaXplLlxyXG4gICAgICogSWYgbW9yZSB0aGFuIDEwMCUgaXMgYWxsb2NhdGVkLCB0aGVuIGFuIGV4dHJhIDUwJSBpcyBhbGxvY2F0ZWQgdG8gaXRlbXMgd2l0aCB1bml0IGBmcmAgYW5kXHJcbiAgICAgKiBpcyBhbGxvY2F0ZWQgdG8gZWFjaCBpdGVtIGFjY29yZGluZyB0byBpdHMgZnJhY3Rpb25hbCBzaXplLiBBbGwgaXRlbSBzaXplcyBhcmUgdGhlbiBhZGp1c3RlZFxyXG4gICAgICogdG8gYnJpbmcgdGhlIHRvdGFsIGJhY2sgdG8gMTAwJVxyXG4gICAgICovXHJcbiAgICBzaXplPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHNpemUgb2YgdGhpcyBpdGVtLlxyXG4gICAgICogRm9yIHJvd3MsIGl0IHNwZWNpZmllcyBoZWlnaHQuIEZvciBjb2x1bW5zLCBpdCBzcGVjaWZpZXMgd2lkdGguXHJcbiAgICAgKiBIYXMgZm9ybWF0IDxudW1iZXI+PHNpemVVbml0Pi4gQ3VycmVudGx5IG9ubHkgc3VwcG9ydHMgdW5pdHMgYHB4YFxyXG4gICAgICovXHJcbiAgICBtaW5TaXplPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBzdHJpbmcgdGhhdCBjYW4gYmUgdXNlZCB0byBpZGVudGlmeSBhIENvbnRlbnRJdGVtLlxyXG4gICAgICogRG8gTk9UIGFzc2lnbiBhbiBhcnJheS4gIFRoaXMgb25seSBleGlzdHMgZm9yIGxlZ2FjeSBwdXJwb3Nlcy4gIElmIGFuIGFycmF5IGlzIGFzc2lnbmVkLCB0aGUgZmlyc3QgZWxlbWVudFxyXG4gICAgICogd2lsbCBiZWNvbWUgdGhlIGlkLlxyXG4gICAgICovXHJcbiAgICBpZD86IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIERldGVybWluZXMgaWYgdGhlIGl0ZW0gaXMgY2xvc2FibGUuIElmIGZhbHNlLCB0aGUgeCBvbiB0aGUgaXRlbXMgdGFiIHdpbGwgYmUgaGlkZGVuIGFuZCBjb250YWluZXIuY2xvc2UoKVxyXG4gICAgICogd2lsbCByZXR1cm4gZmFsc2VcclxuICAgICAqIERlZmF1bHQ6IHRydWVcclxuICAgICAqL1xyXG4gICAgaXNDbG9zYWJsZT86IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdGl0bGUgb2YgdGhlIGl0ZW0gYXMgZGlzcGxheWVkIG9uIGl0cyB0YWIgYW5kIG9uIHBvcG91dCB3aW5kb3dzXHJcbiAgICAgKiBEZWZhdWx0OiBjb21wb25lbnRUeXBlLnRvU3RyaW5nKCkgb3IgJydcclxuICAgICAqIEBkZXByZWNhdGVkIG9ubHkgQ29tcG9uZW50IGhhcyBhIHRpdGxlXHJcbiAgICAgKi9cclxuICAgIHRpdGxlPzogc3RyaW5nO1xyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIEl0ZW1Db25maWcge1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGNvbnN0IGVudW0gU2l6ZVdpZHRoSGVpZ2h0U3BlY2lmaWNhdGlvblR5cGUge1xyXG4gICAgICAgIE5vbmUsXHJcbiAgICAgICAgU2l6ZSxcclxuICAgICAgICBXaWR0aE9ySGVpZ2h0LFxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlKGl0ZW1Db25maWc6IEl0ZW1Db25maWcsIHJvd0FuZENvbHVtbkNoaWxkTGVnYWN5U2l6ZURlZmF1bHQ6IGJvb2xlYW4pOiBSZXNvbHZlZEl0ZW1Db25maWcge1xyXG4gICAgICAgIHN3aXRjaCAoaXRlbUNvbmZpZy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuZ3JvdW5kOlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvbmZpZ3VyYXRpb25FcnJvcignSXRlbUNvbmZpZyBjYW5ub3Qgc3BlY2lmeSB0eXBlIGdyb3VuZCcsIEpTT04uc3RyaW5naWZ5KGl0ZW1Db25maWcpKTtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5yb3c6XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29sdW1uOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJvd09yQ29sdW1uSXRlbUNvbmZpZy5yZXNvbHZlKGl0ZW1Db25maWcgYXMgUm93T3JDb2x1bW5JdGVtQ29uZmlnLCByb3dBbmRDb2x1bW5DaGlsZExlZ2FjeVNpemVEZWZhdWx0KTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuc3RhY2s6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RhY2tJdGVtQ29uZmlnLnJlc29sdmUoaXRlbUNvbmZpZyBhcyBTdGFja0l0ZW1Db25maWcsIHJvd0FuZENvbHVtbkNoaWxkTGVnYWN5U2l6ZURlZmF1bHQpO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5jb21wb25lbnQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50SXRlbUNvbmZpZy5yZXNvbHZlKGl0ZW1Db25maWcgYXMgQ29tcG9uZW50SXRlbUNvbmZpZywgcm93QW5kQ29sdW1uQ2hpbGRMZWdhY3lTaXplRGVmYXVsdCk7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ2FzZUVycm9yKCdVQ1VJQ1I1NTQ5OScsIGl0ZW1Db25maWcudHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQ29udGVudChjb250ZW50OiBJdGVtQ29uZmlnW10gfCB1bmRlZmluZWQpOiBSZXNvbHZlZEl0ZW1Db25maWdbXSB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY291bnQgPSBjb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PFJlc29sdmVkSXRlbUNvbmZpZz4oY291bnQpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IEl0ZW1Db25maWcucmVzb2x2ZShjb250ZW50W2ldLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVJZChpZDogc3RyaW5nIHwgc3RyaW5nW10gfCB1bmRlZmluZWQpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChpZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMuaWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaWQpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5pZDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkWzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlU2l6ZShcclxuICAgICAgICBzaXplOiBzdHJpbmcgfCB1bmRlZmluZWQsXHJcbiAgICAgICAgd2lkdGg6IG51bWJlciB8IHVuZGVmaW5lZCxcclxuICAgICAgICBoZWlnaHQ6IG51bWJlciB8IHVuZGVmaW5lZCxcclxuICAgICAgICByb3dBbmRDb2x1bW5DaGlsZExlZ2FjeVNpemVEZWZhdWx0OiBib29sZWFuKTpcclxuICAgIFNpemVXaXRoVW5pdCB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHN1cHBvcnQgZm9yIHJvd0FuZENvbHVtbkNoaWxkTGVnYWN5U2l6ZURlZmF1bHQgaW4gYSBtYWpvciB2ZXJzaW9uIHJlbGVhc2VcclxuXHJcbiAgICAgICAgaWYgKHNpemUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VTaXplKHNpemUsIFtTaXplVW5pdEVudW0uUGVyY2VudCwgU2l6ZVVuaXRFbnVtLkZyYWN0aW9uYWxdKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAod2lkdGggIT09IHVuZGVmaW5lZCB8fCBoZWlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHdpZHRoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBzaXplOiB3aWR0aCwgc2l6ZVVuaXQ6IFNpemVVbml0RW51bS5QZXJjZW50IH07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoZWlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBzaXplOiBoZWlnaHQsIHNpemVVbml0OiBTaXplVW5pdEVudW0uUGVyY2VudCB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0NSUzMzMzkwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJvd0FuZENvbHVtbkNoaWxkTGVnYWN5U2l6ZURlZmF1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBzaXplOiA1MCwgc2l6ZVVuaXQ6IFNpemVVbml0RW51bS5QZXJjZW50IH07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHNpemU6IFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5zaXplLCBzaXplVW5pdDogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLnNpemVVbml0IH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVNaW5TaXplKG1pblNpemU6IHN0cmluZyB8IHVuZGVmaW5lZCwgbWluV2lkdGg6IG51bWJlciB8IHVuZGVmaW5lZCwgbWluSGVpZ2h0OiBudW1iZXIgfCB1bmRlZmluZWQpOiBVbmRlZmluYWJsZVNpemVXaXRoVW5pdCB7XHJcbiAgICAgICAgaWYgKG1pblNpemUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VTaXplKG1pblNpemUsIFtTaXplVW5pdEVudW0uUGl4ZWxdKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBtaW5XaWR0aERlZmluZWQgPSBtaW5XaWR0aCAhPT0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBjb25zdCBtaW5IZWlnaHREZWZpbmVkID0gbWluSGVpZ2h0ICE9PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGlmIChtaW5XaWR0aERlZmluZWQgfHwgbWluSGVpZ2h0RGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1pbldpZHRoRGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHNpemU6IG1pbldpZHRoLCBzaXplVW5pdDogU2l6ZVVuaXRFbnVtLlBpeGVsIH07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHNpemU6IG1pbkhlaWdodCwgc2l6ZVVuaXQ6IFNpemVVbml0RW51bS5QaXhlbCB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc2l6ZTogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLm1pblNpemUsIHNpemVVbml0OiBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMubWluU2l6ZVVuaXQgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlU2l6ZVdpZHRoSGVpZ2h0U3BlY2lmaWNhdGlvblR5cGUoY29uZmlnOiBJdGVtQ29uZmlnKTogU2l6ZVdpZHRoSGVpZ2h0U3BlY2lmaWNhdGlvblR5cGUge1xyXG4gICAgICAgIGlmIChjb25maWcuc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTaXplV2lkdGhIZWlnaHRTcGVjaWZpY2F0aW9uVHlwZS5TaXplO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjb25maWcud2lkdGggIT09IHVuZGVmaW5lZCB8fCBjb25maWcuaGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBTaXplV2lkdGhIZWlnaHRTcGVjaWZpY2F0aW9uVHlwZS5XaWR0aE9ySGVpZ2h0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFNpemVXaWR0aEhlaWdodFNwZWNpZmljYXRpb25UeXBlLk5vbmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGlzR3JvdW5kKGNvbmZpZzogSXRlbUNvbmZpZyk6IGNvbmZpZyBpcyBJdGVtQ29uZmlnIHtcclxuICAgICAgICByZXR1cm4gY29uZmlnLnR5cGUgPT09IEl0ZW1UeXBlLmdyb3VuZDtcclxuICAgIH1cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc1Jvdyhjb25maWc6IEl0ZW1Db25maWcpOiBjb25maWcgaXMgSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgcmV0dXJuIGNvbmZpZy50eXBlID09PSBJdGVtVHlwZS5yb3c7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNDb2x1bW4oY29uZmlnOiBJdGVtQ29uZmlnKTogY29uZmlnIGlzIEl0ZW1Db25maWcge1xyXG4gICAgICAgIHJldHVybiBjb25maWcudHlwZSA9PT0gSXRlbVR5cGUuY29sdW1uO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGlzU3RhY2soY29uZmlnOiBJdGVtQ29uZmlnKTogY29uZmlnIGlzIEl0ZW1Db25maWcge1xyXG4gICAgICAgIHJldHVybiBjb25maWcudHlwZSA9PT0gSXRlbVR5cGUuc3RhY2s7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNDb21wb25lbnQoY29uZmlnOiBJdGVtQ29uZmlnKTogY29uZmlnIGlzIENvbXBvbmVudEl0ZW1Db25maWcge1xyXG4gICAgICAgIHJldHVybiBjb25maWcudHlwZSA9PT0gSXRlbVR5cGUuY29tcG9uZW50O1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBTdGFjayBvciBDb21wb25lbnRcclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGludGVyZmFjZSBIZWFkZXJlZEl0ZW1Db25maWcgZXh0ZW5kcyBJdGVtQ29uZmlnIHtcclxuICAgIC8qKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChIZWFkZXJlZEl0ZW1Db25maWc6bmFtZXNwYWNlKS4oSGVhZGVyOmludGVyZmFjZSkuc2hvd30gaW5zdGVhZCAqL1xyXG4gICAgaGFzSGVhZGVycz86IGJvb2xlYW47XHJcbiAgICBoZWFkZXI/OiBIZWFkZXJlZEl0ZW1Db25maWcuSGVhZGVyO1xyXG4gICAgbWF4aW1pc2VkPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBIZWFkZXJlZEl0ZW1Db25maWcge1xyXG4gICAgY29uc3QgbGVnYWN5TWF4aW1pc2VkSWQgPSAnX19nbE1heGltaXNlZCc7XHJcblxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBIZWFkZXIge1xyXG4gICAgICAgIHNob3c/OiBmYWxzZSB8IFNpZGU7XHJcbiAgICAgICAgcG9wb3V0PzogZmFsc2UgfCBzdHJpbmc7XHJcbiAgICAgICAgZG9jaz86IGZhbHNlIHwgc3RyaW5nO1xyXG4gICAgICAgIG1heGltaXNlPzogZmFsc2UgfCBzdHJpbmc7XHJcbiAgICAgICAgY2xvc2U/OiBzdHJpbmc7XHJcbiAgICAgICAgbWluaW1pc2U/OiBzdHJpbmc7XHJcbiAgICAgICAgdGFiRHJvcGRvd24/OiBmYWxzZSB8IHN0cmluZztcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIEhlYWRlciB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUoaGVhZGVyOiBIZWFkZXIgfCB1bmRlZmluZWQsIGhhc0hlYWRlcnM6IGJvb2xlYW4gfCB1bmRlZmluZWQpOiBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIgfCB1bmRlZmluZWQge1xyXG4gICAgICAgICAgICBpZiAoaGVhZGVyID09PSB1bmRlZmluZWQgJiYgaGFzSGVhZGVycyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0OiBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogaGVhZGVyPy5zaG93ID8/IChoYXNIZWFkZXJzID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBoYXNIZWFkZXJzID8gUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyLmRlZmF1bHRzLnNob3cgOiBmYWxzZSksXHJcbiAgICAgICAgICAgICAgICAgICAgcG9wb3V0OiBoZWFkZXI/LnBvcG91dCxcclxuICAgICAgICAgICAgICAgICAgICBtYXhpbWlzZTogaGVhZGVyPy5tYXhpbWlzZSxcclxuICAgICAgICAgICAgICAgICAgICBjbG9zZTogaGVhZGVyPy5jbG9zZSxcclxuICAgICAgICAgICAgICAgICAgICBtaW5pbWlzZTogaGVhZGVyPy5taW5pbWlzZSxcclxuICAgICAgICAgICAgICAgICAgICB0YWJEcm9wZG93bjogaGVhZGVyPy50YWJEcm9wZG93bixcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVJZEFuZE1heGltaXNlZChjb25maWc6IEhlYWRlcmVkSXRlbUNvbmZpZyk6IHsgaWQ6IHN0cmluZywgbWF4aW1pc2VkOiBib29sZWFufSB7XHJcbiAgICAgICAgbGV0IGlkOiBzdHJpbmc7XHJcbiAgICAgICAgLy8gVG8gc3VwcG9ydCBsZWdhY3kgY29uZmlncyB3aXRoIElkIHNhdmVkIGFzIGFuIGFycmF5IG9mIHN0cmluZywgYXNzaWduIGNvbmZpZy5pZCB0byBhIHR5cGUgd2hpY2ggaW5jbHVkZXMgc3RyaW5nIGFycmF5XHJcbiAgICAgICAgbGV0IGxlZ2FjeUlkOiBzdHJpbmcgfCBzdHJpbmdbXSB8IHVuZGVmaW5lZCA9IGNvbmZpZy5pZDtcclxuICAgICAgICBsZXQgbGVnYWN5TWF4aW1pc2VkID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGxlZ2FjeUlkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWQgPSBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMuaWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobGVnYWN5SWQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZHggPSBsZWdhY3lJZC5maW5kSW5kZXgoKGlkKSA9PiBpZCA9PT0gbGVnYWN5TWF4aW1pc2VkSWQpXHJcbiAgICAgICAgICAgICAgICBpZiAoaWR4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZ2FjeU1heGltaXNlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVnYWN5SWQgPSBsZWdhY3lJZC5zcGxpY2UoaWR4LCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsZWdhY3lJZC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBsZWdhY3lJZFswXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQgPSBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMuaWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZCA9IGxlZ2FjeUlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbWF4aW1pc2VkOiBib29sZWFuO1xyXG4gICAgICAgIGlmIChjb25maWcubWF4aW1pc2VkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbWF4aW1pc2VkID0gY29uZmlnLm1heGltaXNlZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBtYXhpbWlzZWQgPSBsZWdhY3lNYXhpbWlzZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4geyBpZCwgbWF4aW1pc2VkIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGludGVyZmFjZSBTdGFja0l0ZW1Db25maWcgZXh0ZW5kcyBIZWFkZXJlZEl0ZW1Db25maWcge1xyXG4gICAgdHlwZTogJ3N0YWNrJztcclxuICAgIGNvbnRlbnQ6IENvbXBvbmVudEl0ZW1Db25maWdbXTtcclxuICAgIC8qKiBUaGUgaW5kZXggb2YgdGhlIGl0ZW0gaW4gY29udGVudCB3aGljaCBpcyB0byBiZSBhY3RpdmUqL1xyXG4gICAgYWN0aXZlSXRlbUluZGV4PzogbnVtYmVyO1xyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFN0YWNrSXRlbUNvbmZpZyB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gcmVzb2x2ZShpdGVtQ29uZmlnOiBTdGFja0l0ZW1Db25maWcsIHJvd0FuZENvbHVtbkNoaWxkTGVnYWN5U2l6ZURlZmF1bHQ6IGJvb2xlYW4pOiBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgeyBpZCwgbWF4aW1pc2VkIH0gPSBIZWFkZXJlZEl0ZW1Db25maWcucmVzb2x2ZUlkQW5kTWF4aW1pc2VkKGl0ZW1Db25maWcpO1xyXG4gICAgICAgIGNvbnN0IHsgc2l6ZSwgc2l6ZVVuaXQgfSA9IEl0ZW1Db25maWcucmVzb2x2ZVNpemUoaXRlbUNvbmZpZy5zaXplLCBpdGVtQ29uZmlnLndpZHRoLCBpdGVtQ29uZmlnLmhlaWdodCwgcm93QW5kQ29sdW1uQ2hpbGRMZWdhY3lTaXplRGVmYXVsdCk7XHJcbiAgICAgICAgY29uc3QgeyBzaXplOiBtaW5TaXplLCBzaXplVW5pdDogbWluU2l6ZVVuaXQgfSA9IEl0ZW1Db25maWcucmVzb2x2ZU1pblNpemUoaXRlbUNvbmZpZy5taW5TaXplLCBpdGVtQ29uZmlnLm1pbldpZHRoLCBpdGVtQ29uZmlnLm1pbkhlaWdodCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IEl0ZW1UeXBlLnN0YWNrLFxyXG4gICAgICAgICAgICBjb250ZW50OiByZXNvbHZlQ29udGVudChpdGVtQ29uZmlnLmNvbnRlbnQpLFxyXG4gICAgICAgICAgICBzaXplLFxyXG4gICAgICAgICAgICBzaXplVW5pdCxcclxuICAgICAgICAgICAgbWluU2l6ZSxcclxuICAgICAgICAgICAgbWluU2l6ZVVuaXQsXHJcbiAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICBtYXhpbWlzZWQsXHJcbiAgICAgICAgICAgIGlzQ2xvc2FibGU6IGl0ZW1Db25maWcuaXNDbG9zYWJsZSA/PyBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMuaXNDbG9zYWJsZSxcclxuICAgICAgICAgICAgYWN0aXZlSXRlbUluZGV4OiBpdGVtQ29uZmlnLmFjdGl2ZUl0ZW1JbmRleCA/PyBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZy5kZWZhdWx0QWN0aXZlSXRlbUluZGV4LFxyXG4gICAgICAgICAgICBoZWFkZXI6IEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIucmVzb2x2ZShpdGVtQ29uZmlnLmhlYWRlciwgaXRlbUNvbmZpZy5oYXNIZWFkZXJzKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGZyb21SZXNvbHZlZChyZXNvbHZlZENvbmZpZzogUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcpOiBTdGFja0l0ZW1Db25maWcge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogU3RhY2tJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBJdGVtVHlwZS5zdGFjayxcclxuICAgICAgICAgICAgY29udGVudDogZnJvbVJlc29sdmVkQ29udGVudChyZXNvbHZlZENvbmZpZy5jb250ZW50KSxcclxuICAgICAgICAgICAgc2l6ZTogZm9ybWF0U2l6ZShyZXNvbHZlZENvbmZpZy5zaXplLCByZXNvbHZlZENvbmZpZy5zaXplVW5pdCksXHJcbiAgICAgICAgICAgIG1pblNpemU6IGZvcm1hdFVuZGVmaW5hYmxlU2l6ZShyZXNvbHZlZENvbmZpZy5taW5TaXplLCByZXNvbHZlZENvbmZpZy5taW5TaXplVW5pdCksXHJcbiAgICAgICAgICAgIGlkOiByZXNvbHZlZENvbmZpZy5pZCxcclxuICAgICAgICAgICAgbWF4aW1pc2VkOiByZXNvbHZlZENvbmZpZy5tYXhpbWlzZWQsXHJcbiAgICAgICAgICAgIGlzQ2xvc2FibGU6IHJlc29sdmVkQ29uZmlnLmlzQ2xvc2FibGUsXHJcbiAgICAgICAgICAgIGFjdGl2ZUl0ZW1JbmRleDogcmVzb2x2ZWRDb25maWcuYWN0aXZlSXRlbUluZGV4LFxyXG4gICAgICAgICAgICBoZWFkZXI6IFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnLkhlYWRlci5jcmVhdGVDb3B5KHJlc29sdmVkQ29uZmlnLmhlYWRlciksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBmdW5jdGlvbiByZXNvbHZlQ29udGVudChjb250ZW50OiBDb21wb25lbnRJdGVtQ29uZmlnW10gfCB1bmRlZmluZWQpOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWdbXSB7XHJcbiAgICAgICAgaWYgKGNvbnRlbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY291bnQgPSBjb250ZW50Lmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZz4oY291bnQpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkSXRlbUNvbmZpZyA9IGNvbnRlbnRbaV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtQ29uZmlnID0gSXRlbUNvbmZpZy5yZXNvbHZlKGNoaWxkSXRlbUNvbmZpZywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFSZXNvbHZlZEl0ZW1Db25maWcuaXNDb21wb25lbnRJdGVtKGl0ZW1Db25maWcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdVQ1VTSUNSQzkxMTE0JywgSlNPTi5zdHJpbmdpZnkoaXRlbUNvbmZpZykpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBpdGVtQ29uZmlnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGZ1bmN0aW9uIGZyb21SZXNvbHZlZENvbnRlbnQocmVzb2x2ZWRDb250ZW50OiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWdbXSk6IENvbXBvbmVudEl0ZW1Db25maWdbXSB7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSByZXNvbHZlZENvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheTxDb21wb25lbnRJdGVtQ29uZmlnPihjb3VudCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkQ29udGVudENvbmZpZyA9IHJlc29sdmVkQ29udGVudFtpXTtcclxuICAgICAgICAgICAgcmVzdWx0W2ldID0gQ29tcG9uZW50SXRlbUNvbmZpZy5mcm9tUmVzb2x2ZWQocmVzb2x2ZWRDb250ZW50Q29uZmlnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGludGVyZmFjZSBDb21wb25lbnRJdGVtQ29uZmlnIGV4dGVuZHMgSGVhZGVyZWRJdGVtQ29uZmlnIHtcclxuICAgIHR5cGU6ICdjb21wb25lbnQnO1xyXG4gICAgcmVhZG9ubHkgY29udGVudD86IFtdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHRpdGxlIG9mIHRoZSBpdGVtIGFzIGRpc3BsYXllZCBvbiBpdHMgdGFiIGFuZCBvbiBwb3BvdXQgd2luZG93c1xyXG4gICAgICogRGVmYXVsdDogY29tcG9uZW50VHlwZS50b1N0cmluZygpIG9yICcnXHJcbiAgICAgKi9cclxuICAgIHRpdGxlPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGNvbXBvbmVudC5cclxuICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKENvbXBvbmVudEl0ZW1Db25maWc6aW50ZXJmYWNlKS5jb21wb25lbnRUeXBlfSBpbnN0ZWFkXHJcbiAgICAgKi9cclxuICAgIGNvbXBvbmVudE5hbWU/OiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgY29tcG9uZW50LlxyXG4gICAgICogYGNvbXBvbmVudFR5cGVgIG11c3QgYmUgb2YgdHlwZSBgc3RyaW5nYCBpZiBpdCBpcyByZWdpc3RlcmVkIHdpdGggYW55IG9mIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zOlxyXG4gICAgICogKiB7QGxpbmsgKEdvbGRlbkxheW91dDpjbGFzcykucmVnaXN0ZXJDb21wb25lbnR9XHJcbiAgICAgKi9cclxuICAgIGNvbXBvbmVudFR5cGU6IEpzb25WYWx1ZTtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHN0YXRlIGluZm9ybWF0aW9uIHdpdGggd2hpY2ggYSBjb21wb25lbnQgd2lsbCBiZSBpbml0aWFsaXNlZCB3aXRoLlxyXG4gICAgICogV2lsbCBiZSBwYXNzZWQgdG8gdGhlIGNvbXBvbmVudCBjb25zdHJ1Y3RvciBmdW5jdGlvbiBhbmQgd2lsbCBiZSB0aGUgdmFsdWUgcmV0dXJuZWQgYnlcclxuICAgICAqIGNvbnRhaW5lci5pbml0aWFsU3RhdGUuXHJcbiAgICAgKi9cclxuICAgIGNvbXBvbmVudFN0YXRlPzogSnNvblZhbHVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdDogdHJ1ZVxyXG4gICAgICovXHJcbiAgICByZW9yZGVyRW5hYmxlZD86IGJvb2xlYW47ICAvLyBUYWtlcyBwcmVjZWRlbmNlIG92ZXIgTGF5b3V0Q29uZmlnLnJlb3JkZXJFbmFibGVkLlxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIENvbXBvbmVudEl0ZW1Db25maWcge1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUoaXRlbUNvbmZpZzogQ29tcG9uZW50SXRlbUNvbmZpZywgcm93QW5kQ29sdW1uQ2hpbGRMZWdhY3lTaXplRGVmYXVsdDogYm9vbGVhbik6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyB7XHJcbiAgICAgICAgbGV0IGNvbXBvbmVudFR5cGU6IEpzb25WYWx1ZSB8IHVuZGVmaW5lZCA9IGl0ZW1Db25maWcuY29tcG9uZW50VHlwZTtcclxuICAgICAgICBpZiAoY29tcG9uZW50VHlwZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudFR5cGUgPSBpdGVtQ29uZmlnLmNvbXBvbmVudE5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb21wb25lbnRUeXBlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnRJdGVtQ29uZmlnLmNvbXBvbmVudFR5cGUgaXMgdW5kZWZpbmVkJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgeyBpZCwgbWF4aW1pc2VkIH0gPSBIZWFkZXJlZEl0ZW1Db25maWcucmVzb2x2ZUlkQW5kTWF4aW1pc2VkKGl0ZW1Db25maWcpO1xyXG4gICAgICAgICAgICBsZXQgdGl0bGU6IHN0cmluZztcclxuICAgICAgICAgICAgaWYgKGl0ZW1Db25maWcudGl0bGUgPT09IHVuZGVmaW5lZCB8fCBpdGVtQ29uZmlnLnRpdGxlID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgdGl0bGUgPSBDb21wb25lbnRJdGVtQ29uZmlnLmNvbXBvbmVudFR5cGVUb1RpdGxlKGNvbXBvbmVudFR5cGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGl0bGUgPSBpdGVtQ29uZmlnLnRpdGxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHsgc2l6ZSwgc2l6ZVVuaXQgfSA9IEl0ZW1Db25maWcucmVzb2x2ZVNpemUoaXRlbUNvbmZpZy5zaXplLCBpdGVtQ29uZmlnLndpZHRoLCBpdGVtQ29uZmlnLmhlaWdodCwgcm93QW5kQ29sdW1uQ2hpbGRMZWdhY3lTaXplRGVmYXVsdCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgc2l6ZTogbWluU2l6ZSwgc2l6ZVVuaXQ6IG1pblNpemVVbml0IH0gPSBJdGVtQ29uZmlnLnJlc29sdmVNaW5TaXplKGl0ZW1Db25maWcubWluU2l6ZSwgaXRlbUNvbmZpZy5taW5XaWR0aCwgaXRlbUNvbmZpZy5taW5IZWlnaHQpO1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQ6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IGl0ZW1Db25maWcudHlwZSxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFtdLFxyXG4gICAgICAgICAgICAgICAgc2l6ZSxcclxuICAgICAgICAgICAgICAgIHNpemVVbml0LFxyXG4gICAgICAgICAgICAgICAgbWluU2l6ZSxcclxuICAgICAgICAgICAgICAgIG1pblNpemVVbml0LFxyXG4gICAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgICAgICBtYXhpbWlzZWQsXHJcbiAgICAgICAgICAgICAgICBpc0Nsb3NhYmxlOiBpdGVtQ29uZmlnLmlzQ2xvc2FibGUgPz8gUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmlzQ2xvc2FibGUsXHJcbiAgICAgICAgICAgICAgICByZW9yZGVyRW5hYmxlZDogaXRlbUNvbmZpZy5yZW9yZGVyRW5hYmxlZCA/PyBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcuZGVmYXVsdFJlb3JkZXJFbmFibGVkLFxyXG4gICAgICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6IEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIucmVzb2x2ZShpdGVtQ29uZmlnLmhlYWRlciwgaXRlbUNvbmZpZy5oYXNIZWFkZXJzKSxcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFR5cGUsXHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRTdGF0ZTogaXRlbUNvbmZpZy5jb21wb25lbnRTdGF0ZSA/PyB7fSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGZyb21SZXNvbHZlZChyZXNvbHZlZENvbmZpZzogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnKTogQ29tcG9uZW50SXRlbUNvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBDb21wb25lbnRJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBJdGVtVHlwZS5jb21wb25lbnQsXHJcbiAgICAgICAgICAgIHNpemU6IGZvcm1hdFNpemUocmVzb2x2ZWRDb25maWcuc2l6ZSwgcmVzb2x2ZWRDb25maWcuc2l6ZVVuaXQpLFxyXG4gICAgICAgICAgICBtaW5TaXplOiBmb3JtYXRVbmRlZmluYWJsZVNpemUocmVzb2x2ZWRDb25maWcubWluU2l6ZSwgcmVzb2x2ZWRDb25maWcubWluU2l6ZVVuaXQpLFxyXG4gICAgICAgICAgICBpZDogcmVzb2x2ZWRDb25maWcuaWQsXHJcbiAgICAgICAgICAgIG1heGltaXNlZDogcmVzb2x2ZWRDb25maWcubWF4aW1pc2VkLFxyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlOiByZXNvbHZlZENvbmZpZy5pc0Nsb3NhYmxlLFxyXG4gICAgICAgICAgICByZW9yZGVyRW5hYmxlZDogcmVzb2x2ZWRDb25maWcucmVvcmRlckVuYWJsZWQsXHJcbiAgICAgICAgICAgIHRpdGxlOiByZXNvbHZlZENvbmZpZy50aXRsZSxcclxuICAgICAgICAgICAgaGVhZGVyOiBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIuY3JlYXRlQ29weShyZXNvbHZlZENvbmZpZy5oZWFkZXIpLFxyXG4gICAgICAgICAgICBjb21wb25lbnRUeXBlOiByZXNvbHZlZENvbmZpZy5jb21wb25lbnRUeXBlLFxyXG4gICAgICAgICAgICBjb21wb25lbnRTdGF0ZTogZGVlcEV4dGVuZFZhbHVlKHVuZGVmaW5lZCwgcmVzb2x2ZWRDb25maWcuY29tcG9uZW50U3RhdGUpIGFzIEpzb25WYWx1ZSxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNvbXBvbmVudFR5cGVUb1RpdGxlKGNvbXBvbmVudFR5cGU6IEpzb25WYWx1ZSk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgY29tcG9uZW50VHlwZVR5cGUgPSB0eXBlb2YgY29tcG9uZW50VHlwZTtcclxuICAgICAgICBzd2l0Y2ggKGNvbXBvbmVudFR5cGVUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6IHJldHVybiBjb21wb25lbnRUeXBlIGFzIHN0cmluZztcclxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzogcmV0dXJuIChjb21wb25lbnRUeXBlIGFzIG51bWJlcikudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgY2FzZSAnYm9vbGVhbic6IHJldHVybiAoY29tcG9uZW50VHlwZSBhcyBib29sZWFuKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBSb3dPckNvbHVtblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJvd09yQ29sdW1uSXRlbUNvbmZpZyBleHRlbmRzIEl0ZW1Db25maWcge1xyXG4gICAgdHlwZTogJ3JvdycgfCAnY29sdW1uJztcclxuICAgIGNvbnRlbnQ6IChSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBTdGFja0l0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnKVtdO1xyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFJvd09yQ29sdW1uSXRlbUNvbmZpZyB7XHJcbiAgICBleHBvcnQgdHlwZSBDaGlsZEl0ZW1Db25maWcgPSBSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBTdGFja0l0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnO1xyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc0NoaWxkSXRlbUNvbmZpZyhpdGVtQ29uZmlnOiBJdGVtQ29uZmlnKTogaXRlbUNvbmZpZyBpcyBDaGlsZEl0ZW1Db25maWcge1xyXG4gICAgICAgIHN3aXRjaCAoaXRlbUNvbmZpZy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUucm93OlxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbHVtbjpcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5zdGFjazpcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5jb21wb25lbnQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5ncm91bmQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDYXNlRXJyb3IoJ1VST0NPU1BDSUNJQzEzNjg3JywgaXRlbUNvbmZpZy50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUoaXRlbUNvbmZpZzogUm93T3JDb2x1bW5JdGVtQ29uZmlnLCByb3dBbmRDb2x1bW5DaGlsZExlZ2FjeVNpemVEZWZhdWx0OiBib29sZWFuKTogUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcge1xyXG4gICAgICAgIGNvbnN0IHsgc2l6ZSwgc2l6ZVVuaXQgfSA9IEl0ZW1Db25maWcucmVzb2x2ZVNpemUoaXRlbUNvbmZpZy5zaXplLCBpdGVtQ29uZmlnLndpZHRoLCBpdGVtQ29uZmlnLmhlaWdodCwgcm93QW5kQ29sdW1uQ2hpbGRMZWdhY3lTaXplRGVmYXVsdCk7XHJcbiAgICAgICAgY29uc3QgeyBzaXplOiBtaW5TaXplLCBzaXplVW5pdDogbWluU2l6ZVVuaXQgfSA9IEl0ZW1Db25maWcucmVzb2x2ZU1pblNpemUoaXRlbUNvbmZpZy5taW5TaXplLCBpdGVtQ29uZmlnLm1pbldpZHRoLCBpdGVtQ29uZmlnLm1pbkhlaWdodCk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgdHlwZTogaXRlbUNvbmZpZy50eXBlLFxyXG4gICAgICAgICAgICBjb250ZW50OiBSb3dPckNvbHVtbkl0ZW1Db25maWcucmVzb2x2ZUNvbnRlbnQoaXRlbUNvbmZpZy5jb250ZW50KSxcclxuICAgICAgICAgICAgc2l6ZSxcclxuICAgICAgICAgICAgc2l6ZVVuaXQsXHJcbiAgICAgICAgICAgIG1pblNpemUsXHJcbiAgICAgICAgICAgIG1pblNpemVVbml0LFxyXG4gICAgICAgICAgICBpZDogSXRlbUNvbmZpZy5yZXNvbHZlSWQoaXRlbUNvbmZpZy5pZCksXHJcbiAgICAgICAgICAgIGlzQ2xvc2FibGU6IGl0ZW1Db25maWcuaXNDbG9zYWJsZSA/PyBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMuaXNDbG9zYWJsZSxcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZnJvbVJlc29sdmVkKHJlc29sdmVkQ29uZmlnOiBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZyk6IFJvd09yQ29sdW1uSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBSb3dPckNvbHVtbkl0ZW1Db25maWcgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IHJlc29sdmVkQ29uZmlnLnR5cGUsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IGZyb21SZXNvbHZlZENvbnRlbnQocmVzb2x2ZWRDb25maWcuY29udGVudCksXHJcbiAgICAgICAgICAgIHNpemU6IGZvcm1hdFNpemUocmVzb2x2ZWRDb25maWcuc2l6ZSwgcmVzb2x2ZWRDb25maWcuc2l6ZVVuaXQpLFxyXG4gICAgICAgICAgICBtaW5TaXplOiBmb3JtYXRVbmRlZmluYWJsZVNpemUocmVzb2x2ZWRDb25maWcubWluU2l6ZSwgcmVzb2x2ZWRDb25maWcubWluU2l6ZVVuaXQpLFxyXG4gICAgICAgICAgICBpZDogcmVzb2x2ZWRDb25maWcuaWQsXHJcbiAgICAgICAgICAgIGlzQ2xvc2FibGU6IHJlc29sdmVkQ29uZmlnLmlzQ2xvc2FibGUsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQ29udGVudChjb250ZW50OiBDaGlsZEl0ZW1Db25maWdbXSB8IHVuZGVmaW5lZCk6IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnLkNoaWxkSXRlbUNvbmZpZ1tdIHtcclxuICAgICAgICBpZiAoY29udGVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IGNvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZEl0ZW1Db25maWdzID0gbmV3IEFycmF5PFJvd09yQ29sdW1uSXRlbUNvbmZpZy5DaGlsZEl0ZW1Db25maWc+KGNvdW50KTtcclxuICAgICAgICAgICAgbGV0IHdpZHRoT3JIZWlnaHRTcGVjaWZpZWRBdExlYXN0T25jZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBsZXQgc2l6ZVNwZWNpZmllZEF0TGVhc3RPbmNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRJdGVtQ29uZmlnID0gY29udGVudFtpXTtcclxuICAgICAgICAgICAgICAgIGlmICghUm93T3JDb2x1bW5JdGVtQ29uZmlnLmlzQ2hpbGRJdGVtQ29uZmlnKGNoaWxkSXRlbUNvbmZpZykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ29uZmlndXJhdGlvbkVycm9yKCdJdGVtQ29uZmlnIGlzIG5vdCBSb3csIENvbHVtbiBvciBTdGFjaycsIGNoaWxkSXRlbUNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2l6ZVNwZWNpZmllZEF0TGVhc3RPbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpemVXaWR0aEhlaWdodFNwZWNpZmljYXRpb25UeXBlID0gSXRlbUNvbmZpZy5jYWxjdWxhdGVTaXplV2lkdGhIZWlnaHRTcGVjaWZpY2F0aW9uVHlwZShjaGlsZEl0ZW1Db25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHNpemVXaWR0aEhlaWdodFNwZWNpZmljYXRpb25UeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEl0ZW1Db25maWcuU2l6ZVdpZHRoSGVpZ2h0U3BlY2lmaWNhdGlvblR5cGUuTm9uZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgSXRlbUNvbmZpZy5TaXplV2lkdGhIZWlnaHRTcGVjaWZpY2F0aW9uVHlwZS5XaWR0aE9ySGVpZ2h0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoT3JIZWlnaHRTcGVjaWZpZWRBdExlYXN0T25jZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEl0ZW1Db25maWcuU2l6ZVdpZHRoSGVpZ2h0U3BlY2lmaWNhdGlvblR5cGUuU2l6ZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplU3BlY2lmaWVkQXRMZWFzdE9uY2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDYXNlRXJyb3IoJ1JPQ0lDUkM4NzU1NicsIHNpemVXaWR0aEhlaWdodFNwZWNpZmljYXRpb25UeXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjaGlsZEl0ZW1Db25maWdzW2ldID0gY2hpbGRJdGVtQ29uZmlnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgbGVnYWN5U2l6ZURlZmF1bHQ6IGJvb2xlYW47XHJcbiAgICAgICAgICAgIGlmIChzaXplU3BlY2lmaWVkQXRMZWFzdE9uY2UpIHtcclxuICAgICAgICAgICAgICAgIGxlZ2FjeVNpemVEZWZhdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAod2lkdGhPckhlaWdodFNwZWNpZmllZEF0TGVhc3RPbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVnYWN5U2l6ZURlZmF1bHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZWdhY3lTaXplRGVmYXVsdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXk8UmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcuQ2hpbGRJdGVtQ29uZmlnPihjb3VudCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRJdGVtQ29uZmlnID0gY2hpbGRJdGVtQ29uZmlnc1tpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkQ2hpbGRJdGVtQ29uZmlnID0gSXRlbUNvbmZpZy5yZXNvbHZlKGNoaWxkSXRlbUNvbmZpZywgbGVnYWN5U2l6ZURlZmF1bHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZy5pc0NoaWxkSXRlbUNvbmZpZyhyZXNvbHZlZENoaWxkSXRlbUNvbmZpZykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ1VST0NPU1BJQzk5NTEyJywgSlNPTi5zdHJpbmdpZnkocmVzb2x2ZWRDaGlsZEl0ZW1Db25maWcpKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gcmVzb2x2ZWRDaGlsZEl0ZW1Db25maWc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZnVuY3Rpb24gZnJvbVJlc29sdmVkQ29udGVudChyZXNvbHZlZENvbnRlbnQ6IHJlYWRvbmx5IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnLkNoaWxkSXRlbUNvbmZpZ1tdKTogUm93T3JDb2x1bW5JdGVtQ29uZmlnLkNoaWxkSXRlbUNvbmZpZ1tdIHtcclxuICAgICAgICBjb25zdCBjb3VudCA9IHJlc29sdmVkQ29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PFJvd09yQ29sdW1uSXRlbUNvbmZpZy5DaGlsZEl0ZW1Db25maWc+KGNvdW50KTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWRDb250ZW50Q29uZmlnID0gcmVzb2x2ZWRDb250ZW50W2ldO1xyXG4gICAgICAgICAgICBjb25zdCB0eXBlID0gcmVzb2x2ZWRDb250ZW50Q29uZmlnLnR5cGU7XHJcbiAgICAgICAgICAgIGxldCBjb250ZW50Q29uZmlnOiBSb3dPckNvbHVtbkl0ZW1Db25maWcuQ2hpbGRJdGVtQ29uZmlnO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUucm93OlxyXG4gICAgICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5jb2x1bW46XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudENvbmZpZyA9IFJvd09yQ29sdW1uSXRlbUNvbmZpZy5mcm9tUmVzb2x2ZWQocmVzb2x2ZWRDb250ZW50Q29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuc3RhY2s6XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudENvbmZpZyA9IFN0YWNrSXRlbUNvbmZpZy5mcm9tUmVzb2x2ZWQocmVzb2x2ZWRDb250ZW50Q29uZmlnKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29tcG9uZW50OlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRDb25maWcgPSBDb21wb25lbnRJdGVtQ29uZmlnLmZyb21SZXNvbHZlZChyZXNvbHZlZENvbnRlbnRDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDYXNlRXJyb3IoJ1JPQ0lDRlJDNDQ3OTcnLCB0eXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXN1bHRbaV0gPSBjb250ZW50Q29uZmlnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgdHlwZSBSb290SXRlbUNvbmZpZyA9IFJvd09yQ29sdW1uSXRlbUNvbmZpZyB8IFN0YWNrSXRlbUNvbmZpZyB8IENvbXBvbmVudEl0ZW1Db25maWc7XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFJvb3RJdGVtQ29uZmlnIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc1Jvb3RJdGVtQ29uZmlnKGl0ZW1Db25maWc6IEl0ZW1Db25maWcpOiBpdGVtQ29uZmlnIGlzIFJvb3RJdGVtQ29uZmlnIHtcclxuICAgICAgICBzd2l0Y2ggKGl0ZW1Db25maWcudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLnJvdzpcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5jb2x1bW46XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuc3RhY2s6XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29tcG9uZW50OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuZ3JvdW5kOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ2FzZUVycm9yKCdVUklDSVIyMzY4NycsIGl0ZW1Db25maWcudHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlKGl0ZW1Db25maWc6IFJvb3RJdGVtQ29uZmlnIHwgdW5kZWZpbmVkKTogUmVzb2x2ZWRSb290SXRlbUNvbmZpZyB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgaWYgKGl0ZW1Db25maWcgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IEl0ZW1Db25maWcucmVzb2x2ZShpdGVtQ29uZmlnLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmICghUmVzb2x2ZWRSb290SXRlbUNvbmZpZy5pc1Jvb3RJdGVtQ29uZmlnKHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBDb25maWd1cmF0aW9uRXJyb3IoJ0l0ZW1Db25maWcgaXMgbm90IFJvdywgQ29sdW1uIG9yIFN0YWNrJywgSlNPTi5zdHJpbmdpZnkoaXRlbUNvbmZpZykpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZnJvbVJlc29sdmVkT3JVbmRlZmluZWQocmVzb2x2ZWRJdGVtQ29uZmlnOiBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnIHwgdW5kZWZpbmVkKTogUm9vdEl0ZW1Db25maWcgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmIChyZXNvbHZlZEl0ZW1Db25maWcgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSByZXNvbHZlZEl0ZW1Db25maWcudHlwZTtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLnJvdzpcclxuICAgICAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29sdW1uOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSb3dPckNvbHVtbkl0ZW1Db25maWcuZnJvbVJlc29sdmVkKHJlc29sdmVkSXRlbUNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLnN0YWNrOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTdGFja0l0ZW1Db25maWcuZnJvbVJlc29sdmVkKHJlc29sdmVkSXRlbUNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbXBvbmVudDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50SXRlbUNvbmZpZy5mcm9tUmVzb2x2ZWQocmVzb2x2ZWRJdGVtQ29uZmlnKTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ2FzZUVycm9yKCdSSUNGUk9VODk5MjEnLCB0eXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGludGVyZmFjZSBMYXlvdXRDb25maWcge1xyXG4gICAgcm9vdDogUm9vdEl0ZW1Db25maWcgfCB1bmRlZmluZWQ7XHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayAoTGF5b3V0Q29uZmlnOmludGVyZmFjZSkucm9vdH0gKi9cclxuICAgIGNvbnRlbnQ/OiAoUm93T3JDb2x1bW5JdGVtQ29uZmlnIHwgU3RhY2tJdGVtQ29uZmlnIHwgQ29tcG9uZW50SXRlbUNvbmZpZylbXTtcclxuICAgIG9wZW5Qb3BvdXRzPzogUG9wb3V0TGF5b3V0Q29uZmlnW107XHJcbiAgICBkaW1lbnNpb25zPzogTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnM7XHJcbiAgICBzZXR0aW5ncz86IExheW91dENvbmZpZy5TZXR0aW5ncztcclxuICAgIC8qKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChMYXlvdXRDb25maWc6aW50ZXJmYWNlKS5oZWFkZXJ9IGluc3RlYWQgKi9cclxuICAgIGxhYmVscz86IExheW91dENvbmZpZy5MYWJlbHM7XHJcbiAgICBoZWFkZXI/OiBMYXlvdXRDb25maWcuSGVhZGVyO1xyXG59XHJcblxyXG4vKiogVXNlIHRvIHNwZWNpZnkgTGF5b3V0Q29uZmlnIHdpdGggZGVmYXVsdHMgb3IgZGVzZXJpYWxpc2UgYSBMYXlvdXRDb25maWcuXHJcbiAqIERlc2VyaWFsaXNhdGlvbiB3aWxsIGhhbmRsZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cclxuICogTm90ZSB0aGF0IExheW91dENvbmZpZyBzaG91bGQgYmUgdXNlZCBmb3Igc2VyaWFsaXNhdGlvbiAobm90IExheW91dENvbmZpZylcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBMYXlvdXRDb25maWcge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBTZXR0aW5ncyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlICR7QGxpbmsgKExheW91dENvbmZpZzpuYW1lc3BhY2UpLihIZWFkZXI6aW50ZXJmYWNlKS5zaG93fSBpbnN0ZWFkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGFzSGVhZGVycz86IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnN0cmFpbnMgdGhlIGFyZWEgaW4gd2hpY2ggaXRlbXMgY2FuIGJlIGRyYWdnZWQgdG8gdGhlIGxheW91dCdzIGNvbnRhaW5lci4gV2lsbCBiZSBzZXQgdG8gZmFsc2VcclxuICAgICAgICAgKiBhdXRvbWF0aWNhbGx5IHdoZW4gbGF5b3V0LmNyZWF0ZURyYWdTb3VyY2UoKSBpcyBjYWxsZWQuXHJcbiAgICAgICAgICogRGVmYXVsdDogdHJ1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0cmFpbkRyYWdUb0NvbnRhaW5lcj86IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElmIHRydWUsIHRoZSB1c2VyIGNhbiByZS1hcnJhbmdlIHRoZSBsYXlvdXQgYnkgZHJhZ2dpbmcgaXRlbXMgYnkgdGhlaXIgdGFicyB0byB0aGUgZGVzaXJlZCBsb2NhdGlvbi5cclxuICAgICAgICAgKiBDYW4gYmUgb3ZlcnJpZGRlbiBieSBJdGVtQ29uZmlnLnJlb3JkZXJFbmFibGVkIGZvciBzcGVjaWZpYyBJdGVtQ29uZmlnc1xyXG4gICAgICAgICAqIERlZmF1bHQ6IHRydWVcclxuICAgICAgICAgKi9cclxuICAgICAgICByZW9yZGVyRW5hYmxlZD86IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlY2lkZXMgd2hhdCB3aWxsIGJlIG9wZW5lZCBpbiBhIG5ldyB3aW5kb3cgaWYgdGhlIHVzZXIgY2xpY2tzIHRoZSBwb3BvdXQgaWNvbi4gSWYgdHJ1ZSB0aGUgZW50aXJlIHN0YWNrIHdpbGxcclxuICAgICAgICAgKiBiZSB0cmFuc2ZlcnJlZCB0byB0aGUgbmV3IHdpbmRvdywgaWYgZmFsc2Ugb25seSB0aGUgYWN0aXZlIGNvbXBvbmVudCB3aWxsIGJlIG9wZW5lZC5cclxuICAgICAgICAgKiBEZWZhdWx0OiBmYWxzZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHBvcG91dFdob2xlU3RhY2s/OiBib29sZWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgaWYgYW4gZXJyb3IgaXMgdGhyb3duIHdoZW4gYSBwb3BvdXQgaXMgYmxvY2tlZCBieSB0aGUgYnJvd3NlciAoZS5nLiBieSBvcGVuaW5nIGl0IHByb2dyYW1tYXRpY2FsbHkpLlxyXG4gICAgICAgICAqIElmIGZhbHNlLCB0aGUgcG9wb3V0IGNhbGwgd2lsbCBmYWlsIHNpbGVudGx5LlxyXG4gICAgICAgICAqIERlZmF1bHQ6IHRydWVcclxuICAgICAgICAgKi9cclxuICAgICAgICBibG9ja2VkUG9wb3V0c1Rocm93RXJyb3I/OiBib29sZWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgaWYgYWxsIHBvcG91dHMgc2hvdWxkIGJlIGNsb3NlZCB3aGVuIHRoZSBwYWdlIHRoYXQgY3JlYXRlZCB0aGVtIGlzIGNsb3NlZC4gUG9wb3V0cyBkb24ndCBoYXZlIGFcclxuICAgICAgICAgKiBzdHJvbmcgZGVwZW5kZW5jeSBvbiB0aGVpciBwYXJlbnQgYW5kIGNhbiBleGlzdCBvbiB0aGVpciBvd24sIGJ1dCBjYW4gYmUgcXVpdGUgYW5ub3lpbmcgdG8gY2xvc2UgYnkgaGFuZC4gSW5cclxuICAgICAgICAgKiBhZGRpdGlvbiwgYW55IGNoYW5nZXMgbWFkZSB0byBwb3BvdXRzIHdvbid0IGJlIHN0b3JlZCBhZnRlciB0aGUgcGFyZW50IGlzIGNsb3NlZC5cclxuICAgICAgICAgKiBEZWZhdWx0OiB0cnVlXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHZlcnNpb24gMy5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbG9zZVBvcG91dHNPblVubG9hZD86IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwZWNpZmllcyBpZiB0aGUgcG9wb3V0IGljb24gc2hvdWxkIGJlIGRpc3BsYXllZCBpbiB0aGUgaGVhZGVyLWJhci5cclxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChMYXlvdXRDb25maWc6bmFtZXNwYWNlKS4oSGVhZGVyOmludGVyZmFjZSkucG9wb3V0fSBpbnN0ZWFkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvd1BvcG91dEljb24/OiBib29sZWFuO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgaWYgdGhlIG1heGltaXNlIGljb24gc2hvdWxkIGJlIGRpc3BsYXllZCBpbiB0aGUgaGVhZGVyLWJhci5cclxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChMYXlvdXRDb25maWc6bmFtZXNwYWNlKS4oSGVhZGVyOmludGVyZmFjZSkubWF4aW1pc2V9IGluc3RlYWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93TWF4aW1pc2VJY29uPzogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BlY2lmaWVzIGlmIHRoZSBjbG9zZSBpY29uIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGhlYWRlci1iYXIuXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoTGF5b3V0Q29uZmlnOm5hbWVzcGFjZSkuKEhlYWRlcjppbnRlcmZhY2UpLmNsb3NlfSBpbnN0ZWFkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvd0Nsb3NlSWNvbj86IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFNwZWNpZmllcyBSZXNwb25zaXZlIE1vZGUgKG1vcmUgaW5mbyBuZWVkZWQpLlxyXG4gICAgICAgICAqIERlZmF1bHQ6IG5vbmVcclxuICAgICAgICAgKi9cclxuICAgICAgICByZXNwb25zaXZlTW9kZT86IFJlc3BvbnNpdmVNb2RlO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgTWF4aW11bSBwaXhlbCBvdmVybGFwIHBlciB0YWIuXHJcbiAgICAgICAgICogRGVmYXVsdDogMFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRhYk92ZXJsYXBBbGxvd2FuY2U/OiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogRGVmYXVsdDogdHJ1ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHJlb3JkZXJPblRhYk1lbnVDbGljaz86IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIERlZmF1bHQ6IDEwXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGFiQ29udHJvbE9mZnNldD86IG51bWJlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogU3BlY2lmaWVzIHdoZXRoZXIgdG8gcG9wIGluIGVsZW1lbnRzIHdoZW4gY2xvc2luZyBhIHBvcG91dCB3aW5kb3cuXHJcbiAgICAgICAgICogRGVmYXVsdDogZmFsc2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBwb3BJbk9uQ2xvc2U/OiBib29sZWFuO1xyXG5cclxuICAgICAgICB1c2VEcmFnQW5kRHJvcD86IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFVzZSBjb21wb25lbnQncyBlbGVtZW50IGZvciBzZXREcmFnSW1hZ2UsIGlmIHBvc3NpYmxlLlxyXG4gICAgICAgICAqIEhhcyBzaWRlLWVmZmVjdCBvZiBuZXN0aW5nIGNvbnRlbnQgZWxlbWVudCBpbnNpZGUgYSBjb21wb25lbnQuXHJcbiAgICAgICAgICogSWdub3JlZCB1bmxlc3MgdXNlRHJhZ0FuZERyb3AuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29weUZvckRyYWdJbWFnZT86IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdoZW4gZHJhZ2dpbmcgYW4gaXRlbSwgaW5kaWNhdGUgdGhlIG9yaWdpbmFsIHBvc2l0aW9uLlxyXG4gICAgICAgICAqIFRoZSBkZWZhdWx0IHN0eWxlIHVzZXMgYSBkYXNoZWQgbGlnaHQtYnJvd24gb3V0bGluZS5cclxuICAgICAgICAgKiBEZWZhdWx0OiB0cnVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2hvd09sZFBvc2l0aW9uV2hlbkRyYWdnaW5nPzogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgZHJhZ0RhdGFNaW1ldHlwZT86IHN0cmluZztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2hlY2sgd2hldGhlciBsb2NhdGlvbi5zZWFyY2ggY29udGFpbnMgYSBnbC13aW5kb3cgcGFyYW1ldGVyLlxyXG4gICAgICAgICAqIFRoaXMgaXMgdXNlZCB0byBoYW5kbGUgd2luZG93IHBvcGluIGluIHNpbXBsZSBjYXNlcy5cclxuICAgICAgICAgKiBEZWZhdWx0OiB0cnVlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2hlY2tHbFdpbmRvd0tleT86IGJvb2xlYW47XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBTZXR0aW5ncyB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUoc2V0dGluZ3M6IFNldHRpbmdzIHwgdW5kZWZpbmVkKTogUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3Mge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQ6IFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzID0ge1xyXG4gICAgICAgICAgICAgICAgdXNlRHJhZ0FuZERyb3A6IHNldHRpbmdzPy51c2VEcmFnQW5kRHJvcCA/PyBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGNvcHlGb3JEcmFnSW1hZ2U6IHNldHRpbmdzPy5jb3B5Rm9yRHJhZ0ltYWdlLFxyXG4gICAgICAgICAgICAgICAgc2hvd09sZFBvc2l0aW9uV2hlbkRyYWdnaW5nOiBzZXR0aW5ncz8uc2hvd09sZFBvc2l0aW9uV2hlbkRyYWdnaW5nID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzLmRlZmF1bHRzLnNob3dPbGRQb3NpdGlvbldoZW5EcmFnZ2luZyxcclxuICAgICAgICAgICAgICAgIGRyYWdEYXRhTWltZXR5cGU6IHNldHRpbmdzPy5kcmFnRGF0YU1pbWV0eXBlID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzLmRlZmF1bHRzLmRyYWdEYXRhTWltZXR5cGUsXHJcbiAgICAgICAgICAgICAgICBjaGVja0dsV2luZG93S2V5OiBzZXR0aW5ncz8uY2hlY2tHbFdpbmRvd0tleSA/PyB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uc3RyYWluRHJhZ1RvQ29udGFpbmVyOiBzZXR0aW5ncz8uY29uc3RyYWluRHJhZ1RvQ29udGFpbmVyID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzLmRlZmF1bHRzLmNvbnN0cmFpbkRyYWdUb0NvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgIHJlb3JkZXJFbmFibGVkOiBzZXR0aW5ncz8ucmVvcmRlckVuYWJsZWQgPz8gUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3MuZGVmYXVsdHMucmVvcmRlckVuYWJsZWQsXHJcbiAgICAgICAgICAgICAgICBwb3BvdXRXaG9sZVN0YWNrOiBzZXR0aW5ncz8ucG9wb3V0V2hvbGVTdGFjayA/PyBSZXNvbHZlZExheW91dENvbmZpZy5TZXR0aW5ncy5kZWZhdWx0cy5wb3BvdXRXaG9sZVN0YWNrLFxyXG4gICAgICAgICAgICAgICAgYmxvY2tlZFBvcG91dHNUaHJvd0Vycm9yOiBzZXR0aW5ncz8uYmxvY2tlZFBvcG91dHNUaHJvd0Vycm9yID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzLmRlZmF1bHRzLmJsb2NrZWRQb3BvdXRzVGhyb3dFcnJvcixcclxuICAgICAgICAgICAgICAgIGNsb3NlUG9wb3V0c09uVW5sb2FkOiBzZXR0aW5ncz8uY2xvc2VQb3BvdXRzT25VbmxvYWQgPz8gUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3MuZGVmYXVsdHMuY2xvc2VQb3BvdXRzT25VbmxvYWQsXHJcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlTW9kZTogc2V0dGluZ3M/LnJlc3BvbnNpdmVNb2RlID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzLmRlZmF1bHRzLnJlc3BvbnNpdmVNb2RlLFxyXG4gICAgICAgICAgICAgICAgdGFiT3ZlcmxhcEFsbG93YW5jZTogc2V0dGluZ3M/LnRhYk92ZXJsYXBBbGxvd2FuY2UgPz8gUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3MuZGVmYXVsdHMudGFiT3ZlcmxhcEFsbG93YW5jZSxcclxuICAgICAgICAgICAgICAgIHJlb3JkZXJPblRhYk1lbnVDbGljazogc2V0dGluZ3M/LnJlb3JkZXJPblRhYk1lbnVDbGljayA/PyBSZXNvbHZlZExheW91dENvbmZpZy5TZXR0aW5ncy5kZWZhdWx0cy5yZW9yZGVyT25UYWJNZW51Q2xpY2ssXHJcbiAgICAgICAgICAgICAgICB0YWJDb250cm9sT2Zmc2V0OiBzZXR0aW5ncz8udGFiQ29udHJvbE9mZnNldCA/PyBSZXNvbHZlZExheW91dENvbmZpZy5TZXR0aW5ncy5kZWZhdWx0cy50YWJDb250cm9sT2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgcG9wSW5PbkNsb3NlOiBzZXR0aW5ncz8ucG9wSW5PbkNsb3NlID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzLmRlZmF1bHRzLnBvcEluT25DbG9zZSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIERpbWVuc2lvbnMge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB3aWR0aCBvZiB0aGUgYm9yZGVycyBiZXR3ZWVuIHRoZSBsYXlvdXQgaXRlbXMgaW4gcGl4ZWwuIFBsZWFzZSBub3RlOiBUaGUgYWN0dWFsIGRyYWdnYWJsZSBhcmVhIGlzIHdpZGVyXHJcbiAgICAgICAgICogdGhhbiB0aGUgdmlzaWJsZSBvbmUsIG1ha2luZyBpdCBzYWZlIHRvIHNldCB0aGlzIHRvIHNtYWxsIHZhbHVlcyB3aXRob3V0IGFmZmVjdGluZyB1c2FiaWxpdHkuXHJcbiAgICAgICAgICogRGVmYXVsdDogNVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGJvcmRlcldpZHRoPzogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBEZWZhdWx0OiA1XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgYm9yZGVyR3JhYldpZHRoPzogbnVtYmVyLFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGFjZSB0byBhbGxvY2F0ZSBiZXR3ZWVuIGNvbXBvbmVudCB3cmFwcGVyIGFuZCBjb250ZW50IGVsZW1lbnQuXHJcbiAgICAgICAgICogVGhpcyBjYW4gYmUgdXNlZCBmb3IgYW4gJ291dGxpbmUnLlxyXG4gICAgICAgICAqIFRoaXMgbWF5IGFmZmVjdCBkcmFnIGZyb20gb3RoZXIgd2luZG93IG92ZXIgaWZyYW1lIHdoaWNoIG1heVxyXG4gICAgICAgICAqIG5vdCB0cmlnZ2VyIGRlcGVuZGluZyBvbiB0aGUgQ1NTIHBvaW50ZXItZXZlbnRzIHNldHRpbmcuXHJcbiAgICAgICAgICogKFVuY2VydGFpbjogbmVlZHMgdGVzdGluZy9leHBlcmltZW50YXRpb24uKVxyXG4gICAgICAgICAqIERlZmF1bHQ6IDBcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb250ZW50SW5zZXQ/OiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtaW5pbXVtIGhlaWdodCBhbiBpdGVtIGNhbiBiZSByZXNpemVkIHRvIChpbiBwaXhlbCkuXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoTGF5b3V0Q29uZmlnOm5hbWVzcGFjZSkuKERpbWVuc2lvbnM6aW50ZXJmYWNlKS5kZWZhdWx0TWluSXRlbUhlaWdodH0gaW5zdGVhZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1pbkl0ZW1IZWlnaHQ/OiBudW1iZXI7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBtaW5pbXVtIGhlaWdodCBhbiBpdGVtIGNhbiBiZSByZXNpemVkIHRvLlxyXG4gICAgICAgICAqIERlZmF1bHQ6IDBcclxuICAgICAgICAgKi9cclxuICAgICAgICBkZWZhdWx0TWluSXRlbUhlaWdodD86IHN0cmluZztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1pbmltdW0gd2lkdGggYW4gaXRlbSBjYW4gYmUgcmVzaXplZCB0byAoaW4gcGl4ZWwpLlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKExheW91dENvbmZpZzpuYW1lc3BhY2UpLihEaW1lbnNpb25zOmludGVyZmFjZSkuZGVmYXVsdE1pbkl0ZW1XaWR0aH0gaW5zdGVhZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1pbkl0ZW1XaWR0aD86IG51bWJlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1pbmltdW0gd2lkdGggYW4gaXRlbSBjYW4gYmUgcmVzaXplZCB0by5cclxuICAgICAgICAgKiBEZWZhdWx0OiAxMHB4XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZGVmYXVsdE1pbkl0ZW1XaWR0aD86IHN0cmluZztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIGhlaWdodCBvZiB0aGUgaGVhZGVyIGVsZW1lbnRzIGluIHBpeGVsLiBUaGlzIGNhbiBiZSBjaGFuZ2VkLCBidXQgeW91ciB0aGVtZSdzIGhlYWRlciBjc3MgbmVlZHMgdG8gYmVcclxuICAgICAgICAgKiBhZGp1c3RlZCBhY2NvcmRpbmdseS5cclxuICAgICAgICAgKiBEZWZhdWx0OiAyMFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGhlYWRlckhlaWdodD86IG51bWJlcjtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50IHRoYXQgYXBwZWFycyB3aGVuIGFuIGl0ZW0gaXMgZHJhZ2dlZCAoaW4gcGl4ZWwpLlxyXG4gICAgICAgICAqIERlZmF1bHQ6IDMwMFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRyYWdQcm94eVdpZHRoPzogbnVtYmVyO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgaGVpZ2h0IG9mIHRoZSBlbGVtZW50IHRoYXQgYXBwZWFycyB3aGVuIGFuIGl0ZW0gaXMgZHJhZ2dlZCAoaW4gcGl4ZWwpLlxyXG4gICAgICAgICAqIERlZmF1bHQ6IDIwMFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGRyYWdQcm94eUhlaWdodD86IG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIERpbWVuc2lvbnMge1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gcmVzb2x2ZShkaW1lbnNpb25zOiBEaW1lbnNpb25zIHwgdW5kZWZpbmVkKTogUmVzb2x2ZWRMYXlvdXRDb25maWcuRGltZW5zaW9ucyB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgc2l6ZTogZGVmYXVsdE1pbkl0ZW1IZWlnaHQsIHNpemVVbml0OiBkZWZhdWx0TWluSXRlbUhlaWdodFVuaXQgfSA9IERpbWVuc2lvbnMucmVzb2x2ZURlZmF1bHRNaW5JdGVtSGVpZ2h0KGRpbWVuc2lvbnMpO1xyXG4gICAgICAgICAgICBjb25zdCB7IHNpemU6IGRlZmF1bHRNaW5JdGVtV2lkdGgsIHNpemVVbml0OiBkZWZhdWx0TWluSXRlbVdpZHRoVW5pdCB9ID0gRGltZW5zaW9ucy5yZXNvbHZlRGVmYXVsdE1pbkl0ZW1XaWR0aChkaW1lbnNpb25zKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0OiBSZXNvbHZlZExheW91dENvbmZpZy5EaW1lbnNpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IGRpbWVuc2lvbnM/LmJvcmRlcldpZHRoID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMuZGVmYXVsdHMuYm9yZGVyV2lkdGgsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJHcmFiV2lkdGg6IGRpbWVuc2lvbnM/LmJvcmRlckdyYWJXaWR0aCA/PyBSZXNvbHZlZExheW91dENvbmZpZy5EaW1lbnNpb25zLmRlZmF1bHRzLmJvcmRlckdyYWJXaWR0aCxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRJbnNldDogZGltZW5zaW9ucz8uY29udGVudEluc2V0ID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMuZGVmYXVsdHMuY29udGVudEluc2V0LFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdE1pbkl0ZW1IZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0TWluSXRlbUhlaWdodFVuaXQsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0TWluSXRlbVdpZHRoLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdE1pbkl0ZW1XaWR0aFVuaXQsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJIZWlnaHQ6IGRpbWVuc2lvbnM/LmhlYWRlckhlaWdodCA/PyBSZXNvbHZlZExheW91dENvbmZpZy5EaW1lbnNpb25zLmRlZmF1bHRzLmhlYWRlckhlaWdodCxcclxuICAgICAgICAgICAgICAgIGRyYWdQcm94eVdpZHRoOiBkaW1lbnNpb25zPy5kcmFnUHJveHlXaWR0aCA/PyBSZXNvbHZlZExheW91dENvbmZpZy5EaW1lbnNpb25zLmRlZmF1bHRzLmRyYWdQcm94eVdpZHRoLFxyXG4gICAgICAgICAgICAgICAgZHJhZ1Byb3h5SGVpZ2h0OiBkaW1lbnNpb25zPy5kcmFnUHJveHlIZWlnaHQgPz8gUmVzb2x2ZWRMYXlvdXRDb25maWcuRGltZW5zaW9ucy5kZWZhdWx0cy5kcmFnUHJveHlIZWlnaHQsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gZnJvbVJlc29sdmVkKHJlc29sdmVkRGltZW5zaW9uczogUmVzb2x2ZWRMYXlvdXRDb25maWcuRGltZW5zaW9ucyk6IERpbWVuc2lvbnMge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQ6IERpbWVuc2lvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogcmVzb2x2ZWREaW1lbnNpb25zLmJvcmRlcldpZHRoLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyR3JhYldpZHRoOiByZXNvbHZlZERpbWVuc2lvbnMuYm9yZGVyR3JhYldpZHRoLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdE1pbkl0ZW1IZWlnaHQ6IGZvcm1hdFNpemUocmVzb2x2ZWREaW1lbnNpb25zLmRlZmF1bHRNaW5JdGVtSGVpZ2h0LCByZXNvbHZlZERpbWVuc2lvbnMuZGVmYXVsdE1pbkl0ZW1IZWlnaHRVbml0KSxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRNaW5JdGVtV2lkdGg6IGZvcm1hdFNpemUocmVzb2x2ZWREaW1lbnNpb25zLmRlZmF1bHRNaW5JdGVtV2lkdGgsIHJlc29sdmVkRGltZW5zaW9ucy5kZWZhdWx0TWluSXRlbVdpZHRoVW5pdCksXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJIZWlnaHQ6IHJlc29sdmVkRGltZW5zaW9ucy5oZWFkZXJIZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBkcmFnUHJveHlXaWR0aDogcmVzb2x2ZWREaW1lbnNpb25zLmRyYWdQcm94eVdpZHRoLFxyXG4gICAgICAgICAgICAgICAgZHJhZ1Byb3h5SGVpZ2h0OiByZXNvbHZlZERpbWVuc2lvbnMuZHJhZ1Byb3h5SGVpZ2h0LFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gcmVzb2x2ZURlZmF1bHRNaW5JdGVtSGVpZ2h0KGRpbWVuc2lvbnM6IERpbWVuc2lvbnMgfCB1bmRlZmluZWQpOiBTaXplV2l0aFVuaXQge1xyXG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBkaW1lbnNpb25zPy5kZWZhdWx0TWluSXRlbUhlaWdodDtcclxuICAgICAgICAgICAgaWYgKGhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzaXplOiBSZXNvbHZlZExheW91dENvbmZpZy5EaW1lbnNpb25zLmRlZmF1bHRzLmRlZmF1bHRNaW5JdGVtSGVpZ2h0LCBzaXplVW5pdDogUmVzb2x2ZWRMYXlvdXRDb25maWcuRGltZW5zaW9ucy5kZWZhdWx0cy5kZWZhdWx0TWluSXRlbUhlaWdodFVuaXQgfTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVNpemUoaGVpZ2h0LCBbU2l6ZVVuaXRFbnVtLlBpeGVsXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gcmVzb2x2ZURlZmF1bHRNaW5JdGVtV2lkdGgoZGltZW5zaW9uczogRGltZW5zaW9ucyB8IHVuZGVmaW5lZCk6IFNpemVXaXRoVW5pdCB7XHJcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gZGltZW5zaW9ucz8uZGVmYXVsdE1pbkl0ZW1XaWR0aDtcclxuICAgICAgICAgICAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHNpemU6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMuZGVmYXVsdHMuZGVmYXVsdE1pbkl0ZW1XaWR0aCwgc2l6ZVVuaXQ6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMuZGVmYXVsdHMuZGVmYXVsdE1pbkl0ZW1XaWR0aFVuaXQgfTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZVNpemUod2lkdGgsIFtTaXplVW5pdEVudW0uUGl4ZWxdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIExhYmVscyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoTGF5b3V0Q29uZmlnOm5hbWVzcGFjZSkuKEhlYWRlcjppbnRlcmZhY2UpLmNsb3NlfSBpbnN0ZWFkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY2xvc2U/OiBzdHJpbmc7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKExheW91dENvbmZpZzpuYW1lc3BhY2UpLihIZWFkZXI6aW50ZXJmYWNlKS5tYXhpbWlzZX0gaW5zdGVhZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1heGltaXNlPzogc3RyaW5nO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChMYXlvdXRDb25maWc6bmFtZXNwYWNlKS4oSGVhZGVyOmludGVyZmFjZSkubWluaW1pc2V9IGluc3RlYWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBtaW5pbWlzZT86IHN0cmluZztcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoTGF5b3V0Q29uZmlnOm5hbWVzcGFjZSkuKEhlYWRlcjppbnRlcmZhY2UpLnBvcGlufSBpbnN0ZWFkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9waW4/OiBzdHJpbmc7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKExheW91dENvbmZpZzpuYW1lc3BhY2UpLihIZWFkZXI6aW50ZXJmYWNlKS5wb3BvdXR9IGluc3RlYWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBwb3BvdXQ/OiBzdHJpbmc7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKExheW91dENvbmZpZzpuYW1lc3BhY2UpLihIZWFkZXI6aW50ZXJmYWNlKS50YWJEcm9wZG93bn0gaW5zdGVhZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRhYkRyb3Bkb3duPzogc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSGVhZGVyIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTcGVjaWZpZXMgd2hldGhlciBoZWFkZXIgc2hvdWxkIGJlIGRpc3BsYXllZCwgYW5kIGlmIHNvLCBvbiB3aGljaCBzaWRlLlxyXG4gICAgICAgICAqIElmIGZhbHNlLCB0aGUgbGF5b3V0IHdpbGwgYmUgZGlzcGxheWVkIHdpdGggc3BsaXR0ZXJzIG9ubHkuXHJcbiAgICAgICAgICogRGVmYXVsdDogJ3RvcCdcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaG93PzogZmFsc2UgfCBTaWRlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSB0b29sdGlwIHRleHQgdGhhdCBhcHBlYXJzIHdoZW4gaG92ZXJpbmcgb3ZlciB0aGUgcG9wb3V0IGljb24gb3IgZmFsc2UgaWYgcG9wb3V0IGJ1dHRvbiBub3QgZGlzcGxheWVkLlxyXG4gICAgICAgICAqIERlZmF1bHQ6ICdvcGVuIGluIG5ldyB3aW5kb3cnXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9wb3V0PzogZmFsc2UgfCBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHRvb2x0aXAgdGV4dCB0aGF0IGFwcGVhcnMgd2hlbiBob3ZlcmluZyBvdmVyIHRoZSBwb3BpbiBpY29uLlxyXG4gICAgICAgICAqIERlZmF1bHQ6ICdwb3AgaW4nXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcG9waW4/OiBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHRvb2x0aXAgdGV4dCB0aGF0IGFwcGVhcnMgd2hlbiBob3ZlcmluZyBvdmVyIHRoZSBtYXhpbWlzZSBpY29uIG9yIGZhbHNlIGlmIG1heGltaXNlZCBidXR0b24gbm90IGRpc3BsYXllZC5cclxuICAgICAgICAgKiBEZWZhdWx0OiAnbWF4aW1pc2UnXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWF4aW1pc2U/OiBmYWxzZSB8IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgdG9vbHRpcCB0ZXh0IHRoYXQgYXBwZWFycyB3aGVuIGhvdmVyaW5nIG92ZXIgdGhlIGNsb3NlIGljb24uXHJcbiAgICAgICAgICogRGVmYXVsdDogJ2Nsb3NlJ1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsb3NlPzogZmFsc2UgfCBzdHJpbmc7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIHRvb2x0aXAgdGV4dCB0aGF0IGFwcGVhcnMgd2hlbiBob3ZlcmluZyBvdmVyIHRoZSBtaW5pbWlzZSBpY29uLlxyXG4gICAgICAgICAqIERlZmF1bHQ6ICdtaW5pbWlzZSdcclxuICAgICAgICAgKi9cclxuICAgICAgICBtaW5pbWlzZT86IHN0cmluZztcclxuICAgICAgICAvKipcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIERlZmF1bHQ6ICdhZGRpdGlvbmFsIHRhYnMnXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGFiRHJvcGRvd24/OiBmYWxzZSB8IHN0cmluZztcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIEhlYWRlciB7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlKGhlYWRlcjogSGVhZGVyIHwgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBzZXR0aW5nczogTGF5b3V0Q29uZmlnLlNldHRpbmdzIHwgdW5kZWZpbmVkLCBsYWJlbHM6IExheW91dENvbmZpZy5MYWJlbHMgfCB1bmRlZmluZWRcclxuICAgICAgICApOiBSZXNvbHZlZExheW91dENvbmZpZy5IZWFkZXIge1xyXG4gICAgICAgICAgICBsZXQgc2hvdzogZmFsc2UgfCBTaWRlO1xyXG4gICAgICAgICAgICBpZiAoaGVhZGVyPy5zaG93ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHNob3cgPSBoZWFkZXIuc2hvdztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncyAhPT0gdW5kZWZpbmVkICYmIHNldHRpbmdzLmhhc0hlYWRlcnMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3cgPSBzZXR0aW5ncy5oYXNIZWFkZXJzID8gUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyLmRlZmF1bHRzLnNob3cgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2hvdyA9IFJlc29sdmVkTGF5b3V0Q29uZmlnLkhlYWRlci5kZWZhdWx0cy5zaG93O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyID0ge1xyXG4gICAgICAgICAgICAgICAgc2hvdyxcclxuICAgICAgICAgICAgICAgIHBvcG91dDogaGVhZGVyPy5wb3BvdXQgPz8gbGFiZWxzPy5wb3BvdXQgPz9cclxuICAgICAgICAgICAgICAgICAgICAoc2V0dGluZ3M/LnNob3dQb3BvdXRJY29uID09PSBmYWxzZSA/IGZhbHNlIDogUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyLmRlZmF1bHRzLnBvcG91dCksXHJcbiAgICAgICAgICAgICAgICBkb2NrOiBoZWFkZXI/LnBvcGluID8/IGxhYmVscz8ucG9waW4gPz8gUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyLmRlZmF1bHRzLmRvY2ssXHJcbiAgICAgICAgICAgICAgICBtYXhpbWlzZTogaGVhZGVyPy5tYXhpbWlzZSA/PyBsYWJlbHM/Lm1heGltaXNlID8/XHJcbiAgICAgICAgICAgICAgICAgICAgKHNldHRpbmdzPy5zaG93TWF4aW1pc2VJY29uID09PSBmYWxzZSA/IGZhbHNlIDogUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyLmRlZmF1bHRzLm1heGltaXNlKSxcclxuICAgICAgICAgICAgICAgIGNsb3NlOiBoZWFkZXI/LmNsb3NlID8/IGxhYmVscz8uY2xvc2UgPz9cclxuICAgICAgICAgICAgICAgICAgICAoc2V0dGluZ3M/LnNob3dDbG9zZUljb24gPT09IGZhbHNlID8gZmFsc2UgOiBSZXNvbHZlZExheW91dENvbmZpZy5IZWFkZXIuZGVmYXVsdHMuY2xvc2UpLFxyXG4gICAgICAgICAgICAgICAgbWluaW1pc2U6IGhlYWRlcj8ubWluaW1pc2UgPz8gbGFiZWxzPy5taW5pbWlzZSA/PyBSZXNvbHZlZExheW91dENvbmZpZy5IZWFkZXIuZGVmYXVsdHMubWluaW1pc2UsXHJcbiAgICAgICAgICAgICAgICB0YWJEcm9wZG93bjogaGVhZGVyPy50YWJEcm9wZG93biA/PyBsYWJlbHM/LnRhYkRyb3Bkb3duID8/IFJlc29sdmVkTGF5b3V0Q29uZmlnLkhlYWRlci5kZWZhdWx0cy50YWJEcm9wZG93bixcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNQb3BvdXQoY29uZmlnOiBMYXlvdXRDb25maWcpOiBjb25maWcgaXMgUG9wb3V0TGF5b3V0Q29uZmlnIHtcclxuICAgICAgICByZXR1cm4gJ3BhcmVudElkJyBpbiBjb25maWcgfHwgJ2luZGV4SW5QYXJlbnQnIGluIGNvbmZpZyB8fCAnd2luZG93JyBpbiBjb25maWc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmUobGF5b3V0Q29uZmlnOiBMYXlvdXRDb25maWcpOiBSZXNvbHZlZExheW91dENvbmZpZyB7XHJcbiAgICAgICAgaWYgKGlzUG9wb3V0KGxheW91dENvbmZpZykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFBvcG91dExheW91dENvbmZpZy5yZXNvbHZlKGxheW91dENvbmZpZyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHJvb3Q6IFJvb3RJdGVtQ29uZmlnIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBpZiAobGF5b3V0Q29uZmlnLnJvb3QgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcm9vdCA9IGxheW91dENvbmZpZy5yb290O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxheW91dENvbmZpZy5jb250ZW50ICE9PSB1bmRlZmluZWQgJiYgbGF5b3V0Q29uZmlnLmNvbnRlbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3QgPSBsYXlvdXRDb25maWcuY29udGVudFswXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBjb25maWc6IFJlc29sdmVkTGF5b3V0Q29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICByb290OiBSb290SXRlbUNvbmZpZy5yZXNvbHZlKHJvb3QpLFxyXG4gICAgICAgICAgICAgICAgb3BlblBvcG91dHM6IExheW91dENvbmZpZy5yZXNvbHZlT3BlblBvcG91dHMobGF5b3V0Q29uZmlnLm9wZW5Qb3BvdXRzKSxcclxuICAgICAgICAgICAgICAgIGRpbWVuc2lvbnM6IExheW91dENvbmZpZy5EaW1lbnNpb25zLnJlc29sdmUobGF5b3V0Q29uZmlnLmRpbWVuc2lvbnMpLFxyXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IExheW91dENvbmZpZy5TZXR0aW5ncy5yZXNvbHZlKGxheW91dENvbmZpZy5zZXR0aW5ncyksXHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6IExheW91dENvbmZpZy5IZWFkZXIucmVzb2x2ZShsYXlvdXRDb25maWcuaGVhZGVyLCBsYXlvdXRDb25maWcuc2V0dGluZ3MsIGxheW91dENvbmZpZy5sYWJlbHMpLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBmcm9tUmVzb2x2ZWQoY29uZmlnOiBSZXNvbHZlZExheW91dENvbmZpZyk6IExheW91dENvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBMYXlvdXRDb25maWcgPSB7XHJcbiAgICAgICAgICAgIHJvb3Q6IFJvb3RJdGVtQ29uZmlnLmZyb21SZXNvbHZlZE9yVW5kZWZpbmVkKGNvbmZpZy5yb290KSxcclxuICAgICAgICAgICAgb3BlblBvcG91dHM6IFBvcG91dExheW91dENvbmZpZy5mcm9tUmVzb2x2ZWRBcnJheShjb25maWcub3BlblBvcG91dHMpLFxyXG4gICAgICAgICAgICBzZXR0aW5nczogUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3MuY3JlYXRlQ29weShjb25maWcuc2V0dGluZ3MpLFxyXG4gICAgICAgICAgICBkaW1lbnNpb25zOiBMYXlvdXRDb25maWcuRGltZW5zaW9ucy5mcm9tUmVzb2x2ZWQoY29uZmlnLmRpbWVuc2lvbnMpLFxyXG4gICAgICAgICAgICBoZWFkZXI6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkhlYWRlci5jcmVhdGVDb3B5KGNvbmZpZy5oZWFkZXIpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNSZXNvbHZlZChjb25maWdPclJlc29sdmVkQ29uZmlnOiBSZXNvbHZlZExheW91dENvbmZpZyB8IExheW91dENvbmZpZyk6IGNvbmZpZ09yUmVzb2x2ZWRDb25maWcgaXMgUmVzb2x2ZWRMYXlvdXRDb25maWcge1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IGNvbmZpZ09yUmVzb2x2ZWRDb25maWcgYXMgUmVzb2x2ZWRMYXlvdXRDb25maWc7XHJcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5yZXNvbHZlZCAhPT0gdW5kZWZpbmVkICYmIChjb25maWcucmVzb2x2ZWQgPT09IHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlT3BlblBvcG91dHMocG9wb3V0Q29uZmlnczogUG9wb3V0TGF5b3V0Q29uZmlnW10gfCB1bmRlZmluZWQpOiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZ1tdIHtcclxuICAgICAgICBpZiAocG9wb3V0Q29uZmlncyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHBvcG91dENvbmZpZ3MubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXk8UmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWc+KGNvdW50KTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBQb3BvdXRMYXlvdXRDb25maWcucmVzb2x2ZShwb3BvdXRDb25maWdzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGludGVyZmFjZSBQb3BvdXRMYXlvdXRDb25maWcgZXh0ZW5kcyBMYXlvdXRDb25maWcge1xyXG4gICAgLyoqIFRoZSBpZCBvZiB0aGUgZWxlbWVudCB0aGUgaXRlbSB3aWxsIGJlIGFwcGVuZGVkIHRvIG9uIHBvcEluXHJcbiAgICAqIElmIG51bGwsIGFwcGVuZCB0byB0b3Btb3N0IGxheW91dCBlbGVtZW50XHJcbiAgICAqL1xyXG4gICAgcGFyZW50SWQ6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XHJcbiAgICAvKiogVGhlIHBvc2l0aW9uIG9mIHRoaXMgZWxlbWVudCB3aXRoaW4gaXRzIHBhcmVudFxyXG4gICAgKiBJZiBudWxsLCBwb3NpdGlvbiBpcyBsYXN0XHJcbiAgICAqL1xyXG4gICAgaW5kZXhJblBhcmVudDogbnVtYmVyIHwgbnVsbCB8IHVuZGVmaW5lZDtcclxuICAgIC8qKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChQb3BvdXRMYXlvdXRDb25maWc6aW50ZXJmYWNlKS53aW5kb3d9ICovXHJcbiAgICBkaW1lbnNpb25zOiBQb3BvdXRMYXlvdXRDb25maWcuRGltZW5zaW9ucyB8IHVuZGVmaW5lZDsgLy8gZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XHJcbiAgICB3aW5kb3c6IFBvcG91dExheW91dENvbmZpZy5XaW5kb3cgfCB1bmRlZmluZWQ7XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgUG9wb3V0TGF5b3V0Q29uZmlnIHtcclxuICAgIC8vIFByZXZpb3VzIHZlcnNpb25zIGtlcHQgd2luZG93IGluZm9ybWF0aW9uIGluIERpbWVuc2lvbnMga2V5LiAgT25seSB1c2UgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoUG9wb3V0TGF5b3V0Q29uZmlnOm5hbWVzcGFjZSkuKFdpbmRvdzppbnRlcmZhY2UpfSAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBEaW1lbnNpb25zIGV4dGVuZHMgTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMge1xyXG4gICAgICAgIC8qKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChQb3BvdXRMYXlvdXRDb25maWc6bmFtZXNwYWNlKS4oV2luZG93OmludGVyZmFjZSkud2lkdGh9ICovXHJcbiAgICAgICAgd2lkdGg/OiBudW1iZXIgfCBudWxsLFxyXG4gICAgICAgIC8qKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChQb3BvdXRMYXlvdXRDb25maWc6bmFtZXNwYWNlKS4oV2luZG93OmludGVyZmFjZSkuaGVpZ2h0fSAqL1xyXG4gICAgICAgIGhlaWdodD86IG51bWJlciB8IG51bGwsXHJcbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKFBvcG91dExheW91dENvbmZpZzpuYW1lc3BhY2UpLihXaW5kb3c6aW50ZXJmYWNlKS5sZWZ0fSAqL1xyXG4gICAgICAgIGxlZnQ/OiBudW1iZXIgfCBudWxsLFxyXG4gICAgICAgIC8qKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChQb3BvdXRMYXlvdXRDb25maWc6bmFtZXNwYWNlKS4oV2luZG93OmludGVyZmFjZSkudG9wfSAqL1xyXG4gICAgICAgIHRvcD86IG51bWJlciB8IG51bGwsXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgICAgIHdpZHRoPzogbnVtYmVyLFxyXG4gICAgICAgIGhlaWdodD86IG51bWJlcixcclxuICAgICAgICBsZWZ0PzogbnVtYmVyLFxyXG4gICAgICAgIHRvcD86IG51bWJlcixcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIFdpbmRvdyB7XHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlKHdpbmRvdzogV2luZG93IHwgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBkaW1lbnNpb25zOiBEaW1lbnNpb25zIHwgdW5kZWZpbmVkKTogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcuV2luZG93XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZy5XaW5kb3c7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRzID0gUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcuV2luZG93LmRlZmF1bHRzO1xyXG4gICAgICAgICAgICBpZiAod2luZG93ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2luZG93LndpZHRoID8/IGRlZmF1bHRzLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogd2luZG93LmhlaWdodCA/PyBkZWZhdWx0cy5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogd2luZG93LmxlZnQgPz8gZGVmYXVsdHMubGVmdCxcclxuICAgICAgICAgICAgICAgICAgICB0b3A6IHdpbmRvdy50b3AgPz8gZGVmYXVsdHMudG9wLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBkaW1lbnNpb25zPy53aWR0aCA/PyBkZWZhdWx0cy53aWR0aCxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGRpbWVuc2lvbnM/LmhlaWdodCA/PyBkZWZhdWx0cy5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogZGltZW5zaW9ucz8ubGVmdCA/PyBkZWZhdWx0cy5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogZGltZW5zaW9ucz8udG9wID8/IGRlZmF1bHRzLnRvcCxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBmcm9tUmVzb2x2ZWQocmVzb2x2ZWRXaW5kb3c6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnLldpbmRvdyk6IFdpbmRvdyB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogV2luZG93ID0ge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IHJlc29sdmVkV2luZG93LndpZHRoID09PSBudWxsID8gdW5kZWZpbmVkIDogcmVzb2x2ZWRXaW5kb3cud2lkdGgsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHJlc29sdmVkV2luZG93LmhlaWdodCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJlc29sdmVkV2luZG93LmhlaWdodCxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHJlc29sdmVkV2luZG93LmxlZnQgPT09IG51bGwgPyB1bmRlZmluZWQgOiByZXNvbHZlZFdpbmRvdy5sZWZ0LFxyXG4gICAgICAgICAgICAgICAgdG9wOiByZXNvbHZlZFdpbmRvdy50b3AgPT09IG51bGwgPyB1bmRlZmluZWQgOiByZXNvbHZlZFdpbmRvdy50b3AsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlKHBvcG91dENvbmZpZzogUG9wb3V0TGF5b3V0Q29uZmlnKTogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcge1xyXG4gICAgICAgIGxldCByb290OiBSb290SXRlbUNvbmZpZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAocG9wb3V0Q29uZmlnLnJvb3QgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByb290ID0gcG9wb3V0Q29uZmlnLnJvb3Q7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHBvcG91dENvbmZpZy5jb250ZW50ICE9PSB1bmRlZmluZWQgJiYgcG9wb3V0Q29uZmlnLmNvbnRlbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcm9vdCA9IHBvcG91dENvbmZpZy5jb250ZW50WzBdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcm9vdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY29uZmlnOiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZyA9IHtcclxuICAgICAgICAgICAgcm9vdDogUm9vdEl0ZW1Db25maWcucmVzb2x2ZShyb290KSxcclxuICAgICAgICAgICAgb3BlblBvcG91dHM6IExheW91dENvbmZpZy5yZXNvbHZlT3BlblBvcG91dHMocG9wb3V0Q29uZmlnLm9wZW5Qb3BvdXRzKSxcclxuICAgICAgICAgICAgZGltZW5zaW9uczogTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMucmVzb2x2ZShwb3BvdXRDb25maWcuZGltZW5zaW9ucyksXHJcbiAgICAgICAgICAgIHNldHRpbmdzOiBMYXlvdXRDb25maWcuU2V0dGluZ3MucmVzb2x2ZShwb3BvdXRDb25maWcuc2V0dGluZ3MpLFxyXG4gICAgICAgICAgICBoZWFkZXI6IExheW91dENvbmZpZy5IZWFkZXIucmVzb2x2ZShwb3BvdXRDb25maWcuaGVhZGVyLCBwb3BvdXRDb25maWcuc2V0dGluZ3MsIHBvcG91dENvbmZpZy5sYWJlbHMpLFxyXG4gICAgICAgICAgICBwYXJlbnRJZDogcG9wb3V0Q29uZmlnLnBhcmVudElkID8/IG51bGwsXHJcbiAgICAgICAgICAgIGluZGV4SW5QYXJlbnQ6IHBvcG91dENvbmZpZy5pbmRleEluUGFyZW50ID8/IG51bGwsXHJcbiAgICAgICAgICAgIHdpbmRvdzogUG9wb3V0TGF5b3V0Q29uZmlnLldpbmRvdy5yZXNvbHZlKHBvcG91dENvbmZpZy53aW5kb3csIHBvcG91dENvbmZpZy5kaW1lbnNpb25zKSxcclxuICAgICAgICAgICAgcmVzb2x2ZWQ6IHRydWUsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGZyb21SZXNvbHZlZChyZXNvbHZlZENvbmZpZzogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcpOiBQb3BvdXRMYXlvdXRDb25maWcge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogUG9wb3V0TGF5b3V0Q29uZmlnID0ge1xyXG4gICAgICAgICAgICByb290OiBSb290SXRlbUNvbmZpZy5mcm9tUmVzb2x2ZWRPclVuZGVmaW5lZChyZXNvbHZlZENvbmZpZy5yb290KSxcclxuICAgICAgICAgICAgb3BlblBvcG91dHM6IGZyb21SZXNvbHZlZEFycmF5KHJlc29sdmVkQ29uZmlnLm9wZW5Qb3BvdXRzKSxcclxuICAgICAgICAgICAgZGltZW5zaW9uczogTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMuZnJvbVJlc29sdmVkKHJlc29sdmVkQ29uZmlnLmRpbWVuc2lvbnMpLFxyXG4gICAgICAgICAgICBzZXR0aW5nczogUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3MuY3JlYXRlQ29weShyZXNvbHZlZENvbmZpZy5zZXR0aW5ncyksXHJcbiAgICAgICAgICAgIGhlYWRlcjogUmVzb2x2ZWRMYXlvdXRDb25maWcuSGVhZGVyLmNyZWF0ZUNvcHkocmVzb2x2ZWRDb25maWcuaGVhZGVyKSxcclxuICAgICAgICAgICAgcGFyZW50SWQ6IHJlc29sdmVkQ29uZmlnLnBhcmVudElkLFxyXG4gICAgICAgICAgICBpbmRleEluUGFyZW50OiByZXNvbHZlZENvbmZpZy5pbmRleEluUGFyZW50LFxyXG4gICAgICAgICAgICB3aW5kb3c6IFBvcG91dExheW91dENvbmZpZy5XaW5kb3cuZnJvbVJlc29sdmVkKHJlc29sdmVkQ29uZmlnLndpbmRvdyksXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBmcm9tUmVzb2x2ZWRBcnJheShyZXNvbHZlZEFycmF5OiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZ1tdKTogUG9wb3V0TGF5b3V0Q29uZmlnW10ge1xyXG4gICAgICAgIGNvbnN0IHJlc29sdmVkT3BlblBvcG91dENvdW50ID0gcmVzb2x2ZWRBcnJheS5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PFBvcG91dExheW91dENvbmZpZz4ocmVzb2x2ZWRPcGVuUG9wb3V0Q291bnQpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzb2x2ZWRPcGVuUG9wb3V0Q291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCByZXNvbHZlZE9wZW5Qb3BvdXQgPSByZXNvbHZlZEFycmF5W2ldO1xyXG4gICAgICAgICAgICByZXN1bHRbaV0gPSBQb3BvdXRMYXlvdXRDb25maWcuZnJvbVJlc29sdmVkKHJlc29sdmVkT3BlblBvcG91dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2l6ZVdpdGhVbml0IHtcclxuICAgIHNpemU6IG51bWJlcjtcclxuICAgIHNpemVVbml0OiBTaXplVW5pdEVudW07XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGludGVyZmFjZSBVbmRlZmluYWJsZVNpemVXaXRoVW5pdCB7XHJcbiAgICBzaXplOiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICBzaXplVW5pdDogU2l6ZVVuaXRFbnVtO1xyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNpemUoc2l6ZVN0cmluZzogc3RyaW5nLCBhbGxvd2FibGVTaXplVW5pdHM6IHJlYWRvbmx5IFNpemVVbml0RW51bVtdKTogU2l6ZVdpdGhVbml0IHtcclxuICAgIGNvbnN0IHsgbnVtZXJpY1BhcnQ6IGRpZ2l0c1BhcnQsIGZpcnN0Tm9uTnVtZXJpY0NoYXJQYXJ0OiBmaXJzdE5vbkRpZ2l0UGFydCB9ID0gc3BsaXRTdHJpbmdBdEZpcnN0Tm9uTnVtZXJpY0NoYXIoc2l6ZVN0cmluZyk7XHJcbiAgICBjb25zdCBzaXplID0gTnVtYmVyLnBhcnNlSW50KGRpZ2l0c1BhcnQsIDEwKTtcclxuICAgIGlmIChpc05hTihzaXplKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBDb25maWd1cmF0aW9uRXJyb3IoYCR7aTE4blN0cmluZ3NbSTE4blN0cmluZ0lkLkludmFsaWROdW1iZXJQYXJ0SW5TaXplU3RyaW5nXX06ICR7c2l6ZVN0cmluZ31gKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3Qgc2l6ZVVuaXQgPSBTaXplVW5pdEVudW0udHJ5UGFyc2UoZmlyc3ROb25EaWdpdFBhcnQpO1xyXG4gICAgICAgIGlmIChzaXplVW5pdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBDb25maWd1cmF0aW9uRXJyb3IoYCR7aTE4blN0cmluZ3NbSTE4blN0cmluZ0lkLlVua25vd25Vbml0SW5TaXplU3RyaW5nXX06ICR7c2l6ZVN0cmluZ31gKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICghYWxsb3dhYmxlU2l6ZVVuaXRzLmluY2x1ZGVzKHNpemVVbml0KSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvbmZpZ3VyYXRpb25FcnJvcihgJHtpMThuU3RyaW5nc1tJMThuU3RyaW5nSWQuVW5zdXBwb3J0ZWRVbml0SW5TaXplU3RyaW5nXX06ICR7c2l6ZVN0cmluZ31gKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc2l6ZSwgc2l6ZVVuaXQgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0U2l6ZShzaXplOiBudW1iZXIsIHNpemVVbml0OiBTaXplVW5pdEVudW0pIHtcclxuICAgIHJldHVybiBzaXplLnRvU3RyaW5nKDEwKSArIFNpemVVbml0RW51bS5mb3JtYXQoc2l6ZVVuaXQpO1xyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRVbmRlZmluYWJsZVNpemUoc2l6ZTogbnVtYmVyfCB1bmRlZmluZWQsIHNpemVVbml0OiBTaXplVW5pdEVudW0pIHtcclxuICAgIGlmIChzaXplID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gc2l6ZS50b1N0cmluZygxMCkgKyBTaXplVW5pdEVudW0uZm9ybWF0KHNpemVVbml0KTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgQGRlcHJlY2F0ZWQgLSB1c2Uge0BsaW5rIChMYXlvdXRDb25maWc6aW50ZXJmYWNlKX0gKi9cclxuZXhwb3J0IHR5cGUgQ29uZmlnID0gTGF5b3V0Q29uZmlnO1xyXG4iLCJpbXBvcnQgeyBBc3NlcnRFcnJvciwgVW5yZWFjaGFibGVDYXNlRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBDb25maWdNaW5pZmllciB9IGZyb20gJy4uL3V0aWxzL2NvbmZpZy1taW5pZmllcic7XHJcbmltcG9ydCB7IEl0ZW1UeXBlLCBKc29uVmFsdWUsIFJlc3BvbnNpdmVNb2RlLCBTaWRlLCBTaXplVW5pdEVudW0gfSBmcm9tICcuLi91dGlscy90eXBlcyc7XHJcbmltcG9ydCB7IGRlZXBFeHRlbmRWYWx1ZSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVzb2x2ZWRJdGVtQ29uZmlnIHtcclxuICAgIC8vIHNlZSBJdGVtQ29uZmlnIGZvciBjb21tZW50c1xyXG4gICAgcmVhZG9ubHkgdHlwZTogSXRlbVR5cGU7XHJcbiAgICByZWFkb25seSBjb250ZW50OiByZWFkb25seSBSZXNvbHZlZEl0ZW1Db25maWdbXTtcclxuICAgIHJlYWRvbmx5IHNpemU6IG51bWJlcjtcclxuICAgIHJlYWRvbmx5IHNpemVVbml0OiBTaXplVW5pdEVudW07XHJcbiAgICByZWFkb25seSBtaW5TaXplOiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICByZWFkb25seSBtaW5TaXplVW5pdDogU2l6ZVVuaXRFbnVtO1xyXG4gICAgLy8gaWQgbm8gbG9uZ2VyIHNwZWNpZmllcyB3aGV0aGVyIGFuIEl0ZW0gaXMgbWF4aW1pc2VkLiAgVGhpcyBpcyBub3cgZG9uZSBieSBIZWFkZXJJdGVtQ29uZmlnLm1heGltaXNlZFxyXG4gICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcclxuICAgIHJlYWRvbmx5IGlzQ2xvc2FibGU6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgUmVzb2x2ZWRJdGVtQ29uZmlnIHtcclxuICAgIGV4cG9ydCBjb25zdCBkZWZhdWx0czogUmVzb2x2ZWRJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgIHR5cGU6IEl0ZW1UeXBlLmdyb3VuZCwgLy8gbm90IHJlYWxseSBkZWZhdWx0IGJ1dCBuZWVkIHNvbWV0aGluZ1xyXG4gICAgICAgIGNvbnRlbnQ6IFtdLFxyXG4gICAgICAgIHNpemU6IDEsXHJcbiAgICAgICAgc2l6ZVVuaXQ6IFNpemVVbml0RW51bS5GcmFjdGlvbmFsLFxyXG4gICAgICAgIG1pblNpemU6IHVuZGVmaW5lZCxcclxuICAgICAgICBtaW5TaXplVW5pdDogU2l6ZVVuaXRFbnVtLlBpeGVsLFxyXG4gICAgICAgIGlkOiAnJyxcclxuICAgICAgICBpc0Nsb3NhYmxlOiB0cnVlLFxyXG4gICAgfSBhcyBjb25zdDtcclxuXHJcbiAgICAvKiogQ3JlYXRlcyBhIGNvcHkgb2YgdGhlIG9yaWdpbmFsIFJlc29sdmVkSXRlbUNvbmZpZyB1c2luZyBhbiBhbHRlcm5hdGl2ZSBjb250ZW50IGlmIHNwZWNpZmllZCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvcHkob3JpZ2luYWw6IFJlc29sdmVkSXRlbUNvbmZpZywgY29udGVudD86IFJlc29sdmVkSXRlbUNvbmZpZ1tdKTogUmVzb2x2ZWRJdGVtQ29uZmlnIHtcclxuICAgICAgICBzd2l0Y2ggKG9yaWdpbmFsLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5ncm91bmQ6XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUucm93OlxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbHVtbjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZy5jcmVhdGVDb3B5KG9yaWdpbmFsIGFzIFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgYXMgUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcuQ2hpbGRJdGVtQ29uZmlnW10pO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5zdGFjazpcclxuICAgICAgICAgICAgICAgIHJldHVybiBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZy5jcmVhdGVDb3B5KG9yaWdpbmFsIGFzIFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnLCBjb250ZW50IGFzIFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZ1tdKTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29tcG9uZW50OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZy5jcmVhdGVDb3B5KG9yaWdpbmFsIGFzIFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyk7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ2FzZUVycm9yKCdDSUNDOTEzNTQnLCBvcmlnaW5hbC50eXBlLCAnSW52YWxpZCBDb25maWcgSXRlbSB0eXBlIHNwZWNpZmllZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlRGVmYXVsdCh0eXBlOiBJdGVtVHlwZSk6IFJlc29sdmVkSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuZ3JvdW5kOlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdDSUNDRFI5MTU2MicpOyAvLyBHZXQgZGVmYXVsdCByb290IGZyb20gTGF5b3V0Q29uZmlnXHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUucm93OlxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbHVtbjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZy5jcmVhdGVEZWZhdWx0KHR5cGUpO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5zdGFjazpcclxuICAgICAgICAgICAgICAgIHJldHVybiBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZy5jcmVhdGVEZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbXBvbmVudDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcuY3JlYXRlRGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNhc2VFcnJvcignQ0lDQ0REOTE1NjMnLCB0eXBlLCAnSW52YWxpZCBDb25maWcgSXRlbSB0eXBlIHNwZWNpZmllZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNDb21wb25lbnRJdGVtKGl0ZW1Db25maWc6IFJlc29sdmVkSXRlbUNvbmZpZyk6IGl0ZW1Db25maWcgaXMgUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnIHtcclxuICAgICAgICByZXR1cm4gaXRlbUNvbmZpZy50eXBlID09PSBJdGVtVHlwZS5jb21wb25lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGlzU3RhY2tJdGVtKGl0ZW1Db25maWc6IFJlc29sdmVkSXRlbUNvbmZpZyk6IGl0ZW1Db25maWcgaXMgUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcge1xyXG4gICAgICAgIHJldHVybiBpdGVtQ29uZmlnLnR5cGUgPT09IEl0ZW1UeXBlLnN0YWNrO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc0dyb3VuZEl0ZW0oaXRlbUNvbmZpZzogUmVzb2x2ZWRJdGVtQ29uZmlnKTogaXRlbUNvbmZpZyBpcyBSZXNvbHZlZEdyb3VuZEl0ZW1Db25maWcge1xyXG4gICAgICAgIHJldHVybiBpdGVtQ29uZmlnLnR5cGUgPT09IEl0ZW1UeXBlLmdyb3VuZDtcclxuICAgIH1cclxufVxyXG5cclxuLy8gU3RhY2sgb3IgQ29tcG9uZW50XHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVzb2x2ZWRIZWFkZXJlZEl0ZW1Db25maWcgZXh0ZW5kcyBSZXNvbHZlZEl0ZW1Db25maWcge1xyXG4gICAgaGVhZGVyOiBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIgfCB1bmRlZmluZWQ7IC8vIHVuZGVmaW5lZCBtZWFucyBnZXQgaGVhZGVyIHNldHRpbmdzIGZyb20gTGF5b3V0Q29uZmlnXHJcbiAgICByZWFkb25seSBtYXhpbWlzZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgUmVzb2x2ZWRIZWFkZXJlZEl0ZW1Db25maWcge1xyXG4gICAgZXhwb3J0IGNvbnN0IGRlZmF1bHRNYXhpbWlzZWQgPSBmYWxzZTtcclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIEhlYWRlciB7XHJcbiAgICAgICAgLy8gdW5kZWZpbmVkIG1lYW5zIGdldCBwcm9wZXJ0eSB2YWx1ZSBmcm9tIExheW91dENvbmZpZ1xyXG4gICAgICAgIHJlYWRvbmx5IHNob3c6IGZhbHNlIHwgU2lkZSB8IHVuZGVmaW5lZDtcclxuICAgICAgICByZWFkb25seSBwb3BvdXQ6IGZhbHNlIHwgc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIHJlYWRvbmx5IG1heGltaXNlOiBmYWxzZSB8IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICByZWFkb25seSBjbG9zZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIHJlYWRvbmx5IG1pbmltaXNlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgcmVhZG9ubHkgdGFiRHJvcGRvd246IGZhbHNlIHwgc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgSGVhZGVyIHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29weShvcmlnaW5hbDogSGVhZGVyIHwgdW5kZWZpbmVkLCBzaG93PzogZmFsc2UgfCBTaWRlKTogSGVhZGVyIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICAgICAgaWYgKG9yaWdpbmFsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3c6IHNob3cgPz8gb3JpZ2luYWwuc2hvdyxcclxuICAgICAgICAgICAgICAgICAgICBwb3BvdXQ6IG9yaWdpbmFsLnBvcG91dCxcclxuICAgICAgICAgICAgICAgICAgICBjbG9zZTogb3JpZ2luYWwuY2xvc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4aW1pc2U6IG9yaWdpbmFsLm1heGltaXNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbmltaXNlOiBvcmlnaW5hbC5taW5pbWlzZSxcclxuICAgICAgICAgICAgICAgICAgICB0YWJEcm9wZG93bjogb3JpZ2luYWwudGFiRHJvcGRvd24sXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcgZXh0ZW5kcyBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZyB7XHJcbiAgICByZWFkb25seSB0eXBlOiAnc3RhY2snO1xyXG4gICAgcmVhZG9ubHkgY29udGVudDogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnW107XHJcbiAgICAvKiogVGhlIGluZGV4IG9mIHRoZSBhY3RpdmUgaXRlbSBpbiB0aGUgU3RhY2suICBPbmx5IHVuZGVmaW5lZCBpZiB0aGUgU3RhY2sgaXMgZW1wdHkuICovXHJcbiAgICByZWFkb25seSBhY3RpdmVJdGVtSW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZyB7XHJcbiAgICBleHBvcnQgY29uc3QgZGVmYXVsdEFjdGl2ZUl0ZW1JbmRleCA9IDA7XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvcHkob3JpZ2luYWw6IFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnLCBjb250ZW50PzogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnW10pOiBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgdHlwZTogb3JpZ2luYWwudHlwZSxcclxuICAgICAgICAgICAgY29udGVudDogY29udGVudCAhPT0gdW5kZWZpbmVkID8gY29weUNvbnRlbnQoY29udGVudCkgOiBjb3B5Q29udGVudChvcmlnaW5hbC5jb250ZW50KSxcclxuICAgICAgICAgICAgc2l6ZTogb3JpZ2luYWwuc2l6ZSxcclxuICAgICAgICAgICAgc2l6ZVVuaXQ6IG9yaWdpbmFsLnNpemVVbml0LFxyXG4gICAgICAgICAgICBtaW5TaXplOiBvcmlnaW5hbC5taW5TaXplLFxyXG4gICAgICAgICAgICBtaW5TaXplVW5pdDogb3JpZ2luYWwubWluU2l6ZVVuaXQsXHJcbiAgICAgICAgICAgIGlkOiBvcmlnaW5hbC5pZCxcclxuICAgICAgICAgICAgbWF4aW1pc2VkOiBvcmlnaW5hbC5tYXhpbWlzZWQsXHJcbiAgICAgICAgICAgIGlzQ2xvc2FibGU6IG9yaWdpbmFsLmlzQ2xvc2FibGUsXHJcbiAgICAgICAgICAgIGFjdGl2ZUl0ZW1JbmRleDogb3JpZ2luYWwuYWN0aXZlSXRlbUluZGV4LFxyXG4gICAgICAgICAgICBoZWFkZXI6IFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnLkhlYWRlci5jcmVhdGVDb3B5KG9yaWdpbmFsLmhlYWRlciksXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNvcHlDb250ZW50KG9yaWdpbmFsOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWdbXSk6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZ1tdIHtcclxuICAgICAgICBjb25zdCBjb3VudCA9IG9yaWdpbmFsLmxlbmd0aDtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXk8UmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnPihjb3VudCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFtpXSA9IFJlc29sdmVkSXRlbUNvbmZpZy5jcmVhdGVDb3B5KG9yaWdpbmFsW2ldKSBhcyBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHQoKTogUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IEl0ZW1UeXBlLnN0YWNrLFxyXG4gICAgICAgICAgICBjb250ZW50OiBbXSxcclxuICAgICAgICAgICAgc2l6ZTogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLnNpemUsXHJcbiAgICAgICAgICAgIHNpemVVbml0OiBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMuc2l6ZVVuaXQsXHJcbiAgICAgICAgICAgIG1pblNpemU6IFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5taW5TaXplLFxyXG4gICAgICAgICAgICBtaW5TaXplVW5pdDogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLm1pblNpemVVbml0LFxyXG4gICAgICAgICAgICBpZDogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmlkLFxyXG4gICAgICAgICAgICBtYXhpbWlzZWQ6IFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnLmRlZmF1bHRNYXhpbWlzZWQsXHJcbiAgICAgICAgICAgIGlzQ2xvc2FibGU6IFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5pc0Nsb3NhYmxlLFxyXG4gICAgICAgICAgICBhY3RpdmVJdGVtSW5kZXg6IGRlZmF1bHRBY3RpdmVJdGVtSW5kZXgsXHJcbiAgICAgICAgICAgIGhlYWRlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyBleHRlbmRzIFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnIHtcclxuICAgIC8vIHNlZSBDb21wb25lbnRJdGVtQ29uZmlnIGZvciBjb21tZW50c1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ2NvbXBvbmVudCc7XHJcbiAgICByZWFkb25seSBjb250ZW50OiBbXTtcclxuICAgIHJlYWRvbmx5IHRpdGxlOiBzdHJpbmc7XHJcbiAgICByZWFkb25seSByZW9yZGVyRW5hYmxlZDogYm9vbGVhbjsgLy8gVGFrZXMgcHJlY2VkZW5jZSBvdmVyIExheW91dENvbmZpZy5yZW9yZGVyRW5hYmxlZC5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGNvbXBvbmVudCBhcyBzcGVjaWZpZWQgaW4gbGF5b3V0LnJlZ2lzdGVyQ29tcG9uZW50LiBNYW5kYXRvcnkgaWYgdHlwZSBpcyAnY29tcG9uZW50Jy5cclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHkgY29tcG9uZW50VHlwZTogSnNvblZhbHVlO1xyXG4gICAgcmVhZG9ubHkgY29tcG9uZW50U3RhdGU/OiBKc29uVmFsdWU7XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnIHtcclxuICAgIGV4cG9ydCBjb25zdCBkZWZhdWx0UmVvcmRlckVuYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQ29tcG9uZW50VHlwZU5hbWUoaXRlbUNvbmZpZzogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBjb21wb25lbnRUeXBlID0gaXRlbUNvbmZpZy5jb21wb25lbnRUeXBlO1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50VHlwZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudFR5cGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvcHkob3JpZ2luYWw6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyk6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IG9yaWdpbmFsLnR5cGUsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IFtdLFxyXG4gICAgICAgICAgICBzaXplOiBvcmlnaW5hbC5zaXplLFxyXG4gICAgICAgICAgICBzaXplVW5pdDogb3JpZ2luYWwuc2l6ZVVuaXQsXHJcbiAgICAgICAgICAgIG1pblNpemU6IG9yaWdpbmFsLm1pblNpemUsXHJcbiAgICAgICAgICAgIG1pblNpemVVbml0OiBvcmlnaW5hbC5taW5TaXplVW5pdCxcclxuICAgICAgICAgICAgaWQ6IG9yaWdpbmFsLmlkLFxyXG4gICAgICAgICAgICBtYXhpbWlzZWQ6IG9yaWdpbmFsLm1heGltaXNlZCxcclxuICAgICAgICAgICAgaXNDbG9zYWJsZTogb3JpZ2luYWwuaXNDbG9zYWJsZSxcclxuICAgICAgICAgICAgcmVvcmRlckVuYWJsZWQ6IG9yaWdpbmFsLnJlb3JkZXJFbmFibGVkLFxyXG4gICAgICAgICAgICB0aXRsZTogb3JpZ2luYWwudGl0bGUsXHJcbiAgICAgICAgICAgIGhlYWRlcjogUmVzb2x2ZWRIZWFkZXJlZEl0ZW1Db25maWcuSGVhZGVyLmNyZWF0ZUNvcHkob3JpZ2luYWwuaGVhZGVyKSxcclxuICAgICAgICAgICAgY29tcG9uZW50VHlwZTogb3JpZ2luYWwuY29tcG9uZW50VHlwZSxcclxuICAgICAgICAgICAgY29tcG9uZW50U3RhdGU6IGRlZXBFeHRlbmRWYWx1ZSh1bmRlZmluZWQsIG9yaWdpbmFsLmNvbXBvbmVudFN0YXRlKSBhcyBKc29uVmFsdWUsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHQoY29tcG9uZW50VHlwZTogSnNvblZhbHVlID0gJycsIGNvbXBvbmVudFN0YXRlPzogSnNvblZhbHVlLCB0aXRsZSA9ICcnKTogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnIHtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgdHlwZTogSXRlbVR5cGUuY29tcG9uZW50LFxyXG4gICAgICAgICAgICBjb250ZW50OiBbXSxcclxuICAgICAgICAgICAgc2l6ZTogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLnNpemUsXHJcbiAgICAgICAgICAgIHNpemVVbml0OiBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMuc2l6ZVVuaXQsXHJcbiAgICAgICAgICAgIG1pblNpemU6IFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5taW5TaXplLFxyXG4gICAgICAgICAgICBtaW5TaXplVW5pdDogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLm1pblNpemVVbml0LFxyXG4gICAgICAgICAgICBpZDogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmlkLFxyXG4gICAgICAgICAgICBtYXhpbWlzZWQ6IFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnLmRlZmF1bHRNYXhpbWlzZWQsXHJcbiAgICAgICAgICAgIGlzQ2xvc2FibGU6IFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5pc0Nsb3NhYmxlLFxyXG4gICAgICAgICAgICByZW9yZGVyRW5hYmxlZDogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnLmRlZmF1bHRSZW9yZGVyRW5hYmxlZCxcclxuICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgIGhlYWRlcjogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICBjb21wb25lbnRUeXBlLFxyXG4gICAgICAgICAgICBjb21wb25lbnRTdGF0ZSxcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY29weUNvbXBvbmVudFR5cGUoY29tcG9uZW50VHlwZTogSnNvblZhbHVlKTogSnNvblZhbHVlIHtcclxuICAgICAgICByZXR1cm4gZGVlcEV4dGVuZFZhbHVlKHt9LCBjb21wb25lbnRUeXBlKSBhcyBKc29uVmFsdWVcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEJhc2UgZm9yIFJvb3Qgb3IgUm93T3JDb2x1bW4gSXRlbUNvbmZpZ3NcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZyBleHRlbmRzIFJlc29sdmVkSXRlbUNvbmZpZyB7XHJcbiAgICByZWFkb25seSB0eXBlOiAncm93JyB8ICdjb2x1bW4nO1xyXG4gICAgLyoqIE5vdGUgdGhhdCBSb3dPckNvbHVtbiBSZXNvbHZlZEl0ZW1Db25maWcgY29udGVudHMsIGNhbiBjb250YWluIENvbXBvbmVudEl0ZW0gaXRlbUNvbmZpZ3MuICBIb3dldmVyXHJcbiAgICAgKiB3aGVuIENvbnRlbnRJdGVtcyBhcmUgY3JlYXRlZCwgdGhlc2UgQ29tcG9uZW50SXRlbSBpdGVtQ29uZmlncyB3aWxsIGNyZWF0ZSBhIFN0YWNrIHdpdGggYSBjaGlsZCBDb21wb25lbnRJdGVtLlxyXG4gICAgICovXHJcbiAgICByZWFkb25seSBjb250ZW50OiByZWFkb25seSAoUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZyB8IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZylbXTtcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZyB7XHJcbiAgICBleHBvcnQgdHlwZSBDaGlsZEl0ZW1Db25maWcgPSBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZyB8IFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnIHwgUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnO1xyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc0NoaWxkSXRlbUNvbmZpZyhpdGVtQ29uZmlnOiBSZXNvbHZlZEl0ZW1Db25maWcpOiBpdGVtQ29uZmlnIGlzIENoaWxkSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgc3dpdGNoIChpdGVtQ29uZmlnLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5yb3c6XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29sdW1uOlxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLnN0YWNrOlxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbXBvbmVudDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmdyb3VuZDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNhc2VFcnJvcignQ1JPQ09TUENJQ0lDMTM2ODcnLCBpdGVtQ29uZmlnLnR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29weShvcmlnaW5hbDogUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcsIGNvbnRlbnQ/OiBDaGlsZEl0ZW1Db25maWdbXSk6IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnIHtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBvcmlnaW5hbC50eXBlLFxyXG4gICAgICAgICAgICBjb250ZW50OiBjb250ZW50ICE9PSB1bmRlZmluZWQgPyBjb3B5Q29udGVudChjb250ZW50KSA6IGNvcHlDb250ZW50KG9yaWdpbmFsLmNvbnRlbnQpLFxyXG4gICAgICAgICAgICBzaXplOiBvcmlnaW5hbC5zaXplLFxyXG4gICAgICAgICAgICBzaXplVW5pdDogb3JpZ2luYWwuc2l6ZVVuaXQsXHJcbiAgICAgICAgICAgIG1pblNpemU6IG9yaWdpbmFsLm1pblNpemUsXHJcbiAgICAgICAgICAgIG1pblNpemVVbml0OiBvcmlnaW5hbC5taW5TaXplVW5pdCxcclxuICAgICAgICAgICAgaWQ6IG9yaWdpbmFsLmlkLFxyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlOiBvcmlnaW5hbC5pc0Nsb3NhYmxlLFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjb3B5Q29udGVudChvcmlnaW5hbDogcmVhZG9ubHkgQ2hpbGRJdGVtQ29uZmlnW10pOiBDaGlsZEl0ZW1Db25maWdbXSB7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSBvcmlnaW5hbC5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PENoaWxkSXRlbUNvbmZpZz4oY291bnQpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHRbaV0gPSBSZXNvbHZlZEl0ZW1Db25maWcuY3JlYXRlQ29weShvcmlnaW5hbFtpXSkgYXMgQ2hpbGRJdGVtQ29uZmlnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0KHR5cGU6ICdyb3cnIHwgJ2NvbHVtbicpOiBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgY29udGVudDogW10sXHJcbiAgICAgICAgICAgIHNpemU6IFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5zaXplLFxyXG4gICAgICAgICAgICBzaXplVW5pdDogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLnNpemVVbml0LFxyXG4gICAgICAgICAgICBtaW5TaXplOiBSZXNvbHZlZEl0ZW1Db25maWcuZGVmYXVsdHMubWluU2l6ZSxcclxuICAgICAgICAgICAgbWluU2l6ZVVuaXQ6IFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5taW5TaXplVW5pdCxcclxuICAgICAgICAgICAgaWQ6IFJlc29sdmVkSXRlbUNvbmZpZy5kZWZhdWx0cy5pZCxcclxuICAgICAgICAgICAgaXNDbG9zYWJsZTogUmVzb2x2ZWRJdGVtQ29uZmlnLmRlZmF1bHRzLmlzQ2xvc2FibGUsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb290SXRlbUNvbmZpZyBpcyB0aGUgdG9wbW9zdCBSZXNvbHZlZEl0ZW1Db25maWcgc3BlY2lmaWVkIGJ5IHRoZSB1c2VyLlxyXG4gKiBOb3RlIHRoYXQgaXQgZG9lcyBub3QgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgY29udGVudEl0ZW0uICBJdCBzcGVjaWZpZXMgdGhlIG9uZSBhbmQgb25seSBjaGlsZCBvZiB0aGUgR3JvdW5kIENvbnRlbnRJdGVtXHJcbiAqIE5vdGUgdGhhdCBSb290SXRlbUNvbmZpZyBjYW4gYmUgYW4gQ29tcG9uZW50SXRlbSBpdGVtQ29uZmlnLiAgSG93ZXZlciB3aGVuIHRoZSBHcm91bmQgQ29udGVudEl0ZW0ncyBjaGlsZCBpcyBjcmVhdGVkXHJcbiAqIGEgQ29tcG9uZW50SXRlbSBpdGVtQ29uZmlnIHdpbGwgY3JlYXRlIGEgU3RhY2sgd2l0aCBhIGNoaWxkIENvbXBvbmVudEl0ZW0uXHJcbiAqIEBwdWJsaWNcclxuKi9cclxuZXhwb3J0IHR5cGUgUmVzb2x2ZWRSb290SXRlbUNvbmZpZyA9IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnIHwgUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcgfCBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWc7XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFJlc29sdmVkUm9vdEl0ZW1Db25maWcge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvcHkoY29uZmlnOiBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnKTogUmVzb2x2ZWRSb290SXRlbUNvbmZpZyB7XHJcbiAgICAgICAgcmV0dXJuIFJlc29sdmVkSXRlbUNvbmZpZy5jcmVhdGVDb3B5KGNvbmZpZykgYXMgUmVzb2x2ZWRSb290SXRlbUNvbmZpZztcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNSb290SXRlbUNvbmZpZyhpdGVtQ29uZmlnOiBSZXNvbHZlZEl0ZW1Db25maWcpOiBpdGVtQ29uZmlnIGlzIFJlc29sdmVkUm9vdEl0ZW1Db25maWcge1xyXG4gICAgICAgIHN3aXRjaCAoaXRlbUNvbmZpZy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUucm93OlxyXG4gICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbHVtbjpcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5zdGFjazpcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5jb21wb25lbnQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5ncm91bmQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDYXNlRXJyb3IoJ0NST0NPU1BDSUNJQzEzNjg3JywgaXRlbUNvbmZpZy50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZXNvbHZlZEdyb3VuZEl0ZW1Db25maWcgZXh0ZW5kcyBSZXNvbHZlZEl0ZW1Db25maWcge1xyXG4gICAgcmVhZG9ubHkgdHlwZTogJ2dyb3VuZCc7XHJcbiAgICByZWFkb25seSBzaXplOiAxMDAsXHJcbiAgICByZWFkb25seSBzaXplVW5pdDogU2l6ZVVuaXRFbnVtLlBlcmNlbnQsXHJcbiAgICByZWFkb25seSBtaW5TaXplOiAwLFxyXG4gICAgcmVhZG9ubHkgbWluU2l6ZVVuaXQ6IFNpemVVbml0RW51bS5QaXhlbCxcclxuICAgIHJlYWRvbmx5IGlkOiAnJyxcclxuICAgIHJlYWRvbmx5IGlzQ2xvc2FibGU6IGZhbHNlLFxyXG4gICAgcmVhZG9ubHkgdGl0bGU6ICcnLFxyXG4gICAgcmVhZG9ubHkgcmVvcmRlckVuYWJsZWQ6IGZhbHNlLFxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgUmVzb2x2ZWRHcm91bmRJdGVtQ29uZmlnIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGUocm9vdEl0ZW1Db25maWc6IFJlc29sdmVkUm9vdEl0ZW1Db25maWcgfCB1bmRlZmluZWQpOlJlc29sdmVkR3JvdW5kSXRlbUNvbmZpZyB7XHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IHJvb3RJdGVtQ29uZmlnID09PSB1bmRlZmluZWQgPyBbXSA6IFtyb290SXRlbUNvbmZpZ107XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogSXRlbVR5cGUuZ3JvdW5kLFxyXG4gICAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgICBzaXplOiAxMDAsXHJcbiAgICAgICAgICAgIHNpemVVbml0OiBTaXplVW5pdEVudW0uUGVyY2VudCxcclxuICAgICAgICAgICAgbWluU2l6ZTogMCxcclxuICAgICAgICAgICAgbWluU2l6ZVVuaXQ6IFNpemVVbml0RW51bS5QaXhlbCxcclxuICAgICAgICAgICAgaWQ6ICcnLFxyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgdGl0bGU6ICcnLFxyXG4gICAgICAgICAgICByZW9yZGVyRW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlc29sdmVkTGF5b3V0Q29uZmlnIHtcclxuICAgIHJlYWRvbmx5IHJvb3Q6IFJlc29sdmVkUm9vdEl0ZW1Db25maWcgfCB1bmRlZmluZWQ7XHJcbiAgICByZWFkb25seSBvcGVuUG9wb3V0czogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWdbXTtcclxuICAgIHJlYWRvbmx5IGRpbWVuc2lvbnM6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnM7XHJcbiAgICByZWFkb25seSBzZXR0aW5nczogUmVzb2x2ZWRMYXlvdXRDb25maWcuU2V0dGluZ3M7XHJcbiAgICByZWFkb25seSBoZWFkZXI6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkhlYWRlcjtcclxuICAgIHJlYWRvbmx5IHJlc29sdmVkOiB0cnVlLFxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFJlc29sdmVkTGF5b3V0Q29uZmlnIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ3Mge1xyXG4gICAgICAgIHJlYWRvbmx5IHVzZURyYWdBbmREcm9wOiBib29sZWFuO1xyXG4gICAgICAgIHJlYWRvbmx5IGNvcHlGb3JEcmFnSW1hZ2U6IGJvb2xlYW58dW5kZWZpbmVkO1xyXG4gICAgICAgIHJlYWRvbmx5IHNob3dPbGRQb3NpdGlvbldoZW5EcmFnZ2luZzogYm9vbGVhbjtcclxuICAgICAgICByZWFkb25seSBkcmFnRGF0YU1pbWV0eXBlOiBzdHJpbmc7XHJcbiAgICAgICAgcmVhZG9ubHkgY2hlY2tHbFdpbmRvd0tleTogYm9vbGVhbjtcclxuICAgICAgICAvLyBzZWUgQ29uZmlnLlNldHRpbmdzIGZvciBjb21tZW50c1xyXG4gICAgICAgIHJlYWRvbmx5IGNvbnN0cmFpbkRyYWdUb0NvbnRhaW5lcjogYm9vbGVhbjtcclxuICAgICAgICByZWFkb25seSByZW9yZGVyRW5hYmxlZDogYm9vbGVhbjsgLy8gYWxzbyBpbiBSZXNvbHZlZEl0ZW1Db25maWcgd2hpY2ggdGFrZXMgcHJlY2VkZW5jZVxyXG4gICAgICAgIHJlYWRvbmx5IHBvcG91dFdob2xlU3RhY2s6IGJvb2xlYW47XHJcbiAgICAgICAgcmVhZG9ubHkgYmxvY2tlZFBvcG91dHNUaHJvd0Vycm9yOiBib29sZWFuO1xyXG4gICAgICAgIC8qKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdmVyc2lvbiAzLiAqL1xyXG4gICAgICAgIHJlYWRvbmx5IGNsb3NlUG9wb3V0c09uVW5sb2FkOiBib29sZWFuO1xyXG4gICAgICAgIHJlYWRvbmx5IHJlc3BvbnNpdmVNb2RlOiBSZXNwb25zaXZlTW9kZTtcclxuICAgICAgICByZWFkb25seSB0YWJPdmVybGFwQWxsb3dhbmNlOiBudW1iZXI7XHJcbiAgICAgICAgcmVhZG9ubHkgcmVvcmRlck9uVGFiTWVudUNsaWNrOiBib29sZWFuO1xyXG4gICAgICAgIHJlYWRvbmx5IHRhYkNvbnRyb2xPZmZzZXQ6IG51bWJlcjtcclxuICAgICAgICByZWFkb25seSBwb3BJbk9uQ2xvc2U6IGJvb2xlYW47XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBTZXR0aW5ncyB7XHJcbiAgICAgICAgZXhwb3J0IGNvbnN0IGRlZmF1bHRzOiBSZXNvbHZlZExheW91dENvbmZpZy5TZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgdXNlRHJhZ0FuZERyb3A6IHRydWUsXHJcbiAgICAgICAgICAgIGNvcHlGb3JEcmFnSW1hZ2U6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgc2hvd09sZFBvc2l0aW9uV2hlbkRyYWdnaW5nOiB0cnVlLFxyXG4gICAgICAgICAgICBkcmFnRGF0YU1pbWV0eXBlOiAndGV4dC9nbC1kcmFnLWRhdGEnLFxyXG4gICAgICAgICAgICBjaGVja0dsV2luZG93S2V5OiB0cnVlLFxyXG4gICAgICAgICAgICBjb25zdHJhaW5EcmFnVG9Db250YWluZXI6IHRydWUsXHJcbiAgICAgICAgICAgIHJlb3JkZXJFbmFibGVkOiB0cnVlLFxyXG4gICAgICAgICAgICBwb3BvdXRXaG9sZVN0YWNrOiBmYWxzZSxcclxuICAgICAgICAgICAgYmxvY2tlZFBvcG91dHNUaHJvd0Vycm9yOiB0cnVlLFxyXG4gICAgICAgICAgICBjbG9zZVBvcG91dHNPblVubG9hZDogdHJ1ZSxcclxuICAgICAgICAgICAgcmVzcG9uc2l2ZU1vZGU6IFJlc3BvbnNpdmVNb2RlLm5vbmUsIC8vIHdhcyBvbmxvYWRcclxuICAgICAgICAgICAgdGFiT3ZlcmxhcEFsbG93YW5jZTogMCxcclxuICAgICAgICAgICAgcmVvcmRlck9uVGFiTWVudUNsaWNrOiB0cnVlLFxyXG4gICAgICAgICAgICB0YWJDb250cm9sT2Zmc2V0OiAxMCxcclxuICAgICAgICAgICAgcG9wSW5PbkNsb3NlOiBmYWxzZSxcclxuICAgICAgICB9IGFzIGNvbnN0O1xyXG5cclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29weShvcmlnaW5hbDogU2V0dGluZ3MpOiBTZXR0aW5ncyB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB1c2VEcmFnQW5kRHJvcDogb3JpZ2luYWwudXNlRHJhZ0FuZERyb3AsXHJcbiAgICAgICAgICAgICAgICBjb3B5Rm9yRHJhZ0ltYWdlOiBvcmlnaW5hbC5jb3B5Rm9yRHJhZ0ltYWdlLFxyXG4gICAgICAgICAgICAgICAgc2hvd09sZFBvc2l0aW9uV2hlbkRyYWdnaW5nOiBvcmlnaW5hbC5zaG93T2xkUG9zaXRpb25XaGVuRHJhZ2dpbmcsXHJcbiAgICAgICAgICAgICAgICBkcmFnRGF0YU1pbWV0eXBlOiBvcmlnaW5hbC5kcmFnRGF0YU1pbWV0eXBlLFxyXG4gICAgICAgICAgICAgICAgY2hlY2tHbFdpbmRvd0tleTogb3JpZ2luYWwuY2hlY2tHbFdpbmRvd0tleSxcclxuICAgICAgICAgICAgICAgIGNvbnN0cmFpbkRyYWdUb0NvbnRhaW5lcjogb3JpZ2luYWwuY29uc3RyYWluRHJhZ1RvQ29udGFpbmVyLFxyXG4gICAgICAgICAgICAgICAgcmVvcmRlckVuYWJsZWQ6IG9yaWdpbmFsLnJlb3JkZXJFbmFibGVkLFxyXG4gICAgICAgICAgICAgICAgcG9wb3V0V2hvbGVTdGFjazogb3JpZ2luYWwucG9wb3V0V2hvbGVTdGFjayxcclxuICAgICAgICAgICAgICAgIGJsb2NrZWRQb3BvdXRzVGhyb3dFcnJvcjogb3JpZ2luYWwuYmxvY2tlZFBvcG91dHNUaHJvd0Vycm9yLFxyXG4gICAgICAgICAgICAgICAgY2xvc2VQb3BvdXRzT25VbmxvYWQ6IG9yaWdpbmFsLmNsb3NlUG9wb3V0c09uVW5sb2FkLFxyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZU1vZGU6IG9yaWdpbmFsLnJlc3BvbnNpdmVNb2RlLFxyXG4gICAgICAgICAgICAgICAgdGFiT3ZlcmxhcEFsbG93YW5jZTogb3JpZ2luYWwudGFiT3ZlcmxhcEFsbG93YW5jZSxcclxuICAgICAgICAgICAgICAgIHJlb3JkZXJPblRhYk1lbnVDbGljazogb3JpZ2luYWwucmVvcmRlck9uVGFiTWVudUNsaWNrLFxyXG4gICAgICAgICAgICAgICAgdGFiQ29udHJvbE9mZnNldDogb3JpZ2luYWwudGFiQ29udHJvbE9mZnNldCxcclxuICAgICAgICAgICAgICAgIHBvcEluT25DbG9zZTogb3JpZ2luYWwucG9wSW5PbkNsb3NlLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRGltZW5zaW9ucyB7XHJcbiAgICAgICAgLy8gc2VlIExheW91dENvbmZpZy5EaW1lbnNpb25zIGZvciBjb21tZW50c1xyXG4gICAgICAgIHJlYWRvbmx5IGJvcmRlcldpZHRoOiBudW1iZXI7XHJcbiAgICAgICAgcmVhZG9ubHkgYm9yZGVyR3JhYldpZHRoOiBudW1iZXIsXHJcbiAgICAgICAgcmVhZG9ubHkgY29udGVudEluc2V0OiBudW1iZXIsXHJcbiAgICAgICAgcmVhZG9ubHkgZGVmYXVsdE1pbkl0ZW1IZWlnaHQ6IG51bWJlcjtcclxuICAgICAgICByZWFkb25seSBkZWZhdWx0TWluSXRlbUhlaWdodFVuaXQ6IFNpemVVbml0RW51bTtcclxuICAgICAgICByZWFkb25seSBkZWZhdWx0TWluSXRlbVdpZHRoOiBudW1iZXI7XHJcbiAgICAgICAgcmVhZG9ubHkgZGVmYXVsdE1pbkl0ZW1XaWR0aFVuaXQ6IFNpemVVbml0RW51bTtcclxuICAgICAgICByZWFkb25seSBoZWFkZXJIZWlnaHQ6IG51bWJlcjtcclxuICAgICAgICByZWFkb25seSBkcmFnUHJveHlXaWR0aDogbnVtYmVyO1xyXG4gICAgICAgIHJlYWRvbmx5IGRyYWdQcm94eUhlaWdodDogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgRGltZW5zaW9ucyB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvcHkob3JpZ2luYWw6IERpbWVuc2lvbnMpOiBEaW1lbnNpb25zIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiBvcmlnaW5hbC5ib3JkZXJXaWR0aCxcclxuICAgICAgICAgICAgICAgIGJvcmRlckdyYWJXaWR0aDogb3JpZ2luYWwuYm9yZGVyR3JhYldpZHRoLFxyXG4gICAgICAgICAgICAgICAgY29udGVudEluc2V0OiBvcmlnaW5hbC5jb250ZW50SW5zZXQsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0TWluSXRlbUhlaWdodDogb3JpZ2luYWwuZGVmYXVsdE1pbkl0ZW1IZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0TWluSXRlbUhlaWdodFVuaXQ6IG9yaWdpbmFsLmRlZmF1bHRNaW5JdGVtSGVpZ2h0VW5pdCxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHRNaW5JdGVtV2lkdGg6IG9yaWdpbmFsLmRlZmF1bHRNaW5JdGVtV2lkdGgsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0TWluSXRlbVdpZHRoVW5pdDogb3JpZ2luYWwuZGVmYXVsdE1pbkl0ZW1XaWR0aFVuaXQsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJIZWlnaHQ6IG9yaWdpbmFsLmhlYWRlckhlaWdodCxcclxuICAgICAgICAgICAgICAgIGRyYWdQcm94eVdpZHRoOiBvcmlnaW5hbC5kcmFnUHJveHlXaWR0aCxcclxuICAgICAgICAgICAgICAgIGRyYWdQcm94eUhlaWdodDogb3JpZ2luYWwuZHJhZ1Byb3h5SGVpZ2h0LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnQgY29uc3QgZGVmYXVsdHM6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMgPSB7XHJcbiAgICAgICAgICAgIGJvcmRlcldpZHRoOiA1LFxyXG4gICAgICAgICAgICBib3JkZXJHcmFiV2lkdGg6IDUsXHJcbiAgICAgICAgICAgIGNvbnRlbnRJbnNldDogMCxcclxuICAgICAgICAgICAgZGVmYXVsdE1pbkl0ZW1IZWlnaHQ6IDAsXHJcbiAgICAgICAgICAgIGRlZmF1bHRNaW5JdGVtSGVpZ2h0VW5pdDogU2l6ZVVuaXRFbnVtLlBpeGVsLFxyXG4gICAgICAgICAgICBkZWZhdWx0TWluSXRlbVdpZHRoOiAxMCxcclxuICAgICAgICAgICAgZGVmYXVsdE1pbkl0ZW1XaWR0aFVuaXQ6IFNpemVVbml0RW51bS5QaXhlbCxcclxuICAgICAgICAgICAgaGVhZGVySGVpZ2h0OiAyMCxcclxuICAgICAgICAgICAgZHJhZ1Byb3h5V2lkdGg6IDMwMCxcclxuICAgICAgICAgICAgZHJhZ1Byb3h5SGVpZ2h0OiAyMDBcclxuICAgICAgICB9IGFzIGNvbnN0O1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSGVhZGVyIHtcclxuICAgICAgICByZWFkb25seSBzaG93OiBmYWxzZSB8IFNpZGU7XHJcbiAgICAgICAgcmVhZG9ubHkgcG9wb3V0OiBmYWxzZSB8IHN0cmluZztcclxuICAgICAgICByZWFkb25seSBkb2NrOiBzdHJpbmc7XHJcbiAgICAgICAgcmVhZG9ubHkgbWF4aW1pc2U6IGZhbHNlIHwgc3RyaW5nO1xyXG4gICAgICAgIHJlYWRvbmx5IG1pbmltaXNlOiBzdHJpbmc7XHJcbiAgICAgICAgcmVhZG9ubHkgY2xvc2U6IGZhbHNlIHwgc3RyaW5nO1xyXG4gICAgICAgIHJlYWRvbmx5IHRhYkRyb3Bkb3duOiBmYWxzZSB8IHN0cmluZztcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIEhlYWRlciB7XHJcbiAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvcHkob3JpZ2luYWw6IEhlYWRlcik6IEhlYWRlciB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzaG93OiBvcmlnaW5hbC5zaG93LFxyXG4gICAgICAgICAgICAgICAgcG9wb3V0OiBvcmlnaW5hbC5wb3BvdXQsXHJcbiAgICAgICAgICAgICAgICBkb2NrOiBvcmlnaW5hbC5kb2NrLFxyXG4gICAgICAgICAgICAgICAgY2xvc2U6IG9yaWdpbmFsLmNsb3NlLFxyXG4gICAgICAgICAgICAgICAgbWF4aW1pc2U6IG9yaWdpbmFsLm1heGltaXNlLFxyXG4gICAgICAgICAgICAgICAgbWluaW1pc2U6IG9yaWdpbmFsLm1pbmltaXNlLFxyXG4gICAgICAgICAgICAgICAgdGFiRHJvcGRvd246IG9yaWdpbmFsLnRhYkRyb3Bkb3duLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnQgY29uc3QgZGVmYXVsdHM6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkhlYWRlciA9IHtcclxuICAgICAgICAgICAgc2hvdzogU2lkZS50b3AsXHJcbiAgICAgICAgICAgIHBvcG91dDogJ29wZW4gaW4gbmV3IHdpbmRvdycsXHJcbiAgICAgICAgICAgIGRvY2s6ICdkb2NrJyxcclxuICAgICAgICAgICAgbWF4aW1pc2U6ICdtYXhpbWlzZScsXHJcbiAgICAgICAgICAgIG1pbmltaXNlOiAnbWluaW1pc2UnLFxyXG4gICAgICAgICAgICBjbG9zZTogJ2Nsb3NlJyxcclxuICAgICAgICAgICAgdGFiRHJvcGRvd246ICdhZGRpdGlvbmFsIHRhYnMnXHJcbiAgICAgICAgfSBhcyBjb25zdDtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNQb3BvdXQoY29uZmlnOiBSZXNvbHZlZExheW91dENvbmZpZyk6IGNvbmZpZyBpcyBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZyB7XHJcbiAgICAgICAgcmV0dXJuICdwYXJlbnRJZCcgaW4gY29uZmlnO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0KCk6IFJlc29sdmVkTGF5b3V0Q29uZmlnIHtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IFJlc29sdmVkTGF5b3V0Q29uZmlnID0ge1xyXG4gICAgICAgICAgICByb290OiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIG9wZW5Qb3BvdXRzOiBbXSxcclxuICAgICAgICAgICAgZGltZW5zaW9uczogUmVzb2x2ZWRMYXlvdXRDb25maWcuRGltZW5zaW9ucy5kZWZhdWx0cyxcclxuICAgICAgICAgICAgc2V0dGluZ3M6IFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzLmRlZmF1bHRzLFxyXG4gICAgICAgICAgICBoZWFkZXI6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkhlYWRlci5kZWZhdWx0cyxcclxuICAgICAgICAgICAgcmVzb2x2ZWQ6IHRydWUsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvcHkoY29uZmlnOiBSZXNvbHZlZExheW91dENvbmZpZyk6IFJlc29sdmVkTGF5b3V0Q29uZmlnIHtcclxuICAgICAgICBpZiAoaXNQb3BvdXQoY29uZmlnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcuY3JlYXRlQ29weShjb25maWcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogUmVzb2x2ZWRMYXlvdXRDb25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICByb290OiBjb25maWcucm9vdCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogUmVzb2x2ZWRSb290SXRlbUNvbmZpZy5jcmVhdGVDb3B5KGNvbmZpZy5yb290KSxcclxuICAgICAgICAgICAgICAgIG9wZW5Qb3BvdXRzOiBSZXNvbHZlZExheW91dENvbmZpZy5jb3B5T3BlblBvcG91dHMoY29uZmlnLm9wZW5Qb3BvdXRzKSxcclxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiBSZXNvbHZlZExheW91dENvbmZpZy5TZXR0aW5ncy5jcmVhdGVDb3B5KGNvbmZpZy5zZXR0aW5ncyksXHJcbiAgICAgICAgICAgICAgICBkaW1lbnNpb25zOiBSZXNvbHZlZExheW91dENvbmZpZy5EaW1lbnNpb25zLmNyZWF0ZUNvcHkoY29uZmlnLmRpbWVuc2lvbnMpLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiBSZXNvbHZlZExheW91dENvbmZpZy5IZWFkZXIuY3JlYXRlQ29weShjb25maWcuaGVhZGVyKSxcclxuICAgICAgICAgICAgICAgIHJlc29sdmVkOiBjb25maWcucmVzb2x2ZWQsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNvcHlPcGVuUG9wb3V0cyhvcmlnaW5hbDogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWdbXSk6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnW10ge1xyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gb3JpZ2luYWwubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheTxSZXNvbHZlZFBvcG91dExheW91dENvbmZpZz4oY291bnQpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHRbaV0gPSBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZy5jcmVhdGVDb3B5KG9yaWdpbmFsW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRha2VzIGEgR29sZGVuTGF5b3V0IGNvbmZpZ3VyYXRpb24gb2JqZWN0IGFuZFxyXG4gICAgICogcmVwbGFjZXMgaXRzIGtleXMgYW5kIHZhbHVlcyByZWN1cnNpdmVseSB3aXRoXHJcbiAgICAgKiBvbmUgbGV0dGVyIGNvdW50ZXJwYXJ0c1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gbWluaWZ5Q29uZmlnKGxheW91dENvbmZpZzogUmVzb2x2ZWRMYXlvdXRDb25maWcpOiBSZXNvbHZlZExheW91dENvbmZpZyB7XHJcbiAgICAgICAgcmV0dXJuIENvbmZpZ01pbmlmaWVyLnRyYW5zbGF0ZU9iamVjdChsYXlvdXRDb25maWcsIHRydWUpIGFzIFJlc29sdmVkTGF5b3V0Q29uZmlnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGFrZXMgYSBjb25maWd1cmF0aW9uIE9iamVjdCB0aGF0IHdhcyBwcmV2aW91c2x5IG1pbmlmaWVkXHJcbiAgICAgKiB1c2luZyBtaW5pZnlDb25maWcgYW5kIHJldHVybnMgaXRzIG9yaWdpbmFsIHZlcnNpb25cclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHVubWluaWZ5Q29uZmlnKG1pbmlmaWVkQ29uZmlnOiBSZXNvbHZlZExheW91dENvbmZpZyk6IFJlc29sdmVkTGF5b3V0Q29uZmlnIHtcclxuICAgICAgICByZXR1cm4gQ29uZmlnTWluaWZpZXIudHJhbnNsYXRlT2JqZWN0KG1pbmlmaWVkQ29uZmlnLCBmYWxzZSkgYXMgUmVzb2x2ZWRMYXlvdXRDb25maWc7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcgZXh0ZW5kcyBSZXNvbHZlZExheW91dENvbmZpZyB7XHJcbiAgICByZWFkb25seSBwYXJlbnRJZDogc3RyaW5nIHwgbnVsbDtcclxuICAgIHJlYWRvbmx5IGluZGV4SW5QYXJlbnQ6IG51bWJlciB8IG51bGw7XHJcbiAgICByZWFkb25seSB3aW5kb3c6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnLldpbmRvdztcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZyB7XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIFdpbmRvdyB7XHJcbiAgICAgICAgcmVhZG9ubHkgd2lkdGg6IG51bWJlciB8IG51bGwsXHJcbiAgICAgICAgcmVhZG9ubHkgaGVpZ2h0OiBudW1iZXIgfCBudWxsLFxyXG4gICAgICAgIHJlYWRvbmx5IGxlZnQ6IG51bWJlciB8IG51bGwsXHJcbiAgICAgICAgcmVhZG9ubHkgdG9wOiBudW1iZXIgfCBudWxsLFxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBuYW1lc3BhY2UgV2luZG93IHtcclxuICAgICAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29weShvcmlnaW5hbDogV2luZG93KTogV2luZG93IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBvcmlnaW5hbC53aWR0aCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogb3JpZ2luYWwuaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgbGVmdDogb3JpZ2luYWwubGVmdCxcclxuICAgICAgICAgICAgICAgIHRvcDogb3JpZ2luYWwudG9wLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBvcnQgY29uc3QgZGVmYXVsdHM6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnLldpbmRvdyA9IHtcclxuICAgICAgICAgICAgd2lkdGg6IG51bGwsXHJcbiAgICAgICAgICAgIGhlaWdodDogbnVsbCxcclxuICAgICAgICAgICAgbGVmdDogbnVsbCxcclxuICAgICAgICAgICAgdG9wOiBudWxsLFxyXG4gICAgICAgIH0gYXMgY29uc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvcHkob3JpZ2luYWw6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnKTogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcgPSB7XHJcbiAgICAgICAgICAgIHJvb3Q6IG9yaWdpbmFsLnJvb3QgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFJlc29sdmVkUm9vdEl0ZW1Db25maWcuY3JlYXRlQ29weShvcmlnaW5hbC5yb290KSxcclxuICAgICAgICAgICAgb3BlblBvcG91dHM6IFJlc29sdmVkTGF5b3V0Q29uZmlnLmNvcHlPcGVuUG9wb3V0cyhvcmlnaW5hbC5vcGVuUG9wb3V0cyksXHJcbiAgICAgICAgICAgIHNldHRpbmdzOiBSZXNvbHZlZExheW91dENvbmZpZy5TZXR0aW5ncy5jcmVhdGVDb3B5KG9yaWdpbmFsLnNldHRpbmdzKSxcclxuICAgICAgICAgICAgZGltZW5zaW9uczogUmVzb2x2ZWRMYXlvdXRDb25maWcuRGltZW5zaW9ucy5jcmVhdGVDb3B5KG9yaWdpbmFsLmRpbWVuc2lvbnMpLFxyXG4gICAgICAgICAgICBoZWFkZXI6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkhlYWRlci5jcmVhdGVDb3B5KG9yaWdpbmFsLmhlYWRlciksXHJcbiAgICAgICAgICAgIHBhcmVudElkOiBvcmlnaW5hbC5wYXJlbnRJZCxcclxuICAgICAgICAgICAgaW5kZXhJblBhcmVudDogb3JpZ2luYWwuaW5kZXhJblBhcmVudCxcclxuICAgICAgICAgICAgd2luZG93OiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZy5XaW5kb3cuY3JlYXRlQ29weShvcmlnaW5hbC53aW5kb3cpLFxyXG4gICAgICAgICAgICByZXNvbHZlZDogb3JpZ2luYWwucmVzb2x2ZWQsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50SXRlbUNvbmZpZywgSXRlbUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9jb25maWcnO1xyXG5pbXBvcnQgeyBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcgfSBmcm9tICcuLi9jb25maWcvcmVzb2x2ZWQtY29uZmlnJztcclxuaW1wb3J0IHsgVGFiIH0gZnJvbSAnLi4vY29udHJvbHMvdGFiJztcclxuaW1wb3J0IHsgQXNzZXJ0RXJyb3IsIFVuZXhwZWN0ZWROdWxsRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBDb21wb25lbnRJdGVtIH0gZnJvbSAnLi4vaXRlbXMvY29tcG9uZW50LWl0ZW0nO1xyXG5pbXBvcnQgeyBDb250ZW50SXRlbSB9IGZyb20gJy4uL2l0ZW1zL2NvbnRlbnQtaXRlbSc7XHJcbmltcG9ydCB7IExheW91dE1hbmFnZXIgfSBmcm9tICcuLi9sYXlvdXQtbWFuYWdlcic7XHJcbmltcG9ydCB7IERvbUNvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL2RvbS1jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICcuLi91dGlscy9ldmVudC1lbWl0dGVyJztcclxuaW1wb3J0IHsgc2V0RWxlbWVudERpc3BsYXlWaXNpYmlsaXR5IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnXHJcbmltcG9ydCB7IEpzb25WYWx1ZSwgTG9naWNhbFpJbmRleCwgTG9naWNhbFpJbmRleFRvRGVmYXVsdE1hcCB9IGZyb20gJy4uL3V0aWxzL3R5cGVzJztcclxuaW1wb3J0IHsgZGVlcEV4dGVuZCwgc2V0RWxlbWVudEhlaWdodCwgc2V0RWxlbWVudFdpZHRoIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGNsYXNzIENvbXBvbmVudENvbnRhaW5lciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9jb21wb25lbnRUeXBlOiBKc29uVmFsdWU7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9oYW5kbGU6IENvbXBvbmVudENvbnRhaW5lci5IYW5kbGU7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF93aWR0aDogbnVtYmVyO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9pc0Nsb3NhYmxlO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfaW5pdGlhbFN0YXRlOiBKc29uVmFsdWUgfCB1bmRlZmluZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9zdGF0ZTogSnNvblZhbHVlIHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfdmlzaWJsZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2lzU2hvd25XaXRoWmVyb0RpbWVuc2lvbnM7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF90YWI6IFRhYjtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3N0YWNrTWF4aW1pc2VkID0gZmFsc2U7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9sb2dpY2FsWkluZGV4OiBMb2dpY2FsWkluZGV4O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfZWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgc3RhdGVSZXF1ZXN0RXZlbnQ6IENvbXBvbmVudENvbnRhaW5lci5TdGF0ZVJlcXVlc3RFdmVudEhhbmRsZXIgfCB1bmRlZmluZWQ7XHJcbiAgICB2aXJ0dWFsUmVjdGluZ1JlcXVpcmVkRXZlbnQ6IENvbXBvbmVudENvbnRhaW5lci5WaXJ0dWFsUmVjdGluZ1JlcXVpcmVkRXZlbnQgfCB1bmRlZmluZWQ7IC8vIERFUFJFQ0FURURcclxuICAgIG5vdGlmeVJlc2l6ZTogQ29tcG9uZW50Q29udGFpbmVyLk5vdGlmeVJlc2l6ZUhhbmRsZXIgfCB1bmRlZmluZWQ7XHJcbiAgICB2aXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnQ6IENvbXBvbmVudENvbnRhaW5lci5WaXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnQgfCB1bmRlZmluZWQ7XHJcbiAgICB2aXJ0dWFsWkluZGV4Q2hhbmdlUmVxdWlyZWRFdmVudDogQ29tcG9uZW50Q29udGFpbmVyLlZpcnR1YWxaSW5kZXhDaGFuZ2VSZXF1aXJlZEV2ZW50IHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIGdldCB3aWR0aCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fd2lkdGg7IH1cclxuICAgIGdldCBoZWlnaHQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2hlaWdodDsgfVxyXG4gICAgZ2V0IHBhcmVudCgpOiBDb21wb25lbnRJdGVtIHsgcmV0dXJuIHRoaXMuX3BhcmVudDsgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChDb21wb25lbnRDb250YWluZXI6Y2xhc3MpLmNvbXBvbmVudFR5cGV9ICovXHJcbiAgICBnZXQgY29tcG9uZW50TmFtZSgpOiBKc29uVmFsdWUgeyByZXR1cm4gdGhpcy5fY29tcG9uZW50VHlwZTsgfVxyXG4gICAgZ2V0IGNvbXBvbmVudFR5cGUoKTogSnNvblZhbHVlIHsgcmV0dXJuIHRoaXMuX2NvbXBvbmVudFR5cGU7IH1cclxuICAgIGdldCBoYW5kbGUoKTogQ29tcG9uZW50Q29udGFpbmVyLkhhbmRsZSB7IHJldHVybiB0aGlzLl9oYW5kbGU7IH1cclxuICAgIGdldCB2aXJ0dWFsKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fZWxlbWVudCA9PT0gdW5kZWZpbmVkOyB9XHJcbiAgICBnZXQgdGFiKCk6IFRhYiB7IHJldHVybiB0aGlzLl90YWI7IH1cclxuICAgIGdldCB0aXRsZSgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5fcGFyZW50LnRpdGxlOyB9XHJcbiAgICBnZXQgbGF5b3V0TWFuYWdlcigpOiBMYXlvdXRNYW5hZ2VyIHsgcmV0dXJuIHRoaXMuX2xheW91dE1hbmFnZXI7IH1cclxuICAgIGdldCBpc0hpZGRlbigpOiBib29sZWFuIHsgcmV0dXJuICF0aGlzLl92aXNpYmxlOyB9XHJcbiAgICBnZXQgdmlzaWJsZSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX3Zpc2libGU7IH1cclxuICAgIGdldCBzdGF0ZSgpOiBKc29uVmFsdWUgfCB1bmRlZmluZWQgeyByZXR1cm4gdGhpcy5fc3RhdGU7IH1cclxuICAgIC8qKiBSZXR1cm4gdGhlIGluaXRpYWwgY29tcG9uZW50IHN0YXRlICovXHJcbiAgICBnZXQgaW5pdGlhbFN0YXRlKCk6IEpzb25WYWx1ZSB8IHVuZGVmaW5lZCB7IHJldHVybiB0aGlzLl9pbml0aWFsU3RhdGU7IH1cclxuICAgIC8qKiBUaGUgaW5uZXIgRE9NIGVsZW1lbnQgd2hlcmUgdGhlIGNvbnRhaW5lcidzIGNvbnRlbnQgaXMgaW50ZW5kZWQgdG8gbGl2ZSBpbiAqL1xyXG4gICAgZ2V0IGVsZW1lbnQoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQgeyByZXR1cm4gdGhpcy5fZWxlbWVudDsgfVxyXG4gICAgcmVhZG9ubHkgY29udGVudEVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9jb25maWc6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfcGFyZW50OiBDb21wb25lbnRJdGVtLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9sYXlvdXRNYW5hZ2VyOiBMYXlvdXRNYW5hZ2VyLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF91cGRhdGVJdGVtQ29uZmlnRXZlbnQ6IENvbXBvbmVudENvbnRhaW5lci5VcGRhdGVJdGVtQ29uZmlnRXZlbnRIYW5kbGVyLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9zaG93RXZlbnQ6IENvbXBvbmVudENvbnRhaW5lci5TaG93RXZlbnRIYW5kbGVyLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9oaWRlRXZlbnQ6IENvbXBvbmVudENvbnRhaW5lci5IaWRlRXZlbnRIYW5kbGVyLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9mb2N1c0V2ZW50OiBDb21wb25lbnRDb250YWluZXIuRm9jdXNFdmVudEhhbmRsZXIsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2JsdXJFdmVudDogQ29tcG9uZW50Q29udGFpbmVyLkJsdXJFdmVudEhhbmRsZXIsXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gX2xheW91dE1hbmFnZXIuY3JlYXRlQ29tcG9uZW50RWxlbWVudChfY29uZmlnLCB0aGlzKTtcclxuICAgICAgICBpZiAodGhpcy5fZWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Db21wb25lbnQpO1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmxtX2NvbnRlbnRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsZW1lbnQgPSBjb250ZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPyBjb250ZW50XHJcbiAgICAgICAgICAgICAgICA6IHRoaXMuX2VsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3dpZHRoID0gMDtcclxuICAgICAgICB0aGlzLl9oZWlnaHQgPSAwO1xyXG4gICAgICAgIHRoaXMuX3Zpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2lzU2hvd25XaXRoWmVyb0RpbWVuc2lvbnMgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLl9jb21wb25lbnRUeXBlID0gX2NvbmZpZy5jb21wb25lbnRUeXBlO1xyXG4gICAgICAgIHRoaXMuX2lzQ2xvc2FibGUgPSBfY29uZmlnLmlzQ2xvc2FibGU7XHJcbiAgICAgICAgdGhpcy5faW5pdGlhbFN0YXRlID0gX2NvbmZpZy5jb21wb25lbnRTdGF0ZTtcclxuICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuX2luaXRpYWxTdGF0ZTtcclxuXHJcbiAgICAgICAgdGhpcy5faGFuZGxlID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmJpbmRDb21wb25lbnQodGhpcywgX2NvbmZpZyk7XHJcblxyXG4gICAgICAgIC8vRklYTUU6dGhpcy51cGRhdGVFbGVtZW50UG9zaXRpb25Qcm9wZXJ0eUZyb21Cb3VuZENvbXBvbmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZWxlYXNlQ29tcG9uZW50KCk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZVJlcXVlc3RFdmVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmVtaXQoJ2Rlc3Ryb3knKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoQ29tcG9uZW50Q29udGFpbmVyOmNsYXNzKS5lbGVtZW50IH0gKi9cclxuICAgIGdldEVsZW1lbnQoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGlkZXMgdGhlIGNvbnRhaW5lcidzIGNvbXBvbmVudCBpdGVtIChhbmQgaGVuY2UsIHRoZSBjb250YWluZXIpIGlmIG5vdCBhbHJlYWR5IGhpZGRlbi5cclxuICAgICAqIEVtaXRzIGhpZGUgZXZlbnQgcHJpb3IgdG8gaGlkaW5nIHRoZSBjb250YWluZXIuXHJcbiAgICAgKi9cclxuICAgIGhpZGUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5faGlkZUV2ZW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93cyB0aGUgY29udGFpbmVyJ3MgY29tcG9uZW50IGl0ZW0gKGFuZCBoZW5jZSwgdGhlIGNvbnRhaW5lcikgaWYgbm90IHZpc2libGUuXHJcbiAgICAgKiBFbWl0cyBzaG93IGV2ZW50IHByaW9yIHRvIGhpZGluZyB0aGUgY29udGFpbmVyLlxyXG4gICAgICovXHJcbiAgICBzaG93KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3Nob3dFdmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRm9jdXMgdGhpcyBjb21wb25lbnQgaW4gTGF5b3V0LlxyXG4gICAgICovXHJcbiAgICBmb2N1cyhzdXBwcmVzc0V2ZW50ID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9mb2N1c0V2ZW50KHN1cHByZXNzRXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGZvY3VzIGZyb20gdGhpcyBjb21wb25lbnQgaW4gTGF5b3V0LlxyXG4gICAgICovXHJcbiAgICBibHVyKHN1cHByZXNzRXZlbnQgPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2JsdXJFdmVudChzdXBwcmVzc0V2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgc2l6ZSBmcm9tIHdpdGhpbiB0aGUgY29udGFpbmVyLiBUcmF2ZXJzZXMgdXBcclxuICAgICAqIHRoZSBpdGVtIHRyZWUgdW50aWwgaXQgZmluZHMgYSByb3cgb3IgY29sdW1uIGVsZW1lbnRcclxuICAgICAqIGFuZCByZXNpemVzIGl0cyBpdGVtcyBhY2NvcmRpbmdseS5cclxuICAgICAqXHJcbiAgICAgKiBJZiB0aGlzIGNvbnRhaW5lciBpc24ndCBhIGRlc2NlbmRhbnQgb2YgYSByb3cgb3IgY29sdW1uXHJcbiAgICAgKiBpdCByZXR1cm5zIGZhbHNlXHJcbiAgICAgKiBAcGFyYW0gd2lkdGggLSBUaGUgbmV3IHdpZHRoIGluIHBpeGVsXHJcbiAgICAgKiBAcGFyYW0gaGVpZ2h0IC0gVGhlIG5ldyBoZWlnaHQgaW4gcGl4ZWxcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyByZXNpemVTdWNjZXNmdWxcclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgc2V0U2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGxldCBhbmNlc3Rvckl0ZW06IENvbnRlbnRJdGVtIHwgbnVsbCA9IHRoaXMuX3BhcmVudDtcclxuICAgICAgICBpZiAoYW5jZXN0b3JJdGVtLmlzQ29sdW1uIHx8IGFuY2VzdG9ySXRlbS5pc1JvdyB8fCBhbmNlc3Rvckl0ZW0ucGFyZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignSUNTU1BSQycsICdDb21wb25lbnRDb250YWluZXIgY2Fubm90IGhhdmUgUm93Q29sdW1uIFBhcmVudCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBhbmNlc3RvckNoaWxkSXRlbTogQ29udGVudEl0ZW07XHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIGFuY2VzdG9yQ2hpbGRJdGVtID0gYW5jZXN0b3JJdGVtO1xyXG4gICAgICAgICAgICAgICAgYW5jZXN0b3JJdGVtID0gYW5jZXN0b3JJdGVtLnBhcmVudDtcclxuICAgICAgICAgICAgfSB3aGlsZSAoYW5jZXN0b3JJdGVtICE9PSBudWxsICYmICFhbmNlc3Rvckl0ZW0uaXNDb2x1bW4gJiYgIWFuY2VzdG9ySXRlbS5pc1Jvdyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoYW5jZXN0b3JJdGVtID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBubyBSb3cgb3IgQ29sdW1uIGZvdW5kXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhbmNlc3Rvckl0ZW0gaXMgUm93IG9yIENvbHVtblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gYW5jZXN0b3JJdGVtLmlzQ29sdW1uID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFNpemUgPSB0aGlzW2RpcmVjdGlvbl07XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNpemUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignSUNTU0NTMTExOTQnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3U2l6ZSA9IGRpcmVjdGlvbiA9PT0gJ2hlaWdodCcgPyBoZWlnaHQgOiB3aWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG90YWxQaXhlbCA9IGN1cnJlbnRTaXplICogKDEgLyAoYW5jZXN0b3JDaGlsZEl0ZW0uc2l6ZSAvIDEwMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSAobmV3U2l6ZSAvIHRvdGFsUGl4ZWwpICogMTAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gKGFuY2VzdG9yQ2hpbGRJdGVtLnNpemUgLSBwZXJjZW50YWdlKSAvIChhbmNlc3Rvckl0ZW0uY29udGVudEl0ZW1zLmxlbmd0aCAtIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFuY2VzdG9ySXRlbS5jb250ZW50SXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYW5jZXN0b3JJdGVtQ29udGVudEl0ZW0gPSBhbmNlc3Rvckl0ZW0uY29udGVudEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5jZXN0b3JJdGVtQ29udGVudEl0ZW0gPT09IGFuY2VzdG9yQ2hpbGRJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3Rvckl0ZW1Db250ZW50SXRlbS5zaXplID0gcGVyY2VudGFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ySXRlbUNvbnRlbnRJdGVtLnNpemUgKz0gZGVsdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ySXRlbS51cGRhdGVTaXplKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2VzIHRoZSBjb250YWluZXIgaWYgaXQgaXMgY2xvc2FibGUuIENhbiBiZSBjYWxsZWQgYnlcclxuICAgICAqIGJvdGggdGhlIGNvbXBvbmVudCB3aXRoaW4gYXQgYXMgd2VsbCBhcyB0aGUgY29udGVudEl0ZW0gY29udGFpbmluZ1xyXG4gICAgICogaXQuIEVtaXRzIGEgY2xvc2UgZXZlbnQgYmVmb3JlIHRoZSBjb250YWluZXIgaXRzZWxmIGlzIGNsb3NlZC5cclxuICAgICAqL1xyXG4gICAgY2xvc2UoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzQ2xvc2FibGUpIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdjbG9zZScpO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFJlcGxhY2VzIGNvbXBvbmVudCB3aXRob3V0IGFmZmVjdGluZyBsYXlvdXQgKi9cclxuICAgIHJlcGxhY2VDb21wb25lbnQoaXRlbUNvbmZpZzogQ29tcG9uZW50SXRlbUNvbmZpZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmVsZWFzZUNvbXBvbmVudCgpO1xyXG5cclxuICAgICAgICBpZiAoIUl0ZW1Db25maWcuaXNDb21wb25lbnQoaXRlbUNvbmZpZykpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXBsYWNlQ29tcG9uZW50IG5vdCBwYXNzZWQgYSBjb21wb25lbnQgSXRlbUNvbmZpZycpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gQ29tcG9uZW50SXRlbUNvbmZpZy5yZXNvbHZlKGl0ZW1Db25maWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5faW5pdGlhbFN0YXRlID0gY29uZmlnLmNvbXBvbmVudFN0YXRlO1xyXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuX2luaXRpYWxTdGF0ZTtcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50VHlwZSA9IGNvbmZpZy5jb21wb25lbnRUeXBlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlSXRlbUNvbmZpZ0V2ZW50KGNvbmZpZyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGUgPSB0aGlzLmxheW91dE1hbmFnZXIuYmluZENvbXBvbmVudCh0aGlzLCBjb25maWcpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRQb3NpdGlvblByb3BlcnR5RnJvbUJvdW5kQ29tcG9uZW50KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy52aXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnQodGhpcywgdGhpcy5fdmlzaWJsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMudmlydHVhbFJlY3RpbmdSZXF1aXJlZEV2ZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xheW91dE1hbmFnZXIuYmVmb3JlVmlydHVhbFJlY3RpbmdFdmVudD8uKDEpO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpcnR1YWxSZWN0aW5nUmVxdWlyZWRFdmVudCh0aGlzLCB0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0TWFuYWdlci5hZnRlclZpcnR1YWxSZWN0aW5nRXZlbnQ/LigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2V0QmFzZUxvZ2ljYWxaSW5kZXgoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnc3RhdGVDaGFuZ2VkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgaW5pdGlhbCBjb21wb25lbnQgc3RhdGUgb3IgdGhlIGxhdGVzdCBwYXNzZWQgaW4gc2V0U3RhdGUoKVxyXG4gICAgICogQHJldHVybnMgc3RhdGVcclxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgKENvbXBvbmVudENvbnRhaW5lcjpjbGFzcykuaW5pdGlhbFN0YXRlfVxyXG4gICAgICovXHJcbiAgICBnZXRTdGF0ZSgpOiBKc29uVmFsdWUgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1lcmdlcyB0aGUgcHJvdmlkZWQgc3RhdGUgaW50byB0aGUgY3VycmVudCBvbmVcclxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgKENvbXBvbmVudENvbnRhaW5lcjpjbGFzcykuc3RhdGVSZXF1ZXN0RXZlbnR9XHJcbiAgICAgKi9cclxuICAgIGV4dGVuZFN0YXRlKHN0YXRlOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuZGVkU3RhdGUgPSBkZWVwRXh0ZW5kKHRoaXMuX3N0YXRlIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBzdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShleHRlbmRlZFN0YXRlIGFzIEpzb25WYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBjb21wb25lbnQgc3RhdGVcclxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgKENvbXBvbmVudENvbnRhaW5lcjpjbGFzcykuc3RhdGVSZXF1ZXN0RXZlbnR9XHJcbiAgICAgKi9cclxuICAgIHNldFN0YXRlKHN0YXRlOiBKc29uVmFsdWUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zdGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgIHRoaXMuX3BhcmVudC5lbWl0QmFzZUJ1YmJsaW5nRXZlbnQoJ3N0YXRlQ2hhbmdlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0J3MgdGhlIGNvbXBvbmVudHMgdGl0bGVcclxuICAgICAqL1xyXG4gICAgc2V0VGl0bGUodGl0bGU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3BhcmVudC5zZXRUaXRsZSh0aXRsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGl0bGVSZW5kZXJlcihyZW5kZXJlcjogVGFiLlRpdGxlUmVuZGVyZXIgfCB1bmRlZmluZWQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9wYXJlbnQuc2V0VGl0bGVSZW5kZXJlcihyZW5kZXJlcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc2V0VGFiKHRhYjogVGFiKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdGFiID0gdGFiO1xyXG4gICAgICAgIHRoaXMuZW1pdCgndGFiJywgdGFiKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHNldFZpc2liaWxpdHkodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy52aXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnZpcnR1YWxWaXNpYmlsaXR5Q2hhbmdlUmVxdWlyZWRFdmVudCh0aGlzLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9lbGVtZW50KVxyXG4gICAgICAgICAgICBzZXRFbGVtZW50RGlzcGxheVZpc2liaWxpdHkodGhpcy5fZWxlbWVudCwgdmFsdWUpO1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Zpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2hlaWdodCA9PT0gMCAmJiB0aGlzLl93aWR0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzU2hvd25XaXRoWmVyb0RpbWVuc2lvbnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc1Nob3duV2l0aFplcm9EaW1lbnNpb25zID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQudXBkYXRlTm9kZVNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRTaG93KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNTaG93bldpdGhaZXJvRGltZW5zaW9ucyAmJiAodGhpcy5faGVpZ2h0ICE9PSAwIHx8IHRoaXMuX3dpZHRoICE9PSAwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzU2hvd25XaXRoWmVyb0RpbWVuc2lvbnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC51cGRhdGVOb2RlU2l6ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFNob3coKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl92aXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1Nob3duV2l0aFplcm9EaW1lbnNpb25zID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRIaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2V0QmFzZUxvZ2ljYWxaSW5kZXgoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRMb2dpY2FsWkluZGV4KExvZ2ljYWxaSW5kZXguYmFzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TG9naWNhbFpJbmRleChsb2dpY2FsWkluZGV4OiBMb2dpY2FsWkluZGV4KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGxvZ2ljYWxaSW5kZXggIT09IHRoaXMuX2xvZ2ljYWxaSW5kZXgpIHtcclxuICAgICAgICAgICAgdGhpcy5fbG9naWNhbFpJbmRleCA9IGxvZ2ljYWxaSW5kZXg7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeVZpcnR1YWxaSW5kZXhDaGFuZ2VSZXF1aXJlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgY29udGFpbmVyJ3Mgc2l6ZSwgYnV0IGNvbnNpZGVyZWQgdGVtcG9yYXJ5IChmb3IgZHJhZ2dpbmcpXHJcbiAgICAgKiBzbyBkb24ndCBlbWl0IGFueSBldmVudHMuXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgZW50ZXJEcmFnTW9kZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIGlmICh0aGlzLl9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHNldEVsZW1lbnRXaWR0aCh0aGlzLl9lbGVtZW50LCB3aWR0aCk7XHJcbiAgICAgICAgICAgIHNldEVsZW1lbnRIZWlnaHQodGhpcy5fZWxlbWVudCwgaGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2V0TG9naWNhbFpJbmRleChMb2dpY2FsWkluZGV4LmRyYWcpO1xyXG5cclxuICAgICAgICB0aGlzLmRyYWcoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleGl0RHJhZ01vZGUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRCYXNlTG9naWNhbFpJbmRleCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGVudGVyU3RhY2tNYXhpbWlzZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fc3RhY2tNYXhpbWlzZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc2V0TG9naWNhbFpJbmRleChMb2dpY2FsWkluZGV4LnN0YWNrTWF4aW1pc2VkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleGl0U3RhY2tNYXhpbWlzZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRCYXNlTG9naWNhbFpJbmRleCgpO1xyXG4gICAgICAgIHRoaXMuX3N0YWNrTWF4aW1pc2VkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZHJhZygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy52aXJ0dWFsUmVjdGluZ1JlcXVpcmVkRXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9sYXlvdXRNYW5hZ2VyLmJlZm9yZVZpcnR1YWxSZWN0aW5nRXZlbnQ/LigxKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlydHVhbFJlY3RpbmdSZXF1aXJlZEV2ZW50KHRoaXMsIHRoaXMuX3dpZHRoLCB0aGlzLl9oZWlnaHQpO1xyXG4gICAgICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGF5b3V0TWFuYWdlci5hZnRlclZpcnR1YWxSZWN0aW5nRXZlbnQ/LigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIG5vdGlmeVZpcnR1YWxSZWN0aW5nUmVxdWlyZWQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMudmlydHVhbFJlY3RpbmdSZXF1aXJlZEV2ZW50ICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgfHwgdGhpcy5ub3RpZnlSZXNpemUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmlydHVhbFJlY3RpbmdSZXF1aXJlZEV2ZW50KVxyXG4gICAgICAgICAgICAgICAgdGhpcy52aXJ0dWFsUmVjdGluZ1JlcXVpcmVkRXZlbnQodGhpcywgdGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLnBhcmVudC5lbGVtZW50O1xyXG4gICAgICAgICAgICAvL2xldCBsZWZ0ID0gMCwgdG9wID0gMCwgd2lkdGggPSAwLCBoZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ub3RpZnlSZXNpemUgJiYgZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYm91bmRzID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5UmVzaXplKHRoaXMsIGJvdW5kcy5sZWZ0LCBib3VuZHMudG9wLCBib3VuZHMud2lkdGgsIGJvdW5kcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVzaXplJyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tTaG93bkZyb21aZXJvRGltZW5zaW9ucygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIG5vdGlmeVZpcnR1YWxaSW5kZXhDaGFuZ2VSZXF1aXJlZCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy52aXJ0dWFsWkluZGV4Q2hhbmdlUmVxdWlyZWRFdmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvZ2ljYWxaSW5kZXggPSB0aGlzLl9sb2dpY2FsWkluZGV4O1xyXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0WkluZGV4ID0gTG9naWNhbFpJbmRleFRvRGVmYXVsdE1hcFtsb2dpY2FsWkluZGV4XTtcclxuICAgICAgICAgICAgdGhpcy52aXJ0dWFsWkluZGV4Q2hhbmdlUmVxdWlyZWRFdmVudCh0aGlzLCBsb2dpY2FsWkluZGV4LCBkZWZhdWx0WkluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVFbGVtZW50UG9zaXRpb25Qcm9wZXJ0eUZyb21Cb3VuZENvbXBvbmVudCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52aXJ0dWFsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ3N0YXRpYyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJyc7IC8vIHNldCBpdCBiYWNrIHRvIGF0dHJpYnV0ZSB2YWx1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgY2hlY2tTaG93bkZyb21aZXJvRGltZW5zaW9ucygpIHtcclxuICAgICAgICBpZiAodGhpcy5faXNTaG93bldpdGhaZXJvRGltZW5zaW9ucyAmJiAodGhpcy5faGVpZ2h0ICE9PSAwIHx8IHRoaXMuX3dpZHRoICE9PSAwKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9pc1Nob3duV2l0aFplcm9EaW1lbnNpb25zID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdFNob3coKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBlbWl0U2hvdygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmVtaXQoJ3Nob3duJyk7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdzaG93Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBlbWl0SGlkZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmVtaXQoJ2hpZGUnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlbGVhc2VDb21wb25lbnQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3N0YWNrTWF4aW1pc2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXhpdFN0YWNrTWF4aW1pc2VkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZW1pdCgnYmVmb3JlQ29tcG9uZW50UmVsZWFzZScsIHRoaXMuX2hhbmRsZSk7XHJcbiAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLnVuYmluZENvbXBvbmVudCh0aGlzLCB0aGlzLl9oYW5kbGUpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIENvbXBvbmVudENvbnRhaW5lcn0gKi9cclxuZXhwb3J0IHR5cGUgSXRlbUNvbnRhaW5lciA9IENvbXBvbmVudENvbnRhaW5lcjtcclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgQ29tcG9uZW50Q29udGFpbmVyIHtcclxuICAgIGV4cG9ydCB0eXBlIEhhbmRsZSA9IHVua25vd247XHJcbiAgICAvKiBAZGVwcmVjYXRlZCAtIGZ1dHVyZSBtYXkgYmUgcmV1c2VkIGFzIHN5bm9ueW0gZm9yIENvbXBvbmVudENvbnRhaW5lciovXHJcbiAgICBleHBvcnQgdHlwZSBDb21wb25lbnQgPSB1bmtub3duO1xyXG5cclxuICAgIGV4cG9ydCB0eXBlIFN0YXRlUmVxdWVzdEV2ZW50SGFuZGxlciA9ICh0aGlzOiB2b2lkKSA9PiBKc29uVmFsdWUgfCB1bmRlZmluZWQ7XHJcbiAgICBleHBvcnQgdHlwZSBWaXJ0dWFsUmVjdGluZ1JlcXVpcmVkRXZlbnQgPSAodGhpczogdm9pZCwgY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSA9PiB2b2lkOyAvLyBERVBSRUNBVEVEXHJcbiAgICBleHBvcnQgdHlwZSBOb3RpZnlSZXNpemVIYW5kbGVyID0gKHRoaXM6IHZvaWQsIGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCBsZWZ0OiBudW1iZXIsIHRvcDogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4gdm9pZDtcclxuICAgIGV4cG9ydCB0eXBlIFZpcnR1YWxWaXNpYmlsaXR5Q2hhbmdlUmVxdWlyZWRFdmVudCA9ICh0aGlzOiB2b2lkLCBjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lciwgdmlzaWJsZTogYm9vbGVhbikgPT4gdm9pZDtcclxuICAgIGV4cG9ydCB0eXBlIFZpcnR1YWxaSW5kZXhDaGFuZ2VSZXF1aXJlZEV2ZW50ID1cclxuICAgICAgICAodGhpczogdm9pZCwgY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXIsIGxvZ2ljYWxaSW5kZXg6IExvZ2ljYWxaSW5kZXgsIGRlZmF1bHRaSW5kZXg6IHN0cmluZykgPT4gdm9pZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIFNob3dFdmVudEhhbmRsZXIgPSAodGhpczogdm9pZCkgPT4gdm9pZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIEhpZGVFdmVudEhhbmRsZXIgPSAodGhpczogdm9pZCkgPT4gdm9pZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIEZvY3VzRXZlbnRIYW5kbGVyID0gKHRoaXM6IHZvaWQsIHN1cHByZXNzRXZlbnQ6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgdHlwZSBCbHVyRXZlbnRIYW5kbGVyID0gKHRoaXM6IHZvaWQsIHN1cHByZXNzRXZlbnQ6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgdHlwZSBVcGRhdGVJdGVtQ29uZmlnRXZlbnRIYW5kbGVyID0gKGl0ZW1Db25maWc6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZykgPT4gdm9pZDtcclxufVxyXG4iLCJpbXBvcnQgeyBSZXNvbHZlZExheW91dENvbmZpZywgUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcgfSBmcm9tICcuLi9jb25maWcvcmVzb2x2ZWQtY29uZmlnJztcclxuaW1wb3J0IHsgUG9wb3V0QmxvY2tlZEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2V4dGVybmFsLWVycm9yJztcclxuaW1wb3J0IHsgVW5leHBlY3RlZE51bGxFcnJvciwgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2ludGVybmFsLWVycm9yJztcclxuaW1wb3J0IHsgQ29udGVudEl0ZW0gfSBmcm9tICcuLi9pdGVtcy9jb250ZW50LWl0ZW0nO1xyXG5pbXBvcnQgeyBMYXlvdXRNYW5hZ2VyIH0gZnJvbSAnLi4vbGF5b3V0LW1hbmFnZXInO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICcuLi91dGlscy9ldmVudC1lbWl0dGVyJztcclxuaW1wb3J0IHsgUmVjdCB9IGZyb20gJy4uL3V0aWxzL3R5cGVzJztcclxuaW1wb3J0IHsgZGVlcEV4dGVuZCwgZ2V0RXJyb3JNZXNzYWdlLCBnZXRVbmlxdWVJZCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbi8qKlxyXG4gKiBQb3BzIGEgY29udGVudCBpdGVtIG91dCBpbnRvIGEgbmV3IGJyb3dzZXIgd2luZG93LlxyXG4gKiBUaGlzIGlzIGFjaGlldmVkIGJ5XHJcbiAqXHJcbiAqICAgIC0gQ3JlYXRpbmcgYSBuZXcgY29uZmlndXJhdGlvbiB3aXRoIHRoZSBjb250ZW50IGl0ZW0gYXMgcm9vdCBlbGVtZW50XHJcbiAqICAgIC0gU2VyaWFsaXppbmcgYW5kIG1pbmlmeWluZyB0aGUgY29uZmlndXJhdGlvblxyXG4gKiAgICAtIE9wZW5pbmcgdGhlIGN1cnJlbnQgd2luZG93J3MgVVJMIHdpdGggdGhlIGNvbmZpZ3VyYXRpb24gYXMgYSBHRVQgcGFyYW1ldGVyXHJcbiAqICAgIC0gR29sZGVuTGF5b3V0IHdoZW4gb3BlbmVkIGluIHRoZSBuZXcgd2luZG93IHdpbGwgbG9vayBmb3IgdGhlIEdFVCBwYXJhbWV0ZXJcclxuICogICAgICBhbmQgdXNlIGl0IGluc3RlYWQgb2YgdGhlIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb25cclxuICogQHB1YmxpY1xyXG4gKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBCcm93c2VyUG9wb3V0IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3BvcG91dFdpbmRvdzogV2luZG93IHwgbnVsbDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2lzSW5pdGlhbGlzZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9jaGVja1JlYWR5SW50ZXJ2YWw6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+IHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIF9jb25maWcgLSBHb2xkZW5MYXlvdXQgaXRlbSBjb25maWdcclxuICAgICAqIEBwYXJhbSBfaW5pdGlhbFdpbmRvd1NpemUgLSBBIG1hcCB3aXRoIHdpZHRoLCBoZWlnaHQsIHRvcCBhbmQgbGVmdFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9jb25maWc6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9pbml0aWFsV2luZG93U2l6ZTogUmVjdCxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfbGF5b3V0TWFuYWdlcjogTGF5b3V0TWFuYWdlcixcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2lzSW5pdGlhbGlzZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9wb3BvdXRXaW5kb3cgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlV2luZG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9Db25maWcoKTogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0luaXRpYWxpc2VkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3QgY3JlYXRlIGNvbmZpZywgbGF5b3V0IG5vdCB5ZXQgaW5pdGlhbGlzZWQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGdsSW5zdGFuY2UgPSB0aGlzLmdldEdsSW5zdGFuY2UoKTtcclxuICAgICAgICBjb25zdCBnbEluc3RhbmNlQ29uZmlnID0gZ2xJbnN0YW5jZS5zYXZlTGF5b3V0KCk7XHJcblxyXG4gICAgICAgIGxldCBsZWZ0OiBudW1iZXIgfCBudWxsO1xyXG4gICAgICAgIGxldCB0b3A6IG51bWJlciB8IG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcG91dFdpbmRvdyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBsZWZ0ID0gbnVsbDtcclxuICAgICAgICAgICAgdG9wID0gbnVsbDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZWZ0ID0gdGhpcy5fcG9wb3V0V2luZG93LnNjcmVlblggPz8gdGhpcy5fcG9wb3V0V2luZG93LnNjcmVlbkxlZnQ7XHJcbiAgICAgICAgICAgIHRvcCA9IHRoaXMuX3BvcG91dFdpbmRvdy5zY3JlZW5ZID8/IHRoaXMuX3BvcG91dFdpbmRvdy5zY3JlZW5Ub3A7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB3aW5kb3c6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnLldpbmRvdyA9IHtcclxuICAgICAgICAgICAgd2lkdGg6IHRoaXMuZ2V0R2xJbnN0YW5jZSgpLndpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuZ2V0R2xJbnN0YW5jZSgpLmhlaWdodCxcclxuICAgICAgICAgICAgbGVmdCxcclxuICAgICAgICAgICAgdG9wLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbmZpZzogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcgPSB7XHJcbiAgICAgICAgICAgIHJvb3Q6IGdsSW5zdGFuY2VDb25maWcucm9vdCxcclxuICAgICAgICAgICAgb3BlblBvcG91dHM6IGdsSW5zdGFuY2VDb25maWcub3BlblBvcG91dHMsXHJcbiAgICAgICAgICAgIHNldHRpbmdzOiBnbEluc3RhbmNlQ29uZmlnLnNldHRpbmdzLFxyXG4gICAgICAgICAgICBkaW1lbnNpb25zOiBnbEluc3RhbmNlQ29uZmlnLmRpbWVuc2lvbnMsXHJcbiAgICAgICAgICAgIGhlYWRlcjogZ2xJbnN0YW5jZUNvbmZpZy5oZWFkZXIsXHJcbiAgICAgICAgICAgIHdpbmRvdyxcclxuICAgICAgICAgICAgcGFyZW50SWQ6IHRoaXMuX2NvbmZpZy5wYXJlbnRJZCxcclxuICAgICAgICAgICAgaW5kZXhJblBhcmVudDogdGhpcy5fY29uZmlnLmluZGV4SW5QYXJlbnQsXHJcbiAgICAgICAgICAgIHJlc29sdmVkOiB0cnVlLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0R2xJbnN0YW5jZSgpOiBMYXlvdXRNYW5hZ2VyIHtcclxuICAgICAgICBpZiAodGhpcy5fcG9wb3V0V2luZG93ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdCUEdHSTI0NjkzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9wb3BvdXRXaW5kb3cuX19nbEluc3RhbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0cmlldmVzIHRoZSBuYXRpdmUgQnJvd3NlcldpbmRvdyBiYWNraW5nIHRoaXMgcG9wb3V0LlxyXG4gICAgICogTWlnaHQgdGhyb3cgYW4gVW5leHBlY3RlZE51bGxFcnJvciBleGNlcHRpb24gd2hlbiB0aGUgd2luZG93IGlzIG5vdCBpbml0aWFsaXplZCB5ZXQuXHJcbiAgICAgKiBAcHVibGljXHJcbiAgICAgKi9cclxuICAgIGdldFdpbmRvdygpOiBXaW5kb3cge1xyXG4gICAgICAgIGlmICh0aGlzLl9wb3BvdXRXaW5kb3cgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ0JQR1cwODcyMTUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvcG91dFdpbmRvdztcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5nZXRHbEluc3RhbmNlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRHbEluc3RhbmNlKCkuY2xvc2VXaW5kb3coKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRXaW5kb3coKS5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgcG9wcGVkIG91dCBpdGVtIHRvIGl0cyBvcmlnaW5hbCBwb3NpdGlvbi4gSWYgdGhlIG9yaWdpbmFsXHJcbiAgICAgKiBwYXJlbnQgaXNuJ3QgYXZhaWxhYmxlIGFueW1vcmUgaXQgZmFsbHMgYmFjayB0byB0aGUgbGF5b3V0J3MgdG9wbW9zdCBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHBvcEluKCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBwYXJlbnRJdGVtOiBDb250ZW50SXRlbTtcclxuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLl9jb25maWcuaW5kZXhJblBhcmVudDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50SWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAqIFRoZSBkZWVwRXh0ZW5kIGNhbGwgc2VlbXMgYSBiaXQgcG9pbnRsZXNzLCBidXQgaXQncyBjcnVjaWFsIHRvXHJcbiAgICAgICAgKiBjb3B5IHRoZSBjb25maWcgcmV0dXJuZWQgYnkgdGhpcy5nZXRHbEluc3RhbmNlKCkudG9Db25maWcoKVxyXG4gICAgICAgICogb250byBhIG5ldyBvYmplY3QuIEludGVybmV0IEV4cGxvcmVyIGtlZXBzIHRoZSByZWZlcmVuY2VzXHJcbiAgICAgICAgKiB0byBvYmplY3RzIG9uIHRoZSBjaGlsZCB3aW5kb3csIHJlc3VsdGluZyBpbiB0aGUgZm9sbG93aW5nIGVycm9yXHJcbiAgICAgICAgKiBvbmNlIHRoZSBjaGlsZCB3aW5kb3cgaXMgY2xvc2VkOlxyXG4gICAgICAgICpcclxuICAgICAgICAqIFRoZSBjYWxsZWUgKHNlcnZlciBbbm90IHNlcnZlciBhcHBsaWNhdGlvbl0pIGlzIG5vdCBhdmFpbGFibGUgYW5kIGRpc2FwcGVhcmVkXHJcbiAgICAgICAgKi9cclxuICAgICAgICBjb25zdCBnbEluc3RhbmNlTGF5b3V0Q29uZmlnID0gdGhpcy5nZXRHbEluc3RhbmNlKCkuc2F2ZUxheW91dCgpO1xyXG4gICAgICAgIGNvbnN0IGNvcGllZEdsSW5zdGFuY2VMYXlvdXRDb25maWcgPSBkZWVwRXh0ZW5kKHt9LCBnbEluc3RhbmNlTGF5b3V0Q29uZmlnKSBhcyBSZXNvbHZlZExheW91dENvbmZpZztcclxuICAgICAgICBjb25zdCBjb3BpZWRSb290ID0gY29waWVkR2xJbnN0YW5jZUxheW91dENvbmZpZy5yb290O1xyXG4gICAgICAgIGlmIChjb3BpZWRSb290ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignQlBQSVIxOTk5OCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBncm91bmRJdGVtID0gdGhpcy5fbGF5b3V0TWFuYWdlci5ncm91bmRJdGVtO1xyXG4gICAgICAgIGlmIChncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignQlBQSUczNDk3MicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwYXJlbnRJdGVtID0gZ3JvdW5kSXRlbS5nZXRJdGVtc0J5UG9wSW5QYXJlbnRJZCh0aGlzLl9jb25maWcucGFyZW50SWQpWzBdO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICogRmFsbGJhY2sgaWYgcGFyZW50SXRlbSBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgYWRkIGl0IHRvIHRoZSB0b3Btb3N0XHJcbiAgICAgICAgKiBpdGVtIG9yIG1ha2UgaXQgdGhlIHRvcG1vc3QgaXRlbSBpZiB0aGUgbGF5b3V0IGlzIGVtcHR5XHJcbiAgICAgICAgKi9cclxuICAgICAgICBpZiAoIXBhcmVudEl0ZW0pIHtcclxuICAgICAgICAgICAgaWYgKGdyb3VuZEl0ZW0uY29udGVudEl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudEl0ZW0gPSBncm91bmRJdGVtLmNvbnRlbnRJdGVtc1swXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudEl0ZW0gPSBncm91bmRJdGVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGluZGV4ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld0NvbnRlbnRJdGVtID0gdGhpcy5fbGF5b3V0TWFuYWdlci5jcmVhdGVBbmRJbml0Q29udGVudEl0ZW0oY29waWVkUm9vdCwgcGFyZW50SXRlbSk7XHJcblxyXG4gICAgICAgIHBhcmVudEl0ZW0uYWRkQ2hpbGQobmV3Q29udGVudEl0ZW0sIGluZGV4KTtcclxuICAgICAgICBpZiAodGhpcy5fbGF5b3V0TWFuYWdlci5sYXlvdXRDb25maWcuc2V0dGluZ3MucG9wSW5PbkNsb3NlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29uQ2xvc2UoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyB0aGUgVVJMIGFuZCB3aW5kb3cgcGFyYW1ldGVyXHJcbiAgICAgKiBhbmQgb3BlbnMgYSBuZXcgd2luZG93XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVXaW5kb3coKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5jcmVhdGVVcmwoKTtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQm9ndXMgdGl0bGUgdG8gcHJldmVudCByZS11c2FnZSBvZiBleGlzdGluZyB3aW5kb3cgd2l0aCB0aGVcclxuICAgICAgICAgKiBzYW1lIHRpdGxlLiBUaGUgYWN0dWFsIHRpdGxlIHdpbGwgYmUgc2V0IGJ5IHRoZSBuZXcgd2luZG93J3NcclxuICAgICAgICAgKiBHb2xkZW5MYXlvdXQgaW5zdGFuY2UgaWYgaXQgZGV0ZWN0cyB0aGF0IGl0IGlzIGluIHN1YldpbmRvd01vZGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKS50b1N0cmluZygzNik7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvcHRpb25zIGFzIHVzZWQgaW4gdGhlIHdpbmRvdy5vcGVuIHN0cmluZ1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IGZlYXR1cmVzID0gdGhpcy5zZXJpYWxpemVXaW5kb3dGZWF0dXJlcyh7XHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLl9pbml0aWFsV2luZG93U2l6ZS53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLl9pbml0aWFsV2luZG93U2l6ZS5oZWlnaHQsXHJcbiAgICAgICAgICAgIGlubmVyV2lkdGg6IHRoaXMuX2luaXRpYWxXaW5kb3dTaXplLndpZHRoLFxyXG4gICAgICAgICAgICBpbm5lckhlaWdodDogdGhpcy5faW5pdGlhbFdpbmRvd1NpemUuaGVpZ2h0LFxyXG4gICAgICAgICAgICBtZW51YmFyOiAnbm8nLFxyXG4gICAgICAgICAgICB0b29sYmFyOiAnbm8nLFxyXG4gICAgICAgICAgICBsb2NhdGlvbjogJ25vJyxcclxuICAgICAgICAgICAgcGVyc29uYWxiYXI6ICdubycsXHJcbiAgICAgICAgICAgIHJlc2l6YWJsZTogJ3llcycsXHJcbiAgICAgICAgICAgIHNjcm9sbGJhcnM6ICdubycsXHJcbiAgICAgICAgICAgIHN0YXR1czogJ25vJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLl9wb3BvdXRXaW5kb3cgPSBnbG9iYWxUaGlzLm9wZW4odXJsLCB0YXJnZXQsIGZlYXR1cmVzKTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl9wb3BvdXRXaW5kb3cpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2xheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLnNldHRpbmdzLmJsb2NrZWRQb3BvdXRzVGhyb3dFcnJvciA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgUG9wb3V0QmxvY2tlZEVycm9yKCdQb3BvdXQgYmxvY2tlZCcpO1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3BvcG91dFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4gdGhpcy5wb3NpdGlvbldpbmRvdygpLCB7IHBhc3NpdmU6IHRydWUgfSlcclxuICAgICAgICB0aGlzLl9wb3BvdXRXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGF5b3V0TWFuYWdlci5sYXlvdXRDb25maWcuc2V0dGluZ3MucG9wSW5PbkNsb3NlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvcEluKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB7IHBhc3NpdmU6IHRydWUgfSlcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUG9sbGluZyB0aGUgY2hpbGR3aW5kb3cgdG8gZmluZCBvdXQgaWYgR29sZGVuTGF5b3V0IGhhcyBiZWVuIGluaXRpYWxpc2VkXHJcbiAgICAgICAgICogZG9lc24ndCBzZWVtIG9wdGltYWwsIGJ1dCB0aGUgYWx0ZXJuYXRpdmVzIC0gYWRkaW5nIGEgY2FsbGJhY2sgdG8gdGhlIHBhcmVudFxyXG4gICAgICAgICAqIHdpbmRvdyBvciByYWlzaW5nIGFuIGV2ZW50IG9uIHRoZSB3aW5kb3cgb2JqZWN0IC0gYm90aCB3b3VsZCBpbnRyb2R1Y2Uga25vd2xlZGdlXHJcbiAgICAgICAgICogYWJvdXQgdGhlIHBhcmVudCB0byB0aGUgY2hpbGQgd2luZG93IHdoaWNoIHdlJ2QgcmF0aGVyIGF2b2lkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fY2hlY2tSZWFkeUludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5jaGVja1JlYWR5KCksIDEwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGNoZWNrUmVhZHkoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcG91dFdpbmRvdyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignQlBDUjAxODQ0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BvcG91dFdpbmRvdy5fX2dsSW5zdGFuY2UgJiYgdGhpcy5fcG9wb3V0V2luZG93Ll9fZ2xJbnN0YW5jZS5pc0luaXRpYWxpc2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uSW5pdGlhbGlzZWQoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jaGVja1JlYWR5SW50ZXJ2YWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fY2hlY2tSZWFkeUludGVydmFsKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1JlYWR5SW50ZXJ2YWwgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXJpYWxpc2VzIGEgbWFwIG9mIGtleTp2YWx1ZXMgdG8gYSB3aW5kb3cgb3B0aW9ucyBzdHJpbmdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gd2luZG93T3B0aW9ucyAtXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgc2VyaWFsaXNlZCB3aW5kb3cgb3B0aW9uc1xyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2VyaWFsaXplV2luZG93RmVhdHVyZXMod2luZG93T3B0aW9uczogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyPik6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3Qgd2luZG93T3B0aW9uc1N0cmluZzogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gd2luZG93T3B0aW9ucykge1xyXG4gICAgICAgICAgICB3aW5kb3dPcHRpb25zU3RyaW5nLnB1c2goa2V5ICsgJz0nICsgd2luZG93T3B0aW9uc1trZXldLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHdpbmRvd09wdGlvbnNTdHJpbmcuam9pbignLCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyB0aGUgVVJMIGZvciB0aGUgbmV3IHdpbmRvdywgaW5jbHVkaW5nIHRoZVxyXG4gICAgICogY29uZmlnIEdFVCBwYXJhbWV0ZXJcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyBVUkxcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZVVybCgpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHN0b3JhZ2VLZXkgPSAnZ2wtd2luZG93LWNvbmZpZy0nICsgZ2V0VW5pcXVlSWQoKTtcclxuICAgICAgICBjb25zdCBjb25maWcgPSBSZXNvbHZlZExheW91dENvbmZpZy5taW5pZnlDb25maWcodGhpcy5fY29uZmlnKTtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSwgSlNPTi5zdHJpbmdpZnkoY29uZmlnKSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHdoaWxlIHdyaXRpbmcgdG8gbG9jYWxTdG9yYWdlICcgKyBnZXRFcnJvck1lc3NhZ2UoZSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChsb2NhdGlvbi5ocmVmKTtcclxuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgnZ2wtd2luZG93Jywgc3RvcmFnZUtleSk7XHJcbiAgICAgICAgcmV0dXJuIHVybC50b1N0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTW92ZSB0aGUgbmV3bHkgY3JlYXRlZCB3aW5kb3cgcm91Z2hseSB0b1xyXG4gICAgICogd2hlcmUgdGhlIGNvbXBvbmVudCB1c2VkIHRvIGJlLlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcG9zaXRpb25XaW5kb3coKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BvcG91dFdpbmRvdyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jyb3dzZXJQb3BvdXQucG9zaXRpb25XaW5kb3c6IG51bGwgcG9wb3V0V2luZG93Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcG9wb3V0V2luZG93Lm1vdmVUbyh0aGlzLl9pbml0aWFsV2luZG93U2l6ZS5sZWZ0LCB0aGlzLl9pbml0aWFsV2luZG93U2l6ZS50b3ApO1xyXG4gICAgICAgICAgICB0aGlzLl9wb3BvdXRXaW5kb3cuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayB3aGVuIHRoZSBuZXcgd2luZG93IGlzIG9wZW5lZCBhbmQgdGhlIEdvbGRlbkxheW91dCBpbnN0YW5jZVxyXG4gICAgICogd2l0aGluIGl0IGlzIGluaXRpYWxpc2VkXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkluaXRpYWxpc2VkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2lzSW5pdGlhbGlzZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZ2V0R2xJbnN0YW5jZSgpLm9uKCdwb3BJbicsICgpID0+IHRoaXMucG9wSW4oKSk7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdpbml0aWFsaXNlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlZCA1MG1zIGFmdGVyIHRoZSB3aW5kb3cgdW5sb2FkIGV2ZW50XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfb25DbG9zZSgpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuZW1pdCgnY2xvc2VkJyksIDUwKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBVbmV4cGVjdGVkTnVsbEVycm9yLCBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBDb21wb25lbnRJdGVtIH0gZnJvbSAnLi4vaXRlbXMvY29tcG9uZW50LWl0ZW0nO1xyXG5pbXBvcnQgeyBDb250ZW50SXRlbSB9IGZyb20gJy4uL2l0ZW1zL2NvbnRlbnQtaXRlbSc7XHJcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnLi4vaXRlbXMvc3RhY2snO1xyXG5pbXBvcnQgeyBMYXlvdXRNYW5hZ2VyIH0gZnJvbSAnLi4vbGF5b3V0LW1hbmFnZXInO1xyXG5pbXBvcnQgeyBEb21Db25zdGFudHMgfSBmcm9tICcuLi91dGlscy9kb20tY29uc3RhbnRzJztcclxuaW1wb3J0IHsgRHJhZ0xpc3RlbmVyIH0gZnJvbSAnLi4vdXRpbHMvZHJhZy1saXN0ZW5lcic7XHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJy4uL3V0aWxzL2V2ZW50LWVtaXR0ZXInO1xyXG5pbXBvcnQgeyBTaWRlIH0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnO1xyXG5pbXBvcnQge1xyXG4gICAgbnVtYmVyVG9QaXhlbHNcclxufSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG4vKipcclxuICogVGhpcyBjbGFzcyBjcmVhdGVzIGEgdGVtcG9yYXJ5IGNvbnRhaW5lclxyXG4gKiBmb3IgdGhlIGNvbXBvbmVudCB3aGlsc3QgaXQgaXMgYmVpbmcgZHJhZ2dlZFxyXG4gKiBhbmQgaGFuZGxlcyBkcmFnIGV2ZW50c1xyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBEcmFnUHJveHkgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xyXG4gICAgcHJpdmF0ZSBfYXJlYTogQ29udGVudEl0ZW0uQXJlYSB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfbGFzdFZhbGlkQXJlYTogQ29udGVudEl0ZW0uQXJlYSB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfbWluWDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfbWluWTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfbWF4WDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfbWF4WTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfc2lkZWQ6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9lbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgX3Byb3h5Q29udGFpbmVyRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIF9jb21wb25lbnRJdGVtRm9jdXNlZDogYm9vbGVhbjtcclxuXHJcbiAgICBnZXQgZWxlbWVudCgpOiBIVE1MRWxlbWVudCB7IHJldHVybiB0aGlzLl9lbGVtZW50OyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geCAtIFRoZSBpbml0aWFsIHggcG9zaXRpb25cclxuICAgICAqIEBwYXJhbSB5IC0gVGhlIGluaXRpYWwgeSBwb3NpdGlvblxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyLFxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2RyYWdMaXN0ZW5lcjogRHJhZ0xpc3RlbmVyLFxyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2xheW91dE1hbmFnZXI6IExheW91dE1hbmFnZXIsXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSxcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF9vcmlnaW5hbFBhcmVudDogQ29udGVudEl0ZW0pIHtcclxuXHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZHJhZ0xpc3RlbmVyLm9uKCdkcmFnJywgKG9mZnNldFgsIG9mZnNldFksIGV2ZW50KSA9PiB0aGlzLm9uRHJhZyhvZmZzZXRYLCBvZmZzZXRZLCBldmVudCkpO1xyXG4gICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lci5vbignZHJhZ1N0b3AnLCAoKSA9PiB0aGlzLm9uRHJvcCgpKTtcclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVEcmFnUHJveHlFbGVtZW50cyh4LCB5KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbXBvbmVudEl0ZW0ucGFyZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBfY29udGVudEl0ZW0gd2lsbCBoYXZlIGR1bW15IEdyb3VuZEl0ZW0gYXMgcGFyZW50IGlmIGluaXRpYXRlZCBieSBhIGV4dGVybmFsIGRyYWcgc291cmNlXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdEUEMxMDA5NycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY29tcG9uZW50SXRlbUZvY3VzZWQgPSB0aGlzLl9jb21wb25lbnRJdGVtLmZvY3VzZWQ7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbXBvbmVudEl0ZW1Gb2N1c2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudEl0ZW0uYmx1cigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9jb21wb25lbnRJdGVtLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLl9jb21wb25lbnRJdGVtLCB0cnVlKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXREaW1lbnNpb25zKCk7XHJcblxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuZGV0ZXJtaW5lTWluTWF4WFkoKTtcclxuICAgICAgICB0aGlzLl9sYXlvdXRNYW5hZ2VyLmNhbGN1bGF0ZUl0ZW1BcmVhcygpO1xyXG4gICAgICAgIHRoaXMuc2V0RHJvcFBvc2l0aW9uKHgsIHkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBDcmVhdGUgU3RhY2stbGlrZSBzdHJ1Y3R1cmUgdG8gY29udGFpbiB0aGUgZHJhZ2dlZCBjb21wb25lbnQgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlRHJhZ1Byb3h5RWxlbWVudHMoaW5pdGlhbFg6IG51bWJlciwgaW5pdGlhbFk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5EcmFnUHJveHkpO1xyXG4gICAgICAgIGNvbnN0IGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBoZWFkZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5IZWFkZXIpO1xyXG4gICAgICAgIGNvbnN0IHRhYnNFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGFic0VsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlRhYnMpO1xyXG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0YWJFbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5UYWIpO1xyXG4gICAgICAgIGNvbnN0IHRpdGxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICB0aXRsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlRpdGxlKTtcclxuICAgICAgICB0YWJFbGVtZW50LmFwcGVuZENoaWxkKHRpdGxlRWxlbWVudCk7XHJcbiAgICAgICAgdGFic0VsZW1lbnQuYXBwZW5kQ2hpbGQodGFiRWxlbWVudCk7XHJcbiAgICAgICAgaGVhZGVyRWxlbWVudC5hcHBlbmRDaGlsZCh0YWJzRWxlbWVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3Byb3h5Q29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMuX3Byb3h5Q29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuQ29udGVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYXBwZW5kQ2hpbGQoaGVhZGVyRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9wcm94eUNvbnRhaW5lckVsZW1lbnQpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fb3JpZ2luYWxQYXJlbnQgaW5zdGFuY2VvZiBTdGFjayAmJiB0aGlzLl9vcmlnaW5hbFBhcmVudC5oZWFkZXJTaG93KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NpZGVkID0gdGhpcy5fb3JpZ2luYWxQYXJlbnQuaGVhZGVyTGVmdFJpZ2h0U2lkZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbG1fJyArIHRoaXMuX29yaWdpbmFsUGFyZW50LmhlYWRlclNpZGUpO1xyXG4gICAgICAgICAgICBpZiAoW1NpZGUucmlnaHQsIFNpZGUuYm90dG9tXS5pbmRleE9mKHRoaXMuX29yaWdpbmFsUGFyZW50LmhlYWRlclNpZGUpID49IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Byb3h5Q29udGFpbmVyRWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgaGVhZGVyRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5sZWZ0ID0gbnVtYmVyVG9QaXhlbHMoaW5pdGlhbFgpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUudG9wID0gbnVtYmVyVG9QaXhlbHMoaW5pdGlhbFkpO1xyXG4gICAgICAgIHRhYkVsZW1lbnQuc2V0QXR0cmlidXRlKCd0aXRsZScsIHRoaXMuX2NvbXBvbmVudEl0ZW0udGl0bGUpO1xyXG4gICAgICAgIHRpdGxlRWxlbWVudC5pbnNlcnRBZGphY2VudFRleHQoJ2FmdGVyYmVnaW4nLCB0aGlzLl9jb21wb25lbnRJdGVtLnRpdGxlKTtcclxuICAgICAgICB0aGlzLl9wcm94eUNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fY29tcG9uZW50SXRlbS5lbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRldGVybWluZU1pbk1heFhZKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGdyb3VuZEl0ZW0gPSB0aGlzLl9sYXlvdXRNYW5hZ2VyLmdyb3VuZEl0ZW07XHJcbiAgICAgICAgaWYgKGdyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdEUERNTVhZNzMxMDknKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBncm91bmRFbGVtZW50ID0gZ3JvdW5kSXRlbS5lbGVtZW50O1xyXG4gICAgICAgICAgICBjb25zdCByZWN0ID0gZ3JvdW5kRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5fbWluWCA9IHJlY3QubGVmdCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdDtcclxuICAgICAgICAgICAgdGhpcy5fbWluWSA9IHJlY3QudG9wICsgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgIHRoaXMuX21heFggPSB0aGlzLl9taW5YICsgcmVjdC53aWR0aDtcclxuICAgICAgICAgICAgdGhpcy5fbWF4WSA9IHRoaXMuX21pblkgKyByZWN0LmhlaWdodDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBvbiBldmVyeSBtb3VzZU1vdmUgZXZlbnQgZHVyaW5nIGEgZHJhZy4gRGV0ZXJtaW5lcyBpZiB0aGUgZHJhZyBpc1xyXG4gICAgICogc3RpbGwgd2l0aGluIHRoZSB2YWxpZCBkcmFnIGFyZWEgYW5kIGNhbGxzIHRoZSBsYXlvdXRNYW5hZ2VyIHRvIGhpZ2hsaWdodCB0aGVcclxuICAgICAqIGN1cnJlbnQgZHJvcCBhcmVhXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG9mZnNldFggLSBUaGUgZGlmZmVyZW5jZSBmcm9tIHRoZSBvcmlnaW5hbCB4IHBvc2l0aW9uIGluIHB4XHJcbiAgICAgKiBAcGFyYW0gb2Zmc2V0WSAtIFRoZSBkaWZmZXJlbmNlIGZyb20gdGhlIG9yaWdpbmFsIHkgcG9zaXRpb24gaW4gcHhcclxuICAgICAqIEBwYXJhbSBldmVudCAtXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkRyYWcob2Zmc2V0WDogbnVtYmVyLCBvZmZzZXRZOiBudW1iZXIsIGV2ZW50OiBQb2ludGVyRXZlbnQpIHtcclxuXHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LnBhZ2VYO1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5wYWdlWTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXREcm9wUG9zaXRpb24oeCwgeSk7XHJcbiAgICAgICAgdGhpcy5fY29tcG9uZW50SXRlbS5kcmFnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSB0YXJnZXQgcG9zaXRpb24sIGhpZ2hsaWdodGluZyB0aGUgYXBwcm9wcmlhdGUgYXJlYVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB4IC0gVGhlIHggcG9zaXRpb24gaW4gcHhcclxuICAgICAqIEBwYXJhbSB5IC0gVGhlIHkgcG9zaXRpb24gaW4gcHhcclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzZXREcm9wUG9zaXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fbGF5b3V0TWFuYWdlci5sYXlvdXRDb25maWcuc2V0dGluZ3MuY29uc3RyYWluRHJhZ1RvQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGlmICh4IDw9IHRoaXMuX21pblgpIHtcclxuICAgICAgICAgICAgICAgIHggPSBNYXRoLmNlaWwodGhpcy5fbWluWCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoeCA+PSB0aGlzLl9tYXhYKSB7XHJcbiAgICAgICAgICAgICAgICB4ID0gTWF0aC5mbG9vcih0aGlzLl9tYXhYKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHkgPD0gdGhpcy5fbWluWSkge1xyXG4gICAgICAgICAgICAgICAgeSA9IE1hdGguY2VpbCh0aGlzLl9taW5ZKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh5ID49IHRoaXMuX21heFkpIHtcclxuICAgICAgICAgICAgICAgIHkgPSBNYXRoLmZsb29yKHRoaXMuX21heFkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmxlZnQgPSBudW1iZXJUb1BpeGVscyh4KTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnRvcCA9IG51bWJlclRvUGl4ZWxzKHkpO1xyXG4gICAgICAgIC8vIEZJWE1FIHNldCBjb21wb25lbnQuY29udGVudEVsZW1lbnQgcG9zdGlvbiB0byB0aGF0IG9mIHRoaXMuX3Byb3h5Q29udGFpbmVyRWxlbWVudFxyXG5cclxuICAgICAgICB0aGlzLl9hcmVhID0gdGhpcy5fbGF5b3V0TWFuYWdlci5nZXRBcmVhKHgsIHkpO1xyXG4gICAgICAgIGlmICh0aGlzLl9hcmVhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3RWYWxpZEFyZWEgPSB0aGlzLl9hcmVhO1xyXG4gICAgICAgICAgICB0aGlzLl9hcmVhLmNvbnRlbnRJdGVtLmhpZ2hsaWdodERyb3Bab25lKHgsIHksIHRoaXMuX2FyZWEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxiYWNrIHdoZW4gdGhlIGRyYWcgaGFzIGZpbmlzaGVkLiBEZXRlcm1pbmVzIHRoZSBkcm9wIGFyZWFcclxuICAgICAqIGFuZCBhZGRzIHRoZSBjaGlsZCB0byBpdFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgb25Ecm9wKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGRyb3BUYXJnZXRJbmRpY2F0b3IgPSB0aGlzLl9sYXlvdXRNYW5hZ2VyLmRyb3BUYXJnZXRJbmRpY2F0b3I7XHJcbiAgICAgICAgaWYgKGRyb3BUYXJnZXRJbmRpY2F0b3IgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ0RQT0QzMDAxMScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRyb3BUYXJnZXRJbmRpY2F0b3IuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY29tcG9uZW50SXRlbS5leGl0RHJhZ01vZGUoKTtcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBWYWxpZCBkcm9wIGFyZWEgZm91bmRcclxuICAgICAgICAgKi9cclxuICAgICAgICBsZXQgZHJvcHBlZENvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKHRoaXMuX2FyZWEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgZHJvcHBlZENvbXBvbmVudEl0ZW0gPSB0aGlzLl9jb21wb25lbnRJdGVtO1xyXG4gICAgICAgICAgICB0aGlzLl9hcmVhLmNvbnRlbnRJdGVtLm9uRHJvcChkcm9wcGVkQ29tcG9uZW50SXRlbSwgdGhpcy5fYXJlYSk7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogTm8gdmFsaWQgZHJvcCBhcmVhIGF2YWlsYWJsZSBhdCBwcmVzZW50LCBidXQgb25lIGhhcyBiZWVuIGZvdW5kIGJlZm9yZS5cclxuICAgICAgICAgICAgICogVXNlIGl0XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fbGFzdFZhbGlkQXJlYSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBkcm9wcGVkQ29tcG9uZW50SXRlbSA9IHRoaXMuX2NvbXBvbmVudEl0ZW07XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1BhcmVudENvbnRlbnRJdGVtID0gdGhpcy5fbGFzdFZhbGlkQXJlYS5jb250ZW50SXRlbTtcclxuICAgICAgICAgICAgbmV3UGFyZW50Q29udGVudEl0ZW0ub25Ecm9wKGRyb3BwZWRDb21wb25lbnRJdGVtLCB0aGlzLl9sYXN0VmFsaWRBcmVhKTtcclxuXHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBObyB2YWxpZCBkcm9wIGFyZWEgZm91bmQgZHVyaW5nIHRoZSBkdXJhdGlvbiBvZiB0aGUgZHJhZy4gUmV0dXJuXHJcbiAgICAgICAgICAgICAqIGNvbnRlbnQgaXRlbSB0byBpdHMgb3JpZ2luYWwgcG9zaXRpb24gaWYgYSBvcmlnaW5hbCBwYXJlbnQgaXMgcHJvdmlkZWQuXHJcbiAgICAgICAgICAgICAqIChXaGljaCBpcyBub3QgdGhlIGNhc2UgaWYgdGhlIGRyYWcgaGFkIGJlZW4gaW5pdGlhdGVkIGJ5IGNyZWF0ZURyYWdTb3VyY2UpXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fb3JpZ2luYWxQYXJlbnQpIHtcclxuICAgICAgICAgICAgZHJvcHBlZENvbXBvbmVudEl0ZW0gPSB0aGlzLl9jb21wb25lbnRJdGVtO1xyXG4gICAgICAgICAgICB0aGlzLl9vcmlnaW5hbFBhcmVudC5hZGRDaGlsZChkcm9wcGVkQ29tcG9uZW50SXRlbSk7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogVGhlIGRyYWcgZGlkbid0IHVsdGltYXRlbHkgZW5kIHVwIHdpdGggYWRkaW5nIHRoZSBjb250ZW50IGl0ZW0gdG9cclxuICAgICAgICAgICAgICogYW55IGNvbnRhaW5lci4gSW4gb3JkZXIgdG8gZW5zdXJlIGNsZWFuIHVwIGhhcHBlbnMsIGRlc3Ryb3kgdGhlXHJcbiAgICAgICAgICAgICAqIGNvbnRlbnQgaXRlbS5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50SXRlbS5kZXN0cm95KCk7IC8vIGNvbnRlbnRJdGVtIGNoaWxkcmVuIGFyZSBub3cgZGVzdHJveWVkIGFzIHdlbGxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2xheW91dE1hbmFnZXIuZW1pdCgnaXRlbURyb3BwZWQnLCB0aGlzLl9jb21wb25lbnRJdGVtKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbXBvbmVudEl0ZW1Gb2N1c2VkICYmIGRyb3BwZWRDb21wb25lbnRJdGVtICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZHJvcHBlZENvbXBvbmVudEl0ZW0uZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBEcmFnIFByb3h5J3MgZGltZW5zaW9uc1xyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2V0RGltZW5zaW9ucygpIHtcclxuICAgICAgICBjb25zdCBkaW1lbnNpb25zID0gdGhpcy5fbGF5b3V0TWFuYWdlci5sYXlvdXRDb25maWcuZGltZW5zaW9ucztcclxuICAgICAgICBpZiAoZGltZW5zaW9ucyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRHJhZ1Byb3h5LnNldERpbWVuc2lvbnM6IGRpbWVuc2lvbnMgdW5kZWZpbmVkJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgd2lkdGggPSBkaW1lbnNpb25zLmRyYWdQcm94eVdpZHRoO1xyXG4gICAgICAgIGxldCBoZWlnaHQgPSBkaW1lbnNpb25zLmRyYWdQcm94eUhlaWdodDtcclxuICAgICAgICBpZiAod2lkdGggPT09IHVuZGVmaW5lZCB8fCBoZWlnaHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RyYWdQcm94eS5zZXREaW1lbnNpb25zOiB3aWR0aCBhbmQvb3IgaGVpZ2h0IHVuZGVmaW5lZCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaGVhZGVySGVpZ2h0ID0gdGhpcy5fbGF5b3V0TWFuYWdlci5sYXlvdXRDb25maWcuaGVhZGVyLnNob3cgPT09IGZhbHNlID8gMCA6IGRpbWVuc2lvbnMuaGVhZGVySGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUud2lkdGggPSBudW1iZXJUb1BpeGVscyh3aWR0aCk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBudW1iZXJUb1BpeGVscyhoZWlnaHQpXHJcbiAgICAgICAgd2lkdGggLT0gKHRoaXMuX3NpZGVkID8gaGVhZGVySGVpZ2h0IDogMCk7XHJcbiAgICAgICAgaGVpZ2h0IC09ICghdGhpcy5fc2lkZWQgPyBoZWFkZXJIZWlnaHQgOiAwKTtcclxuICAgICAgICB0aGlzLl9wcm94eUNvbnRhaW5lckVsZW1lbnQuc3R5bGUud2lkdGggPSBudW1iZXJUb1BpeGVscyh3aWR0aCk7XHJcbiAgICAgICAgdGhpcy5fcHJveHlDb250YWluZXJFbGVtZW50LnN0eWxlLmhlaWdodCA9IG51bWJlclRvUGl4ZWxzKGhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5fY29tcG9uZW50SXRlbS5lbnRlckRyYWdNb2RlKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEl0ZW0uc2hvdygpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IENvbXBvbmVudEl0ZW1Db25maWcgYXMgQ29uZmlnQ29tcG9uZW50SXRlbUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9jb25maWcnOyAvLyByZW1vdmUgYWxpYXMgaW4gdmVyc2lvbiAzXHJcbmltcG9ydCB7IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnIH0gZnJvbSBcIi4uL2NvbmZpZy9yZXNvbHZlZC1jb25maWdcIjtcclxuaW1wb3J0IHsgVW5leHBlY3RlZE51bGxFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9pbnRlcm5hbC1lcnJvcic7XHJcbmltcG9ydCB7IENvbXBvbmVudEl0ZW0gfSBmcm9tICcuLi9pdGVtcy9jb21wb25lbnQtaXRlbSc7XHJcbmltcG9ydCB7IEdyb3VuZEl0ZW0gfSBmcm9tICcuLi9pdGVtcy9ncm91bmQtaXRlbSc7XHJcbmltcG9ydCB7IExheW91dE1hbmFnZXIgfSBmcm9tICcuLi9sYXlvdXQtbWFuYWdlcic7XHJcbmltcG9ydCB7IERyYWdMaXN0ZW5lciB9IGZyb20gJy4uL3V0aWxzL2RyYWctbGlzdGVuZXInO1xyXG5pbXBvcnQgeyBKc29uVmFsdWUgfSBmcm9tICcuLi91dGlscy90eXBlcyc7XHJcbmltcG9ydCB7IERyYWdQcm94eSB9IGZyb20gJy4vZHJhZy1wcm94eSc7XHJcblxyXG4vKipcclxuICogQWxsb3dzIGZvciBhbnkgRE9NIGl0ZW0gdG8gY3JlYXRlIGEgY29tcG9uZW50IG9uIGRyYWdcclxuICogc3RhcnQgdG8gYmUgZHJhZ2dlZCBpbnRvIHRoZSBMYXlvdXRcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERyYWdTb3VyY2Uge1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfZHJhZ0xpc3RlbmVyOiBEcmFnTGlzdGVuZXIgfCBudWxsO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfZHVtbXlHcm91bmRDb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfZHVtbXlHcm91bmRDb250ZW50SXRlbTogR3JvdW5kSXRlbTtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfbGF5b3V0TWFuYWdlcjogTGF5b3V0TWFuYWdlcixcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfZWxlbWVudDogSFRNTEVsZW1lbnQsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgX2NvbXBvbmVudFR5cGVPckZ0bjogSnNvblZhbHVlIHwgKCgpID0+IChEcmFnU291cmNlLkNvbXBvbmVudEl0ZW1Db25maWcgfCBDb25maWdDb21wb25lbnRJdGVtQ29uZmlnKSksXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCBAZGVwcmVjYXRlZCByZW1vdmUgaW4gdmVyc2lvbiAzICovXHJcbiAgICAgICAgcHJpdmF0ZSBfY29tcG9uZW50U3RhdGU6IEpzb25WYWx1ZSB8IHVuZGVmaW5lZCxcclxuICAgICAgICAvKiogQGludGVybmFsIEBkZXByZWNhdGVkIHJlbW92ZSBpbiB2ZXJzaW9uIDMgKi9cclxuICAgICAgICBwcml2YXRlIF90aXRsZTogc3RyaW5nIHwgdW5kZWZpbmVkLFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5fZHJhZ0xpc3RlbmVyID0gbnVsbDtcclxuXHJcbiAgICAgICAgdGhpcy5fZHVtbXlHcm91bmRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcbiAgICAgICAgY29uc3QgZHVtbXlSb290SXRlbUNvbmZpZyA9IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnLmNyZWF0ZURlZmF1bHQoJ3JvdycpO1xyXG4gICAgICAgIHRoaXMuX2R1bW15R3JvdW5kQ29udGVudEl0ZW0gPSBuZXcgR3JvdW5kSXRlbSh0aGlzLl9sYXlvdXRNYW5hZ2VyLCBkdW1teVJvb3RJdGVtQ29uZmlnLCB0aGlzLl9kdW1teUdyb3VuZENvbnRhaW5lciwgbnVsbCk7XHJcbiBcclxuICAgICAgICB0aGlzLmNyZWF0ZURyYWdMaXN0ZW5lcigpO1xyXG4gICAgfVxyXG5cclxuXHQvKipcclxuXHQgKiBEaXNwb3NlcyBvZiB0aGUgZHJhZyBsaXN0ZW5lcnMgc28gdGhlIGRyYWcgc291cmNlIGlzIG5vdCB1c2FibGUgYW55IG1vcmUuXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuXHQgKi9cclxuXHRkZXN0cm95KCk6IHZvaWQge1xyXG5cdFx0dGhpcy5yZW1vdmVEcmFnTGlzdGVuZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBpbml0aWFsbHkgYW5kIGFmdGVyIGV2ZXJ5IGRyYWdcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZURyYWdMaXN0ZW5lcigpIHtcclxuICAgICAgICB0aGlzLnJlbW92ZURyYWdMaXN0ZW5lcigpO1xyXG5cclxuICAgICAgICB0aGlzLl9kcmFnTGlzdGVuZXIgPSBuZXcgRHJhZ0xpc3RlbmVyKHRoaXMuX2VsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lci5vbignZHJhZ1N0YXJ0JywgKHgsIHkpID0+IHRoaXMub25EcmFnU3RhcnQoeCwgeSkpO1xyXG4gICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lci5vbignZHJhZ1N0b3AnLCAoKSA9PiB0aGlzLm9uRHJhZ1N0b3AoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsYmFjayBmb3IgdGhlIERyYWdMaXN0ZW5lcidzIGRyYWdTdGFydCBldmVudFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB4IC0gVGhlIHggcG9zaXRpb24gb2YgdGhlIG1vdXNlIG9uIGRyYWdTdGFydFxyXG4gICAgICogQHBhcmFtIHkgLSBUaGUgeCBwb3NpdGlvbiBvZiB0aGUgbW91c2Ugb24gZHJhZ1N0YXJ0XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvbkRyYWdTdGFydCh4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSAnY29tcG9uZW50JztcclxuICAgICAgICBsZXQgZHJhZ1NvdXJjZUl0ZW1Db25maWc6IENvbmZpZ0NvbXBvbmVudEl0ZW1Db25maWc7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29tcG9uZW50VHlwZU9yRnRuID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgY29uc3QgZnRuRHJhZ1NvdXJjZUl0ZW1Db25maWcgPSB0aGlzLl9jb21wb25lbnRUeXBlT3JGdG4oKSBhcyAoRHJhZ1NvdXJjZS5Db21wb25lbnRJdGVtQ29uZmlnIHwgQ29uZmlnQ29tcG9uZW50SXRlbUNvbmZpZyk7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBjb21wb25lbnRUeXBlIHByb3BlcnR5IGV4aXN0cywgdGhlbiBpdCBpcyBhbHJlYWR5IGEgQ29tcG9uZW50SXRlbUNvbmZpZyBzbyBub3RoaW5nIHRvIGRvXHJcbiAgICAgICAgICAgIGlmIChEcmFnU291cmNlLmlzRHJhZ1NvdXJjZUNvbXBvbmVudEl0ZW1Db25maWcoZnRuRHJhZ1NvdXJjZUl0ZW1Db25maWcpKSB7XHJcbiAgICAgICAgICAgICAgICBkcmFnU291cmNlSXRlbUNvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudFN0YXRlOiBmdG5EcmFnU291cmNlSXRlbUNvbmZpZy5zdGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRUeXBlOiBmdG5EcmFnU291cmNlSXRlbUNvbmZpZy50eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBmdG5EcmFnU291cmNlSXRlbUNvbmZpZy50aXRsZSA/PyB0aGlzLl90aXRsZSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkcmFnU291cmNlSXRlbUNvbmZpZyA9IGZ0bkRyYWdTb3VyY2VJdGVtQ29uZmlnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZHJhZ1NvdXJjZUl0ZW1Db25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50U3RhdGU6IHRoaXMuX2NvbXBvbmVudFN0YXRlLFxyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50VHlwZTogdGhpcy5fY29tcG9uZW50VHlwZU9yRnRuLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMuX3RpdGxlLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGEgZHVtbXkgQ29udGVudEl0ZW0gb25seSBmb3IgZHJhZyBwdXJwb3Nlc1xyXG4gICAgICAgIC8vIEFsbCBDb250ZW50SXRlbXMgKGV4Y2VwdCBmb3IgR3JvdW5kSXRlbSkgbmVlZCBhIHBhcmVudC4gIFdoZW4gZHJhZ2dpbmcsIHRoZSBwYXJlbnQgaXMgbm90IHVzZWQuXHJcbiAgICAgICAgLy8gSW5zdGVhZCBvZiBhbGxvd2luZyBudWxsIHBhcmVudHMgKGFzIEphdmFzY3JpcHQgdmVyc2lvbiBkaWQpLCB1c2UgYSB0ZW1wb3JhcnkgZHVtbXkgR3JvdW5kSXRlbSBwYXJlbnQgYW5kIGFkZCBDb250ZW50SXRlbSB0byB0aGF0XHJcbiAgICAgICAgLy8gSWYgdGhpcyBkb2VzIG5vdCB3b3JrLCBuZWVkIHRvIGNyZWF0ZSBhbHRlcm5hdGl2ZSBHcm91bmRJdGVtIGNsYXNzXHJcblxyXG4gICAgICAgIGNvbnN0IHJlc29sdmVkSXRlbUNvbmZpZyA9IENvbmZpZ0NvbXBvbmVudEl0ZW1Db25maWcucmVzb2x2ZShkcmFnU291cmNlSXRlbUNvbmZpZywgZmFsc2UpO1xyXG5cclxuICAgICAgICBjb25zdCBjb21wb25lbnRJdGVtID0gbmV3IENvbXBvbmVudEl0ZW0odGhpcy5fbGF5b3V0TWFuYWdlciwgcmVzb2x2ZWRJdGVtQ29uZmlnLCB0aGlzLl9kdW1teUdyb3VuZENvbnRlbnRJdGVtKVxyXG4gICAgICAgIHRoaXMuX2R1bW15R3JvdW5kQ29udGVudEl0ZW0uY29udGVudEl0ZW1zLnB1c2goY29tcG9uZW50SXRlbSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9kcmFnTGlzdGVuZXIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ0RTT0RTRDY2NzQ2Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbmV3IERyYWdQcm94eSh4LCB5LCB0aGlzLl9kcmFnTGlzdGVuZXIsIHRoaXMuX2xheW91dE1hbmFnZXIsIGNvbXBvbmVudEl0ZW0gLCB0aGlzLl9kdW1teUdyb3VuZENvbnRlbnRJdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBvbkRyYWdTdG9wKCkge1xyXG4gICAgICAgIC8vIGlmICh0aGlzLl9kdW1teUdyb3VuZENvbnRlbnRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAvLyAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignRFNPRFNEUlUwODExNicpO1xyXG4gICAgICAgIC8vIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuX2R1bW15R3JvdW5kQ29udGVudEl0ZW0uXyRkZXN0cm95XHJcbiAgICAgICAgLy8gICAgIHRoaXMuX2R1bW15R3JvdW5kQ29udGVudEl0ZW0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgICAgIHRoaXMuY3JlYXRlRHJhZ0xpc3RlbmVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcblx0ICogQ2FsbGVkIGFmdGVyIGV2ZXJ5IGRyYWcgYW5kIHdoZW4gdGhlIGRyYWcgc291cmNlIGlzIGJlaW5nIGRpc3Bvc2VkIG9mLlxyXG4gICAgICogQGludGVybmFsXHJcblx0ICovXHJcblx0cHJpdmF0ZSByZW1vdmVEcmFnTGlzdGVuZXIoKSB7XHJcblx0XHRpZiAodGhpcy5fZHJhZ0xpc3RlbmVyICE9PSBudWxsICkge1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnTGlzdGVuZXIuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9kcmFnTGlzdGVuZXIgPSBudWxsO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBEcmFnU291cmNlIHtcclxuICAgIC8qKiBAZGVwcmVjYXRlZCAgdXNlIENvbmZpZyB7QGxpbmsgKENvbXBvbmVudEl0ZW1Db25maWc6aW50ZXJmYWNlKX0gKi9cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50SXRlbUNvbmZpZyB7XHJcbiAgICAgICAgdHlwZTogSnNvblZhbHVlLFxyXG4gICAgICAgIHN0YXRlPzogSnNvblZhbHVlLFxyXG4gICAgICAgIHRpdGxlPzogc3RyaW5nLFxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAZGVwcmVjYXRlZCByZW1vdmUgaW4gdmVyc2lvbiAzICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gaXNEcmFnU291cmNlQ29tcG9uZW50SXRlbUNvbmZpZyhcclxuICAgICAgICBjb25maWc6IERyYWdTb3VyY2UuQ29tcG9uZW50SXRlbUNvbmZpZyB8IENvbmZpZ0NvbXBvbmVudEl0ZW1Db25maWdcclxuICAgICk6IGNvbmZpZyBpcyBEcmFnU291cmNlLkNvbXBvbmVudEl0ZW1Db25maWcge1xyXG4gICAgICAgIHJldHVybiAhKFwiY29tcG9uZW50VHlwZVwiIGluIGNvbmZpZyk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRG9tQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvZG9tLWNvbnN0YW50cyc7XHJcbmltcG9ydCB7IEFyZWFMaW5rZWRSZWN0IH0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnO1xyXG5pbXBvcnQgeyBudW1iZXJUb1BpeGVscywgc2V0RWxlbWVudERpc3BsYXlWaXNpYmlsaXR5IH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgY2xhc3MgRHJvcFRhcmdldEluZGljYXRvciB7XHJcbiAgICBwcml2YXRlIF9lbGVtZW50OiBIVE1MRWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQ6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQuYm9keSwgYmVmb3JlOiBOb2RlIHwgbnVsbCA9IG51bGwpIHtcclxuICAgICAgICAvLyBNYXliZSB1c2UgY29udGFpbmVyIGluc3RlYWQgb2YgRG9jdW1lbnQgQm9keT9cclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRHJvcFRhcmdldEluZGljYXRvcik7XHJcbiAgICAgICAgY29uc3QgaW5uZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgaW5uZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Jbm5lcik7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZChpbm5lckVsZW1lbnQpO1xyXG5cclxuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMuX2VsZW1lbnQsIGJlZm9yZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZ2hsaWdodEFyZWEoYXJlYTogQXJlYUxpbmtlZFJlY3QsIG1hcmdpbjogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5sZWZ0ID0gbnVtYmVyVG9QaXhlbHMoYXJlYS54MSArIG1hcmdpbik7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS50b3AgPSBudW1iZXJUb1BpeGVscyhhcmVhLnkxICsgbWFyZ2luKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLndpZHRoID0gbnVtYmVyVG9QaXhlbHMoYXJlYS54MiAtIGFyZWEueDEgLSBtYXJnaW4pO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gbnVtYmVyVG9QaXhlbHMoYXJlYS55MiAtIGFyZWEueTEgLSBtYXJnaW4pO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZSgpOiB2b2lkIHtcclxuICAgICAgICBzZXRFbGVtZW50RGlzcGxheVZpc2liaWxpdHkodGhpcy5fZWxlbWVudCwgZmFsc2UpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEhlYWRlciB9IGZyb20gJy4vaGVhZGVyJztcclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGNsYXNzIEhlYWRlckJ1dHRvbiB7XHJcbiAgICBwcml2YXRlIF9lbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgX2NsaWNrRXZlbnRMaXN0ZW5lciA9IChldjogTW91c2VFdmVudCkgPT4gdGhpcy5vbkNsaWNrKGV2KTtcclxuICAgIHByaXZhdGUgX3RvdWNoU3RhcnRFdmVudExpc3RlbmVyID0gKGV2OiBUb3VjaEV2ZW50KSA9PiB0aGlzLm9uVG91Y2hTdGFydChldik7XHJcblxyXG4gICAgZ2V0IGVsZW1lbnQoKTogSFRNTEVsZW1lbnQgeyByZXR1cm4gdGhpcy5fZWxlbWVudDsgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2hlYWRlcjogSGVhZGVyLCBsYWJlbDogc3RyaW5nLCBjc3NDbGFzczogc3RyaW5nLCBwcml2YXRlIF9wdXNoRXZlbnQ6IEhlYWRlckJ1dHRvbi5QdXNoRXZlbnQpIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNzc0NsYXNzKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnRpdGxlID0gbGFiZWw7XHJcbiAgICAgICAgdGhpcy5faGVhZGVyLm9uKCdkZXN0cm95JywgKCkgPT4gdGhpcy5kZXN0cm95KCkpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9jbGlja0V2ZW50TGlzdGVuZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl90b3VjaFN0YXJ0RXZlbnRMaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xyXG4gICAgICAgIHRoaXMuX2hlYWRlci5jb250cm9sc0NvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fY2xpY2tFdmVudExpc3RlbmVyKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl90b3VjaFN0YXJ0RXZlbnRMaXN0ZW5lcik7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZCh0aGlzLl9lbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uQ2xpY2soZXY6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLl9wdXNoRXZlbnQoZXYpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Ub3VjaFN0YXJ0KGV2OiBUb3VjaEV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5fcHVzaEV2ZW50KGV2KTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIEhlYWRlckJ1dHRvbiB7XHJcbiAgICBleHBvcnQgdHlwZSBQdXNoRXZlbnQgPSAodGhpczogdm9pZCwgZXY6IEV2ZW50KSA9PiB2b2lkO1xyXG59XHJcbiIsImltcG9ydCB7IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9pbnRlcm5hbC1lcnJvcic7XHJcbmltcG9ydCB7IENvbXBvbmVudEl0ZW0gfSBmcm9tICcuLi9pdGVtcy9jb21wb25lbnQtaXRlbSc7XHJcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnLi4vaXRlbXMvc3RhY2snO1xyXG5pbXBvcnQgeyBMYXlvdXRNYW5hZ2VyIH0gZnJvbSAnLi4vbGF5b3V0LW1hbmFnZXInO1xyXG5pbXBvcnQgeyBEb21Db25zdGFudHMgfSBmcm9tICcuLi91dGlscy9kb20tY29uc3RhbnRzJztcclxuaW1wb3J0IHsgRHJhZ0xpc3RlbmVyIH0gZnJvbSAnLi4vdXRpbHMvZHJhZy1saXN0ZW5lcic7XHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJy4uL3V0aWxzL2V2ZW50LWVtaXR0ZXInO1xyXG5pbXBvcnQgeyBTaWRlIH0gZnJvbSAnLi4vdXRpbHMvdHlwZXMnO1xyXG5pbXBvcnQgeyBzZXRFbGVtZW50RGlzcGxheVZpc2liaWxpdHkgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IEhlYWRlckJ1dHRvbiB9IGZyb20gJy4vaGVhZGVyLWJ1dHRvbic7XHJcbmltcG9ydCB7IFRhYiB9IGZyb20gJy4vdGFiJztcclxuaW1wb3J0IHsgVGFic0NvbnRhaW5lciB9IGZyb20gJy4vdGFicy1jb250YWluZXInO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIGhlYWRlciBhYm92ZSBhIFN0YWNrIENvbnRlbnRJdGVtLlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSGVhZGVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3RhYnNDb250YWluZXI6IFRhYnNDb250YWluZXI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NvbnRyb2xzQ29udGFpbmVyRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfc2hvdzogYm9vbGVhbjtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3BvcG91dEVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9wb3BvdXRMYWJlbDogc3RyaW5nO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbWF4aW1pc2VFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbWF4aW1pc2VMYWJlbDogc3RyaW5nO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbWluaW1pc2VFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbWluaW1pc2VMYWJlbDogc3RyaW5nO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xvc2VFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xvc2VMYWJlbDogc3RyaW5nO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfdGFiRHJvcGRvd25FbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfdGFiRHJvcGRvd25MYWJlbDogc3RyaW5nO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3RhYkNvbnRyb2xPZmZzZXQ6IG51bWJlcjtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jbGlja0xpc3RlbmVyID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB0aGlzLm9uQ2xpY2soZXYpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfdG91Y2hTdGFydExpc3RlbmVyID0gKGV2OiBUb3VjaEV2ZW50KSA9PiB0aGlzLm9uVG91Y2hTdGFydChldik7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kb2N1bWVudE1vdXNlVXBMaXN0ZW5lcjogKHRoaXM6IHZvaWQpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfcm93Q29sdW1uQ2xvc2FibGUgPSB0cnVlO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfY2FuUmVtb3ZlQ29tcG9uZW50OiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfc2lkZTogU2lkZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2xlZnRSaWdodFNpZGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xvc2VCdXR0b246IEhlYWRlckJ1dHRvbiB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfcG9wb3V0QnV0dG9uOiBIZWFkZXJCdXR0b24gfCBudWxsID0gbnVsbDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3RhYkRyb3Bkb3duQnV0dG9uOiBIZWFkZXJCdXR0b247XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9tYXhpbWlzZUJ1dHRvbjogSGVhZGVyQnV0dG9uIHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfdXBkYXRlUmVxdWVzdGVkID0gMDtcclxuICAgIC8vIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIC8vIHByaXZhdGUgX2FjdGl2ZUNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0gfCBudWxsID0gbnVsbDsgLy8gb25seSB1c2VkIHRvIGlkZW50aWZ5IGFjdGl2ZSB0YWJcclxuXHJcbiAgICBnZXQgc2hvdygpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX3Nob3c7IH1cclxuICAgIGdldCBzaWRlKCk6IFNpZGUgeyByZXR1cm4gdGhpcy5fc2lkZTsgfVxyXG4gICAgZ2V0IGxlZnRSaWdodFNpZGVkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fbGVmdFJpZ2h0U2lkZWQ7IH1cclxuXHJcbiAgICBnZXQgbGF5b3V0TWFuYWdlcigpOiBMYXlvdXRNYW5hZ2VyIHsgcmV0dXJuIHRoaXMuX2xheW91dE1hbmFnZXI7IH1cclxuICAgIGdldCBwYXJlbnQoKTogU3RhY2sgeyByZXR1cm4gdGhpcy5fcGFyZW50OyB9XHJcbiAgICBnZXQgdGFicygpOiBUYWJbXSB7IHJldHVybiB0aGlzLl90YWJzQ29udGFpbmVyLnRhYnM7IH1cclxuICAgIGdldCBsYXN0VmlzaWJsZVRhYkluZGV4KCk6IG51bWJlciB7IHJldHVybiB0aGlzLl90YWJzQ29udGFpbmVyLmxhc3RWaXNpYmxlVGFiSW5kZXg7IH1cclxuXHJcbiAgICBnZXQgZWxlbWVudCgpOiBIVE1MRWxlbWVudCB7IHJldHVybiB0aGlzLl9lbGVtZW50OyB9XHJcbiAgICBnZXQgdGFic0NvbnRhaW5lckVsZW1lbnQoKTogSFRNTEVsZW1lbnQgeyByZXR1cm4gdGhpcy5fdGFic0NvbnRhaW5lci5lbGVtZW50OyB9XHJcbiAgICBnZXQgY29udHJvbHNDb250YWluZXJFbGVtZW50KCk6IEhUTUxFbGVtZW50IHsgcmV0dXJuIHRoaXMuX2NvbnRyb2xzQ29udGFpbmVyRWxlbWVudDsgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9sYXlvdXRNYW5hZ2VyOiBMYXlvdXRNYW5hZ2VyLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9wYXJlbnQ6IFN0YWNrLFxyXG4gICAgICAgIHNldHRpbmdzOiBIZWFkZXIuU2V0dGluZ3MsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX2NvbmZpZ0Nsb3NhYmxlOiBib29sZWFuLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9nZXRBY3RpdmVDb21wb25lbnRJdGVtRXZlbnQ6IEhlYWRlci5HZXRBY3RpdmVDb21wb25lbnRJdGVtRXZlbnQsXHJcbiAgICAgICAgY2xvc2VFdmVudDogSGVhZGVyLkNsb3NlRXZlbnQsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgX3BvcG91dEV2ZW50OiBIZWFkZXIuUG9wb3V0RXZlbnQgfCB1bmRlZmluZWQsXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgX21heGltaXNlVG9nZ2xlRXZlbnQ6IEhlYWRlci5NYXhpbWlzZVRvZ2dsZUV2ZW50IHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9jbGlja0V2ZW50OiBIZWFkZXIuQ2xpY2tFdmVudCB8IHVuZGVmaW5lZCxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfdG91Y2hTdGFydEV2ZW50OiBIZWFkZXIuVG91Y2hTdGFydEV2ZW50IHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9jb21wb25lbnRSZW1vdmVFdmVudDogSGVhZGVyLkNvbXBvbmVudFJlbW92ZUV2ZW50IHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9jb21wb25lbnRGb2N1c0V2ZW50OiBIZWFkZXIuQ29tcG9uZW50Rm9jdXNFdmVudCB8IHVuZGVmaW5lZCxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSBfY29tcG9uZW50RHJhZ1N0YXJ0RXZlbnQ6IEhlYWRlci5Db21wb25lbnREcmFnU3RhcnRFdmVudCB8IHVuZGVmaW5lZCxcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYnNDb250YWluZXIgPSBuZXcgVGFic0NvbnRhaW5lcih0aGlzLl9sYXlvdXRNYW5hZ2VyLFxyXG4gICAgICAgICAgICAoaXRlbSkgPT4gdGhpcy5oYW5kbGVUYWJJbml0aWF0ZWRDb21wb25lbnRSZW1vdmVFdmVudChpdGVtKSxcclxuICAgICAgICAgICAgKGl0ZW0pID0+IHRoaXMuaGFuZGxlVGFiSW5pdGlhdGVkQ29tcG9uZW50Rm9jdXNFdmVudChpdGVtKSxcclxuICAgICAgICAgICAgKHgsIHksIGRyYWdMaXN0ZW5lciwgaXRlbSkgPT4gdGhpcy5oYW5kbGVUYWJJbml0aWF0ZWREcmFnU3RhcnRFdmVudCh4LCB5LCBkcmFnTGlzdGVuZXIsIGl0ZW0pLFxyXG4gICAgICAgICAgICAoKSA9PiB0aGlzLnByb2Nlc3NUYWJEcm9wZG93bkFjdGl2ZUNoYW5nZWQoKSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLl9zaG93ID0gc2V0dGluZ3Muc2hvdztcclxuICAgICAgICB0aGlzLl9wb3BvdXRFbmFibGVkID0gc2V0dGluZ3MucG9wb3V0RW5hYmxlZDtcclxuICAgICAgICB0aGlzLl9wb3BvdXRMYWJlbCA9IHNldHRpbmdzLnBvcG91dExhYmVsO1xyXG4gICAgICAgIHRoaXMuX21heGltaXNlRW5hYmxlZCA9IHNldHRpbmdzLm1heGltaXNlRW5hYmxlZDtcclxuICAgICAgICB0aGlzLl9tYXhpbWlzZUxhYmVsID0gc2V0dGluZ3MubWF4aW1pc2VMYWJlbDtcclxuICAgICAgICB0aGlzLl9taW5pbWlzZUVuYWJsZWQgPSBzZXR0aW5ncy5taW5pbWlzZUVuYWJsZWQ7XHJcbiAgICAgICAgdGhpcy5fbWluaW1pc2VMYWJlbCA9IHNldHRpbmdzLm1pbmltaXNlTGFiZWw7XHJcbiAgICAgICAgdGhpcy5fY2xvc2VFbmFibGVkID0gc2V0dGluZ3MuY2xvc2VFbmFibGVkO1xyXG4gICAgICAgIHRoaXMuX2Nsb3NlTGFiZWwgPSBzZXR0aW5ncy5jbG9zZUxhYmVsO1xyXG4gICAgICAgIHRoaXMuX3RhYkRyb3Bkb3duRW5hYmxlZCA9IHNldHRpbmdzLnRhYkRyb3Bkb3duRW5hYmxlZDtcclxuICAgICAgICB0aGlzLl90YWJEcm9wZG93bkxhYmVsID0gc2V0dGluZ3MudGFiRHJvcGRvd25MYWJlbDtcclxuICAgICAgICB0aGlzLnNldFNpZGUoc2V0dGluZ3Muc2lkZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NhblJlbW92ZUNvbXBvbmVudCA9IHRoaXMuX2NvbmZpZ0Nsb3NhYmxlO1xyXG5cclxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VjdGlvbicpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkhlYWRlcik7XHJcbiAgICAgICAgdGhpcy5fY29udHJvbHNDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VjdGlvbicpO1xyXG4gICAgICAgIHRoaXMuX2NvbnRyb2xzQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuQ29udHJvbHMpO1xyXG4gICAgICAgIHRoaXMubGF5b3V0RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fY2xpY2tMaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xyXG4gICAgICAgIC8vdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5fdG91Y2hTdGFydExpc3RlbmVyLCB7IHBhc3NpdmU6IHRydWUgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2RvY3VtZW50TW91c2VVcExpc3RlbmVyID0gKCkgPT4gdGhpcy5fdGFic0NvbnRhaW5lci5oaWRlQWRkaXRpb25hbFRhYnNEcm9wZG93bigpXHJcbiAgICAgICAgZ2xvYmFsVGhpcy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5fZG9jdW1lbnRNb3VzZVVwTGlzdGVuZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5fdGFiQ29udHJvbE9mZnNldCA9IHRoaXMuX2xheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLnNldHRpbmdzLnRhYkNvbnRyb2xPZmZzZXQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl90YWJEcm9wZG93bkVuYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGFiRHJvcGRvd25CdXR0b24gPSBuZXcgSGVhZGVyQnV0dG9uKHRoaXMsIHRoaXMuX3RhYkRyb3Bkb3duTGFiZWwsIERvbUNvbnN0YW50cy5DbGFzc05hbWUuVGFiRHJvcGRvd24sXHJcbiAgICAgICAgICAgICAgICAoKSA9PiB0aGlzLl90YWJzQ29udGFpbmVyLnNob3dBZGRpdGlvbmFsVGFic0Ryb3Bkb3duKClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9wb3BvdXRFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvcG91dEJ1dHRvbiA9IG5ldyBIZWFkZXJCdXR0b24odGhpcywgdGhpcy5fcG9wb3V0TGFiZWwsIERvbUNvbnN0YW50cy5DbGFzc05hbWUuUG9wb3V0LCAoZXYpID0+IHRoaXMuaGFuZGxlQnV0dG9uUG9wb3V0RXZlbnQoZXYpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIE1heGltaXNlIGNvbnRyb2wgLSBzZXQgdGhlIGNvbXBvbmVudCB0byB0aGUgZnVsbCBzaXplIG9mIHRoZSBsYXlvdXRcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodGhpcy5fbWF4aW1pc2VFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21heGltaXNlQnV0dG9uID0gbmV3IEhlYWRlckJ1dHRvbih0aGlzLCB0aGlzLl9tYXhpbWlzZUxhYmVsLCBEb21Db25zdGFudHMuQ2xhc3NOYW1lLk1heGltaXNlLFxyXG4gICAgICAgICAgICAgICAgKGV2KSA9PiB0aGlzLmhhbmRsZUJ1dHRvbk1heGltaXNlVG9nZ2xlRXZlbnQoZXYpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDbG9zZSBidXR0b25cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodGhpcy5fY29uZmlnQ2xvc2FibGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2xvc2VCdXR0b24gPSBuZXcgSGVhZGVyQnV0dG9uKHRoaXMsIHRoaXMuX2Nsb3NlTGFiZWwsIERvbUNvbnN0YW50cy5DbGFzc05hbWUuQ2xvc2UsICgpID0+IGNsb3NlRXZlbnQoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnByb2Nlc3NUYWJEcm9wZG93bkFjdGl2ZUNoYW5nZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBsYXlvdXREZWZhdWx0KCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGVsID0gdGhpcy5fZWxlbWVudDtcclxuICAgICAgICB3aGlsZSAoZWwuZmlyc3RDaGlsZClcclxuICAgICAgICAgICAgZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQodGhpcy5fdGFic0NvbnRhaW5lci5lbGVtZW50KTtcclxuICAgICAgICBlbC5hcHBlbmRDaGlsZCh0aGlzLl9jb250cm9sc0NvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKHRoaXMuX3RhYnNDb250YWluZXIuZHJvcGRvd25FbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlc3Ryb3lzIHRoZSBlbnRpcmUgaGVhZGVyXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLmRlZmVySWZEcmFnZ2luZygoY2FuY2VsKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjYW5jZWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCdkZXN0cm95Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9wb3V0RXZlbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXhpbWlzZVRvZ2dsZUV2ZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xpY2tFdmVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RvdWNoU3RhcnRFdmVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudFJlbW92ZUV2ZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50Rm9jdXNFdmVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudERyYWdTdGFydEV2ZW50ID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3RhYnNDb250YWluZXIuZGVzdHJveSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGdsb2JhbFRoaXMuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX2RvY3VtZW50TW91c2VVcExpc3RlbmVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGFiIGFuZCBhc3NvY2lhdGVzIGl0IHdpdGggYSBjb250ZW50SXRlbVxyXG4gICAgICogQHBhcmFtIGluZGV4IC0gVGhlIHBvc2l0aW9uIG9mIHRoZSB0YWJcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBjcmVhdGVUYWIoY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSwgaW5kZXg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3RhYnNDb250YWluZXIuY3JlYXRlVGFiKGNvbXBvbmVudEl0ZW0sIGluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpbmRzIGEgdGFiIGJhc2VkIG9uIHRoZSBjb250ZW50SXRlbSBpdHMgYXNzb2NpYXRlZCB3aXRoIGFuZCByZW1vdmVzIGl0LlxyXG4gICAgICogQ2Fubm90IHJlbW92ZSB0YWIgaWYgaXQgaGFzIHRoZSBhY3RpdmUgQ29tcG9uZW50SXRlbVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZVRhYihjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdGFic0NvbnRhaW5lci5yZW1vdmVUYWIoY29tcG9uZW50SXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvY2Vzc0FjdGl2ZUNvbXBvbmVudENoYW5nZWQobmV3QWN0aXZlQ29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3RhYnNDb250YWluZXIucHJvY2Vzc0FjdGl2ZUNvbXBvbmVudENoYW5nZWQobmV3QWN0aXZlQ29tcG9uZW50SXRlbSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVUYWJTaXplcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHNldFNpZGUodmFsdWU6IFNpZGUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9zaWRlID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5fbGVmdFJpZ2h0U2lkZWQgPSBbU2lkZS5yaWdodCwgU2lkZS5sZWZ0XS5pbmNsdWRlcyh0aGlzLl9zaWRlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2dyYW1tYXRpY2FsbHkgc2V0IGNsb3NhYmlsaXR5LlxyXG4gICAgICogQHBhcmFtIHZhbHVlIC0gV2hldGhlciB0byBlbmFibGUvZGlzYWJsZSBjbG9zYWJpbGl0eS5cclxuICAgICAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIGFjdGlvbiB3YXMgc3VjY2Vzc2Z1bFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHNldFJvd0NvbHVtbkNsb3NhYmxlKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fcm93Q29sdW1uQ2xvc2FibGUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUNsb3NhYmlsaXR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBoZWFkZXIncyBjbG9zYWJpbGl0eS4gSWYgYSBzdGFjay9oZWFkZXIgaXMgYWJsZVxyXG4gICAgICogdG8gY2xvc2UsIGJ1dCBoYXMgYSBub24gY2xvc2FibGUgY29tcG9uZW50IGFkZGVkIHRvIGl0LCB0aGUgc3RhY2sgaXMgbm9cclxuICAgICAqIGxvbmdlciBjbG9zYWJsZSB1bnRpbCBhbGwgY29tcG9uZW50cyBhcmUgY2xvc2FibGUuXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdXBkYXRlQ2xvc2FiaWxpdHkoKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGlzQ2xvc2FibGU6IGJvb2xlYW47XHJcbiAgICAgICAgaWYgKCF0aGlzLl9jb25maWdDbG9zYWJsZSkge1xyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9yb3dDb2x1bW5DbG9zYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgaXNDbG9zYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaXNDbG9zYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZW4gPSB0aGlzLnRhYnMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhYiA9IHRoaXMuX3RhYnNDb250YWluZXIudGFic1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gdGFiLmNvbXBvbmVudEl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdGVtLmlzQ2xvc2FibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNDbG9zYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9jbG9zZUJ1dHRvbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzZXRFbGVtZW50RGlzcGxheVZpc2liaWxpdHkodGhpcy5fY2xvc2VCdXR0b24uZWxlbWVudCwgaXNDbG9zYWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9wb3BvdXRCdXR0b24gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgc2V0RWxlbWVudERpc3BsYXlWaXNpYmlsaXR5KHRoaXMuX3BvcG91dEJ1dHRvbi5lbGVtZW50LCBpc0Nsb3NhYmxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2NhblJlbW92ZUNvbXBvbmVudCA9IGlzQ2xvc2FibGUgfHwgdGhpcy5fdGFic0NvbnRhaW5lci50YWJDb3VudCA+IDE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgYXBwbHlGb2N1c2VkVmFsdWUodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRm9jdXNlZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRm9jdXNlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByb2Nlc3NNYXhpbWlzZWQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX21heGltaXNlQnV0dG9uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignSFBNQVgxNjk5NycpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21heGltaXNlQnV0dG9uLmVsZW1lbnQuc2V0QXR0cmlidXRlKCd0aXRsZScsIHRoaXMuX21pbmltaXNlTGFiZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm9jZXNzTWluaW1pc2VkKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9tYXhpbWlzZUJ1dHRvbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0hQTUlOMTY5OTcnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXhpbWlzZUJ1dHRvbi5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGl0bGUnLCB0aGlzLl9tYXhpbWlzZUxhYmVsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQdXNoZXMgdGhlIHRhYnMgdG8gdGhlIHRhYiBkcm9wZG93biBpZiB0aGUgYXZhaWxhYmxlIHNwYWNlIGlzIG5vdCBzdWZmaWNpZW50XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgdXBkYXRlVGFiU2l6ZXMoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3VwZGF0ZVJlcXVlc3RlZClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZVJlcXVlc3RlZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVSZXF1ZXN0ZWQgPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3RhYnNDb250YWluZXIudGFiQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAvKiBXZSBuZWVkIGV4cGxpY2l0IHRoaXMuX2VsZW1lbnQuc3R5bGUud2lkdGhcclxuICAgICAgICAgICAgICAgICogaWYgdGhlIGhlYWRlciBpcyBpbiBhbiBsbV9oZWFkZXIgY29udGFpbmVyLlxyXG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVySGVpZ2h0ID0gdGhpcy5fc2hvdyA/IHRoaXMuX2xheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLmRpbWVuc2lvbnMuaGVhZGVySGVpZ2h0IDogMDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9sZWZ0UmlnaHRTaWRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS53aWR0aCA9IGAke2hlYWRlckhlaWdodH1weDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS53aWR0aCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYCR7aGVhZGVySGVpZ2h0fXB4YDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB0aGlzLl90YWJzQ29udGFpbmVyLnVwZGF0ZVRhYlNpemVzKHRoaXMsIHRoaXMuX2dldEFjdGl2ZUNvbXBvbmVudEl0ZW1FdmVudCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGF2YWlsYWJsZVRhYnNTaXplKCk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgZWwgPSB0aGlzLl9lbGVtZW50O1xyXG4gICAgICAgIGxldCBhdmFpbCA9IHRoaXMuX2xlZnRSaWdodFNpZGVkID8gZWwub2Zmc2V0SGVpZ2h0IDogZWwub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgZm9yIChsZXQgY2ggPSBlbC5maXJzdEVsZW1lbnRDaGlsZDsgY2g7IGNoID0gY2gubmV4dEVsZW1lbnRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgIGlmIChjaCAhPT0gdGhpcy50YWJzQ29udGFpbmVyRWxlbWVudCAmJiBjaCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBhdmFpbCAtPSB0aGlzLl9sZWZ0UmlnaHRTaWRlZCA/IGNoLm9mZnNldEhlaWdodCA6IGNoLm9mZnNldFdpZHRoXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGF2YWlsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlVGFiSW5pdGlhdGVkQ29tcG9uZW50UmVtb3ZlRXZlbnQoY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9jYW5SZW1vdmVDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbXBvbmVudFJlbW92ZUV2ZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0hIVENFMjIyOTQnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudFJlbW92ZUV2ZW50KGNvbXBvbmVudEl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlVGFiSW5pdGlhdGVkQ29tcG9uZW50Rm9jdXNFdmVudChjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbXBvbmVudEZvY3VzRXZlbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdISFRBRTIyMjk0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50Rm9jdXNFdmVudChjb21wb25lbnRJdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVUYWJJbml0aWF0ZWREcmFnU3RhcnRFdmVudCh4OiBudW1iZXIsIHk6IG51bWJlciwgZHJhZ0xpc3RlbmVyOiBEcmFnTGlzdGVuZXIsIGNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0pIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2NhblJlbW92ZUNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBkcmFnTGlzdGVuZXIuY2FuY2VsRHJhZygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb21wb25lbnREcmFnU3RhcnRFdmVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdISFREU0UyMjI5NCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50RHJhZ1N0YXJ0RXZlbnQoeCwgeSwgZHJhZ0xpc3RlbmVyLCBjb21wb25lbnRJdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHByb2Nlc3NUYWJEcm9wZG93bkFjdGl2ZUNoYW5nZWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RhYkRyb3Bkb3duQnV0dG9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgc2V0RWxlbWVudERpc3BsYXlWaXNpYmlsaXR5KHRoaXMuX3RhYkRyb3Bkb3duQnV0dG9uLmVsZW1lbnQsIHRoaXMuX3RhYnNDb250YWluZXIuZHJvcGRvd25BY3RpdmUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGhhbmRsZUJ1dHRvblBvcG91dEV2ZW50KGV2OiBFdmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9sYXlvdXRNYW5hZ2VyLnBvcG91dENsaWNrSGFuZGxlcih0aGlzLnBhcmVudCwgZXYpKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMuX2xheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLnNldHRpbmdzLnBvcG91dFdob2xlU3RhY2spIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BvcG91dEV2ZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0hIQlBPRTE3ODM0Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3BvdXRFdmVudCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgYWN0aXZlQ29tcG9uZW50SXRlbSA9IHRoaXMuX2dldEFjdGl2ZUNvbXBvbmVudEl0ZW1FdmVudCgpO1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlQ29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlQ29tcG9uZW50SXRlbS5wb3BvdXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBlbHNlOiBpZiB0aGUgc3RhY2sgaXMgZW1wdHkgdGhlcmUgd29uJ3QgYmUgYW4gYWN0aXZlIGl0ZW0gKGFuZCBub3RoaW5nIHRvIHBvcG91dClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVCdXR0b25NYXhpbWlzZVRvZ2dsZUV2ZW50KGV2OiBFdmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9tYXhpbWlzZVRvZ2dsZUV2ZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignSEhCTVRFMTY4MzQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXhpbWlzZVRvZ2dsZUV2ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlZCB3aGVuIHRoZSBoZWFkZXIncyBiYWNrZ3JvdW5kIGlzIGNsaWNrZWQgKG5vdCBpdHMgdGFicyBvciBjb250cm9scylcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSB0aGlzLl9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5Q2xpY2soZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEludm9rZWQgd2hlbiB0aGUgaGVhZGVyJ3MgYmFja2dyb3VuZCBpcyB0b3VjaGVkIChub3QgaXRzIHRhYnMgb3IgY29udHJvbHMpXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvblRvdWNoU3RhcnQoZXZlbnQ6IFRvdWNoRXZlbnQpIHtcclxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSB0aGlzLl9lbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWZ5VG91Y2hTdGFydChldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgbm90aWZ5Q2xpY2soZXY6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5fY2xpY2tFdmVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0hOSEM0NjgzNCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrRXZlbnQoZXYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIG5vdGlmeVRvdWNoU3RhcnQoZXY6IFRvdWNoRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5fdG91Y2hTdGFydEV2ZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignSE5IVFM0NjgzNCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RvdWNoU3RhcnRFdmVudChldik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIEhlYWRlciB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgdHlwZSBHZXRBY3RpdmVDb21wb25lbnRJdGVtRXZlbnQgPSAodGhpczogdm9pZCkgPT4gQ29tcG9uZW50SXRlbSB8IHVuZGVmaW5lZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIENsb3NlRXZlbnQgPSAodGhpczogdm9pZCkgPT4gdm9pZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIFBvcG91dEV2ZW50ID0gKHRoaXM6IHZvaWQpID0+IHZvaWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgdHlwZSBNYXhpbWlzZVRvZ2dsZUV2ZW50ID0gKHRoaXM6IHZvaWQpID0+IHZvaWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgdHlwZSBDbGlja0V2ZW50ID0gKHRoaXM6IHZvaWQsIGV2OiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IHR5cGUgVG91Y2hTdGFydEV2ZW50ID0gKHRoaXM6IHZvaWQsIGV2OiBUb3VjaEV2ZW50KSA9PiB2b2lkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IHR5cGUgQ29tcG9uZW50UmVtb3ZlRXZlbnQgPSAodGhpczogdm9pZCwgY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkgPT4gdm9pZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIENvbXBvbmVudEZvY3VzRXZlbnQgPSAodGhpczogdm9pZCwgY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkgPT4gdm9pZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIENvbXBvbmVudERyYWdTdGFydEV2ZW50ID0gKHRoaXM6IHZvaWQsIHg6IG51bWJlciwgeTogbnVtYmVyLCBkcmFnTGlzdGVuZXI6IERyYWdMaXN0ZW5lciwgY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkgPT4gdm9pZDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIFN0YXRlQ2hhbmdlZEV2ZW50ID0gKHRoaXM6IHZvaWQpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBTZXR0aW5ncyB7XHJcbiAgICAgICAgc2hvdzogYm9vbGVhbjtcclxuICAgICAgICBzaWRlOiBTaWRlO1xyXG4gICAgICAgIHBvcG91dEVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgcG9wb3V0TGFiZWw6IHN0cmluZztcclxuICAgICAgICBtYXhpbWlzZUVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgbWF4aW1pc2VMYWJlbDogc3RyaW5nO1xyXG4gICAgICAgIG1pbmltaXNlRW5hYmxlZDogYm9vbGVhbjtcclxuICAgICAgICBtaW5pbWlzZUxhYmVsOiBzdHJpbmc7XHJcbiAgICAgICAgY2xvc2VFbmFibGVkOiBib29sZWFuO1xyXG4gICAgICAgIGNsb3NlTGFiZWw6IHN0cmluZztcclxuICAgICAgICB0YWJEcm9wZG93bkVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAgICAgdGFiRHJvcGRvd25MYWJlbDogc3RyaW5nO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IERvbUNvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL2RvbS1jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIgfSBmcm9tICcuLi91dGlscy9kcmFnLWxpc3RlbmVyJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi4vdXRpbHMvZXZlbnQtZW1pdHRlcic7XHJcbmltcG9ydCB7IG51bWJlclRvUGl4ZWxzIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgY2xhc3MgU3BsaXR0ZXIge1xyXG4gICAgcHJpdmF0ZSBfZ3JhYlNpemU7XHJcbiAgICBwcml2YXRlIF9kcmFnTGlzdGVuZXI6IERyYWdMaXN0ZW5lcjtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2RyYWdIYW5kbGVFbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2JhY2tncm91bmRFbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2RyYWdIYW5kbGVPZmZzZXQ6IG51bWJlcjtcclxuXHJcbiAgICBnZXQgZWxlbWVudCgpOiBIVE1MRGl2RWxlbWVudCB7IHJldHVybiB0aGlzLl9lbGVtZW50OyB9XHJcbiAgICBnZXQgZHJhZ0hhbmRsZUVsZW1lbnQoKTogSFRNTERpdkVsZW1lbnQgeyByZXR1cm4gdGhpcy5fZHJhZ0hhbmRsZUVsZW1lbnQ7IH1cclxuICAgIGdldCBiYWNrZ3JvdW5kRWxlbWVudCgpOiBIVE1MRGl2RWxlbWVudCB7IHJldHVybiB0aGlzLl9iYWNrZ3JvdW5kRWxlbWVudDsgfVxyXG4gICAgZ2V0IGRyYWdIYW5kbGVPZmZzZXQoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2RyYWdIYW5kbGVPZmZzZXQ7IH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9pc1ZlcnRpY2FsOiBib29sZWFuLCBwcml2YXRlIF9zaXplOiBudW1iZXIsIGdyYWJTaXplOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9ncmFiU2l6ZSA9IGdyYWJTaXplIDwgdGhpcy5fc2l6ZSA/IHRoaXMuX3NpemUgOiBncmFiU2l6ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlNwbGl0dGVyKTtcclxuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGNvbnN0IGRyYWdIYW5kbGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5fZHJhZ0hhbmRsZUVsZW1lbnQgPSBkcmFnSGFuZGxlRWxlbWVudDtcclxuICAgICAgICBkcmFnSGFuZGxlRWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRHJhZ0hhbmRsZSk7XHJcbiAgICAgICAgdGhpcy5fYmFja2dyb3VuZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkJnKTtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnZHJhZ2dhYmxlJywgJ3RydWUnKTtcclxuXHJcbiAgICAgICAgY29uc3QgaGFuZGxlRXhjZXNzU2l6ZSA9IHRoaXMuX2dyYWJTaXplIC0gdGhpcy5fc2l6ZTtcclxuICAgICAgICBjb25zdCBoYW5kbGVFeGNlc3NQb3MgPSBoYW5kbGVFeGNlc3NTaXplIC8gMjtcclxuICAgICAgICB0aGlzLl9kcmFnSGFuZGxlT2Zmc2V0ID0gaGFuZGxlRXhjZXNzUG9zO1xyXG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSBudW1iZXJUb1BpeGVscyhoYW5kbGVFeGNlc3NQb3MpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICBkcmFnSGFuZGxlRWxlbWVudC5zdHlsZS50b3AgPSBgJHstaGFuZGxlRXhjZXNzUG9zfXB4YDtcclxuICAgICAgICAgICAgZHJhZ0hhbmRsZUVsZW1lbnQuc3R5bGUucGFkZGluZ1RvcCA9IHBhZGRpbmc7XHJcbiAgICAgICAgICAgIGRyYWdIYW5kbGVFbGVtZW50LnN0eWxlLnBhZGRpbmdCb3R0b20gPSBwYWRkaW5nO1xyXG4gICAgICAgICAgICBkcmFnSGFuZGxlRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBudW1iZXJUb1BpeGVscyh0aGlzLl9zaXplKTtcclxuICAgICAgICAgICAgdGhpcy5fYmFja2dyb3VuZEVsZW1lbnQuc3R5bGUudG9wID0gYCR7LWhhbmRsZUV4Y2Vzc1Bvc31weGA7XHJcbiAgICAgICAgICAgIHRoaXMuX2JhY2tncm91bmRFbGVtZW50LnN0eWxlLmhlaWdodCA9IGAke3RoaXMuX2dyYWJTaXplfXB4YDtcclxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuVmVydGljYWwpO1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmhlaWdodCA9IG51bWJlclRvUGl4ZWxzKHRoaXMuX3NpemUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRyYWdIYW5kbGVFbGVtZW50LnN0eWxlLmxlZnQgPSBgJHstaGFuZGxlRXhjZXNzUG9zfXB4YDtcclxuICAgICAgICAgICAgZHJhZ0hhbmRsZUVsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSBwYWRkaW5nO1xyXG4gICAgICAgICAgICBkcmFnSGFuZGxlRWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nO1xyXG4gICAgICAgICAgICBkcmFnSGFuZGxlRWxlbWVudC5zdHlsZS53aWR0aCA9IG51bWJlclRvUGl4ZWxzKHRoaXMuX3NpemUpO1xyXG4gICAgICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kRWxlbWVudC5zdHlsZS5sZWZ0ID0gYCR7LWhhbmRsZUV4Y2Vzc1Bvc31weGA7XHJcbiAgICAgICAgICAgIHRoaXMuX2JhY2tncm91bmRFbGVtZW50LnN0eWxlLndpZHRoID0gYCR7dGhpcy5fZ3JhYlNpemV9cHhgO1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Ib3Jpem9udGFsKTtcclxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS53aWR0aCA9IG51bWJlclRvUGl4ZWxzKHRoaXMuX3NpemUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9iYWNrZ3JvdW5kRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZChkcmFnSGFuZGxlRWxlbWVudCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lciA9IG5ldyBEcmFnTGlzdGVuZXIodGhpcy5fZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uPEsgZXh0ZW5kcyBrZXlvZiBFdmVudEVtaXR0ZXIuRXZlbnRQYXJhbXNNYXA+KGV2ZW50TmFtZTogSywgY2FsbGJhY2s6IEV2ZW50RW1pdHRlci5DYWxsYmFjazxLPik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lci5vbjxLPihldmVudE5hbWUsIGNhbGxiYWNrKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xuaW1wb3J0IHsgQ29tcG9uZW50SXRlbSB9IGZyb20gJy4uL2l0ZW1zL2NvbXBvbmVudC1pdGVtJztcbmltcG9ydCB7IENvbXBvbmVudENvbnRhaW5lciB9IGZyb20gJy4uL2NvbnRhaW5lci9jb21wb25lbnQtY29udGFpbmVyJztcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnLi4vaXRlbXMvc3RhY2snO1xuaW1wb3J0IHsgTGF5b3V0TWFuYWdlciB9IGZyb20gJy4uL2xheW91dC1tYW5hZ2VyJztcbmltcG9ydCB7IERvbUNvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL2RvbS1jb25zdGFudHMnO1xuaW1wb3J0IHsgRHJhZ0xpc3RlbmVyIH0gZnJvbSAnLi4vdXRpbHMvZHJhZy1saXN0ZW5lcic7XG5pbXBvcnQgeyBlbmFibGVJRnJhbWVQb2ludGVyRXZlbnRzIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gaW5kaXZpZHVhbCB0YWIgd2l0aGluIGEgU3RhY2sncyBoZWFkZXJcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIFRhYiB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2VsZW1lbnQ6IEhUTUxEaXZFbGVtZW50O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IF90aXRsZUVsZW1lbnQ6IEhUTUxTcGFuRWxlbWVudDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xvc2VFbGVtZW50OiBIVE1MRGl2RWxlbWVudCB8IHVuZGVmaW5lZDtcblxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIF9kcmFnTGlzdGVuZXI6IERyYWdMaXN0ZW5lciB8IHVuZGVmaW5lZDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSBfaXNBY3RpdmUgPSBmYWxzZTtcblxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IF90YWJUb3VjaFN0YXJ0TGlzdGVuZXIgPSAoZXY6IFRvdWNoRXZlbnQpID0+IHRoaXMub25UYWJUb3VjaFN0YXJ0KGV2KTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xvc2VDbGlja0xpc3RlbmVyID0gKCkgPT4gdGhpcy5vbkNsb3NlQ2xpY2soKTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2xvc2VUb3VjaFN0YXJ0TGlzdGVuZXIgPSAoKSA9PiB0aGlzLm9uQ2xvc2VUb3VjaFN0YXJ0KCk7XG4gICAgLy8gLyoqIEBpbnRlcm5hbCAqL1xuICAgIC8vIHByaXZhdGUgcmVhZG9ubHkgX2Nsb3NlTW91c2VEb3duTGlzdGVuZXIgPSAoKSA9PiB0aGlzLm9uQ2xvc2VNb3VzZWRvd24oKTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZHJhZ1N0YXJ0TGlzdGVuZXJPbGQgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IHRoaXMub25EcmFnU3RhcnRPbGQoeCwgeSk7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2RyYWdTdGFydExpc3RlbmVyID0gKGU6IERyYWdFdmVudCkgPT4gdGhpcy5vbkRyYWdTdGFydChlKTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY29udGVudEl0ZW1EZXN0cm95TGlzdGVuZXIgPSAoKSA9PiB0aGlzLm9uQ29udGVudEl0ZW1EZXN0cm95KCk7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3RhYlRpdGxlQ2hhbmdlZExpc3RlbmVyID0gKHRpdGxlOiBzdHJpbmcpID0+IHRoaXMuc2V0VGl0bGUodGl0bGUpO1xuICAgIHJlYWRvbmx5IHRhYkNsaWNrTGlzdGVuZXIgPSAoZXY6IE1vdXNlRXZlbnQpOiB2b2lkID0+IHRoaXMub25UYWJDbGlja0Rvd24oZXYpO1xuICAgIGdldCBpc0FjdGl2ZSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX2lzQWN0aXZlOyB9XG4gICAgLy8gZ2V0IGhlYWRlcigpOiBIZWFkZXIgeyByZXR1cm4gdGhpcy5faGVhZGVyOyB9XG4gICAgZ2V0IGNvbXBvbmVudEl0ZW0oKTogQ29tcG9uZW50SXRlbSB7IHJldHVybiB0aGlzLl9jb21wb25lbnRJdGVtOyB9XG4gICAgLyoqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKFRhYjpjbGFzcykuY29tcG9uZW50SXRlbX0gKi9cbiAgICBnZXQgY29udGVudEl0ZW0oKTogQ29tcG9uZW50SXRlbSB7IHJldHVybiB0aGlzLl9jb21wb25lbnRJdGVtOyB9XG4gICAgZ2V0IGVsZW1lbnQoKTogSFRNTEVsZW1lbnQgeyByZXR1cm4gdGhpcy5fZWxlbWVudDsgfVxuICAgIGdldCB0aXRsZUVsZW1lbnQoKTogSFRNTEVsZW1lbnQgeyByZXR1cm4gdGhpcy5fdGl0bGVFbGVtZW50OyB9XG4gICAgZ2V0IGNsb3NlRWxlbWVudCgpOiBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCB7IHJldHVybiB0aGlzLl9jbG9zZUVsZW1lbnQ7IH1cbiAgICBnZXQgcmVvcmRlckVuYWJsZWQoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9kcmFnTGlzdGVuZXIgIT09IHVuZGVmaW5lZDsgfVxuICAgIHNldCByZW9yZGVyRW5hYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMucmVvcmRlckVuYWJsZWQpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlUmVvcmRlcigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVSZW9yZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfbGF5b3V0TWFuYWdlcjogTGF5b3V0TWFuYWdlcixcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBwcml2YXRlIF9jb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtLFxuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHByaXZhdGUgX2Nsb3NlRXZlbnQ6IFRhYi5DbG9zZUV2ZW50IHwgdW5kZWZpbmVkLFxuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHByaXZhdGUgX2ZvY3VzRXZlbnQ6IFRhYi5Gb2N1c0V2ZW50IHwgdW5kZWZpbmVkLFxuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHByaXZhdGUgX2RyYWdTdGFydEV2ZW50OiBUYWIuRHJhZ1N0YXJ0RXZlbnQgfCB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5UYWIpO1xuICAgICAgICB0aGlzLl90aXRsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgIHRoaXMuX3RpdGxlRWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuVGl0bGUpO1xuICAgICAgICB0aGlzLl9jbG9zZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fY2xvc2VFbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5DbG9zZVRhYik7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAndHJ1ZScpO1xuICAgICAgICB0aGlzLl9jbG9zZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAnZmFsc2UnKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl90aXRsZUVsZW1lbnQpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2Nsb3NlRWxlbWVudCk7XG5cbiAgICAgICAgaWYgKF9jb21wb25lbnRJdGVtLmlzQ2xvc2FibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jbG9zZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0VGl0bGUoX2NvbXBvbmVudEl0ZW0udGl0bGUpO1xuICAgICAgICB0aGlzLl9jb21wb25lbnRJdGVtLm9uKCd0aXRsZUNoYW5nZWQnLCB0aGlzLl90YWJUaXRsZUNoYW5nZWRMaXN0ZW5lcik7XG5cbiAgICAgICAgY29uc3QgcmVvcmRlckVuYWJsZWQgPSBfY29tcG9uZW50SXRlbS5yZW9yZGVyRW5hYmxlZCA/PyB0aGlzLl9sYXlvdXRNYW5hZ2VyLmxheW91dENvbmZpZy5zZXR0aW5ncy5yZW9yZGVyRW5hYmxlZDtcblxuICAgICAgICBpZiAocmVvcmRlckVuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlUmVvcmRlcigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMudGFiQ2xpY2tMaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICAvL3RoaXMuX2VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuX3RhYlRvdWNoU3RhcnRMaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLl9jb21wb25lbnRJdGVtLmlzQ2xvc2FibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX2Nsb3NlQ2xpY2tMaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICAgICAgdGhpcy5fY2xvc2VFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLl9jbG9zZVRvdWNoU3RhcnRMaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgICAgICAgICAgLy8gdGhpcy5fY2xvc2VFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuX2Nsb3NlTW91c2VEb3duTGlzdGVuZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEl0ZW0uc2V0VGFiKHRoaXMpO1xuICAgICAgICB0aGlzLl9sYXlvdXRNYW5hZ2VyLmVtaXQoJ3RhYkNyZWF0ZWQnLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0YWIncyB0aXRsZSB0byB0aGUgcHJvdmlkZWQgc3RyaW5nIGFuZCBzZXRzXG4gICAgICogaXRzIHRpdGxlIGF0dHJpYnV0ZSB0byBhIHB1cmUgdGV4dCByZXByZXNlbnRhdGlvbiAod2l0aG91dFxuICAgICAqIGh0bWwgdGFncykgb2YgdGhlIHNhbWUgc3RyaW5nLlxuICAgICAqL1xuICAgIHNldFRpdGxlKHRpdGxlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC50aXRsZSA9IHRpdGxlO1xuICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmNvbXBvbmVudEl0ZW0ucGFyZW50O1xuICAgICAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgU3RhY2spXG4gICAgICAgICAgICBwYXJlbnQuaGVhZGVyLnVwZGF0ZVRhYlNpemVzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGlzIHRhYidzIGFjdGl2ZSBzdGF0ZS4gVG8gcHJvZ3JhbW1hdGljYWxseVxuICAgICAqIHN3aXRjaCB0YWJzLCB1c2UgU3RhY2suc2V0QWN0aXZlQ29tcG9uZW50SXRlbSggaXRlbSApIGluc3RlYWQuXG4gICAgICovXG4gICAgc2V0QWN0aXZlKGlzQWN0aXZlOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChpc0FjdGl2ZSA9PT0gdGhpcy5faXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pc0FjdGl2ZSA9IGlzQWN0aXZlO1xuXG4gICAgICAgIGlmIChpc0FjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuQWN0aXZlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShEb21Db25zdGFudHMuQ2xhc3NOYW1lLkFjdGl2ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyB0aGUgdGFiXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gKGNhbmNlbDogYm9vbGVhbikgPT4ge1xuICAgICAgICAgICAgaWYgKGNhbmNlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlRXZlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLl9mb2N1c0V2ZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5fZHJhZ1N0YXJ0RXZlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy50YWJDbGlja0xpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuX3RhYlRvdWNoU3RhcnRMaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLl9jbG9zZUVsZW1lbnQ/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fY2xvc2VDbGlja0xpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlRWxlbWVudD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMuX2Nsb3NlVG91Y2hTdGFydExpc3RlbmVyKTtcbiAgICAgICAgICAgIC8vIHRoaXMuX2Nsb3NlRWxlbWVudD8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5fY2xvc2VNb3VzZURvd25MaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLl9jb21wb25lbnRJdGVtLm9mZigndGl0bGVDaGFuZ2VkJywgdGhpcy5fdGFiVGl0bGVDaGFuZ2VkTGlzdGVuZXIpO1xuICAgICAgICAgICAgaWYgKHRoaXMucmVvcmRlckVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVSZW9yZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGxtID0gdGhpcy5fbGF5b3V0TWFuYWdlcjtcbiAgICAgICAgaWYgKGxtLmN1cnJlbnRseURyYWdnaW5nKCkpIHtcbiAgICAgICAgICAgIGxtLmRlZmVySWZEcmFnZ2luZyhhY3Rpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0aW9uKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBsbS5kZWZlcklmRHJhZ2dpbmcoKGNhbmNlbCkgPT4ge1xuICAgICAgICAgICAgaWYgKCEgY2FuY2VsKVxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKiogQGludGVybmFsICovXG4gICAgc2V0Qmx1cnJlZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRm9jdXNlZCk7XG4gICAgICAgIHRoaXMuX3RpdGxlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRm9jdXNlZCk7XG4gICAgfVxuXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHNldEZvY3VzZWQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkZvY3VzZWQpO1xuICAgICAgICB0aGlzLl90aXRsZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkZvY3VzZWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9sZCBjYWxsYmFjayBmb3IgdGhlIERyYWdMaXN0ZW5lclxuICAgICAqIEBwYXJhbSB4IC0gVGhlIHRhYnMgYWJzb2x1dGUgeCBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB5IC0gVGhlIHRhYnMgYWJzb2x1dGUgeSBwb3NpdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHByaXZhdGUgb25EcmFnU3RhcnRPbGQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX2RyYWdMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdUT0RTRExVMTAwOTMnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kcmFnU3RhcnRFdmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignVE9EUzIzMzA5Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdTdGFydEV2ZW50KHgsIHksIHRoaXMuX2RyYWdMaXN0ZW5lciwgdGhpcy5jb21wb25lbnRJdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkRyYWdTdGFydChlOiBEcmFnRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgLy8gU2VlIGRyYWctbGlzdGVuZXIjc3RhcnREcmFnXG4gICAgICAgIGNvbnN0IHRhYkVsZW1lbnQgPSB0aGlzLl9lbGVtZW50O1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5EcmFnZ2luZyk7XG4gICAgICAgIHRhYkVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkRyYWdnaW5nKTtcbiAgICAgICAgZW5hYmxlSUZyYW1lUG9pbnRlckV2ZW50cyhmYWxzZSk7XG4gICAgICAgIC8vIEZJWE1FOiBzZXQgbm9uLW1heGltaXplZFxuICAgICAgICB0aGlzLl9sYXlvdXRNYW5hZ2VyLnN0YXJ0Q29tcG9uZW50RHJhZyhlLCB0aGlzLmNvbXBvbmVudEl0ZW0pO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgICAgIHRoaXMuX2xheW91dE1hbmFnZXIuZGVmZXJJZkRyYWdnaW5nKChfY2FuY2VsOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5EcmFnZ2luZyk7XG4gICAgICAgICAgICB0YWJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5EcmFnZ2luZyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIG9uQ29udGVudEl0ZW1EZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5fZHJhZ0xpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2RyYWdMaXN0ZW5lci5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLl9kcmFnTGlzdGVuZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB3aGVuIHRoZSB0YWIgaXMgY2xpY2tlZFxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHByaXZhdGUgb25UYWJDbGlja0Rvd24oZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuXG4gICAgICAgIC8vIHJldHVybiBpZiBjbGlja2luZyBjaGlsZCBvZiB0YWIgdW5sZXNzIGluc2lkZSBhbiBsbV90aXRsZVxuICAgICAgICBpZiAodGFyZ2V0ICE9PSB0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBwID0gdGFyZ2V0OyAhIHAuY2xhc3NMaXN0LmNvbnRhaW5zKFwibG1fdGl0bGVcIik7XG4gICAgICAgICAgICAgICAgIHAgPSBwLnBhcmVudE5vZGUgYXMgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAocCA9PSB0aGlzLl9lbGVtZW50IHx8IHAgPT0gZG9jdW1lbnQuYm9keSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbGVmdCBtb3VzZSBidXR0b25cbiAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiA9PT0gMCkge1xuICAgICAgICAgICAgLy8gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLm5vdGlmeUZvY3VzKCk7XG5cbiAgICAgICAgICAgIC8vIG1pZGRsZSBtb3VzZSBidXR0b25cbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5idXR0b24gPT09IDEgJiYgdGhpcy5fY29tcG9uZW50SXRlbS5pc0Nsb3NhYmxlKSB7XG4gICAgICAgICAgICAvLyBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMubm90aWZ5Q2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIG9uVGFiVG91Y2hTdGFydChldmVudDogVG91Y2hFdmVudCkge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSB0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLm5vdGlmeUZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB3aGVuIHRoZSB0YWIncyBjbG9zZSBidXR0b24gaXMgY2xpY2tlZFxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHByaXZhdGUgb25DbG9zZUNsaWNrKCkge1xuICAgICAgICB0aGlzLm5vdGlmeUNsb3NlKCk7XG4gICAgICAgIHRoaXMuX2xheW91dE1hbmFnZXIuZW1pdChcInRhYkNsb3NlZFwiLHRoaXMuX2NvbXBvbmVudEl0ZW0pXG4gICAgfVxuXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgb25DbG9zZVRvdWNoU3RhcnQoKSB7XG4gICAgICAgIHRoaXMubm90aWZ5Q2xvc2UoKTtcbiAgICAgICAgdGhpcy5fbGF5b3V0TWFuYWdlci5lbWl0KFwidGFiQ2xvc2VkXCIsdGhpcy5fY29tcG9uZW50SXRlbSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsYmFjayB0byBjYXB0dXJlIHRhYiBjbG9zZSBidXR0b24gbW91c2Vkb3duXG4gICAgICogdG8gcHJldmVudCB0YWIgZnJvbSBhY3RpdmF0aW5nLlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIC8vIHByaXZhdGUgb25DbG9zZU1vdXNlZG93bigpOiB2b2lkIHtcbiAgICAvLyAgICAgLy8gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgLy8gfVxuXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgbm90aWZ5Q2xvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jbG9zZUV2ZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ1ROQzE1MDA3Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jbG9zZUV2ZW50KHRoaXMuX2NvbXBvbmVudEl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgbm90aWZ5Rm9jdXMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9mb2N1c0V2ZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ1ROQTE1MDA3Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9mb2N1c0V2ZW50KHRoaXMuX2NvbXBvbmVudEl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgZW5hYmxlUmVvcmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xheW91dE1hbmFnZXIudXNlTmF0aXZlRHJhZ0FuZERyb3AoKSkge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCB0aGlzLl9kcmFnU3RhcnRMaXN0ZW5lcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9kcmFnTGlzdGVuZXIgPSBuZXcgRHJhZ0xpc3RlbmVyKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5fZHJhZ0xpc3RlbmVyPy5vbignZHJhZ1N0YXJ0JywgdGhpcy5fZHJhZ1N0YXJ0TGlzdGVuZXJPbGQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEl0ZW0ub24oJ2Rlc3Ryb3knLCB0aGlzLl9jb250ZW50SXRlbURlc3Ryb3lMaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIHByaXZhdGUgZGlzYWJsZVJlb3JkZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLl9sYXlvdXRNYW5hZ2VyLnVzZU5hdGl2ZURyYWdBbmREcm9wKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgdGhpcy5fZHJhZ1N0YXJ0TGlzdGVuZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2RyYWdMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdURFI4Nzc0NScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50SXRlbS5vZmYoJ2Rlc3Ryb3knLCB0aGlzLl9jb250ZW50SXRlbURlc3Ryb3lMaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLl9kcmFnTGlzdGVuZXIub2ZmKCdkcmFnU3RhcnQnLCB0aGlzLl9kcmFnU3RhcnRMaXN0ZW5lck9sZCk7XG4gICAgICAgICAgICB0aGlzLl9kcmFnTGlzdGVuZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKiBAcHVibGljICovXG5leHBvcnQgbmFtZXNwYWNlIFRhYiB7XG4gICAgZXhwb3J0IGVudW0gUmVuZGVyRmxhZ3Mge1xuICAgICAgICBEcm9wZG93bkFjdGl2ZSA9IDEsXG4gICAgICAgIEluRHJvcGRvd25NZW51ID0gMixcbiAgICAgICAgSXNBY3RpdmVUYWIgPSA0LFxuICAgIH1cbiAgICBleHBvcnQgdHlwZSBUaXRsZVJlbmRlcmVyID0gKGNvbXBvbmVudDogQ29tcG9uZW50Q29udGFpbmVyLCB0YXJnZXQ6IEhUTUxFbGVtZW50LCBhdmFpbGFibGVXaWR0aDogbnVtYmVyLCBmbGFnczogUmVuZGVyRmxhZ3MpPT52b2lkO1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBleHBvcnQgdHlwZSBDbG9zZUV2ZW50ID0gKGNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0pID0+IHZvaWQ7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGV4cG9ydCB0eXBlIEZvY3VzRXZlbnQgPSAoY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkgPT4gdm9pZDtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgZXhwb3J0IHR5cGUgRHJhZ1N0YXJ0RXZlbnQgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIGRyYWdMaXN0ZW5lcjogRHJhZ0xpc3RlbmVyLCBjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKSA9PiB2b2lkO1xufVxuIiwiaW1wb3J0IHsgQXNzZXJ0RXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBDb21wb25lbnRJdGVtIH0gZnJvbSAnLi4vaXRlbXMvY29tcG9uZW50LWl0ZW0nO1xyXG5pbXBvcnQgeyBMYXlvdXRNYW5hZ2VyIH0gZnJvbSAnLi4vbGF5b3V0LW1hbmFnZXInO1xyXG5pbXBvcnQgeyBEb21Db25zdGFudHMgfSBmcm9tICcuLi91dGlscy9kb20tY29uc3RhbnRzJztcclxuaW1wb3J0IHsgRHJhZ0xpc3RlbmVyIH0gZnJvbSAnLi4vdXRpbHMvZHJhZy1saXN0ZW5lcic7XHJcbmltcG9ydCB7IG51bWJlclRvUGl4ZWxzLCBwaXhlbHNUb051bWJlciB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgVGFiIH0gZnJvbSAnLi90YWInO1xyXG5pbXBvcnQgeyBIZWFkZXIgfSBmcm9tICcuL2hlYWRlcic7XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBjbGFzcyBUYWJzQ29udGFpbmVyIHtcclxuICAgIC8vIFRoZXJlIGlzIG9uZSB0YWIgcGVyIENvbXBvbmVudEl0ZW0gaW4gc3RhY2suICBIb3dldmVyIHRoZXkgbWF5IG5vdCBiZSBvcmRlcmVkIHRoZSBzYW1lXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF90YWJzOiBUYWJbXSA9IFtdO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2Ryb3Bkb3duRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9lbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgX2xhc3RWaXNpYmxlVGFiSW5kZXggPSAtMTtcclxuICAgIHByaXZhdGUgX2Ryb3Bkb3duQWN0aXZlID0gZmFsc2U7XHJcblxyXG4gICAgZ2V0IHRhYnMoKTogVGFiW10geyByZXR1cm4gdGhpcy5fdGFiczsgfVxyXG4gICAgZ2V0IHRhYkNvdW50KCk6IG51bWJlciB7IHJldHVybiB0aGlzLl90YWJzLmxlbmd0aDsgfVxyXG4gICAgZ2V0IGxhc3RWaXNpYmxlVGFiSW5kZXgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX2xhc3RWaXNpYmxlVGFiSW5kZXg7IH1cclxuXHJcbiAgICBnZXQgZWxlbWVudCgpOiBIVE1MRWxlbWVudCB7IHJldHVybiB0aGlzLl9lbGVtZW50OyB9XHJcbiAgICBnZXQgZHJvcGRvd25FbGVtZW50KCk6IEhUTUxFbGVtZW50IHsgcmV0dXJuIHRoaXMuX2Ryb3Bkb3duRWxlbWVudDsgfVxyXG4gICAgZ2V0IGRyb3Bkb3duQWN0aXZlKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fZHJvcGRvd25BY3RpdmU7IH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9sYXlvdXRNYW5hZ2VyOiBMYXlvdXRNYW5hZ2VyLFxyXG4gICAgICAgIHByaXZhdGUgX2NvbXBvbmVudFJlbW92ZUV2ZW50OiBUYWJzQ29udGFpbmVyLkNvbXBvbmVudEl0ZW1SZW1vdmVFdmVudCxcclxuICAgICAgICBwcml2YXRlIF9jb21wb25lbnRGb2N1c0V2ZW50OiBUYWJzQ29udGFpbmVyLkNvbXBvbmVudEl0ZW1Gb2N1c0V2ZW50LFxyXG4gICAgICAgIHByaXZhdGUgX2NvbXBvbmVudERyYWdTdGFydEV2ZW50OiBUYWJzQ29udGFpbmVyLkNvbXBvbmVudEl0ZW1EcmFnU3RhcnRFdmVudCxcclxuICAgICAgICBwcml2YXRlIF9kcm9wZG93bkFjdGl2ZUNoYW5nZWRFdmVudDogVGFic0NvbnRhaW5lci5Ecm9wZG93bkFjdGl2ZUNoYW5nZWRFdmVudCxcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWN0aW9uJyk7XHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuVGFicyk7XHJcblxyXG4gICAgICAgIHRoaXMuX2Ryb3Bkb3duRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlY3Rpb24nKTtcclxuICAgICAgICB0aGlzLl9kcm9wZG93bkVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLlRhYkRyb3Bkb3duTGlzdCk7XHJcbiAgICAgICAgdGhpcy5fZHJvcGRvd25FbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RhYnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fdGFic1tpXS5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyB0YWIgYW5kIGFzc29jaWF0ZXMgaXQgd2l0aCBhIGNvbnRlbnRJdGVtXHJcbiAgICAgKiBAcGFyYW0gaW5kZXggLSBUaGUgcG9zaXRpb24gb2YgdGhlIHRhYlxyXG4gICAgICovXHJcbiAgICBjcmVhdGVUYWIoY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSwgaW5kZXg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIC8vSWYgdGhlcmUncyBhbHJlYWR5IGEgdGFiIHJlbGF0aW5nIHRvIHRoZVxyXG4gICAgICAgIC8vY29udGVudCBpdGVtLCBkb24ndCBkbyBhbnl0aGluZ1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdGFicy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdGFic1tpXS5jb21wb25lbnRJdGVtID09PSBjb21wb25lbnRJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRhYiA9IG5ldyBUYWIodGhpcy5fbGF5b3V0TWFuYWdlcixcclxuICAgICAgICAgICAgY29tcG9uZW50SXRlbSxcclxuICAgICAgICAgICAgKGl0ZW0pID0+IHRoaXMuaGFuZGxlVGFiQ2xvc2VFdmVudChpdGVtKSxcclxuICAgICAgICAgICAgKGl0ZW0pID0+IHRoaXMuaGFuZGxlVGFiRm9jdXNFdmVudChpdGVtKSxcclxuICAgICAgICAgICAgKHgsIHksIGRyYWdMaXN0ZW5lciwgaXRlbSkgPT4gdGhpcy5oYW5kbGVUYWJEcmFnU3RhcnRFdmVudCh4LCB5LCBkcmFnTGlzdGVuZXIsIGl0ZW0pKTtcclxuXHJcbiAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaW5kZXggPSB0aGlzLl90YWJzLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tYXJrQXNTaW5nbGUodGhpcy5fdGFicy5sZW5ndGggPT0gMCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3RhYnMuc3BsaWNlKGluZGV4LCAwLCB0YWIpO1xyXG5cclxuICAgICAgICBpZiAoaW5kZXggPCB0aGlzLl9lbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQuaW5zZXJ0QmVmb3JlKHRhYi5lbGVtZW50LCB0aGlzLl9lbGVtZW50LmNoaWxkTm9kZXNbaW5kZXhdKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRhYi5lbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgbWFya0FzU2luZ2xlKGlzX3NpbmdsZTogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHN0YWNrTm9kZSA9IHRoaXMuZWxlbWVudD8ucGFyZW50Tm9kZT8ucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBpZiAoaXNfc2luZ2xlKSB7XHJcbiAgICAgICAgICAgIHN0YWNrTm9kZS5jbGFzc0xpc3QuYWRkKFwibG1fc2luZ2xlXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YWNrTm9kZS5jbGFzc0xpc3QucmVtb3ZlKFwibG1fc2luZ2xlXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVUYWIoY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSk6IHZvaWQge1xyXG4gICAgICAgIC8vIGNvbXBvbmVudEl0ZW0gY2Fubm90IGJlIEFjdGl2ZUNvbXBvbmVudEl0ZW1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3RhYnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3RhYnNbaV0uY29tcG9uZW50SXRlbSA9PT0gY29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFiID0gdGhpcy5fdGFic1tpXTtcclxuICAgICAgICAgICAgICAgIHRhYi5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXlvdXRNYW5hZ2VyLmRlZmVySWZEcmFnZ2luZygoY2FuY2VsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEgY2FuY2VsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RhYnMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGFicy5sZW5ndGggPD0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFya0FzU2luZ2xlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA8PSB0aGlzLl9sYXN0VmlzaWJsZVRhYkluZGV4KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLS10aGlzLl9sYXN0VmlzaWJsZVRhYkluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnRlbnRJdGVtIGlzIG5vdCBjb250cm9sbGVkIGJ5IHRoaXMgaGVhZGVyJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvY2Vzc0FjdGl2ZUNvbXBvbmVudENoYW5nZWQobmV3QWN0aXZlQ29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSk6IHZvaWQge1xyXG4gICAgICAgIGxldCBhY3RpdmVJbmRleCA9IC0xO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdGFicy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBpc0FjdGl2ZSA9IHRoaXMuX3RhYnNbaV0uY29tcG9uZW50SXRlbSA9PT0gbmV3QWN0aXZlQ29tcG9uZW50SXRlbTtcclxuICAgICAgICAgICAgdGhpcy5fdGFic1tpXS5zZXRBY3RpdmUoaXNBY3RpdmUpO1xyXG4gICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGFjdGl2ZUluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ0hTQUNJNTY2MzInKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGF5b3V0TWFuYWdlci5sYXlvdXRDb25maWcuc2V0dGluZ3MucmVvcmRlck9uVGFiTWVudUNsaWNrKSB7XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIElmIHRoZSB0YWIgc2VsZWN0ZWQgd2FzIGluIHRoZSBkcm9wZG93biwgbW92ZSBldmVyeXRoaW5nIGRvd24gb25lIHRvIG1ha2Ugd2F5IGZvciB0aGlzIG9uZSB0byBiZSB0aGUgZmlyc3QuXHJcbiAgICAgICAgICAgICAgICAgKiBUaGlzIHdpbGwgbWFrZSBzdXJlIHRoZSBtb3N0IHVzZWQgdGFicyBzdGF5IHZpc2libGUuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0VmlzaWJsZVRhYkluZGV4ICE9PSAtMSAmJiBhY3RpdmVJbmRleCA+IHRoaXMuX2xhc3RWaXNpYmxlVGFiSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVUYWIgPSB0aGlzLl90YWJzW2FjdGl2ZUluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gYWN0aXZlSW5kZXg7IGogPiAwOyBqLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFic1tqXSA9IHRoaXMuX3RhYnNbaiAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90YWJzWzBdID0gYWN0aXZlVGFiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyB1cGRhdGVUYWJTaXplcyB3aWxsIGFsd2F5cyBiZSBjYWxsZWQgYWZ0ZXIgdGhpcyBhbmQgaXQgd2lsbCByZXBvc2l0aW9uIHRhYiBlbGVtZW50c1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHVzaGVzIHRoZSB0YWJzIHRvIHRoZSB0YWIgZHJvcGRvd24gaWYgdGhlIGF2YWlsYWJsZSBzcGFjZSBpcyBub3Qgc3VmZmljaWVudFxyXG4gICAgICovXHJcbiAgICB1cGRhdGVUYWJTaXplcyhoZWFkZXI6IEhlYWRlciwgYWN0aXZlQ29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSB8IHVuZGVmaW5lZCk6IHZvaWQge1xyXG4gICAgICAgIGxldCBkcm9wRG93bkFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSB0aGlzLnRyeVVwZGF0ZVRhYlNpemVzKGRyb3BEb3duQWN0aXZlLCBoZWFkZXIsIGFjdGl2ZUNvbXBvbmVudEl0ZW0pO1xyXG4gICAgICAgIGlmICghc3VjY2Vzcykge1xyXG4gICAgICAgICAgICBkcm9wRG93bkFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBhbHdheXMgc3VjY2VlZFxyXG4gICAgICAgICAgICB0aGlzLnRyeVVwZGF0ZVRhYlNpemVzKGRyb3BEb3duQWN0aXZlLCBoZWFkZXIsIGFjdGl2ZUNvbXBvbmVudEl0ZW0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZHJvcERvd25BY3RpdmUgIT09IHRoaXMuX2Ryb3Bkb3duQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Ryb3Bkb3duQWN0aXZlID0gZHJvcERvd25BY3RpdmU7XHJcbiAgICAgICAgICAgIHRoaXMuX2Ryb3Bkb3duQWN0aXZlQ2hhbmdlZEV2ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRyeVVwZGF0ZVRhYlNpemVzKGRyb3Bkb3duQWN0aXZlOiBib29sZWFuLCBoZWFkZXI6IEhlYWRlciwgYWN0aXZlQ29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGhlYWRlck5vZGUgPSB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBoZWFkZXJOb2RlLmNsYXNzTGlzdC5yZW1vdmUoXCJsbV90aWdodF9tb2RlXCIpO1xyXG4gICAgICAgIGxldCBhdmFpbGFibGVXaWR0aDogbnVtYmVyID0gaGVhZGVyLmF2YWlsYWJsZVRhYnNTaXplKCk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gJyc7IC8vbnVtYmVyVG9QaXhlbHMoYXZhaWxhYmxlV2lkdGgpO1xyXG4gICAgICAgIGlmICh0aGlzLl90YWJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgaWYgKGFjdGl2ZUNvbXBvbmVudEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdub24tZW1wdHkgdGFicyBtdXN0IGhhdmUgYWN0aXZlIGNvbXBvbmVudCBpdGVtJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBjdW11bGF0aXZlVGFiV2lkdGggPSAwO1xyXG4gICAgICAgICAgICBjb25zdCB0YWJPdmVybGFwQWxsb3dhbmNlID0gdGhpcy5fbGF5b3V0TWFuYWdlci5sYXlvdXRDb25maWcuc2V0dGluZ3MudGFiT3ZlcmxhcEFsbG93YW5jZSB8fCAoZHJvcGRvd25BY3RpdmUgPyA2IDogMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gdGhpcy5fdGFicy5pbmRleE9mKGFjdGl2ZUNvbXBvbmVudEl0ZW0udGFiKTtcclxuICAgICAgICAgICAgY29uc3QgYWN0aXZlVGFiID0gdGhpcy5fdGFic1thY3RpdmVJbmRleF07XHJcbiAgICAgICAgICAgIHdoaWxlIChkcm9wZG93bkFjdGl2ZSAmJiB0aGlzLl9kcm9wZG93bkVsZW1lbnQuZmlyc3RDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHJvcGRvd25FbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuX2Ryb3Bkb3duRWxlbWVudC5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgdGFiTWFyZ2luUmlnaHRQaXhlbHMgPSBnZXRDb21wdXRlZFN0eWxlKGFjdGl2ZVRhYi5lbGVtZW50KS5tYXJnaW5SaWdodDtcclxuICAgICAgICAgICAgY29uc3QgdGFiTWFyZ2luUmlnaHQgPSBwaXhlbHNUb051bWJlcih0YWJNYXJnaW5SaWdodFBpeGVscyk7XHJcblxyXG4gICAgICAgICAgICBsZXQgdGFiQXZhaWwsIGFjdGl2ZVRhYkF2YWlsO1xyXG4gICAgICAgICAgICBjb25zdCBudW1UYWJzID0gdGhpcy5fdGFicy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmICghIGRyb3Bkb3duQWN0aXZlIHx8IG51bVRhYnMgPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGFiQXZhaWwgPSBhdmFpbGFibGVXaWR0aCAtIHRhYk1hcmdpblJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlVGFiQXZhaWwgPSB0YWJBdmFpbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHRoZSBhY3RpdmUgdGFiIGdldHMgYSBkb3VibGUgc2hhcmUgb2YgdGhlIGF2YWlsYWJsZSB3aWR0aC5cclxuICAgICAgICAgICAgICAgIHRhYkF2YWlsID0gKGF2YWlsYWJsZVdpZHRoIC0gbnVtVGFicyAqIHRhYk1hcmdpblJpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgIC8gKG51bVRhYnMgKyAxKTtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZVRhYkF2YWlsID0gMiAqIHRhYkF2YWlsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB0aWdodF9tb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3RWaXNpYmxlVGFiSW5kZXggPSBudW1UYWJzIC0gMTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVGFiczsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWIgPSB0aGlzLl90YWJzW2ldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IHRhYi5lbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNBY3RpdmVUYWIgPSBhY3RpdmVJbmRleCA9PT0gaTtcclxuICAgICAgICAgICAgICAgIHRhYkVsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdGFiRWxlbWVudC5zdHlsZS56SW5kZXggPSAnJztcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSB0YWIuY29tcG9uZW50SXRlbTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlbmRlcmVyOiBUYWIuVGl0bGVSZW5kZXJlciA9IChjb250YWluZXIsIGVsLCB3aWR0aCwgZmxhZ3MpICA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudC50aXRsZVJlbmRlcmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC50aXRsZVJlbmRlcmVyKGNvbnRhaW5lciwgZWwsIHdpZHRoLCBmbGFncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGVsLmxhc3RDaGlsZCkgeyBlbC5yZW1vdmVDaGlsZChlbC5sYXN0Q2hpbGQpOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNvbXBvbmVudC50aXRsZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvL1B1dCB0aGUgdGFiIGluIHRoZSB0YWJDb250YWluZXIgc28gaXRzIHRydWUgd2lkdGggY2FuIGJlIGNoZWNrZWRcclxuICAgICAgICAgICAgICAgIGlmICh0YWJFbGVtZW50LnBhcmVudEVsZW1lbnQgIT09IHRoaXMuX2VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHRhYkVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVuZGVyZXIoY29tcG9uZW50LmNvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHRhYi50aXRsZUVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZVRhYiA/IGFjdGl2ZVRhYkF2YWlsIDogdGFiQXZhaWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAoaXNBY3RpdmVUYWIgPyBUYWIuUmVuZGVyRmxhZ3MuSXNBY3RpdmVUYWIgOiAwKSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAoZHJvcGRvd25BY3RpdmUgPyBUYWIuUmVuZGVyRmxhZ3MuRHJvcGRvd25BY3RpdmUgOiAwKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY3VtdWxhdGl2ZVRhYldpZHRoID0gdGFiRWxlbWVudC5vZmZzZXRMZWZ0IC0gdGhpcy5fZWxlbWVudC5vZmZzZXRMZWZ0ICsgdGFiRWxlbWVudC5vZmZzZXRXaWR0aCArIHRhYk1hcmdpblJpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkcm9wZG93bkFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5UaXRsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdyA9IGF2YWlsYWJsZVdpZHRoICogMC45O1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyKGNvbXBvbmVudC5jb250YWluZXIsIGVsLCB3LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpc0FjdGl2ZVRhYiA/IFRhYi5SZW5kZXJGbGFncy5Jc0FjdGl2ZVRhYiA6IDApIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUYWIuUmVuZGVyRmxhZ3MuRHJvcGRvd25BY3RpdmUgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhYi5SZW5kZXJGbGFncy5JbkRyb3Bkb3duTWVudSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHJvcGRvd25FbGVtZW50LmFwcGVuZENoaWxkKGVsKTtcclxuICAgICAgICAgICAgICAgICAgICBlbD8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0YWIudGFiQ2xpY2tMaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGN1bXVsYXRpdmVUYWJXaWR0aCA+IGF2YWlsYWJsZVdpZHRoICYmIG51bVRhYnMgPiAxXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgISB0aWdodF9tb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGlnaHRfbW9kZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyTm9kZS5jbGFzc0xpc3QuYWRkKFwibG1fdGlnaHRfbW9kZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aWdodC1tb2RlIG1ha2VzIHRoZSBjb250cm9scyAoaGVhZGVyIGJ1dHRvbnMpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGFrZSBsZXNzIHNwYWNlLCB3ZSBzaG91bGQgaGF2ZSBtb3JlIGF2YWlsYWJsZSBzcGFjZS5cclxuICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVXaWR0aCA9IGhlYWRlci5hdmFpbGFibGVUYWJzU2l6ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9IG51bWJlclRvUGl4ZWxzKGF2YWlsYWJsZVdpZHRoKTtcclxuICAgICAgICAgICAgICAgICAgICBjdW11bGF0aXZlVGFiV2lkdGggPSB0YWJFbGVtZW50Lm9mZnNldExlZnQgLSB0aGlzLl9lbGVtZW50Lm9mZnNldExlZnQgKyB0YWJFbGVtZW50Lm9mZnNldFdpZHRoICsgdGFiTWFyZ2luUmlnaHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjdW11bGF0aXZlVGFiV2lkdGggPiBhdmFpbGFibGVXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG51bVRhYnMgPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBvdmVybGFwID0gKGN1bXVsYXRpdmVUYWJXaWR0aCAtIGF2YWlsYWJsZVdpZHRoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLyAobnVtVGFicyAtIDEpO1xyXG4gICAgICAgICAgICAgICAgLy9DaGVjayBvdmVybGFwIGFnYWluc3QgYWxsb3dhbmNlLlxyXG4gICAgICAgICAgICAgICAgaWYgKG92ZXJsYXAgPj0gdGFiT3ZlcmxhcEFsbG93YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghIGRyb3Bkb3duQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vV2Ugbm93IGtub3cgdGhlIHRhYiBtZW51IG11c3QgYmUgc2hvd24sIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgZXZlcnl0aGluZy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBvdmVybGFwID0gdGFiT3ZlcmxhcEFsbG93YW5jZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbnVtVGFiczsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFyZ2luTGVmdCA9IGogPT09IDAgPyAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogJy0nICsgbnVtYmVyVG9QaXhlbHMob3ZlcmxhcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFic1tqXS5lbGVtZW50LnN0eWxlLnpJbmRleCA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcnICsgKChqIDw9IGFjdGl2ZUluZGV4ID8gaiAtIGFjdGl2ZUluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFjdGl2ZUluZGV4IC0gaikgKyBudW1UYWJzKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90YWJzW2pdLmVsZW1lbnQuc3R5bGUubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gYWN0aXZlVGFiLmVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlRWxlbWVudC5vZmZzZXRMZWZ0ICsgYWN0aXZlRWxlbWVudC5jbGllbnRXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgID4gYXZhaWxhYmxlV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISBkcm9wZG93bkFjdGl2ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVJbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgYWN0aXZlIHRhYiBpc24ndCBmdWxseSB2aXNpYmxlLCBzaGlmdCBpdCBhbmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWFybGllciBlbGVtZW50cyBsZWZ0IGFzIG5lZWRlZCAoYW5kIHBvc3NpYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXhQcmlvciA9IE1hdGgubWF4KChhdmFpbGFibGVXaWR0aCAtIGFjdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGgpIC8gYWN0aXZlSW5kZXgsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMTsgaiA8PSBhY3RpdmVJbmRleDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByaWdodEV4Y2VzcyA9IHRoaXMuX3RhYnNbal0uZWxlbWVudC5vZmZzZXRMZWZ0IC0gaiAqIG1heFByaW9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJpZ2h0RXhjZXNzID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RhYnNbal0uZWxlbWVudC5zdHlsZS5tYXJnaW5MZWZ0ID0gJy0nICsgbnVtYmVyVG9QaXhlbHMob3ZlcmxhcCArIHJpZ2h0RXhjZXNzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RWaXNpYmxlVGFiSW5kZXggPSBhY3RpdmVJbmRleDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBhY3RpdmVJbmRleCArIDE7IGogPCBudW1UYWJzOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWJFbGVtZW50ID0gdGhpcy5fdGFic1tqXS5lbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWJFbGVtZW50Lm9mZnNldExlZnQgKyB0YWJFbGVtZW50Lm9mZnNldFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID4gYXZhaWxhYmxlV2lkdGggKyB0YWJPdmVybGFwQWxsb3dhbmNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXN0VmlzaWJsZVRhYkluZGV4ID0gajtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3dzIGRyb3AgZG93biBmb3IgYWRkaXRpb25hbCB0YWJzIHdoZW4gdGhlcmUgYXJlIHRvbyBtYW55IHRvIGRpc3BsYXkuXHJcbiAgICAgKi9cclxuICAgIHNob3dBZGRpdGlvbmFsVGFic0Ryb3Bkb3duKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2Ryb3Bkb3duRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIaWRlcyBkcm9wIGRvd24gZm9yIGFkZGl0aW9uYWwgdGFicyB3aGVuIHRoZXJlIGFyZSB0b28gbWFueSB0byBkaXNwbGF5LlxyXG4gICAgICovXHJcbiAgICBoaWRlQWRkaXRpb25hbFRhYnNEcm9wZG93bigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9kcm9wZG93bkVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGhhbmRsZVRhYkNsb3NlRXZlbnQoY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudFJlbW92ZUV2ZW50KGNvbXBvbmVudEl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlVGFiRm9jdXNFdmVudChjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKSB7XHJcbiAgICAgICAgdGhpcy5fY29tcG9uZW50Rm9jdXNFdmVudChjb21wb25lbnRJdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGhhbmRsZVRhYkRyYWdTdGFydEV2ZW50KHg6IG51bWJlciwgeTogbnVtYmVyLCBkcmFnTGlzdGVuZXI6IERyYWdMaXN0ZW5lciwgY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudERyYWdTdGFydEV2ZW50KHgsIHksIGRyYWdMaXN0ZW5lciwgY29tcG9uZW50SXRlbSk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgVGFic0NvbnRhaW5lciB7XHJcbiAgICBleHBvcnQgdHlwZSBDb21wb25lbnRJdGVtUmVtb3ZlRXZlbnQgPSAodGhpczogdm9pZCwgY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkgPT4gdm9pZDtcclxuICAgIGV4cG9ydCB0eXBlIENvbXBvbmVudEl0ZW1Gb2N1c0V2ZW50ID0gKHRoaXM6IHZvaWQsIGNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0pID0+IHZvaWQ7XHJcbiAgICBleHBvcnQgdHlwZSBDb21wb25lbnRJdGVtRHJhZ1N0YXJ0RXZlbnQgPSAodGhpczogdm9pZCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGRyYWdMaXN0ZW5lcjogRHJhZ0xpc3RlbmVyLCBjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKSA9PiB2b2lkO1xyXG4gICAgZXhwb3J0IHR5cGUgRHJvcGRvd25BY3RpdmVDaGFuZ2VkRXZlbnQgPSAodGhpczogdm9pZCkgPT4gdm9pZDtcclxufVxyXG4iLCIvKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRXh0ZXJuYWxFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB0eXBlOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgY2xhc3MgQ29uZmlndXJhdGlvbkVycm9yIGV4dGVuZHMgRXh0ZXJuYWxFcnJvciB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIHB1YmxpYyByZWFkb25seSBub2RlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoJ0NvbmZpZ3VyYXRpb24nLCBtZXNzYWdlKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGNsYXNzIFBvcG91dEJsb2NrZWRFcnJvciBleHRlbmRzIEV4dGVybmFsRXJyb3Ige1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoJ1BvcG91dEJsb2NrZWQnLCBtZXNzYWdlKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGNsYXNzIEFwaUVycm9yIGV4dGVuZHMgRXh0ZXJuYWxFcnJvciB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcignQVBJJywgbWVzc2FnZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBjbGFzcyBCaW5kRXJyb3IgZXh0ZW5kcyBFeHRlcm5hbEVycm9yIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKCdCaW5kJywgbWVzc2FnZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqIEBpbnRlcm5hbCAqL1xyXG5hYnN0cmFjdCBjbGFzcyBJbnRlcm5hbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IodHlwZTogc3RyaW5nLCBjb2RlOiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihgJHt0eXBlfTogJHtjb2RlfSR7bWVzc2FnZSA9PT0gdW5kZWZpbmVkID8gJycgOiAnOiAnICsgbWVzc2FnZX1gKVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBjbGFzcyBBc3NlcnRFcnJvciBleHRlbmRzIEludGVybmFsRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoY29kZTogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoJ0Fzc2VydCcsIGNvZGUsIG1lc3NhZ2UpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGNsYXNzIFVucmVhY2hhYmxlQ2FzZUVycm9yIGV4dGVuZHMgSW50ZXJuYWxFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb2RlOiBzdHJpbmcsIHZhcmlhYmxlVmFsdWU6IG5ldmVyLCBtZXNzYWdlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoJ1VucmVhY2hhYmxlQ2FzZScsIGNvZGUsIGAke3ZhcmlhYmxlVmFsdWV9JHttZXNzYWdlID09PSB1bmRlZmluZWQgPyAnJyA6ICc6ICcgKyBtZXNzYWdlfWApXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGNsYXNzIFVuZXhwZWN0ZWROdWxsRXJyb3IgZXh0ZW5kcyBJbnRlcm5hbEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvZGU6IHN0cmluZywgbWVzc2FnZT86IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKCdVbmV4cGVjdGVkTnVsbCcsIGNvZGUsIG1lc3NhZ2UpXHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGNsYXNzIFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvciBleHRlbmRzIEludGVybmFsRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoY29kZTogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIoJ1VuZXhwZWN0ZWRVbmRlZmluZWQnLCBjb2RlLCBtZXNzYWdlKVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IExheW91dENvbmZpZyB9IGZyb20gJy4vY29uZmlnL2NvbmZpZyc7XHJcbmltcG9ydCB7IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyB9IGZyb20gJy4vY29uZmlnL3Jlc29sdmVkLWNvbmZpZyc7XHJcbmltcG9ydCB7IENvbXBvbmVudENvbnRhaW5lciB9IGZyb20gJy4vY29udGFpbmVyL2NvbXBvbmVudC1jb250YWluZXInO1xyXG5pbXBvcnQgeyBCaW5kRXJyb3IgfSBmcm9tICcuL2Vycm9ycy9leHRlcm5hbC1lcnJvcic7XHJcbmltcG9ydCB7IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvciB9IGZyb20gJy4vZXJyb3JzL2ludGVybmFsLWVycm9yJztcclxuaW1wb3J0IHsgSTE4blN0cmluZ0lkLCBpMThuU3RyaW5ncyB9IGZyb20gJy4vdXRpbHMvaTE4bi1zdHJpbmdzJztcclxuaW1wb3J0IHsgSnNvblZhbHVlLCBMb2dpY2FsWkluZGV4IH0gZnJvbSAnLi91dGlscy90eXBlcyc7XHJcbmltcG9ydCB7IGRlZXBFeHRlbmRWYWx1ZSwgc2V0RWxlbWVudERpc3BsYXlWaXNpYmlsaXR5IH0gZnJvbSAnLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IFZpcnR1YWxMYXlvdXQgfSBmcm9tICcuL3ZpcnR1YWwtbGF5b3V0JztcclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBjbGFzcyBHb2xkZW5MYXlvdXQgZXh0ZW5kcyBWaXJ0dWFsTGF5b3V0IHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2NvbXBvbmVudFR5cGVzTWFwID0gbmV3IE1hcDxzdHJpbmcsIEdvbGRlbkxheW91dC5Db21wb25lbnRGYWN0b3J5RnVuY3Rpb24+KCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9jb21wb25lbnRUeXBlc0RlZmF1bHQ6ICBHb2xkZW5MYXlvdXQuQ29tcG9uZW50RmFjdG9yeUZ1bmN0aW9uIHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3JlZ2lzdGVyZWRDb21wb25lbnRNYXAgPSBuZXcgTWFwPENvbXBvbmVudENvbnRhaW5lciwgQ29tcG9uZW50Q29udGFpbmVyLkNvbXBvbmVudD4oKTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3ZpcnR1YWJsZUNvbXBvbmVudE1hcCA9IG5ldyBNYXA8Q29tcG9uZW50Q29udGFpbmVyLCBHb2xkZW5MYXlvdXQuVmlydHVhYmxlQ29tcG9uZW50PigpOyAvLyBGSVhNRSByZW1vdmVcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9jb250YWluZXJWaXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnRMaXN0ZW5lciA9XHJcbiAgICAgICAgKGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCB2aXNpYmxlOiBib29sZWFuKSA9PiB0aGlzLmhhbmRsZUNvbnRhaW5lclZpcnR1YWxWaXNpYmlsaXR5Q2hhbmdlUmVxdWlyZWRFdmVudChjb250YWluZXIsIHZpc2libGUpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfY29udGFpbmVyVmlydHVhbFpJbmRleENoYW5nZVJlcXVpcmVkRXZlbnRMaXN0ZW5lciA9XHJcbiAgICAgICAgKGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCBsb2dpY2FsWkluZGV4OiBMb2dpY2FsWkluZGV4LCBkZWZhdWx0WkluZGV4OiBzdHJpbmcpID0+XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ29udGFpbmVyVmlydHVhbFpJbmRleENoYW5nZVJlcXVpcmVkRXZlbnQoY29udGFpbmVyLCBsb2dpY2FsWkluZGV4LCBkZWZhdWx0WkluZGV4KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBjb250YWluZXIgLSBBIERvbSBIVE1MIGVsZW1lbnQuIERlZmF1bHRzIHRvIGJvZHlcclxuICAgICAqIEBwYXJhbSBiaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyIC0gRXZlbnQgaGFuZGxlciB0byBiaW5kIGNvbXBvbmVudHNcclxuICAgICAqIEBwYXJhbSBiaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyIC0gRXZlbnQgaGFuZGxlciB0byB1bmJpbmQgY29tcG9uZW50c1xyXG4gICAgICogSWYgYmluZENvbXBvbmVudEV2ZW50SGFuZGxlciBpcyBkZWZpbmVkLCB0aGVuIGNvbnN0cnVjdG9yIHdpbGwgYmUgZGV0ZXJtaW5hdGUuIEl0IHdpbGwgYWx3YXlzIGNhbGwgdGhlIGluaXQoKVxyXG4gICAgICogZnVuY3Rpb24gYW5kIHRoZSBpbml0KCkgZnVuY3Rpb24gd2lsbCBhbHdheXMgY29tcGxldGUuIFRoaXMgbWVhbnMgdGhhdCB0aGUgYmluZENvbXBvbmVudEV2ZW50SGFuZGxlciB3aWxsIGJlIGNhbGxlZFxyXG4gICAgICogaWYgY29uc3RydWN0b3IgaXMgZm9yIGEgcG9wb3V0IHdpbmRvdy4gTWFrZSBzdXJlIGJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIgaXMgcmVhZHkgZm9yIGV2ZW50cy5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgY29udGFpbmVyPzogSFRNTEVsZW1lbnQsXHJcbiAgICAgICAgYmluZENvbXBvbmVudEV2ZW50SGFuZGxlcj86IFZpcnR1YWxMYXlvdXQuQmluZENvbXBvbmVudEV2ZW50SGFuZGxlcixcclxuICAgICAgICB1bmJpbmRDb21wb25lbnRFdmVudEhhbmRsZXI/OiBWaXJ0dWFsTGF5b3V0LlVuYmluZENvbXBvbmVudEV2ZW50SGFuZGxlcixcclxuICAgICk7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBjb25maWc6IExheW91dENvbmZpZyxcclxuICAgICAgICBjb250YWluZXI/OiBIVE1MRWxlbWVudCxcclxuICAgICAgICBwb3NpdGlvbj86IE5vZGUgfCBudWxsLFxyXG4gICAgICAgICk7XHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgc3BlY2lmeSBsYXlvdXRDb25maWcgaW4ge0BsaW5rIChMYXlvdXRNYW5hZ2VyOmNsYXNzKS5sb2FkTGF5b3V0fSAqL1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBMYXlvdXRDb25maWcsIGNvbnRhaW5lcj86IEhUTUxFbGVtZW50KTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZ09yT3B0aW9uYWxDb250YWluZXI6IExheW91dENvbmZpZyB8IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIGNvbnRhaW5lck9yQmluZENvbXBvbmVudEV2ZW50SGFuZGxlcj86IEhUTUxFbGVtZW50IHwgVmlydHVhbExheW91dC5CaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyLFxyXG4gICAgICAgIHVuYmluZENvbXBvbmVudEV2ZW50SGFuZGxlcj86IFZpcnR1YWxMYXlvdXQuVW5iaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyIHwgTm9kZSB8IG51bGwsXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihjb25maWdPck9wdGlvbmFsQ29udGFpbmVyLCBjb250YWluZXJPckJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIsIHVuYmluZENvbXBvbmVudEV2ZW50SGFuZGxlciwgdHJ1ZSk7XHJcbiAgICAgICAgLy8gd2UgdG9sZCBWaXJ0dWFsTGF5b3V0IHRvIG5vdCBjYWxsIGluaXQoKSAoc2tpcEluaXQgc2V0IHRvIHRydWUpIHNvIHRoYXQgR29sZGVuIExheW91dCBjYW4gaW5pdGlhbGlzZSBpdHMgcHJvcGVydGllcyBiZWZvcmUgaW5pdCBpcyBjYWxsZWRcclxuICAgICAgICBpZiAoIXRoaXMuZGVwcmVjYXRlZENvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyAgUkVNT1ZFICAgcmVnaXN0ZXJDb21wb25lbnRGYWN0b3J5RnVuY3Rpb24odHlwZU5hbWU6IHN0cmluZywgY29tcG9uZW50RmFjdG9yeUZ1bmN0aW9uOiBHb2xkZW5MYXlvdXQuQ29tcG9uZW50RmFjdG9yeUZ1bmN0aW9uLCB2aXJ0dWFsID0gZmFsc2UpOiB2b2lkIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGEgbmV3IGNvbXBvbmVudCB3aXRoIHRoZSBsYXlvdXQgbWFuYWdlci5cclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJDb21wb25lbnQodHlwZU5hbWU6IHN0cmluZywgY29tcG9uZW50RmFjdG9yeUZ1bmN0aW9uOiBHb2xkZW5MYXlvdXQuQ29tcG9uZW50RmFjdG9yeUZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRGYWN0b3J5RnVuY3Rpb24gIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEJpbmRFcnJvcignUGxlYXNlIHJlZ2lzdGVyIGEgY29uc3RydWN0b3IgZnVuY3Rpb24nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ29tcG9uZW50VHlwZSA9IHRoaXMuX2NvbXBvbmVudFR5cGVzTWFwLmdldCh0eXBlTmFtZSk7XHJcblxyXG4gICAgICAgIGlmIChleGlzdGluZ0NvbXBvbmVudFR5cGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQmluZEVycm9yKGAke2kxOG5TdHJpbmdzW0kxOG5TdHJpbmdJZC5Db21wb25lbnRJc0FscmVhZHlSZWdpc3RlcmVkXX06ICR7dHlwZU5hbWV9YCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jb21wb25lbnRUeXBlc01hcC5zZXQodHlwZU5hbWUsIGNvbXBvbmVudEZhY3RvcnlGdW5jdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJDb21wb25lbnREZWZhdWx0KGNvbXBvbmVudEZhY3RvcnlGdW5jdGlvbjogR29sZGVuTGF5b3V0LkNvbXBvbmVudEZhY3RvcnlGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50RmFjdG9yeUZ1bmN0aW9uICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBCaW5kRXJyb3IoJ1BsZWFzZSByZWdpc3RlciBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9jb21wb25lbnRUeXBlc0RlZmF1bHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQmluZEVycm9yKGAke2kxOG5TdHJpbmdzW0kxOG5TdHJpbmdJZC5Db21wb25lbnRJc0FscmVhZHlSZWdpc3RlcmVkXX0gLSBkZWZhdWx0YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudFR5cGVzRGVmYXVsdCA9IGNvbXBvbmVudEZhY3RvcnlGdW5jdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSZWdpc3RlcmVkQ29tcG9uZW50VHlwZU5hbWVzKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICBjb25zdCB0eXBlTmFtZXNJdGVyYWJsZUl0ZXJhdG9yID0gdGhpcy5fY29tcG9uZW50VHlwZXNNYXAua2V5cygpO1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHR5cGVOYW1lc0l0ZXJhYmxlSXRlcmF0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBjb21wb25lbnQgaW5zdGFudGlhdG9yLiAgQXR0ZW1wdHMgdG8gdXRpbGl6ZSByZWdpc3RlcmVkXHJcbiAgICAgKiBjb21wb25lbnQgdHlwZSBieSBmaXJzdCwgdGhlbiBmYWxscyBiYWNrIHRvIHRoZSBjb21wb25lbnQgY29uc3RydWN0b3IgY2FsbGJhY2sgZnVuY3Rpb24gKGlmIHJlZ2lzdGVyZWQpLlxyXG4gICAgICogSWYgbmVpdGhlciBnZXRzIGFuIGluc3RhbnRpYXRvciwgdGhlbiByZXR1cm5zIGB1bmRlZmluZWRgLlxyXG4gICAgICogTm90ZSB0aGF0IGB1bmRlZmluZWRgIHdpbGwgcmV0dXJuIGlmIGNvbmZpZy5jb21wb25lbnRUeXBlIGlzIG5vdCBhIHN0cmluZ1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjb25maWcgLSBUaGUgaXRlbSBjb25maWdcclxuICAgICAqIEBwdWJsaWNcclxuICAgICAqL1xyXG4gICAgZ2V0Q29tcG9uZW50SW5zdGFudGlhdG9yKGNvbmZpZzogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnKTogR29sZGVuTGF5b3V0LkNvbXBvbmVudEZhY3RvcnlGdW5jdGlvbiB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgbGV0IGluc3RhbnRpYXRvcjogR29sZGVuTGF5b3V0LkNvbXBvbmVudEZhY3RvcnlGdW5jdGlvbiB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgY29uc3QgdHlwZU5hbWUgPSBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcucmVzb2x2ZUNvbXBvbmVudFR5cGVOYW1lKGNvbmZpZylcclxuICAgICAgICBpZiAodHlwZU5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpbnN0YW50aWF0b3IgPSB0aGlzLl9jb21wb25lbnRUeXBlc01hcC5nZXQodHlwZU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5zdGFudGlhdG9yIHx8IHRoaXMuX2NvbXBvbmVudFR5cGVzRGVmYXVsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBiaW5kQ29tcG9uZW50KGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCBpdGVtQ29uZmlnOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcpOiBDb21wb25lbnRDb250YWluZXIuSGFuZGxlIHtcclxuICAgICAgICBjb25zdCBmYWN0b3J5RnVuY3Rpb24gPSB0aGlzLmdldENvbXBvbmVudEluc3RhbnRpYXRvcihpdGVtQ29uZmlnKTtcclxuXHJcbiAgICAgICAgbGV0IHJlc3VsdDogQ29tcG9uZW50Q29udGFpbmVyLkhhbmRsZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAoZmFjdG9yeUZ1bmN0aW9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8gaGFuZGxlIGNhc2Ugd2hlcmUgY29tcG9uZW50IGlzIG9idGFpbmVkIGJ5IG5hbWUgb3IgY29tcG9uZW50IGNvbnN0cnVjdG9yIGNhbGxiYWNrXHJcbiAgICAgICAgICAgIGxldCBjb21wb25lbnRTdGF0ZTogSnNvblZhbHVlIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBpZiAoaXRlbUNvbmZpZy5jb21wb25lbnRTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRTdGF0ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG1ha2UgY29weVxyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50U3RhdGUgPSBkZWVwRXh0ZW5kVmFsdWUoe30sIGl0ZW1Db25maWcuY29tcG9uZW50U3RhdGUpIGFzIEpzb25WYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGZhY3RvcnlGdW5jdGlvbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWN0b3J5RnVuY3Rpb24oY29udGFpbmVyLCBjb21wb25lbnRTdGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgIGlmICh2aXJ0dWFsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdHTEJDVkNVOTg4Nzc0Jyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpcnR1YWJsZUNvbXBvbmVudCA9IGNvbXBvbmVudCBhcyBHb2xkZW5MYXlvdXQuVmlydHVhYmxlQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudFJvb3RFbGVtZW50ID0gdmlydHVhYmxlQ29tcG9uZW50LnJvb3RIdG1sRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50Um9vdEVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmluZEVycm9yKGAke2kxOG5TdHJpbmdzW0kxOG5TdHJpbmdJZC5WaXJ0dWFsQ29tcG9uZW50RG9lc05vdEhhdmVSb290SHRtbEVsZW1lbnRdfTogJHt0eXBlTmFtZX1gKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnN1cmVFbGVtZW50UG9zaXRpb25BYnNvbHV0ZShjb21wb25lbnRSb290RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbXBvbmVudFJvb3RFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmlydHVhYmxlQ29tcG9uZW50TWFwLnNldChjb250YWluZXIsIHZpcnR1YWJsZUNvbXBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci52aXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnQgPSB0aGlzLl9jb250YWluZXJWaXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnRMaXN0ZW5lcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnZpcnR1YWxaSW5kZXhDaGFuZ2VSZXF1aXJlZEV2ZW50ID0gdGhpcy5fY29udGFpbmVyVmlydHVhbFpJbmRleENoYW5nZVJlcXVpcmVkRXZlbnRMaXN0ZW5lcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyZWRDb21wb25lbnRNYXAuc2V0KGNvbnRhaW5lciwgY29tcG9uZW50KTtcclxuXHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgIHZpcnR1YWw6IGluc3RhbnRpYXRvci52aXJ0dWFsLFxyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50LFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy9yZXN1bHQgPSBzdXBlci5iaW5kQ29tcG9uZW50KGNvbnRhaW5lciwgaXRlbUNvbmZpZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIG92ZXJyaWRlIHVuYmluZENvbXBvbmVudChjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lciwgaGFuZGxlOiBDb21wb25lbnRDb250YWluZXIuSGFuZGxlKTogdm9pZCB7XHJcbiAgICAgICAgLypcclxuICAgICAgICBjb25zdCByZWdpc3RlcmVkQ29tcG9uZW50ID0gdGhpcy5fcmVnaXN0ZXJlZENvbXBvbmVudE1hcC5nZXQoY29udGFpbmVyKTtcclxuICAgICAgICBpZiAocmVnaXN0ZXJlZENvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHN1cGVyLnVuYmluZENvbXBvbmVudChjb250YWluZXIsIGhhbmRsZSk7IC8vIHdhcyBub3QgY3JlYXRlZCBmcm9tIHJlZ2lzdHJhdGlvbiBzbyB1c2UgdmlydHVhbCB1bmJpbmQgZXZlbnRzXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgdmlydHVhYmxlQ29tcG9uZW50ID0gdGhpcy5fdmlydHVhYmxlQ29tcG9uZW50TWFwLmdldChjb250YWluZXIpO1xyXG4gICAgICAgICAgICBpZiAodmlydHVhYmxlQ29tcG9uZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudFJvb3RFbGVtZW50ID0gdmlydHVhYmxlQ29tcG9uZW50LnJvb3RIdG1sRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGlmIChjb21wb25lbnRSb290RWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdHTFVDNzc3NDMnLCBjb250YWluZXIudGl0bGUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDaGlsZChjb21wb25lbnRSb290RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmlydHVhYmxlQ29tcG9uZW50TWFwLmRlbGV0ZShjb250YWluZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgICovXHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVDb250YWluZXJWaXJ0dWFsVmlzaWJpbGl0eUNoYW5nZVJlcXVpcmVkRXZlbnQoY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXIsIHZpc2libGU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBjb25zdCB2aXJ0dWFibGVDb21wb25lbnQgPSB0aGlzLl92aXJ0dWFibGVDb21wb25lbnRNYXAuZ2V0KGNvbnRhaW5lcik7XHJcbiAgICAgICAgaWYgKHZpcnR1YWJsZUNvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0dMSENWVkNSRTU1OTM0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgcm9vdEVsZW1lbnQgPSB2aXJ0dWFibGVDb21wb25lbnQucm9vdEh0bWxFbGVtZW50O1xyXG4gICAgICAgICAgICBpZiAocm9vdEVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJpbmRFcnJvcihpMThuU3RyaW5nc1tJMThuU3RyaW5nSWQuQ29tcG9uZW50SXNOb3RWaXJ0dWFibGVdICsgJyAnICsgY29udGFpbmVyLnRpdGxlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNldEVsZW1lbnREaXNwbGF5VmlzaWJpbGl0eShyb290RWxlbWVudCwgdmlzaWJsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVDb250YWluZXJWaXJ0dWFsWkluZGV4Q2hhbmdlUmVxdWlyZWRFdmVudChjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lciwgbG9naWNhbFpJbmRleDogTG9naWNhbFpJbmRleCwgZGVmYXVsdFpJbmRleDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgdmlydHVhYmxlQ29tcG9uZW50ID0gdGhpcy5fdmlydHVhYmxlQ29tcG9uZW50TWFwLmdldChjb250YWluZXIpO1xyXG4gICAgICAgIGlmICh2aXJ0dWFibGVDb21wb25lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdHTEhDVlpJQ1JFNTU5MzUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCByb290RWxlbWVudCA9IHZpcnR1YWJsZUNvbXBvbmVudC5yb290SHRtbEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGlmIChyb290RWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQmluZEVycm9yKGkxOG5TdHJpbmdzW0kxOG5TdHJpbmdJZC5Db21wb25lbnRJc05vdFZpcnR1YWJsZV0gKyAnICcgKyBjb250YWluZXIudGl0bGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcm9vdEVsZW1lbnQuc3R5bGUuekluZGV4ID0gZGVmYXVsdFpJbmRleDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBHb2xkZW5MYXlvdXQge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBWaXJ0dWFibGVDb21wb25lbnQge1xyXG4gICAgICAgIHJvb3RIdG1sRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gPz8/IGNvbWJpbmUgd2l0aCBWaXJ0dWFsTGF5b3V0LkJpbmRDb21wb25lbnRFdmVudEhhbmRsZXJcclxuICAgIGV4cG9ydCB0eXBlIENvbXBvbmVudEZhY3RvcnlGdW5jdGlvbiA9IChjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lciwgc3RhdGU6IEpzb25WYWx1ZSB8IHVuZGVmaW5lZCkgPT4gQ29tcG9uZW50Q29udGFpbmVyLkhhbmRsZTtcclxufVxyXG4iLCJpbXBvcnQgeyBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcsIFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL3Jlc29sdmVkLWNvbmZpZyc7XHJcbmltcG9ydCB7IENvbXBvbmVudENvbnRhaW5lciB9IGZyb20gJy4uL2NvbnRhaW5lci9jb21wb25lbnQtY29udGFpbmVyJztcclxuaW1wb3J0IHsgVGFiIH0gZnJvbSAnLi4vY29udHJvbHMvdGFiJztcclxuaW1wb3J0IHsgVW5leHBlY3RlZE51bGxFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9pbnRlcm5hbC1lcnJvcic7XHJcbmltcG9ydCB7IExheW91dE1hbmFnZXIgfSBmcm9tICcuLi9sYXlvdXQtbWFuYWdlcic7XHJcbmltcG9ydCB7IEl0ZW1UeXBlLCBKc29uVmFsdWUgfSBmcm9tICcuLi91dGlscy90eXBlcyc7XHJcbmltcG9ydCB7IENvbXBvbmVudFBhcmVudGFibGVJdGVtIH0gZnJvbSAnLi9jb21wb25lbnQtcGFyZW50YWJsZS1pdGVtJztcclxuaW1wb3J0IHsgQ29udGVudEl0ZW0gfSBmcm9tICcuL2NvbnRlbnQtaXRlbSc7XHJcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnLi9zdGFjayc7XHJcbmltcG9ydCB7IG51bWJlclRvUGl4ZWxzIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGNsYXNzIENvbXBvbmVudEl0ZW0gZXh0ZW5kcyBDb250ZW50SXRlbSB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9yZW9yZGVyRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2hlYWRlckNvbmZpZzogUmVzb2x2ZWRIZWFkZXJlZEl0ZW1Db25maWcuSGVhZGVyIHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfdGl0bGU6IHN0cmluZztcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2luaXRpYWxXYW50TWF4aW1pc2U6IGJvb2xlYW47XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9jb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lcjtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3RhYjogVGFiO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfdGl0bGVSZW5kZXJlcjogVGFiLlRpdGxlUmVuZGVyZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9mb2N1c2VkID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChDb21wb25lbnRJdGVtOmNsYXNzKS5jb21wb25lbnRUeXBlfSAqL1xyXG4gICAgZ2V0IGNvbXBvbmVudE5hbWUoKTogSnNvblZhbHVlIHsgcmV0dXJuIHRoaXMuX2NvbnRhaW5lci5jb21wb25lbnRUeXBlOyB9XHJcbiAgICBnZXQgY29tcG9uZW50VHlwZSgpOiBKc29uVmFsdWUgeyByZXR1cm4gdGhpcy5fY29udGFpbmVyLmNvbXBvbmVudFR5cGU7IH1cclxuICAgIGdldCByZW9yZGVyRW5hYmxlZCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX3Jlb3JkZXJFbmFibGVkOyB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBnZXQgaW5pdGlhbFdhbnRNYXhpbWlzZSgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX2luaXRpYWxXYW50TWF4aW1pc2U7IH1cclxuICAgIGdldCBjb250YWluZXIoKTogQ29tcG9uZW50Q29udGFpbmVyIHsgcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjsgfVxyXG4gICAgZ2V0IHBhcmVudEl0ZW0oKTogQ29tcG9uZW50UGFyZW50YWJsZUl0ZW0geyByZXR1cm4gdGhpcy5fcGFyZW50SXRlbTsgfVxyXG5cclxuICAgIGdldCBoZWFkZXJDb25maWcoKTogUmVzb2x2ZWRIZWFkZXJlZEl0ZW1Db25maWcuSGVhZGVyIHwgdW5kZWZpbmVkIHsgcmV0dXJuIHRoaXMuX2hlYWRlckNvbmZpZzsgfVxyXG4gICAgZ2V0IHRpdGxlKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl90aXRsZTsgfVxyXG4gICAgZ2V0IHRpdGxlUmVuZGVyZXIoKTogVGFiLlRpdGxlUmVuZGVyZXIgfCB1bmRlZmluZWQgeyByZXR1cm4gdGhpcy5fdGl0bGVSZW5kZXJlcjsgfVxyXG4gICAgZ2V0IHRhYigpOiBUYWIgeyByZXR1cm4gdGhpcy5fdGFiOyB9XHJcbiAgICBnZXQgZm9jdXNlZCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX2ZvY3VzZWQ7IH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBsYXlvdXRNYW5hZ2VyOiBMYXlvdXRNYW5hZ2VyLFxyXG4gICAgICAgIGNvbmZpZzogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9wYXJlbnRJdGVtOiBDb21wb25lbnRQYXJlbnRhYmxlSXRlbVxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIobGF5b3V0TWFuYWdlciwgY29uZmlnLCBfcGFyZW50SXRlbSwgQ29udGVudEl0ZW0uY3JlYXRlRWxlbWVudCgpKTtcclxuICAgICAgICB0aGlzLmlzQ29tcG9uZW50ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fcmVvcmRlckVuYWJsZWQgPSBjb25maWcucmVvcmRlckVuYWJsZWQ7XHJcblxyXG4gICAgICAgIHRoaXMuYXBwbHlVcGRhdGFibGVDb25maWcoY29uZmlnKTtcclxuXHJcbiAgICAgICAgdGhpcy5faW5pdGlhbFdhbnRNYXhpbWlzZSA9IGNvbmZpZy5tYXhpbWlzZWQ7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IG5ldyBDb21wb25lbnRDb250YWluZXIoY29uZmlnLCB0aGlzLCBsYXlvdXRNYW5hZ2VyLFxyXG4gICAgICAgICAgICAoaXRlbUNvbmZpZykgPT4gdGhpcy5oYW5kbGVVcGRhdGVJdGVtQ29uZmlnRXZlbnQoaXRlbUNvbmZpZyksXHJcbiAgICAgICAgICAgICgpID0+IHRoaXMuc2hvdygpLFxyXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmhpZGUoKSxcclxuICAgICAgICAgICAgKHN1cHByZXNzRXZlbnQpID0+IHRoaXMuZm9jdXMoc3VwcHJlc3NFdmVudCksXHJcbiAgICAgICAgICAgIChzdXBwcmVzc0V2ZW50KSA9PiB0aGlzLmJsdXIoc3VwcHJlc3NFdmVudCksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQpXHJcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcwLjEnO1xyXG4gICAgICAgIGNvbnN0IHdhc0RyYWdnaW5nID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmN1cnJlbnRseURyYWdnaW5nKCk7XHJcbiAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLmRlZmVySWZEcmFnZ2luZygoY2FuY2VsKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gJyc7XHJcbiAgICAgICAgICAgIGlmICghIGNhbmNlbCAmJiAhIHdhc0RyYWdnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250YWluZXIuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlVcGRhdGFibGVDb25maWcoY29uZmlnOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldFRpdGxlKGNvbmZpZy50aXRsZSk7XHJcbiAgICAgICAgdGhpcy5faGVhZGVyQ29uZmlnID0gY29uZmlnLmhlYWRlcjtcclxuICAgIH1cclxuXHJcbiAgICB0b0NvbmZpZygpOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcge1xyXG4gICAgICAgIGNvbnN0IHN0YXRlUmVxdWVzdEV2ZW50ID0gdGhpcy5fY29udGFpbmVyLnN0YXRlUmVxdWVzdEV2ZW50O1xyXG4gICAgICAgIGNvbnN0IHN0YXRlID0gc3RhdGVSZXF1ZXN0RXZlbnQgPT09IHVuZGVmaW5lZCA/IHRoaXMuX2NvbnRhaW5lci5zdGF0ZSA6IHN0YXRlUmVxdWVzdEV2ZW50KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBJdGVtVHlwZS5jb21wb25lbnQsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6IFtdLFxyXG4gICAgICAgICAgICBzaXplOiB0aGlzLnNpemUsXHJcbiAgICAgICAgICAgIHNpemVVbml0OiB0aGlzLnNpemVVbml0LFxyXG4gICAgICAgICAgICBtaW5TaXplOiB0aGlzLm1pblNpemUsXHJcbiAgICAgICAgICAgIG1pblNpemVVbml0OiB0aGlzLm1pblNpemVVbml0LFxyXG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcclxuICAgICAgICAgICAgbWF4aW1pc2VkOiBmYWxzZSxcclxuICAgICAgICAgICAgaXNDbG9zYWJsZTogdGhpcy5pc0Nsb3NhYmxlLFxyXG4gICAgICAgICAgICByZW9yZGVyRW5hYmxlZDogdGhpcy5fcmVvcmRlckVuYWJsZWQsXHJcbiAgICAgICAgICAgIHRpdGxlOiB0aGlzLl90aXRsZSxcclxuICAgICAgICAgICAgaGVhZGVyOiBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIuY3JlYXRlQ29weSh0aGlzLl9oZWFkZXJDb25maWcpLFxyXG4gICAgICAgICAgICBjb21wb25lbnRUeXBlOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcuY29weUNvbXBvbmVudFR5cGUodGhpcy5jb21wb25lbnRUeXBlKSxcclxuICAgICAgICAgICAgY29tcG9uZW50U3RhdGU6IHN0YXRlLFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBjbG9zZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5wYXJlbnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ0NJQzY4ODgzJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcywgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBVc2VkIGJ5IERyYWcgUHJveHlcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGVudGVyRHJhZ01vZGUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzdHlsZSA9IHRoaXMuZWxlbWVudC5zdHlsZTtcclxuICAgICAgICBzdHlsZS5oZWlnaHQgPSBgJHtoZWlnaHR9cHhgO1xyXG4gICAgICAgIHN0eWxlLndpZHRoID0gYCR7d2lkdGh9cHhgO1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5lbnRlckRyYWdNb2RlKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4aXREcmFnTW9kZSgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzdHlsZSA9IHRoaXMuZWxlbWVudC5zdHlsZTtcclxuICAgICAgICBzdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgICBzdHlsZS53aWR0aCA9ICcnO1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5leGl0RHJhZ01vZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBlbnRlclN0YWNrTWF4aW1pc2VkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5lbnRlclN0YWNrTWF4aW1pc2VkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhpdFN0YWNrTWF4aW1pc2VkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5leGl0U3RhY2tNYXhpbWlzZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVc2VkIGJ5IERyYWcgUHJveHlcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGRyYWcoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmRyYWcoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBpbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudXBkYXRlTm9kZVNpemUoKTtcclxuXHJcbiAgICAgICAgc3VwZXIuaW5pdCgpO1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5lbWl0KCdvcGVuJyk7XHJcbiAgICAgICAgdGhpcy5pbml0Q29udGVudEl0ZW1zKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhpcyBjb21wb25lbnQncyB0aXRsZVxyXG4gICAgICpcclxuICAgICAqIEBwdWJsaWNcclxuICAgICAqIEBwYXJhbSB0aXRsZSAtXHJcbiAgICAgKi9cclxuXHJcbiAgICBzZXRUaXRsZSh0aXRsZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdGl0bGUgPSB0aXRsZTtcclxuICAgICAgICB0aGlzLmVtaXQoJ3RpdGxlQ2hhbmdlZCcsIHRpdGxlKTtcclxuICAgICAgICB0aGlzLmVtaXQoJ3N0YXRlQ2hhbmdlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFRpdGxlUmVuZGVyZXIocmVuZGVyZXI6IFRhYi5UaXRsZVJlbmRlcmVyIHwgdW5kZWZpbmVkKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdGl0bGVSZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgICAgIHRoaXMuZW1pdCgndGl0bGVDaGFuZ2VkJywgdGhpcy5fdGl0bGUpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnc3RhdGVDaGFuZ2VkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGFiKHRhYjogVGFiKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdGFiID0gdGFiO1xyXG4gICAgICAgIHRoaXMuZW1pdCgndGFiJywgdGFiKVxyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5zZXRUYWIodGFiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBoaWRlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5zZXRWaXNpYmlsaXR5KGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBzaG93KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5zZXRWaXNpYmlsaXR5KHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRm9jdXNlcyB0aGUgaXRlbSBpZiBpdCBpcyBub3QgYWxyZWFkeSBmb2N1c2VkXHJcbiAgICAgKi9cclxuICAgIGZvY3VzKHN1cHByZXNzRXZlbnQgPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucGFyZW50SXRlbS5zZXRBY3RpdmVDb21wb25lbnRJdGVtKHRoaXMsIHRydWUsIHN1cHByZXNzRXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHNldEZvY3VzZWQoc3VwcHJlc3NFdmVudDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2ZvY3VzZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudGFiLnNldEZvY3VzZWQoKTtcclxuICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0QmFzZUJ1YmJsaW5nRXZlbnQoJ2ZvY3VzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQmx1cnMgKGRlZm9jdXNlcykgdGhlIGl0ZW0gaWYgaXQgaXMgZm9jdXNlZFxyXG4gICAgICovXHJcbiAgICBibHVyKHN1cHByZXNzRXZlbnQgPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9mb2N1c2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5zZXRGb2N1c2VkQ29tcG9uZW50SXRlbSh1bmRlZmluZWQsIHN1cHByZXNzRXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBzZXRCbHVycmVkKHN1cHByZXNzRXZlbnQ6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9mb2N1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50YWIuc2V0Qmx1cnJlZCgpO1xyXG4gICAgICAgIGlmICghc3VwcHJlc3NFdmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRCYXNlQnViYmxpbmdFdmVudCgnYmx1cicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgc2V0UGFyZW50KHBhcmVudDogQ29udGVudEl0ZW0pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9wYXJlbnRJdGVtID0gcGFyZW50IGFzIENvbXBvbmVudFBhcmVudGFibGVJdGVtO1xyXG4gICAgICAgIHN1cGVyLnNldFBhcmVudChwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlVXBkYXRlSXRlbUNvbmZpZ0V2ZW50KGl0ZW1Db25maWc6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZykge1xyXG4gICAgICAgIHRoaXMuYXBwbHlVcGRhdGFibGVDb25maWcoaXRlbUNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgdXBkYXRlTm9kZVNpemUoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gT0xEOiAgdGhpcy5fY29udGFpbmVyLnNldFNpemVUb05vZGVTaXplKHdpZHRoLCBoZWlnaHQsIGZvcmNlKVxyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRJbnNldCA9IHRoaXMubGF5b3V0TWFuYWdlci5sYXlvdXRDb25maWcuZGltZW5zaW9ucy5jb250ZW50SW5zZXQ7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLm1hcmdpbiA9IGNvbnRlbnRJbnNldCA/IGAke2NvbnRlbnRJbnNldH1weGAgOiAnJztcclxuXHJcbiAgICAgICAgY29uc3QgY29udGVudEVsZW1lbnQgPSB0aGlzLmNvbnRhaW5lci5jb250ZW50RWxlbWVudDtcclxuICAgICAgICBjb25zdCBjb21wb25lbnRFbGVtZW50ID0gdGhpcy5jb250YWluZXIuZWxlbWVudDtcclxuICAgICAgICBpZiAoY29udGVudEVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudFxyXG4gICAgICAgICAgICAvLyAmJiBjb250ZW50RWxlbWVudC5zdHlsZS5kaXNwbGF5ICE9PSAnbm9uZSdcclxuICAgICAgICAgICAgJiYgdGhpcy5wYXJlbnRJdGVtIGluc3RhbmNlb2YgU3RhY2spIHtcclxuICAgICAgICAgICAgLy8gRG8gbm90IHVwZGF0ZSBzaXplIG9mIGhpZGRlbiBjb21wb25lbnRzIHRvIHByZXZlbnQgdW53YW50ZWQgcmVmbG93c1xyXG4gICAgICAgICAgICBjb25zdCBzdGFja0VsZW1lbnQgPSB0aGlzLnBhcmVudEl0ZW0uZWxlbWVudDtcclxuICAgICAgICAgICAgbGV0IHN0YWNrQm91bmRzO1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtRWxlbWVudCA9IHRoaXMuZWxlbWVudDtcclxuICAgICAgICAgICAgY29uc3QgaXRlbUJvdW5kcyA9IGl0ZW1FbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICBjb25zdCBsYXlvdXRCb3VuZHMgPSB0aGlzLmxheW91dE1hbmFnZXIuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50RWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50XHJcbiAgICAgICAgICAgICAgICAmJiBjb250ZW50RWxlbWVudCAhPT0gY29tcG9uZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgc3RhY2tCb3VuZHMgPSBzdGFja0VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRFbGVtZW50LnN0eWxlLnRvcCA9IG51bWJlclRvUGl4ZWxzKHN0YWNrQm91bmRzLnRvcCAtIGxheW91dEJvdW5kcy50b3ApO1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50RWxlbWVudC5zdHlsZS5sZWZ0ID0gbnVtYmVyVG9QaXhlbHMoc3RhY2tCb3VuZHMubGVmdCAtIGxheW91dEJvdW5kcy5sZWZ0KTtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudEVsZW1lbnQuc3R5bGUud2lkdGggPSBudW1iZXJUb1BpeGVscyhzdGFja0JvdW5kcy53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnRFbGVtZW50LnN0eWxlLmhlaWdodCA9IG51bWJlclRvUGl4ZWxzKHN0YWNrQm91bmRzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGFja0JvdW5kcyA9IGxheW91dEJvdW5kcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250ZW50RWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcclxuICAgICAgICAgICAgY29udGVudEVsZW1lbnQuc3R5bGUudG9wID0gbnVtYmVyVG9QaXhlbHMoaXRlbUJvdW5kcy50b3AgLSBzdGFja0JvdW5kcy50b3ApO1xyXG4gICAgICAgICAgICBjb250ZW50RWxlbWVudC5zdHlsZS5sZWZ0ID0gbnVtYmVyVG9QaXhlbHMoaXRlbUJvdW5kcy5sZWZ0IC0gc3RhY2tCb3VuZHMubGVmdCk7XHJcbiAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50LnN0eWxlLndpZHRoID0gbnVtYmVyVG9QaXhlbHMoaXRlbUJvdW5kcy53aWR0aCk7XHJcbiAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50LnN0eWxlLmhlaWdodCA9IG51bWJlclRvUGl4ZWxzKGl0ZW1Cb3VuZHMuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBjb25zb2xlLmxvZygndXBkYXRlTm9kZVNpemUgaWdub3JlZCcpO1xyXG5cclxuICAgICAgICB0aGlzLmxheW91dE1hbmFnZXIuYWRkVmlydHVhbFNpemVkQ29udGFpbmVyKHRoaXMuY29udGFpbmVyKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgQGRlcHJlY2F0ZWQgdXNlIHtAbGluayAoQ29tcG9uZW50SXRlbTpjbGFzcyl9ICovXHJcbmV4cG9ydCB0eXBlIENvbXBvbmVudCA9IENvbXBvbmVudEl0ZW07XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIENvbXBvbmVudEl0ZW0ge1xyXG4gICAgZXhwb3J0IHR5cGUgQ29tcG9uZW50ID0gQ29tcG9uZW50Q29udGFpbmVyLkNvbXBvbmVudDtcclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnRJdGVtIH0gZnJvbSAnLi9jb21wb25lbnQtaXRlbSc7XHJcbmltcG9ydCB7IENvbnRlbnRJdGVtIH0gZnJvbSAnLi9jb250ZW50LWl0ZW0nO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbXBvbmVudFBhcmVudGFibGVJdGVtIGV4dGVuZHMgQ29udGVudEl0ZW0ge1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfZm9jdXNlZCA9IGZhbHNlO1xyXG5cclxuICAgIGdldCBmb2N1c2VkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fZm9jdXNlZDsgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHNldEZvY3VzZWRWYWx1ZSh2YWx1ZTogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2ZvY3VzZWQgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBhYnN0cmFjdCBzZXRBY3RpdmVDb21wb25lbnRJdGVtKGl0ZW06IENvbXBvbmVudEl0ZW0sIGZvY3VzOiBib29sZWFuLCBzdXBwcmVzc0ZvY3VzRXZlbnQ6IGJvb2xlYW4pOiB2b2lkO1xyXG59XHJcbiIsImltcG9ydCB7IFJlc29sdmVkSXRlbUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9yZXNvbHZlZC1jb25maWcnXHJcbmltcG9ydCB7IEJyb3dzZXJQb3BvdXQgfSBmcm9tICcuLi9jb250cm9scy9icm93c2VyLXBvcG91dCdcclxuaW1wb3J0IHsgQXNzZXJ0RXJyb3IsIFVuZXhwZWN0ZWROdWxsRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InXHJcbmltcG9ydCB7IExheW91dE1hbmFnZXIgfSBmcm9tICcuLi9sYXlvdXQtbWFuYWdlcidcclxuaW1wb3J0IHsgRG9tQ29uc3RhbnRzIH0gZnJvbSAnLi4vdXRpbHMvZG9tLWNvbnN0YW50cydcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi4vdXRpbHMvZXZlbnQtZW1pdHRlcidcclxuaW1wb3J0IHsgQXJlYUxpbmtlZFJlY3QsIEl0ZW1UeXBlLCBTaXplVW5pdEVudW0gfSBmcm9tICcuLi91dGlscy90eXBlcydcclxuaW1wb3J0IHsgZ2V0VW5pcXVlSWQsIHNldEVsZW1lbnREaXNwbGF5VmlzaWJpbGl0eSB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJ1xyXG5pbXBvcnQgeyBDb21wb25lbnRJdGVtIH0gZnJvbSAnLi9jb21wb25lbnQtaXRlbSdcclxuaW1wb3J0IHsgQ29tcG9uZW50UGFyZW50YWJsZUl0ZW0gfSBmcm9tICcuL2NvbXBvbmVudC1wYXJlbnRhYmxlLWl0ZW0nXHJcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnLi9zdGFjaydcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIHRoZSBiYXNlY2xhc3MgdGhhdCBhbGwgY29udGVudCBpdGVtcyBpbmhlcml0IGZyb20uXHJcbiAqIE1vc3QgbWV0aG9kcyBwcm92aWRlIGEgc3Vic2V0IG9mIHdoYXQgdGhlIHN1Yi1jbGFzc2VzIGRvLlxyXG4gKlxyXG4gKiBJdCBhbHNvIHByb3ZpZGVzIGEgbnVtYmVyIG9mIGZ1bmN0aW9ucyBmb3IgdHJlZSB0cmF2ZXJzYWxcclxuICogQHB1YmxpY1xyXG4gKi9cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb250ZW50SXRlbSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF90eXBlOiBJdGVtVHlwZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2lkOiBzdHJpbmc7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9wb3BJblBhcmVudElkczogc3RyaW5nW10gPSBbXTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2NvbnRlbnRJdGVtczogQ29udGVudEl0ZW1bXTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2lzQ2xvc2FibGU7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9wZW5kaW5nRXZlbnRQcm9wYWdhdGlvbnM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfdGhyb3R0bGVkRXZlbnRzOiBzdHJpbmdbXTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2lzSW5pdGlhbGlzZWQ7XHJcblxyXG4gICAgaWdub3JpbmcgPSBmYWxzZTtcclxuICAgIGlnbm9yaW5nQ2hpbGQgPSBmYWxzZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHNpemU6IG51bWJlcjtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHNpemVVbml0OiBTaXplVW5pdEVudW07XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBtaW5TaXplOiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBtaW5TaXplVW5pdDogU2l6ZVVuaXRFbnVtO1xyXG5cclxuICAgIGlzR3JvdW5kOiBib29sZWFuXHJcbiAgICBpc1JvdzogYm9vbGVhblxyXG4gICAgaXNDb2x1bW46IGJvb2xlYW5cclxuICAgIGlzU3RhY2s6IGJvb2xlYW5cclxuICAgIGlzQ29tcG9uZW50OiBib29sZWFuXHJcblxyXG4gICAgZ2V0IHR5cGUoKTogSXRlbVR5cGUgeyByZXR1cm4gdGhpcy5fdHlwZTsgfVxyXG4gICAgZ2V0IGlkKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl9pZDsgfVxyXG4gICAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpIHsgdGhpcy5faWQgPSB2YWx1ZTsgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZ2V0IHBvcEluUGFyZW50SWRzKCk6IHN0cmluZ1tdIHsgcmV0dXJuIHRoaXMuX3BvcEluUGFyZW50SWRzOyB9XHJcbiAgICBnZXQgcGFyZW50KCk6IENvbnRlbnRJdGVtIHwgbnVsbCB7IHJldHVybiB0aGlzLl9wYXJlbnQ7IH1cclxuICAgIGdldCBjb250ZW50SXRlbXMoKTogQ29udGVudEl0ZW1bXSB7IHJldHVybiB0aGlzLl9jb250ZW50SXRlbXM7IH1cclxuICAgIGdldCBpc0Nsb3NhYmxlKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5faXNDbG9zYWJsZTsgfVxyXG4gICAgZ2V0IGVsZW1lbnQoKTogSFRNTEVsZW1lbnQgeyByZXR1cm4gdGhpcy5fZWxlbWVudDsgfVxyXG4gICAgZ2V0IGlzSW5pdGlhbGlzZWQoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9pc0luaXRpYWxpc2VkOyB9XHJcblxyXG4gICAgc3RhdGljIGlzU3RhY2soaXRlbTogQ29udGVudEl0ZW0pOiBpdGVtIGlzIFN0YWNrIHtcclxuICAgICAgICByZXR1cm4gaXRlbS5pc1N0YWNrO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpc0NvbXBvbmVudEl0ZW0oaXRlbTogQ29udGVudEl0ZW0pOiBpdGVtIGlzIENvbXBvbmVudEl0ZW0ge1xyXG4gICAgICAgIHJldHVybiBpdGVtLmlzQ29tcG9uZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpc0NvbXBvbmVudFBhcmVudGFibGVJdGVtKGl0ZW06IENvbnRlbnRJdGVtKTogaXRlbSBpcyBDb21wb25lbnRQYXJlbnRhYmxlSXRlbSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0uaXNTdGFjayB8fCBpdGVtLmlzR3JvdW5kO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBsYXlvdXRNYW5hZ2VyOiBMYXlvdXRNYW5hZ2VyLFxyXG4gICAgICAgIGNvbmZpZzogUmVzb2x2ZWRJdGVtQ29uZmlnLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9wYXJlbnQ6IENvbnRlbnRJdGVtIHwgbnVsbCxcclxuICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfZWxlbWVudDogSFRNTEVsZW1lbnRcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3R5cGUgPSBjb25maWcudHlwZTtcclxuICAgICAgICB0aGlzLl9pZCA9IGNvbmZpZy5pZDtcclxuXHJcbiAgICAgICAgdGhpcy5faXNJbml0aWFsaXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNHcm91bmQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzUm93ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc0NvbHVtbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNTdGFjayA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNDb21wb25lbnQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5zaXplID0gY29uZmlnLnNpemU7XHJcbiAgICAgICAgdGhpcy5zaXplVW5pdCA9IGNvbmZpZy5zaXplVW5pdDtcclxuICAgICAgICB0aGlzLm1pblNpemUgPSBjb25maWcubWluU2l6ZTtcclxuICAgICAgICB0aGlzLm1pblNpemVVbml0ID0gY29uZmlnLm1pblNpemVVbml0O1xyXG5cclxuICAgICAgICB0aGlzLl9pc0Nsb3NhYmxlID0gY29uZmlnLmlzQ2xvc2FibGU7XHJcblxyXG4gICAgICAgIHRoaXMuX3BlbmRpbmdFdmVudFByb3BhZ2F0aW9ucyA9IHt9O1xyXG4gICAgICAgIHRoaXMuX3Rocm90dGxlZEV2ZW50cyA9IFsnc3RhdGVDaGFuZ2VkJ107XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnRlbnRJdGVtcyA9IHRoaXMuY3JlYXRlQ29udGVudEl0ZW1zKGNvbmZpZy5jb250ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXJzIHRoZSBzaXplIG9mIHRoZSBjb21wb25lbnQgYW5kIGl0cyBjaGlsZHJlbiwgY2FsbGVkIHJlY3Vyc2l2ZWx5XHJcbiAgICAgKiBDYWxsZWQgd2hlbmV2ZXIgdGhlIGRpbWVuc2lvbnMgb2YgdGhpcyBpdGVtIG9yIG9uZSBvZiBpdHMgcGFyZW50cyBjaGFuZ2VcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICB1cGRhdGVTaXplKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5iZWdpblZpcnR1YWxTaXplZENvbnRhaW5lckFkZGluZygpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTm9kZVNpemUoKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDb250ZW50SXRlbXNTaXplKCk7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLmVuZFZpcnR1YWxTaXplZENvbnRhaW5lckFkZGluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBhYnN0cmFjdCB1cGRhdGVOb2RlU2l6ZSgpOiB2b2lkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlcyBhIGNoaWxkIG5vZGUgKGFuZCBpdHMgY2hpbGRyZW4pIGZyb20gdGhlIHRyZWVcclxuICAgICAqIEBwYXJhbSBjb250ZW50SXRlbSAtIFRoZSBjaGlsZCBpdGVtIHRvIHJlbW92ZVxyXG4gICAgICogQHBhcmFtIGtlZXBDaGlsZCAtIFdoZXRoZXIgdG8gZGVzdHJveSB0aGUgcmVtb3ZlZCBpdGVtXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUNoaWxkKGNvbnRlbnRJdGVtOiBDb250ZW50SXRlbSwga2VlcENoaWxkID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIEdldCB0aGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gdGhhdCdzIHRvIGJlIHJlbW92ZWQgd2l0aGluIGFsbCBjb250ZW50IGl0ZW1zIHRoaXMgbm9kZSBjb250YWluc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fY29udGVudEl0ZW1zLmluZGV4T2YoY29udGVudEl0ZW0pO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIE1ha2Ugc3VyZSB0aGUgY29udGVudCBpdGVtIHRvIGJlIHJlbW92ZWQgaXMgYWN0dWFsbHkgYSBjaGlsZCBvZiB0aGlzIGl0ZW1cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCByZW1vdmUgY2hpbGQgaXRlbS4gVW5rbm93biBjb250ZW50IGl0ZW0nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG5cdCAqIENhbGwgZGVzdHJveSBvbiB0aGUgY29udGVudCBpdGVtLlxyXG5cdCAqIEFsbCBjaGlsZHJlbiBhcmUgZGVzdHJveWVkIGFzIHdlbGxcclxuXHQgKi9cclxuICAgICAgICBpZiAoIWtlZXBDaGlsZCkge1xyXG5cdFx0XHR0aGlzLl9jb250ZW50SXRlbXNbaW5kZXhdLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJlbW92ZSB0aGUgY29udGVudCBpdGVtIGZyb20gdGhpcyBub2RlcyBhcnJheSBvZiBjaGlsZHJlblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5kZWZlcklmRHJhZ2dpbmcoKGNhbmNlbDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmlnbm9yaW5nQ2hpbGQgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29udGVudEl0ZW0uaWdub3JpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKCEgY2FuY2VsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZW50SXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJZiB0aGlzIG5vZGUgc3RpbGwgY29udGFpbnMgb3RoZXIgY29udGVudCBpdGVtcywgYWRqdXN0IHRoZWlyIHNpemVcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodGhpcy5fY29udGVudEl0ZW1zLmxlbmd0aCA+ICh0aGlzLmxheW91dE1hbmFnZXIuY3VycmVudGx5RHJhZ2dpbmcoKSA/IDEgOiAwKSkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogSWYgdGhpcyB3YXMgdGhlIGxhc3QgY29udGVudCBpdGVtLCByZW1vdmUgdGhpcyBub2RlIGFzIHdlbGxcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0dyb3VuZCAmJiB0aGlzLl9pc0Nsb3NhYmxlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcGFyZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ0NJVUMwMDg3NCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcywga2VlcENoaWxkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdXAgdGhlIHRyZWUgc3RydWN0dXJlIGZvciB0aGUgbmV3bHkgYWRkZWQgY2hpbGRcclxuICAgICAqIFRoZSByZXNwb25zaWJpbGl0eSBmb3IgdGhlIGFjdHVhbCBET00gbWFuaXB1bGF0aW9ucyBsaWVzXHJcbiAgICAgKiB3aXRoIHRoZSBjb25jcmV0ZSBpdGVtXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbnRlbnRJdGVtIC1cclxuICAgICAqIEBwYXJhbSBpbmRleCAtIElmIG9taXR0ZWQgaXRlbSB3aWxsIGJlIGFwcGVuZGVkXHJcbiAgICAgKiBAcGFyYW0gc3VzcGVuZFJlc2l6ZSAtIFVzZWQgYnkgZGVzY2VuZGVudCBpbXBsZW1lbnRhdGlvbnNcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgYWRkQ2hpbGQoY29udGVudEl0ZW06IENvbnRlbnRJdGVtLCBpbmRleD86IG51bWJlciB8IG51bGwsIHN1c3BlbmRSZXNpemU/OiBib29sZWFuKTogbnVtYmVyIHtcclxuICAgICAgICBpbmRleCA/Pz0gdGhpcy5fY29udGVudEl0ZW1zLmxlbmd0aDtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udGVudEl0ZW1zLnNwbGljZShpbmRleCwgMCwgY29udGVudEl0ZW0pO1xyXG4gICAgICAgIGNvbnRlbnRJdGVtLnNldFBhcmVudCh0aGlzKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzSW5pdGlhbGlzZWQgPT09IHRydWUgJiYgY29udGVudEl0ZW0uX2lzSW5pdGlhbGlzZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnRJdGVtLmluaXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpbmRleDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlcGxhY2VzIG9sZENoaWxkIHdpdGggbmV3Q2hpbGRcclxuICAgICAqIEBwYXJhbSBvbGRDaGlsZCAtXHJcbiAgICAgKiBAcGFyYW0gbmV3Q2hpbGQgLVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHJlcGxhY2VDaGlsZChvbGRDaGlsZDogQ29udGVudEl0ZW0sIG5ld0NoaWxkOiBDb250ZW50SXRlbSwgZGVzdHJveU9sZENoaWxkID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICAvLyBEbyBub3QgdHJ5IHRvIHJlcGxhY2UgQ29tcG9uZW50SXRlbSAtIHdpbGwgbm90IHdvcmtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX2NvbnRlbnRJdGVtcy5pbmRleE9mKG9sZENoaWxkKTtcclxuICAgICAgICBjb25zdCBwYXJlbnROb2RlID0gb2xkQ2hpbGQuX2VsZW1lbnQucGFyZW50Tm9kZTtcclxuXHJcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ0NJUkNJMjMyMzInLCAnQ2FuXFwndCByZXBsYWNlIGNoaWxkLiBvbGRDaGlsZCBpcyBub3QgY2hpbGQgb2YgdGhpcycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBhcmVudE5vZGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ0NJUkNQMjMyMzInKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdDaGlsZC5fZWxlbWVudCwgb2xkQ2hpbGQuX2VsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgKiBPcHRpb25hbGx5IGRlc3Ryb3kgdGhlIG9sZCBjb250ZW50IGl0ZW1cclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYgKGRlc3Ryb3lPbGRDaGlsZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgb2xkQ2hpbGQuX3BhcmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBvbGRDaGlsZC5kZXN0cm95KCk7IC8vIHdpbGwgbm93IGFsc28gZGVzdHJveSBhbGwgY2hpbGRyZW4gb2Ygb2xkQ2hpbGRcclxuICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICogV2lyZSB0aGUgbmV3IGNvbnRlbnRJdGVtIGludG8gdGhlIHRyZWVcclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy5fY29udGVudEl0ZW1zW2luZGV4XSA9IG5ld0NoaWxkO1xyXG4gICAgICAgICAgICBuZXdDaGlsZC5zZXRQYXJlbnQodGhpcyk7XHJcbiAgICAgICAgICAgIC8vIG5ld0NoaWxkIGluaGVyaXRzIHRoZSBzaXplcyBmcm9tIHRoZSBvbGQgY2hpbGQ6XHJcbiAgICAgICAgICAgIG5ld0NoaWxkLnNpemUgPSBvbGRDaGlsZC5zaXplO1xyXG4gICAgICAgICAgICBuZXdDaGlsZC5zaXplVW5pdCA9IG9sZENoaWxkLnNpemVVbml0O1xyXG4gICAgICAgICAgICBuZXdDaGlsZC5taW5TaXplID0gb2xkQ2hpbGQubWluU2l6ZTtcclxuICAgICAgICAgICAgbmV3Q2hpbGQubWluU2l6ZVVuaXQgPSBvbGRDaGlsZC5taW5TaXplVW5pdDtcclxuXHJcbiAgICAgICAgICAgIC8vVE9ETyBUaGlzIGRvZXNuJ3QgdXBkYXRlIHRoZSBjb25maWcuLi4gcmVmYWN0b3IgdG8gbGVhdmUgaXRlbSBub2RlcyB1bnRvdWNoZWQgYWZ0ZXIgY3JlYXRpb25cclxuICAgICAgICAgICAgaWYgKG5ld0NoaWxkLl9wYXJlbnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdDSVJDTkM0NTY5OScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0NoaWxkLl9wYXJlbnQuX2lzSW5pdGlhbGlzZWQgPT09IHRydWUgJiYgbmV3Q2hpbGQuX2lzSW5pdGlhbGlzZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Q2hpbGQuaW5pdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29udmVuaWVuY2UgbWV0aG9kLlxyXG4gICAgICogU2hvcnRoYW5kIGZvciB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCggdGhpcyApXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fcGFyZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdDSVIxMTExMCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIHRoZSBjb21wb25lbnQgZnJvbSB0aGUgbGF5b3V0IGFuZCBjcmVhdGVzIGEgbmV3XHJcbiAgICAgKiBicm93c2VyIHdpbmRvdyB3aXRoIHRoZSBjb21wb25lbnQgYW5kIGl0cyBjaGlsZHJlbiBpbnNpZGVcclxuICAgICAqL1xyXG4gICAgcG9wb3V0KCk6IEJyb3dzZXJQb3BvdXQge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudElkID0gZ2V0VW5pcXVlSWQoKTtcclxuICAgICAgICBjb25zdCBicm93c2VyUG9wb3V0ID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmNyZWF0ZVBvcG91dEZyb21Db250ZW50SXRlbSh0aGlzLCB1bmRlZmluZWQsIHBhcmVudElkLCB1bmRlZmluZWQpO1xyXG4gICAgICAgIHRoaXMuZW1pdEJhc2VCdWJibGluZ0V2ZW50KCdzdGF0ZUNoYW5nZWQnKTtcclxuICAgICAgICByZXR1cm4gYnJvd3NlclBvcG91dDtcclxuICAgIH1cclxuXHJcbiAgICBhYnN0cmFjdCB0b0NvbmZpZygpOiBSZXNvbHZlZEl0ZW1Db25maWc7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgY2FsY3VsYXRlQ29uZmlnQ29udGVudCgpOiBSZXNvbHZlZEl0ZW1Db25maWdbXSB7XHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW1zID0gdGhpcy5fY29udGVudEl0ZW1zO1xyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gY29udGVudEl0ZW1zLmxlbmd0aDtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXk8UmVzb2x2ZWRJdGVtQ29uZmlnPihjb3VudCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBjb250ZW50SXRlbXNbaV07XHJcbiAgICAgICAgICAgIHJlc3VsdFtpXSA9IGl0ZW0udG9Db25maWcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBoaWdobGlnaHREcm9wWm9uZSh4OiBudW1iZXIsIHk6IG51bWJlciwgYXJlYTogQXJlYUxpbmtlZFJlY3QpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBkcm9wVGFyZ2V0SW5kaWNhdG9yID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmRyb3BUYXJnZXRJbmRpY2F0b3I7XHJcbiAgICAgICAgaWYgKGRyb3BUYXJnZXRJbmRpY2F0b3IgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ0FDSUhEWjU1OTMnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkcm9wVGFyZ2V0SW5kaWNhdG9yLmhpZ2hsaWdodEFyZWEoYXJlYSwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIG9uRHJvcChjb250ZW50SXRlbTogQ29udGVudEl0ZW0sIGFyZWE6IENvbnRlbnRJdGVtLkFyZWEpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFkZENoaWxkKGNvbnRlbnRJdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBzaG93KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIE5vdCBzdXJlIHdoeSBzaG93QWxsQWN0aXZlQ29udGVudEl0ZW1zKCkgd2FzIGNhbGxlZC4gR29sZGVuTGF5b3V0IHNlZW1zIHRvIHdvcmsgZmluZSB3aXRob3V0IGl0LiAgTGVmdCBjb21tZW50ZWQgY29kZVxyXG4gICAgICAgIC8vIGluIHNvdXJjZSBpbiBjYXNlIGEgcmVhc29uIGZvciBpdCBiZWNvbWVzIGFwcGFyZW50LlxyXG4gICAgICAgIC8vIHRoaXMubGF5b3V0TWFuYWdlci5zaG93QWxsQWN0aXZlQ29udGVudEl0ZW1zKCk7XHJcbiAgICAgICAgc2V0RWxlbWVudERpc3BsYXlWaXNpYmlsaXR5KHRoaXMuX2VsZW1lbnQsIHRydWUpO1xyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci51cGRhdGVTaXplRnJvbUNvbnRhaW5lcigpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NvbnRlbnRJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9jb250ZW50SXRlbXNbaV0uc2hvdygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlc3Ryb3lzIHRoaXMgaXRlbSBhbmRzIGl0cyBjaGlsZHJlblxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jb250ZW50SXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udGVudEl0ZW1zW2ldLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5kZWZlcklmRHJhZ2dpbmcoKGNhbmNlbCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY2FuY2VsKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRJdGVtcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEJhc2VCdWJibGluZ0V2ZW50KCdiZWZvcmVJdGVtRGVzdHJveWVkJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0QmFzZUJ1YmJsaW5nRXZlbnQoJ2l0ZW1EZXN0cm95ZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgYXJlYSB0aGUgY29tcG9uZW50IGN1cnJlbnRseSBvY2N1cGllc1xyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIGdldEVsZW1lbnRBcmVhKGVsZW1lbnQ/OiBIVE1MRWxlbWVudCk6IENvbnRlbnRJdGVtLkFyZWEgfCBudWxsIHtcclxuICAgICAgICBlbGVtZW50ID0gZWxlbWVudCA/PyB0aGlzLl9lbGVtZW50O1xyXG5cclxuICAgICAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB0b3AgPSByZWN0LnRvcCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xyXG4gICAgICAgIGNvbnN0IGxlZnQgPSByZWN0LmxlZnQgKyBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQ7XHJcblxyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gcmVjdC53aWR0aDtcclxuICAgICAgICBjb25zdCBoZWlnaHQgPSByZWN0LmhlaWdodDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgeDE6IGxlZnQsXHJcbiAgICAgICAgICAgIHkxOiB0b3AsXHJcbiAgICAgICAgICAgIHgyOiBsZWZ0ICsgd2lkdGgsXHJcbiAgICAgICAgICAgIHkyOiB0b3AgKyBoZWlnaHQsXHJcbiAgICAgICAgICAgIHN1cmZhY2U6IHdpZHRoICogaGVpZ2h0LFxyXG4gICAgICAgICAgICBjb250ZW50SXRlbTogdGhpc1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgdHJlZSBvZiBjb250ZW50IGl0ZW1zIGlzIGNyZWF0ZWQgaW4gdHdvIHN0ZXBzOiBGaXJzdCBhbGwgY29udGVudCBpdGVtcyBhcmUgaW5zdGFudGlhdGVkLFxyXG4gICAgICogdGhlbiBpbml0IGlzIGNhbGxlZCByZWN1cnNpdmVseSBmcm9tIHRvcCB0byBib3R0ZW0uIFRoaXMgaXMgdGhlIGJhc2ljIGluaXQgZnVuY3Rpb24sXHJcbiAgICAgKiBpdCBjYW4gYmUgdXNlZCwgZXh0ZW5kZWQgb3Igb3ZlcndyaXR0ZW4gYnkgdGhlIGNvbnRlbnQgaXRlbXNcclxuICAgICAqXHJcbiAgICAgKiBJdHMgYmVoYXZpb3VyIGRlcGVuZHMgb24gdGhlIGNvbnRlbnQgaXRlbVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIGluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5faXNJbml0aWFsaXNlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5lbWl0QmFzZUJ1YmJsaW5nRXZlbnQoJ2l0ZW1DcmVhdGVkJyk7XHJcbiAgICAgICAgdGhpcy5lbWl0VW5rbm93bkJ1YmJsaW5nRXZlbnQodGhpcy50eXBlICsgJ0NyZWF0ZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgc2V0UGFyZW50KHBhcmVudDogQ29udGVudEl0ZW0pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgYWRkUG9wSW5QYXJlbnRJZChpZDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBvcEluUGFyZW50SWRzLmluY2x1ZGVzKGlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLnBvcEluUGFyZW50SWRzLnB1c2goaWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgaW5pdENvbnRlbnRJdGVtcygpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NvbnRlbnRJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9jb250ZW50SXRlbXNbaV0uaW5pdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcm90ZWN0ZWQgaGlkZSgpOiB2b2lkIHtcclxuICAgICAgICBzZXRFbGVtZW50RGlzcGxheVZpc2liaWxpdHkodGhpcy5fZWxlbWVudCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci51cGRhdGVTaXplRnJvbUNvbnRhaW5lcigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByb3RlY3RlZCB1cGRhdGVDb250ZW50SXRlbXNTaXplKCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY29udGVudEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICghIHRoaXMuX2NvbnRlbnRJdGVtc1tpXS5pZ25vcmluZylcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRJdGVtc1tpXS51cGRhdGVTaXplKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY3JlYXRlcyBhbGwgY29udGVudCBpdGVtcyBmb3IgdGhpcyBub2RlIGF0IGluaXRpYWxpc2F0aW9uIHRpbWVcclxuICAgICAqIFBMRUFTRSBOT1RFLCBwbGVhc2Ugc2VlIGFkZENoaWxkIGZvciBhZGRpbmcgY29udGVudEl0ZW1zIGF0IHJ1bnRpbWVcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZUNvbnRlbnRJdGVtcyhjb250ZW50OiByZWFkb25seSBSZXNvbHZlZEl0ZW1Db25maWdbXSkge1xyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gY29udGVudC5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5PENvbnRlbnRJdGVtPihjb3VudCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFtpXSA9IHRoaXMubGF5b3V0TWFuYWdlci5jcmVhdGVDb250ZW50SXRlbShjb250ZW50W2ldLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBmb3IgZXZlcnkgZXZlbnQgb24gdGhlIGl0ZW0gdHJlZS4gRGVjaWRlcyB3aGV0aGVyIHRoZSBldmVudCBpcyBhIGJ1YmJsaW5nXHJcbiAgICAgKiBldmVudCBhbmQgcHJvcGFnYXRlcyBpdCB0byBpdHMgcGFyZW50XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcclxuICAgICAqIEBwYXJhbSBldmVudCAtXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBwcm9wYWdhdGVFdmVudChuYW1lOiBzdHJpbmcsIGFyZ3M6IHVua25vd25bXSkge1xyXG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGFyZ3NbMF07XHJcbiAgICAgICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEV2ZW50RW1pdHRlci5CdWJibGluZ0V2ZW50ICYmXHJcbiAgICAgICAgICAgICAgICBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9PT0gZmFsc2UgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzSW5pdGlhbGlzZWQgPT09IHRydWUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEluIHNvbWUgY2FzZXMgKGUuZy4gaWYgYW4gZWxlbWVudCBpcyBjcmVhdGVkIGZyb20gYSBEcmFnU291cmNlKSBpdFxyXG4gICAgICAgICAgICAgICAgICogZG9lc24ndCBoYXZlIGEgcGFyZW50IGFuZCBpcyBub3QgYSBjaGlsZCBvZiBHcm91bmRJdGVtLiBJZiB0aGF0J3MgdGhlIGNhc2VcclxuICAgICAgICAgICAgICAgICAqIHByb3BhZ2F0ZSB0aGUgYnViYmxpbmcgZXZlbnQgZnJvbSB0aGUgdG9wIGxldmVsIG9mIHRoZSBzdWJzdHJlZSBkaXJlY3RseVxyXG4gICAgICAgICAgICAgICAgICogdG8gdGhlIGxheW91dE1hbmFnZXJcclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNHcm91bmQgPT09IGZhbHNlICYmIHRoaXMuX3BhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudC5lbWl0VW5rbm93bihuYW1lLCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVFdmVudFByb3BhZ2F0aW9uVG9MYXlvdXRNYW5hZ2VyKG5hbWUsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSB0cnlCdWJibGVFdmVudChuYW1lOiBzdHJpbmcsIGFyZ3M6IHVua25vd25bXSk6IHZvaWQge1xyXG4gICAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGFyZ3NbMF07XHJcbiAgICAgICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEV2ZW50RW1pdHRlci5CdWJibGluZ0V2ZW50ICYmXHJcbiAgICAgICAgICAgICAgICBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9PT0gZmFsc2UgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzSW5pdGlhbGlzZWQgPT09IHRydWVcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEluIHNvbWUgY2FzZXMgKGUuZy4gaWYgYW4gZWxlbWVudCBpcyBjcmVhdGVkIGZyb20gYSBEcmFnU291cmNlKSBpdFxyXG4gICAgICAgICAgICAgICAgICogZG9lc24ndCBoYXZlIGEgcGFyZW50IGFuZCBpcyBub3QgYSBjaGlsZCBvZiBHcm91bmRJdGVtLiBJZiB0aGF0J3MgdGhlIGNhc2VcclxuICAgICAgICAgICAgICAgICAqIHByb3BhZ2F0ZSB0aGUgYnViYmxpbmcgZXZlbnQgZnJvbSB0aGUgdG9wIGxldmVsIG9mIHRoZSBzdWJzdHJlZSBkaXJlY3RseVxyXG4gICAgICAgICAgICAgICAgICogdG8gdGhlIGxheW91dE1hbmFnZXJcclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNHcm91bmQgPT09IGZhbHNlICYmIHRoaXMuX3BhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudC5lbWl0VW5rbm93bihuYW1lLCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGVFdmVudFByb3BhZ2F0aW9uVG9MYXlvdXRNYW5hZ2VyKG5hbWUsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsbCByYXcgZXZlbnRzIGJ1YmJsZSB1cCB0byB0aGUgR3JvdW5kIGVsZW1lbnQuIFNvbWUgZXZlbnRzIHRoYXRcclxuICAgICAqIGFyZSBwcm9wYWdhdGVkIHRvIC0gYW5kIGVtaXR0ZWQgYnkgLSB0aGUgbGF5b3V0TWFuYWdlciBob3dldmVyIGFyZVxyXG4gICAgICogb25seSBzdHJpbmctYmFzZWQsIGJhdGNoZWQgYW5kIHNhbml0aXplZCB0byBtYWtlIHRoZW0gbW9yZSB1c2FibGVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2NoZWR1bGVFdmVudFByb3BhZ2F0aW9uVG9MYXlvdXRNYW5hZ2VyKG5hbWU6IHN0cmluZywgZXZlbnQ6IEV2ZW50RW1pdHRlci5CdWJibGluZ0V2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3Rocm90dGxlZEV2ZW50cy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLmxheW91dE1hbmFnZXIuZW1pdFVua25vd24obmFtZSwgZXZlbnQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wZW5kaW5nRXZlbnRQcm9wYWdhdGlvbnNbbmFtZV0gIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdFdmVudFByb3BhZ2F0aW9uc1tuYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBnbG9iYWxUaGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnByb3BhZ2F0ZUV2ZW50VG9MYXlvdXRNYW5hZ2VyKG5hbWUsIGV2ZW50KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGJhY2sgZm9yIGV2ZW50cyBzY2hlZHVsZWQgYnkgX3NjaGVkdWxlRXZlbnRQcm9wYWdhdGlvblRvTGF5b3V0TWFuYWdlclxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBwcm9wYWdhdGVFdmVudFRvTGF5b3V0TWFuYWdlcihuYW1lOiBzdHJpbmcsIGV2ZW50OiBFdmVudEVtaXR0ZXIuQnViYmxpbmdFdmVudCkge1xyXG4gICAgICAgIHRoaXMuX3BlbmRpbmdFdmVudFByb3BhZ2F0aW9uc1tuYW1lXSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5lbWl0VW5rbm93bihuYW1lLCBldmVudCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgQ29udGVudEl0ZW0ge1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBBcmVhIGV4dGVuZHMgQXJlYUxpbmtlZFJlY3Qge1xyXG4gICAgICAgIHN1cmZhY2U6IG51bWJlcjtcclxuICAgICAgICBjb250ZW50SXRlbTogQ29udGVudEl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoa2luZENsYXNzPzogc3RyaW5nKTogSFRNTERpdkVsZW1lbnQge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5JdGVtKTtcclxuICAgICAgICBpZiAoa2luZENsYXNzKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChraW5kQ2xhc3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgQGRlcHJlY2F0ZWQgVXNlIHtAbGluayAoQ29udGVudEl0ZW06Y2xhc3MpfSAqL1xyXG5leHBvcnQgdHlwZSBBYnN0cmFjdENvbnRlbnRJdGVtID0gQ29udGVudEl0ZW07XHJcbiIsImltcG9ydCB7IENvbXBvbmVudEl0ZW1Db25maWcsIEl0ZW1Db25maWcsIFJvd09yQ29sdW1uSXRlbUNvbmZpZywgU3RhY2tJdGVtQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2NvbmZpZyc7XHJcbmltcG9ydCB7IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZywgUmVzb2x2ZWRHcm91bmRJdGVtQ29uZmlnLCBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZywgUmVzb2x2ZWRJdGVtQ29uZmlnLCBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnLCBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9yZXNvbHZlZC1jb25maWcnO1xyXG5pbXBvcnQgeyBBc3NlcnRFcnJvciwgVW5leHBlY3RlZE51bGxFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9pbnRlcm5hbC1lcnJvcic7XHJcbmltcG9ydCB7IExheW91dE1hbmFnZXIgfSBmcm9tICcuLi9sYXlvdXQtbWFuYWdlcic7XHJcbmltcG9ydCB7IERvbUNvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL2RvbS1jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBBcmVhTGlua2VkUmVjdCwgSXRlbVR5cGUsIFNpemVVbml0RW51bSB9IGZyb20gJy4uL3V0aWxzL3R5cGVzJztcclxuaW1wb3J0IHsgc2V0RWxlbWVudEhlaWdodCwgc2V0RWxlbWVudFdpZHRoIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRJdGVtIH0gZnJvbSAnLi9jb21wb25lbnQtaXRlbSc7XHJcbmltcG9ydCB7IENvbXBvbmVudFBhcmVudGFibGVJdGVtIH0gZnJvbSAnLi9jb21wb25lbnQtcGFyZW50YWJsZS1pdGVtJztcclxuaW1wb3J0IHsgQ29udGVudEl0ZW0gfSBmcm9tICcuL2NvbnRlbnQtaXRlbSc7XHJcbmltcG9ydCB7IFJvd09yQ29sdW1uIH0gZnJvbSAnLi9yb3ctb3ItY29sdW1uJztcclxuXHJcbi8qKlxyXG4gKiBHcm91bmRJdGVtIGlzIHRoZSBDb250ZW50SXRlbSB3aG9zZSBvbmUgY2hpbGQgaXMgdGhlIHJvb3QgQ29udGVudEl0ZW0gKFJvb3QgaXMgcGxhbnRlZCBpbiBHcm91bmQpLlxyXG4gKiAoUHJldmlvdXNseSBpdCB3YXMgY2FsbGVkIHJvb3QgaG93ZXZlciB0aGlzIHdhcyBpbmNvcnJlY3QgYXMgaXRzIGNoaWxkIGlzIHRoZSByb290IGl0ZW0pXHJcbiAqIFRoZXJlIGlzIG9ubHkgb25lIGluc3RhbmNlIG9mIEdyb3VuZEl0ZW0gYW5kIGl0IGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCBieSB0aGUgTGF5b3V0IE1hbmFnZXJcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR3JvdW5kSXRlbSBleHRlbmRzIENvbXBvbmVudFBhcmVudGFibGVJdGVtIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NoaWxkRWxlbWVudENvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jb250YWluZXJFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihsYXlvdXRNYW5hZ2VyOiBMYXlvdXRNYW5hZ2VyLCByb290SXRlbUNvbmZpZzogUmVzb2x2ZWRSb290SXRlbUNvbmZpZyB8IHVuZGVmaW5lZCwgY29udGFpbmVyRWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbnRhaW5lclBvc2l0aW9uOiBOb2RlIHwgbnVsbCkge1xyXG5cclxuICAgICAgICBzdXBlcihsYXlvdXRNYW5hZ2VyLCBSZXNvbHZlZEdyb3VuZEl0ZW1Db25maWcuY3JlYXRlKHJvb3RJdGVtQ29uZmlnKSwgbnVsbCwgX2NyZWF0ZVJvb3RFbGVtZW50KGNvbnRhaW5lckVsZW1lbnQsIGNvbnRhaW5lclBvc2l0aW9uKSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Hb2xkZW5MYXlvdXQpO1xyXG5cclxuICAgICAgICB0aGlzLmlzR3JvdW5kID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9jaGlsZEVsZW1lbnRDb250YWluZXIgPSB0aGlzLmVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyRWxlbWVudCA9IGNvbnRhaW5lckVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgaW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpc2VkID09PSB0cnVlKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlTm9kZVNpemUoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZEVsZW1lbnRDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50SXRlbXNbaV0uZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdXBlci5pbml0KCk7XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdENvbnRlbnRJdGVtcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTG9hZHMgYSBuZXcgTGF5b3V0XHJcbiAgICAgKiBJbnRlcm5hbCBvbmx5LiAgVG8gbG9hZCBhIG5ldyBsYXlvdXQgd2l0aCBBUEksIHVzZSB7QGxpbmsgKExheW91dE1hbmFnZXI6Y2xhc3MpLmxvYWRMYXlvdXR9XHJcbiAgICAgKi9cclxuICAgIGxvYWRSb290KHJvb3RJdGVtQ29uZmlnOiBSZXNvbHZlZFJvb3RJdGVtQ29uZmlnIHwgdW5kZWZpbmVkKTogdm9pZCB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIHJvb3QgaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgdGhpcy5jbGVhclJvb3QoKTtcclxuXHJcbiAgICAgICAgaWYgKHJvb3RJdGVtQ29uZmlnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc3Qgcm9vdENvbnRlbnRJdGVtID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmNyZWF0ZUFuZEluaXRDb250ZW50SXRlbShyb290SXRlbUNvbmZpZywgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQocm9vdENvbnRlbnRJdGVtLCAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJSb290KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIFJlbW92ZSBleGlzdGluZyByb290IGlmIGl0IGV4aXN0c1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtcyA9IHRoaXMuY29udGVudEl0ZW1zO1xyXG4gICAgICAgIHN3aXRjaCAoY29udGVudEl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjYXNlIDA6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIDE6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nUm9vdENvbnRlbnRJdGVtID0gY29udGVudEl0ZW1zWzBdO1xyXG4gICAgICAgICAgICAgICAgZXhpc3RpbmdSb290Q29udGVudEl0ZW0ucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdHSUxSMDc3MjEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBDb250ZW50SXRlbSBjaGlsZCB0byByb290IENvbnRlbnRJdGVtLlxyXG4gICAgICogSW50ZXJuYWwgb25seS4gIFRvIGxvYWQgYSBhZGQgd2l0aCBBUEksIHVzZSB7QGxpbmsgKExheW91dE1hbmFnZXI6Y2xhc3MpLmFkZEl0ZW19XHJcbiAgICAgKiBAcmV0dXJucyAtMSBpZiBhZGRlZCBhcyByb290IG90aGVyd2lzZSBpbmRleCBpbiByb290IENvbnRlbnRJdGVtJ3MgY29udGVudFxyXG4gICAgICovXHJcbiAgICBhZGRJdGVtKGl0ZW1Db25maWc6IFJvd09yQ29sdW1uSXRlbUNvbmZpZyB8IFN0YWNrSXRlbUNvbmZpZyB8IENvbXBvbmVudEl0ZW1Db25maWcsXHJcbiAgICAgICAgaW5kZXg/OiBudW1iZXJcclxuICAgICk6IG51bWJlciB7XHJcbiAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLmNoZWNrTWluaW1pc2VNYXhpbWlzZWRTdGFjaygpO1xyXG5cclxuICAgICAgICBjb25zdCByZXNvbHZlZEl0ZW1Db25maWcgPSBJdGVtQ29uZmlnLnJlc29sdmUoaXRlbUNvbmZpZywgZmFsc2UpO1xyXG4gICAgICAgIGxldCBwYXJlbnQ6IENvbnRlbnRJdGVtO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHBhcmVudCA9IHRoaXMuY29udGVudEl0ZW1zWzBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xyXG4gICAgICAgICAgICBwYXJlbnQgPSB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGFyZW50LmlzQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFkZCBpdGVtIGFzIGNoaWxkIHRvIENvbXBvbmVudEl0ZW0nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50SXRlbSA9IHRoaXMubGF5b3V0TWFuYWdlci5jcmVhdGVBbmRJbml0Q29udGVudEl0ZW0ocmVzb2x2ZWRJdGVtQ29uZmlnLCBwYXJlbnQpO1xyXG4gICAgICAgICAgICBpbmRleCA9IHBhcmVudC5hZGRDaGlsZChjb250ZW50SXRlbSwgaW5kZXgpO1xyXG4gICAgICAgICAgICByZXR1cm4gKHBhcmVudCA9PT0gdGhpcykgPyAtMSA6IGluZGV4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsb2FkQ29tcG9uZW50QXNSb290KGl0ZW1Db25maWc6IENvbXBvbmVudEl0ZW1Db25maWcpOiB2b2lkIHtcclxuICAgICAgICAvLyBSZW1vdmUgZXhpc3Rpbmcgcm9vdCBpZiBpdCBleGlzdHNcclxuICAgICAgICB0aGlzLmNsZWFyUm9vdCgpO1xyXG5cclxuICAgICAgICBjb25zdCByZXNvbHZlZEl0ZW1Db25maWcgPSBJdGVtQ29uZmlnLnJlc29sdmUoaXRlbUNvbmZpZywgZmFsc2UpIGFzIFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZztcclxuXHJcbiAgICAgICAgaWYgKHJlc29sdmVkSXRlbUNvbmZpZy5tYXhpbWlzZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSb290IENvbXBvbmVudCBjYW5ub3QgYmUgbWF4aW1pc2VkJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgcm9vdENvbnRlbnRJdGVtID0gbmV3IENvbXBvbmVudEl0ZW0odGhpcy5sYXlvdXRNYW5hZ2VyLCByZXNvbHZlZEl0ZW1Db25maWcsIHRoaXMpO1xyXG4gICAgICAgICAgICByb290Q29udGVudEl0ZW0uaW5pdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkKHJvb3RDb250ZW50SXRlbSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIFJvb3QgQ29udGVudEl0ZW0uXHJcbiAgICAgKiBJbnRlcm5hbCBvbmx5LiAgVG8gcmVwbGFjZSBSb290IENvbnRlbnRJdGVtIHdpdGggQVBJLCB1c2Uge0BsaW5rIChMYXlvdXRNYW5hZ2VyOmNsYXNzKS5sb2FkTGF5b3V0fVxyXG4gICAgICovXHJcbiAgICBvdmVycmlkZSBhZGRDaGlsZChjb250ZW50SXRlbTogQ29udGVudEl0ZW0sIGluZGV4PzogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy5jb250ZW50SXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dyb3VuZCBub2RlIGNhbiBvbmx5IGhhdmUgYSBzaW5nbGUgY2hpbGQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBjb250ZW50SXRlbSA9IHRoaXMubGF5b3V0TWFuYWdlci5fJG5vcm1hbGl6ZUNvbnRlbnRJdGVtKGNvbnRlbnRJdGVtLCB0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fY2hpbGRFbGVtZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRlbnRJdGVtLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICBpbmRleCA9IHN1cGVyLmFkZENoaWxkKGNvbnRlbnRJdGVtLCBpbmRleCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0QmFzZUJ1YmJsaW5nRXZlbnQoJ3N0YXRlQ2hhbmdlZCcpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBjYWxjdWxhdGVDb25maWdDb250ZW50KCk6IFJlc29sdmVkUm9vdEl0ZW1Db25maWdbXSB7XHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW1zID0gdGhpcy5jb250ZW50SXRlbXM7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSBjb250ZW50SXRlbXMubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheTxSZXNvbHZlZFJvb3RJdGVtQ29uZmlnPihjb3VudCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBjb250ZW50SXRlbXNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1Db25maWcgPSBpdGVtLnRvQ29uZmlnKCk7XHJcbiAgICAgICAgICAgIGlmIChSZXNvbHZlZFJvb3RJdGVtQ29uZmlnLmlzUm9vdEl0ZW1Db25maWcoaXRlbUNvbmZpZykpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IGl0ZW1Db25maWc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ1JDQ0M2NjgzMicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc2V0U2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGlmICh3aWR0aCA9PT0gdW5kZWZpbmVkIHx8IGhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpOyAvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgd2l0aCB2MS54IEFQSVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNldEVsZW1lbnRXaWR0aCh0aGlzLmVsZW1lbnQsIHdpZHRoKTtcclxuICAgICAgICAgICAgc2V0RWxlbWVudEhlaWdodCh0aGlzLmVsZW1lbnQsIGhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICAvLyBHcm91bmRJdGVtIGNhbiBiZSBlbXB0eVxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50SXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgc2V0RWxlbWVudFdpZHRoKHRoaXMuY29udGVudEl0ZW1zWzBdLmVsZW1lbnQsIHdpZHRoKTtcclxuICAgICAgICAgICAgICAgIHNldEVsZW1lbnRIZWlnaHQodGhpcy5jb250ZW50SXRlbXNbMF0uZWxlbWVudCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy90aGlzLnVwZGF0ZUNvbnRlbnRJdGVtc1NpemUoKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVTaXplKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVNpZGVBcmVhcygpOiBHcm91bmRJdGVtLkFyZWFbXSB7XHJcbiAgICAgICAgY29uc3QgYXJlYVNpemUgPSA1MDtcclxuXHJcbiAgICAgICAgY29uc3Qgb3Bwb3NpdGVTaWRlcyA9IEdyb3VuZEl0ZW0uQXJlYS5vcHBvc2l0ZVNpZGVzO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheTxHcm91bmRJdGVtLkFyZWE+KE9iamVjdC5rZXlzKG9wcG9zaXRlU2lkZXMpLmxlbmd0aCk7XHJcbiAgICAgICAgbGV0IGlkeCA9IDA7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9wcG9zaXRlU2lkZXMpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2lkZSA9IGtleSBhcyBrZXlvZiBHcm91bmRJdGVtLkFyZWEuU2lkZXM7XHJcbiAgICAgICAgICAgIGNvbnN0IGFyZWEgPSB0aGlzLmdldEVsZW1lbnRBcmVhKCkgYXMgR3JvdW5kSXRlbS5BcmVhO1xyXG4gICAgICAgICAgICBpZiAoYXJlYSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ1JDU0E3NzU1MycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXJlYS5zaWRlID0gc2lkZTtcclxuICAgICAgICAgICAgICAgIGlmIChvcHBvc2l0ZVNpZGVzW3NpZGVdWzFdID09PSAnMicgKVxyXG4gICAgICAgICAgICAgICAgICAgIGFyZWFbc2lkZV0gPSBhcmVhW29wcG9zaXRlU2lkZXNbc2lkZV1dIC0gYXJlYVNpemU7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgYXJlYVtzaWRlXSA9IGFyZWFbb3Bwb3NpdGVTaWRlc1tzaWRlXV0gKyBhcmVhU2l6ZTtcclxuICAgICAgICAgICAgICAgIGFyZWEuc3VyZmFjZSA9IChhcmVhLngyIC0gYXJlYS54MSkgKiAoYXJlYS55MiAtIGFyZWEueTEpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2lkeCsrXSA9IGFyZWE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgaGlnaGxpZ2h0RHJvcFpvbmUoeDogbnVtYmVyLCB5OiBudW1iZXIsIGFyZWE6IEFyZWFMaW5rZWRSZWN0KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLnRhYkRyb3BQbGFjZWhvbGRlci5yZW1vdmUoKTtcclxuICAgICAgICBzdXBlci5oaWdobGlnaHREcm9wWm9uZSh4LCB5LCBhcmVhKTtcclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBvbkRyb3AoY29udGVudEl0ZW06IENvbnRlbnRJdGVtLCBhcmVhOiBHcm91bmRJdGVtLkFyZWEpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgaWYgKGNvbnRlbnRJdGVtLmlzQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1Db25maWcgPSBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZy5jcmVhdGVEZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIC8vIHNpbmNlIFJlc29sdmVkSXRlbUNvbmZpZy5jb250ZW50SXRlbXMgbm90IHNldCB1cCwgd2UgbmVlZCB0byBhZGQgaGVhZGVyIGZyb20gQ29tcG9uZW50XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGNvbnRlbnRJdGVtIGFzIENvbXBvbmVudEl0ZW07XHJcbiAgICAgICAgICAgIGl0ZW1Db25maWcuaGVhZGVyID0gUmVzb2x2ZWRIZWFkZXJlZEl0ZW1Db25maWcuSGVhZGVyLmNyZWF0ZUNvcHkoY29tcG9uZW50LmhlYWRlckNvbmZpZyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmNyZWF0ZUFuZEluaXRDb250ZW50SXRlbShpdGVtQ29uZmlnLCB0aGlzKTtcclxuICAgICAgICAgICAgc3RhY2suYWRkQ2hpbGQoY29udGVudEl0ZW0pO1xyXG4gICAgICAgICAgICBjb250ZW50SXRlbSA9IHN0YWNrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkKGNvbnRlbnRJdGVtKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgKiBJZiB0aGUgY29udGVudEl0ZW0gdGhhdCdzIGJlaW5nIGRyb3BwZWQgaXMgbm90IGRyb3BwZWQgb24gYSBTdGFjayAoY2FzZXMgd2hpY2gganVzdCBwYXNzZWQgYWJvdmUgYW5kXHJcbiAgICAgICAgICAgICAqIHdoaWNoIHdvdWxkIHdyYXAgdGhlIGNvbnRlbnRJdGVtIGluIGEgU3RhY2spIHdlIG5lZWQgdG8gY2hlY2sgd2hldGhlciBjb250ZW50SXRlbSBpcyBhIFJvd09yQ29sdW1uLlxyXG4gICAgICAgICAgICAgKiBJZiBpdCBpcywgd2UgbmVlZCB0byByZS13cmFwIGl0IGluIGEgU3RhY2sgbGlrZSBpdCB3YXMgd2hlbiBpdCB3YXMgZHJhZ2dlZCBieSBpdHMgVGFiIChpdCB3YXMgZHJhZ2dlZCEpLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYoY29udGVudEl0ZW0udHlwZSA9PT0gSXRlbVR5cGUucm93IHx8IGNvbnRlbnRJdGVtLnR5cGUgPT09IEl0ZW1UeXBlLmNvbHVtbil7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtQ29uZmlnID0gUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcuY3JlYXRlRGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSB0aGlzLmxheW91dE1hbmFnZXIuY3JlYXRlQ29udGVudEl0ZW0oaXRlbUNvbmZpZywgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5hZGRDaGlsZChjb250ZW50SXRlbSlcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRJdGVtID0gc3RhY2tcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGFyZWEuc2lkZVswXSA9PSAneCcgPyBJdGVtVHlwZS5yb3cgOiBJdGVtVHlwZS5jb2x1bW47XHJcbiAgICAgICAgICAgIGNvbnN0IGluc2VydEJlZm9yZSA9IGFyZWEuc2lkZVsxXSA9PSAnMic7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbiA9IHRoaXMuY29udGVudEl0ZW1zWzBdO1xyXG4gICAgICAgICAgICBpZiAoIShjb2x1bW4gaW5zdGFuY2VvZiBSb3dPckNvbHVtbikgfHwgY29sdW1uLnR5cGUgIT09IHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1Db25maWcgPSBSZXNvbHZlZEl0ZW1Db25maWcuY3JlYXRlRGVmYXVsdCh0eXBlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvd09yQ29sdW1uID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmNyZWF0ZUNvbnRlbnRJdGVtKGl0ZW1Db25maWcsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXBsYWNlQ2hpbGQoY29sdW1uLCByb3dPckNvbHVtbik7XHJcbiAgICAgICAgICAgICAgICByb3dPckNvbHVtbi5hZGRDaGlsZChjb250ZW50SXRlbSwgaW5zZXJ0QmVmb3JlID8gMCA6IHVuZGVmaW5lZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICByb3dPckNvbHVtbi5hZGRDaGlsZChjb2x1bW4sIGluc2VydEJlZm9yZSA/IHVuZGVmaW5lZCA6IDAsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgY29sdW1uLnNpemUgPSA1MDtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRJdGVtLnNpemUgPSA1MDtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRJdGVtLnNpemVVbml0ID0gU2l6ZVVuaXRFbnVtLlBlcmNlbnQ7XHJcbiAgICAgICAgICAgICAgICByb3dPckNvbHVtbi51cGRhdGVTaXplKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaWJsaW5nID0gY29sdW1uLmNvbnRlbnRJdGVtc1tpbnNlcnRCZWZvcmUgPyAwIDogY29sdW1uLmNvbnRlbnRJdGVtcy5sZW5ndGggLSAxXVxyXG4gICAgICAgICAgICAgICAgY29sdW1uLmFkZENoaWxkKGNvbnRlbnRJdGVtLCBpbnNlcnRCZWZvcmUgPyAwIDogdW5kZWZpbmVkLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHNpYmxpbmcuc2l6ZSAqPSAwLjU7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50SXRlbS5zaXplID0gc2libGluZy5zaXplO1xyXG4gICAgICAgICAgICAgICAgY29udGVudEl0ZW0uc2l6ZVVuaXQgPSBTaXplVW5pdEVudW0uUGVyY2VudDtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi51cGRhdGVTaXplKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm8gQ29udGVudEl0ZW0gY2FuIGRvY2sgd2l0aCBncm91bmRJdGVtLiAgSG93ZXZlciBTdGFjayBjYW4gaGF2ZSBhIEdyb3VuZEl0ZW0gcGFyZW50IGFuZCBTdGFjayByZXF1aXJlcyB0aGF0XHJcbiAgICAvLyBpdHMgcGFyZW50IGltcGxlbWVudCBkb2NrKCkgZnVuY3Rpb24uICBBY2NvcmRpbmdseSB0aGlzIGZ1bmN0aW9uIGlzIGltcGxlbWVudGVkIGJ1dCB0aHJvd3MgYW4gZXhjZXB0aW9uIGFzIGl0IHNob3VsZFxyXG4gICAgLy8gbmV2ZXIgYmUgY2FsbGVkXHJcbiAgICBkb2NrKCk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignR0lEODc3MzEnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBObyBDb250ZW50SXRlbSBjYW4gZG9jayB3aXRoIGdyb3VuZEl0ZW0uICBIb3dldmVyIFN0YWNrIGNhbiBoYXZlIGEgR3JvdW5kSXRlbSBwYXJlbnQgYW5kIFN0YWNrIHJlcXVpcmVzIHRoYXRcclxuICAgIC8vIGl0cyBwYXJlbnQgaW1wbGVtZW50IHZhbGlkYXRlRG9ja2luZygpIGZ1bmN0aW9uLiAgQWNjb3JkaW5nbHkgdGhpcyBmdW5jdGlvbiBpcyBpbXBsZW1lbnRlZCBidXQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBhcyBpdCBzaG91bGRcclxuICAgIC8vIG5ldmVyIGJlIGNhbGxlZFxyXG4gICAgdmFsaWRhdGVEb2NraW5nKCk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignR0lWRDg3NzMyJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWxsQ29udGVudEl0ZW1zKCk6IENvbnRlbnRJdGVtW10ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogQ29udGVudEl0ZW1bXSA9IFt0aGlzXTtcclxuICAgICAgICB0aGlzLmRlZXBHZXRBbGxDb250ZW50SXRlbXModGhpcy5jb250ZW50SXRlbXMsIHJlc3VsdCk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb25maWdNYXhpbWlzZWRJdGVtcygpOiBDb250ZW50SXRlbVtdIHtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IENvbnRlbnRJdGVtW10gPSBbXTtcclxuICAgICAgICB0aGlzLmRlZXBGaWx0ZXJDb250ZW50SXRlbXModGhpcy5jb250ZW50SXRlbXMsIHJlc3VsdCwgKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgaWYgKENvbnRlbnRJdGVtLmlzU3RhY2soaXRlbSkgJiYgaXRlbS5pbml0aWFsV2FudE1heGltaXNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChDb250ZW50SXRlbS5pc0NvbXBvbmVudEl0ZW0oaXRlbSkgJiYgaXRlbS5pbml0aWFsV2FudE1heGltaXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGdldEl0ZW1zQnlQb3BJblBhcmVudElkKHBvcEluUGFyZW50SWQ6IHN0cmluZyk6IENvbnRlbnRJdGVtW10ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogQ29udGVudEl0ZW1bXSA9IFtdO1xyXG4gICAgICAgIHRoaXMuZGVlcEZpbHRlckNvbnRlbnRJdGVtcyh0aGlzLmNvbnRlbnRJdGVtcywgcmVzdWx0LCAoaXRlbSkgPT4gaXRlbS5wb3BJblBhcmVudElkcy5pbmNsdWRlcyhwb3BJblBhcmVudElkKSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICB0b0NvbmZpZygpOiBSZXNvbHZlZEl0ZW1Db25maWcge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGdlbmVyYXRlIEdyb3VuZEl0ZW0gY29uZmlnJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgc2V0QWN0aXZlQ29tcG9uZW50SXRlbShpdGVtOiBDb21wb25lbnRJdGVtLCBmb2N1czogYm9vbGVhbiwgc3VwcHJlc3NGb2N1c0V2ZW50OiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgLy8gb25seSBhcHBsaWNhYmxlIGlmIENvbXBvbmVudEl0ZW0gaXMgcm9vdCBhbmQgdGhlbiBpdCBhbHdheXMgaGFzIGZvY3VzXHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlTm9kZVNpemUoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLmxheW91dE1hbmFnZXIuY29udGFpbmVyV2lkdGhBbmRIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgc2V0RWxlbWVudFdpZHRoKHRoaXMuZWxlbWVudCwgd2lkdGgpO1xyXG4gICAgICAgIHNldEVsZW1lbnRIZWlnaHQodGhpcy5lbGVtZW50LCBoZWlnaHQpO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIEdyb3VuZEl0ZW0gY2FuIGJlIGVtcHR5XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgc2V0RWxlbWVudFdpZHRoKHRoaXMuY29udGVudEl0ZW1zWzBdLmVsZW1lbnQsIHdpZHRoKTtcclxuICAgICAgICAgICAgc2V0RWxlbWVudEhlaWdodCh0aGlzLmNvbnRlbnRJdGVtc1swXS5lbGVtZW50LCBoZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRlZXBHZXRBbGxDb250ZW50SXRlbXMoY29udGVudDogcmVhZG9ubHkgQ29udGVudEl0ZW1bXSwgcmVzdWx0OiBDb250ZW50SXRlbVtdKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtID0gY29udGVudFtpXTtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBjb250ZW50SXRlbS5jb250ZW50SXRlbXM7XHJcbiAgICAgICAgICAgIGlmICghIGNvbnRlbnRJdGVtLmlnbm9yaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoISBjb250ZW50SXRlbS5pZ25vcmluZ0NoaWxkXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgKGNvbnRlbnRJdGVtLnR5cGUgIT09IEl0ZW1UeXBlLnJvdyAmJiBjb250ZW50SXRlbS50eXBlICE9PSBJdGVtVHlwZS5jb2x1bW4pXHJcbiAgICAgICAgICAgICAgICAgICAgfHwgY2hpbGRyZW4ubGVuZ3RoID4gMilcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjb250ZW50SXRlbSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlZXBHZXRBbGxDb250ZW50SXRlbXMoY2hpbGRyZW4sIHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkZWVwRmlsdGVyQ29udGVudEl0ZW1zKGNvbnRlbnQ6IHJlYWRvbmx5IENvbnRlbnRJdGVtW10sIHJlc3VsdDogQ29udGVudEl0ZW1bXSxcclxuICAgICAgICBjaGVja0FjY2VwdEZ0bjogKCh0aGlzOiB2b2lkLCBpdGVtOiBDb250ZW50SXRlbSkgPT4gYm9vbGVhbilcclxuICAgICk6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50SXRlbSA9IGNvbnRlbnRbaV07XHJcbiAgICAgICAgICAgIGlmIChjaGVja0FjY2VwdEZ0bihjb250ZW50SXRlbSkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbnRlbnRJdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmRlZXBGaWx0ZXJDb250ZW50SXRlbXMoY29udGVudEl0ZW0uY29udGVudEl0ZW1zLCByZXN1bHQsIGNoZWNrQWNjZXB0RnRuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBfY3JlYXRlUm9vdEVsZW1lbnQoY29udGFpbmVyRWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbnRhaW5lclBvc2l0aW9uOiBOb2RlIHwgbnVsbCk6IEhUTUxEaXZFbGVtZW50IHtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBDb250ZW50SXRlbS5jcmVhdGVFbGVtZW50KERvbUNvbnN0YW50cy5DbGFzc05hbWUuUm9vdCk7XHJcbiAgICBjb250YWluZXJFbGVtZW50Lmluc2VydEJlZm9yZShlbGVtZW50LCBjb250YWluZXJQb3NpdGlvbik7XHJcbiAgICByZXR1cm4gZWxlbWVudDtcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIEdyb3VuZEl0ZW0ge1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBBcmVhIGV4dGVuZHMgQ29udGVudEl0ZW0uQXJlYSB7XHJcbiAgICAgICAgc2lkZToga2V5b2YgdHlwZW9mIEFyZWEuU2lkZTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIEFyZWEge1xyXG4gICAgICAgIGV4cG9ydCBjb25zdCBlbnVtIFNpZGUge1xyXG4gICAgICAgICAgICB5MixcclxuICAgICAgICAgICAgeDIsXHJcbiAgICAgICAgICAgIHkxLFxyXG4gICAgICAgICAgICB4MSxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4cG9ydCB0eXBlIFNpZGVzID0geyBbc2lkZSBpbiBrZXlvZiB0eXBlb2YgU2lkZV06IGtleW9mIHR5cGVvZiBTaWRlOyB9XHJcblxyXG4gICAgICAgIGV4cG9ydCBjb25zdCBvcHBvc2l0ZVNpZGVzOiBTaWRlcyA9IHtcclxuICAgICAgICAgICAgeTI6ICd5MScsXHJcbiAgICAgICAgICAgIHgyOiAneDEnLFxyXG4gICAgICAgICAgICB5MTogJ3kyJyxcclxuICAgICAgICAgICAgeDE6ICd4MicsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnRJdGVtQ29uZmlnLCBJdGVtQ29uZmlnLCBSb3dPckNvbHVtbkl0ZW1Db25maWcsIFN0YWNrSXRlbUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9jb25maWcnXHJcbmltcG9ydCB7IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnLCBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9yZXNvbHZlZC1jb25maWcnXHJcbmltcG9ydCB7IFNwbGl0dGVyIH0gZnJvbSAnLi4vY29udHJvbHMvc3BsaXR0ZXInXHJcbmltcG9ydCB7IEFzc2VydEVycm9yLCBVbmV4cGVjdGVkTnVsbEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2ludGVybmFsLWVycm9yJ1xyXG5pbXBvcnQgeyBMYXlvdXRNYW5hZ2VyIH0gZnJvbSAnLi4vbGF5b3V0LW1hbmFnZXInXHJcbmltcG9ydCB7IERvbUNvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL2RvbS1jb25zdGFudHMnXHJcbmltcG9ydCB7IEl0ZW1UeXBlLCBKc29uVmFsdWUsIFNpemVVbml0RW51bSwgV2lkdGhPckhlaWdodFByb3BlcnR5TmFtZSB9IGZyb20gJy4uL3V0aWxzL3R5cGVzJ1xyXG5pbXBvcnQge1xyXG4gICAgZ2V0RWxlbWVudEhlaWdodCxcclxuICAgIGdldEVsZW1lbnRXaWR0aCxcclxuICAgIGdldEVsZW1lbnRXaWR0aEFuZEhlaWdodCxcclxuICAgIG51bWJlclRvUGl4ZWxzLFxyXG4gICAgcGl4ZWxzVG9OdW1iZXIsXHJcbiAgICBzZXRFbGVtZW50SGVpZ2h0LFxyXG4gICAgc2V0RWxlbWVudFdpZHRoXHJcbn0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzXCJcclxuaW1wb3J0IHsgQ29tcG9uZW50SXRlbSB9IGZyb20gJy4vY29tcG9uZW50LWl0ZW0nXHJcbmltcG9ydCB7IENvbnRlbnRJdGVtIH0gZnJvbSAnLi9jb250ZW50LWl0ZW0nXHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgY2xhc3MgUm93T3JDb2x1bW4gZXh0ZW5kcyBDb250ZW50SXRlbSB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jaGlsZEVsZW1lbnRDb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY29uZmlnVHlwZTogJ3JvdycgfCAnY29sdW1uJztcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2lzQ29sdW1uOiBib29sZWFuO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfc3BsaXR0ZXJTaXplOiBudW1iZXI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zcGxpdHRlckdyYWJTaXplOiBudW1iZXI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9kaW1lbnNpb246IFdpZHRoT3JIZWlnaHRQcm9wZXJ0eU5hbWU7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zcGxpdHRlcjogU3BsaXR0ZXJbXSA9IFtdO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfc3BsaXR0ZXJQb3NpdGlvbjogbnVtYmVyIHwgbnVsbDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3NwbGl0dGVyTWluUG9zaXRpb246IG51bWJlciB8IG51bGw7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9zcGxpdHRlck1heFBvc2l0aW9uOiBudW1iZXIgfCBudWxsO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0cnVjdG9yKGlzQ29sdW1uOiBib29sZWFuLCBsYXlvdXRNYW5hZ2VyOiBMYXlvdXRNYW5hZ2VyLCBjb25maWc6IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnLFxyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9yb3dPckNvbHVtblBhcmVudDogQ29udGVudEl0ZW1cclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKGxheW91dE1hbmFnZXIsIGNvbmZpZywgX3Jvd09yQ29sdW1uUGFyZW50LCBDb250ZW50SXRlbS5jcmVhdGVFbGVtZW50KGlzQ29sdW1uID8gRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Db2x1bW4gOiBEb21Db25zdGFudHMuQ2xhc3NOYW1lLlJvdykpO1xyXG5cclxuICAgICAgICB0aGlzLmlzUm93ID0gIWlzQ29sdW1uO1xyXG4gICAgICAgIHRoaXMuaXNDb2x1bW4gPSBpc0NvbHVtbjtcclxuXHJcbiAgICAgICAgdGhpcy5fY2hpbGRFbGVtZW50Q29udGFpbmVyID0gdGhpcy5lbGVtZW50O1xyXG4gICAgICAgIHRoaXMuX3NwbGl0dGVyU2l6ZSA9IGxheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLmRpbWVuc2lvbnMuYm9yZGVyV2lkdGg7XHJcbiAgICAgICAgdGhpcy5fc3BsaXR0ZXJHcmFiU2l6ZSA9IGxheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLmRpbWVuc2lvbnMuYm9yZGVyR3JhYldpZHRoO1xyXG4gICAgICAgIHRoaXMuX2lzQ29sdW1uID0gaXNDb2x1bW47XHJcbiAgICAgICAgdGhpcy5fZGltZW5zaW9uID0gaXNDb2x1bW4gPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XHJcbiAgICAgICAgdGhpcy5fc3BsaXR0ZXJQb3NpdGlvbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fc3BsaXR0ZXJNaW5Qb3NpdGlvbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fc3BsaXR0ZXJNYXhQb3NpdGlvbiA9IG51bGw7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoY29uZmlnLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5yb3c6XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29sdW1uOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29uZmlnVHlwZSA9IGNvbmZpZy50eXBlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ1JPQ0NDVDAwOTI1Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5ld0NvbXBvbmVudChjb21wb25lbnRUeXBlOiBKc29uVmFsdWUsIGNvbXBvbmVudFN0YXRlPzogSnNvblZhbHVlLCB0aXRsZT86IHN0cmluZywgaW5kZXg/OiBudW1iZXIpOiBDb21wb25lbnRJdGVtIHtcclxuICAgICAgICBjb25zdCBpdGVtQ29uZmlnOiBDb21wb25lbnRJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnY29tcG9uZW50JyxcclxuICAgICAgICAgICAgY29tcG9uZW50VHlwZSxcclxuICAgICAgICAgICAgY29tcG9uZW50U3RhdGUsXHJcbiAgICAgICAgICAgIHRpdGxlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmV3SXRlbShpdGVtQ29uZmlnLCBpbmRleCkgYXMgQ29tcG9uZW50SXRlbTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRDb21wb25lbnQoY29tcG9uZW50VHlwZTogSnNvblZhbHVlLCBjb21wb25lbnRTdGF0ZT86IEpzb25WYWx1ZSwgdGl0bGU/OiBzdHJpbmcsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBpdGVtQ29uZmlnOiBDb21wb25lbnRJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnY29tcG9uZW50JyxcclxuICAgICAgICAgICAgY29tcG9uZW50VHlwZSxcclxuICAgICAgICAgICAgY29tcG9uZW50U3RhdGUsXHJcbiAgICAgICAgICAgIHRpdGxlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkSXRlbShpdGVtQ29uZmlnLCBpbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmV3SXRlbShpdGVtQ29uZmlnOiBSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBTdGFja0l0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnLCAgaW5kZXg/OiBudW1iZXIpOiBDb250ZW50SXRlbSB7XHJcbiAgICAgICAgaW5kZXggPSB0aGlzLmFkZEl0ZW0oaXRlbUNvbmZpZywgaW5kZXgpO1xyXG4gICAgICAgIGNvbnN0IGNyZWF0ZWRJdGVtID0gdGhpcy5jb250ZW50SXRlbXNbaW5kZXhdO1xyXG5cclxuICAgICAgICBpZiAoQ29udGVudEl0ZW0uaXNTdGFjayhjcmVhdGVkSXRlbSkgJiYgKEl0ZW1Db25maWcuaXNDb21wb25lbnQoaXRlbUNvbmZpZykpKSB7XHJcbiAgICAgICAgICAgIC8vIGNyZWF0ZWRJdGVtIGlzIGEgU3RhY2sgd2hpY2ggd2FzIGNyZWF0ZWQgdG8gaG9sZCB3YW50ZWQgY29tcG9uZW50LiAgUmV0dXJuIGNvbXBvbmVudFxyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlZEl0ZW0uY29udGVudEl0ZW1zWzBdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVkSXRlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYWRkSXRlbShpdGVtQ29uZmlnOiBSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBTdGFja0l0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnLFxyXG4gICAgICAgIGluZGV4PzogbnVtYmVyXHJcbiAgICApOiBudW1iZXIge1xyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5jaGVja01pbmltaXNlTWF4aW1pc2VkU3RhY2soKTtcclxuICAgICAgICBjb25zdCByZXNvbHZlZEl0ZW1Db25maWcgPSBJdGVtQ29uZmlnLnJlc29sdmUoaXRlbUNvbmZpZywgZmFsc2UpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmNyZWF0ZUFuZEluaXRDb250ZW50SXRlbShyZXNvbHZlZEl0ZW1Db25maWcsIHRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZENoaWxkKGNvbnRlbnRJdGVtLCBpbmRleCwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgbmV3IGNvbnRlbnRJdGVtIHRvIHRoZSBSb3cgb3IgQ29sdW1uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbnRlbnRJdGVtIC1cclxuICAgICAqIEBwYXJhbSBpbmRleCAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgbmV3IGl0ZW0gd2l0aGluIHRoZSBSb3cgb3IgQ29sdW1uLlxyXG4gICAgICogICAgICAgICAgICAgICAgSWYgbm8gaW5kZXggaXMgcHJvdmlkZWQgdGhlIGl0ZW0gd2lsbCBiZSBhZGRlZCB0byB0aGUgZW5kXHJcbiAgICAgKiBAcGFyYW0gc3VzcGVuZFJlc2l6ZSAtIElmIHRydWUgdGhlIGl0ZW1zIHdvbid0IGJlIHJlc2l6ZWQuIFRoaXMgd2lsbCBsZWF2ZSB0aGUgaXRlbSBpblxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgYW5kIGlzIG9ubHkgaW50ZW5kZWQgdG8gYmUgdXNlZCBpZiBtdWx0aXBsZVxyXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiBuZWVkIHRvIGJlIGFkZGVkIGluIG9uZSBnbyBhbmQgcmVzaXplIGlzIGNhbGxlZCBhZnRlcndhcmRzXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgb3ZlcnJpZGUgYWRkQ2hpbGQoY29udGVudEl0ZW06IENvbnRlbnRJdGVtLCBpbmRleD86IG51bWJlciwgc3VzcGVuZFJlc2l6ZT86IGJvb2xlYW4pOiBudW1iZXIge1xyXG5cclxuICAgICAgICAvLyBjb250ZW50SXRlbSA9IHRoaXMubGF5b3V0TWFuYWdlci5fJG5vcm1hbGl6ZUNvbnRlbnRJdGVtKGNvbnRlbnRJdGVtLCB0aGlzKTtcclxuXHJcbiAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaW5kZXggPSB0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jb250ZW50SXRlbXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBzcGxpdHRlckVsZW1lbnQgPSB0aGlzLmNyZWF0ZVNwbGl0dGVyKE1hdGgubWF4KDAsIGluZGV4IC0gMSkpLmVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRJdGVtc1tpbmRleCAtIDFdLmVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmVuZCcsIHNwbGl0dGVyRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBzcGxpdHRlckVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmVuZCcsIGNvbnRlbnRJdGVtLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50SXRlbXNbMF0uZWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWJlZ2luJywgc3BsaXR0ZXJFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHNwbGl0dGVyRWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2JlZm9yZWJlZ2luJywgY29udGVudEl0ZW0uZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZEVsZW1lbnRDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGVudEl0ZW0uZWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdXBlci5hZGRDaGlsZChjb250ZW50SXRlbSwgaW5kZXgpO1xyXG5cclxuICAgICAgICBjb25zdCBuZXdJdGVtU2l6ZSA9ICgxIC8gdGhpcy5jb250ZW50SXRlbXMubGVuZ3RoKSAqIDEwMDtcclxuXHJcbiAgICAgICAgaWYgKHN1c3BlbmRSZXNpemUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0QmFzZUJ1YmJsaW5nRXZlbnQoJ3N0YXRlQ2hhbmdlZCcpO1xyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ZWRDb250ZW50SXRlbSA9IHRoaXMuY29udGVudEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXhlZENvbnRlbnRJdGVtID09PSBjb250ZW50SXRlbSkge1xyXG4gICAgICAgICAgICAgICAgY29udGVudEl0ZW0uc2l6ZSA9IG5ld0l0ZW1TaXplO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbVNpemUgPSBpbmRleGVkQ29udGVudEl0ZW0uc2l6ZSAqPSAoMTAwIC0gbmV3SXRlbVNpemUpIC8gMTAwO1xyXG4gICAgICAgICAgICAgICAgaW5kZXhlZENvbnRlbnRJdGVtLnNpemUgPSBpdGVtU2l6ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTaXplKCk7XHJcbiAgICAgICAgdGhpcy5lbWl0QmFzZUJ1YmJsaW5nRXZlbnQoJ3N0YXRlQ2hhbmdlZCcpO1xyXG5cclxuICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGEgY2hpbGQgb2YgdGhpcyBlbGVtZW50XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbnRlbnRJdGVtIC1cclxuICAgICAqIEBwYXJhbSBrZWVwQ2hpbGQgLSBJZiB0cnVlIHRoZSBjaGlsZCB3aWxsIGJlIHJlbW92ZWQsIGJ1dCBub3QgZGVzdHJveWVkXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBvdmVycmlkZSByZW1vdmVDaGlsZChjb250ZW50SXRlbTogQ29udGVudEl0ZW0sIGtlZXBDaGlsZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jb250ZW50SXRlbXMuaW5kZXhPZihjb250ZW50SXRlbSk7XHJcbiAgICAgICAgY29uc3Qgc3BsaXR0ZXJJbmRleCA9IE1hdGgubWF4KGluZGV4IC0gMSwgMCk7XHJcblxyXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5cXCd0IHJlbW92ZSBjaGlsZC4gQ29udGVudEl0ZW0gaXMgbm90IGNoaWxkIG9mIHRoaXMgUm93IG9yIENvbHVtbicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVtb3ZlIHRoZSBzcGxpdHRlciBiZWZvcmUgdGhlIGl0ZW0gb3IgYWZ0ZXIgaWYgdGhlIGl0ZW0gaGFwcGVuc1xyXG4gICAgICAgICAqIHRvIGJlIHRoZSBmaXJzdCBpbiB0aGUgcm93L2NvbHVtblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IHNwbGl0dGVyID0gdGhpcy5fc3BsaXR0ZXJbc3BsaXR0ZXJJbmRleF07XHJcbiAgICAgICAgaWYgKHNwbGl0dGVyKSB7XHJcbiAgICAgICAgICAgIHNwbGl0dGVyLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLmRlZmVySWZEcmFnZ2luZygoY2FuY2VsOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3BsaXR0ZXIuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNwbGl0dGVyLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zcGxpdHRlci5zcGxpY2Uoc3BsaXR0ZXJJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3VwZXIucmVtb3ZlQ2hpbGQoY29udGVudEl0ZW0sIGtlZXBDaGlsZCk7XHJcblxyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5kZWZlcklmRHJhZ2dpbmcoKGNhbmNlbDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoISBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICAmJiB0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGggPT09IDEgJiYgdGhpcy5pc0Nsb3NhYmxlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZEl0ZW0gPSB0aGlzLmNvbnRlbnRJdGVtc1swXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yb3dPckNvbHVtblBhcmVudC5yZXBsYWNlQ2hpbGQodGhpcywgY2hpbGRJdGVtLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0QmFzZUJ1YmJsaW5nRXZlbnQoJ3N0YXRlQ2hhbmdlZCcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0aGlzLmxheW91dE1hbmFnZXIuY3VycmVudGx5RHJhZ2dpbmcoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICAgICAgLy90aGlzLmVtaXRCYXNlQnViYmxpbmdFdmVudCgnc3RhdGVDaGFuZ2VkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVwbGFjZXMgYSBjaGlsZCBvZiB0aGlzIFJvdyBvciBDb2x1bW4gd2l0aCBhbm90aGVyIGNvbnRlbnRJdGVtXHJcbiAgICAgKi9cclxuICAgIG92ZXJyaWRlIHJlcGxhY2VDaGlsZChvbGRDaGlsZDogQ29udGVudEl0ZW0sIG5ld0NoaWxkOiBDb250ZW50SXRlbSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNpemUgPSBvbGRDaGlsZC5zaXplO1xyXG4gICAgICAgIHN1cGVyLnJlcGxhY2VDaGlsZChvbGRDaGlsZCwgbmV3Q2hpbGQpO1xyXG4gICAgICAgIG5ld0NoaWxkLnNpemUgPSBzaXplO1xyXG4gICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xyXG4gICAgICAgIHRoaXMuZW1pdEJhc2VCdWJibGluZ0V2ZW50KCdzdGF0ZUNoYW5nZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEludm9rZWQgcmVjdXJzaXZlbHkgYnkgdGhlIGxheW91dCBtYW5hZ2VyLiBDb250ZW50SXRlbS5pbml0IGFwcGVuZHNcclxuICAgICAqIHRoZSBjb250ZW50SXRlbSdzIERPTSBlbGVtZW50cyB0byB0aGUgY29udGFpbmVyLCBSb3dPckNvbHVtbiBpbml0IGFkZHMgc3BsaXR0ZXJzXHJcbiAgICAgKiBpbiBiZXR3ZWVuIHRoZW1cclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBvdmVycmlkZSBpbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGlzZWQgPT09IHRydWUpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVOb2RlU2l6ZSgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkRWxlbWVudENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRJdGVtc1tpXS5lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN1cGVyLmluaXQoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZW50SXRlbXNbaV0uZWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgdGhpcy5jcmVhdGVTcGxpdHRlcihpKS5lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaW5pdENvbnRlbnRJdGVtcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvQ29uZmlnKCk6IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnIHtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUgYXMgJ3JvdycgfCAnY29sdW1uJyxcclxuICAgICAgICAgICAgY29udGVudDogdGhpcy5jYWxjdWxhdGVDb25maWdDb250ZW50KCkgYXMgKFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnIHwgUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcpW10sXHJcbiAgICAgICAgICAgIHNpemU6IHRoaXMuc2l6ZSxcclxuICAgICAgICAgICAgc2l6ZVVuaXQ6IHRoaXMuc2l6ZVVuaXQsXHJcbiAgICAgICAgICAgIG1pblNpemU6IHRoaXMubWluU2l6ZSxcclxuICAgICAgICAgICAgbWluU2l6ZVVuaXQ6IHRoaXMubWluU2l6ZVVuaXQsXHJcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxyXG4gICAgICAgICAgICBpc0Nsb3NhYmxlOiB0aGlzLmlzQ2xvc2FibGUsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIHNldFBhcmVudChwYXJlbnQ6IENvbnRlbnRJdGVtKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fcm93T3JDb2x1bW5QYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgc3VwZXIuc2V0UGFyZW50KHBhcmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgdXBkYXRlTm9kZVNpemUoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVSZWxhdGl2ZVNpemVzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0QWJzb2x1dGVTaXplcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVtaXRCYXNlQnViYmxpbmdFdmVudCgnc3RhdGVDaGFuZ2VkJyk7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdyZXNpemUnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFR1cm5zIHRoZSByZWxhdGl2ZSBzaXplcyBjYWxjdWxhdGVkIGJ5IGNhbGN1bGF0ZVJlbGF0aXZlU2l6ZXMgaW50b1xyXG4gICAgICogYWJzb2x1dGUgcGl4ZWwgdmFsdWVzIGFuZCBhcHBsaWVzIHRoZW0gdG8gdGhlIGNoaWxkcmVuJ3MgRE9NIGVsZW1lbnRzXHJcbiAgICAgKlxyXG4gICAgICogQXNzaWducyBhZGRpdGlvbmFsIHBpeGVscyB0byBjb3VudGVyYWN0IE1hdGguZmxvb3JcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHNldEFic29sdXRlU2l6ZXMoKSB7XHJcbiAgICAgICAgY29uc3QgYWJzb2x1dGVTaXplcyA9IHRoaXMuY2FsY3VsYXRlQWJzb2x1dGVTaXplcygpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmNvbnRlbnRJdGVtc1tpXTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uaWdub3JpbmcpXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKGFic29sdXRlU2l6ZXMuYWRkaXRpb25hbFBpeGVsIC0gaSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGFic29sdXRlU2l6ZXMuaXRlbVNpemVzW2ldKys7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0NvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgc2V0RWxlbWVudFdpZHRoKGl0ZW0uZWxlbWVudCwgYWJzb2x1dGVTaXplcy5jcm9zc0F4aXNTaXplKTtcclxuICAgICAgICAgICAgICAgIHNldEVsZW1lbnRIZWlnaHQoaXRlbS5lbGVtZW50LCBhYnNvbHV0ZVNpemVzLml0ZW1TaXplc1tpXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZXRFbGVtZW50V2lkdGgoaXRlbS5lbGVtZW50LCBhYnNvbHV0ZVNpemVzLml0ZW1TaXplc1tpXSk7XHJcbiAgICAgICAgICAgICAgICBzZXRFbGVtZW50SGVpZ2h0KGl0ZW0uZWxlbWVudCwgYWJzb2x1dGVTaXplcy5jcm9zc0F4aXNTaXplKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGFic29sdXRlIHNpemVzIG9mIGFsbCBvZiB0aGUgY2hpbGRyZW4gb2YgdGhpcyBJdGVtLlxyXG4gICAgICogQHJldHVybnMgU2V0IHdpdGggYWJzb2x1dGUgc2l6ZXMgYW5kIGFkZGl0aW9uYWwgcGl4ZWxzLlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2FsY3VsYXRlQWJzb2x1dGVTaXplcygpIHtcclxuICAgICAgICBjb25zdCB0b3RhbFNwbGl0dGVyU2l6ZSA9XHJcbiAgICAgICAgICAgICh0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGggLSAodGhpcy5pZ25vcmluZ0NoaWxkID8gMiA6IDEpKVxyXG4gICAgICAgICAgICAqIHRoaXMuX3NwbGl0dGVyU2l6ZTtcclxuICAgICAgICBjb25zdCB7IHdpZHRoOiBlbGVtZW50V2lkdGgsIGhlaWdodDogZWxlbWVudEhlaWdodCB9ID0gZ2V0RWxlbWVudFdpZHRoQW5kSGVpZ2h0KHRoaXMuZWxlbWVudCk7XHJcblxyXG4gICAgICAgIGxldCB0b3RhbFNpemU6IG51bWJlcjtcclxuICAgICAgICBsZXQgY3Jvc3NBeGlzU2l6ZTogbnVtYmVyO1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0NvbHVtbikge1xyXG4gICAgICAgICAgICB0b3RhbFNpemUgPSBlbGVtZW50SGVpZ2h0IC0gdG90YWxTcGxpdHRlclNpemU7XHJcbiAgICAgICAgICAgIGNyb3NzQXhpc1NpemUgPSBlbGVtZW50V2lkdGg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdG90YWxTaXplID0gZWxlbWVudFdpZHRoIC0gdG90YWxTcGxpdHRlclNpemU7XHJcbiAgICAgICAgICAgIGNyb3NzQXhpc1NpemUgPSBlbGVtZW50SGVpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHRvdGFsQXNzaWduZWQgPSAwO1xyXG4gICAgICAgIGNvbnN0IGl0ZW1TaXplcyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGNvbnRlbnRJdGVtIG9mIHRoaXMuY29udGVudEl0ZW1zKSB7XHJcbiAgICAgICAgICAgIGxldCBpdGVtU2l6ZTogbnVtYmVyO1xyXG4gICAgICAgICAgICBpZiAoY29udGVudEl0ZW0uaWdub3JpbmcpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW1TaXplID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250ZW50SXRlbS5zaXplVW5pdCA9PT0gU2l6ZVVuaXRFbnVtLlBlcmNlbnQpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW1TaXplID0gTWF0aC5mbG9vcih0b3RhbFNpemUgKiAoY29udGVudEl0ZW0uc2l6ZSAvIDEwMCkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdST0NDQVM2NjkyJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRvdGFsQXNzaWduZWQgKz0gaXRlbVNpemU7XHJcbiAgICAgICAgICAgIGl0ZW1TaXplcy5wdXNoKGl0ZW1TaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGFkZGl0aW9uYWxQaXhlbCA9IE1hdGguZmxvb3IodG90YWxTaXplIC0gdG90YWxBc3NpZ25lZCk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGl0ZW1TaXplcyxcclxuICAgICAgICAgICAgYWRkaXRpb25hbFBpeGVsLFxyXG4gICAgICAgICAgICB0b3RhbFNpemUsXHJcbiAgICAgICAgICAgIGNyb3NzQXhpc1NpemUsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIHJlbGF0aXZlIHNpemVzIG9mIGFsbCBjaGlsZHJlbiBvZiB0aGlzIEl0ZW0uIFRoZSBsb2dpY1xyXG4gICAgICogaXMgYXMgZm9sbG93czpcclxuICAgICAqXHJcbiAgICAgKiAtIEFkZCB1cCB0aGUgdG90YWwgc2l6ZSBvZiBhbGwgaXRlbXMgdGhhdCBoYXZlIGEgY29uZmlndXJlZCBzaXplXHJcbiAgICAgKlxyXG4gICAgICogLSBJZiB0aGUgdG90YWwgPT0gMTAwIChjaGVjayBmb3IgZmxvYXRpbmcgcG9pbnQgZXJyb3JzKVxyXG4gICAgICogICAgICAgIEV4Y2VsbGVudCwgam9iIGRvbmVcclxuICAgICAqXHJcbiAgICAgKiAtIElmIHRoZSB0b3RhbCBpcyBcXD4gMTAwLFxyXG4gICAgICogICAgICAgIHNldCB0aGUgc2l6ZSBvZiBpdGVtcyB3aXRob3V0IHNldCBkaW1lbnNpb25zIHRvIDEvMyBhbmQgYWRkIHRoaXMgdG8gdGhlIHRvdGFsXHJcbiAgICAgKiAgICAgICAgc2V0IHRoZSBzaXplIG9mZiBhbGwgaXRlbXMgc28gdGhhdCB0aGUgdG90YWwgaXMgaHVuZHJlZCByZWxhdGl2ZSB0byB0aGVpciBvcmlnaW5hbCBzaXplXHJcbiAgICAgKlxyXG4gICAgICogLSBJZiB0aGUgdG90YWwgaXMgXFw8IDEwMFxyXG4gICAgICogICAgICAgIElmIHRoZXJlIGFyZSBpdGVtcyB3aXRob3V0IHNldCBkaW1lbnNpb25zLCBkaXN0cmlidXRlIHRoZSByZW1haW5kZXIgdG8gMTAwIGV2ZW5seSBiZXR3ZWVuIHRoZW1cclxuICAgICAqICAgICAgICBJZiB0aGVyZSBhcmUgbm8gaXRlbXMgd2l0aG91dCBzZXQgZGltZW5zaW9ucywgaW5jcmVhc2UgYWxsIGl0ZW1zIHNpemVzIHJlbGF0aXZlIHRvXHJcbiAgICAgKiAgICAgICAgdGhlaXIgb3JpZ2luYWwgc2l6ZSBzbyB0aGF0IHRoZXkgYWRkIHVwIHRvIDEwMFxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNhbGN1bGF0ZVJlbGF0aXZlU2l6ZXMoKSB7XHJcblxyXG4gICAgICAgIGxldCB0b3RhbCA9IDA7XHJcbiAgICAgICAgY29uc3QgaXRlbXNXaXRoRnJhY3Rpb25hbFNpemU6IENvbnRlbnRJdGVtW10gPSBbXTtcclxuICAgICAgICBsZXQgdG90YWxGcmFjdGlvbmFsU2l6ZSA9IDA7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb250ZW50SXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudEl0ZW1zW2ldLmlnbm9yaW5nKVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtID0gdGhpcy5jb250ZW50SXRlbXNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IHNpemVVbml0ID0gY29udGVudEl0ZW0uc2l6ZVVuaXQ7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoc2l6ZVVuaXQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgU2l6ZVVuaXRFbnVtLlBlcmNlbnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbCArPSBjb250ZW50SXRlbS5zaXplO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBTaXplVW5pdEVudW0uRnJhY3Rpb25hbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zV2l0aEZyYWN0aW9uYWxTaXplLnB1c2goY29udGVudEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsRnJhY3Rpb25hbFNpemUgKz0gY29udGVudEl0ZW0uc2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdST0NDUlM0OTExMCcsIEpTT04uc3RyaW5naWZ5KGNvbnRlbnRJdGVtKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEV2ZXJ5dGhpbmcgYWRkcyB1cCB0byBodW5kcmVkLCBhbGwgZ29vZCA6LSlcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoTWF0aC5yb3VuZCh0b3RhbCkgPT09IDEwMCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc3BlY3RNaW5JdGVtU2l6ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEFsbG9jYXRlIHRoZSByZW1haW5pbmcgc2l6ZSB0byB0aGUgaXRlbXMgd2l0aCBhIGZyYWN0aW9uYWwgc2l6ZVxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYgKE1hdGgucm91bmQodG90YWwpIDwgMTAwICYmIGl0ZW1zV2l0aEZyYWN0aW9uYWxTaXplLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZyYWN0aW9uYWxBbGxvY2F0ZWRTaXplID0gMTAwIC0gdG90YWw7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zV2l0aEZyYWN0aW9uYWxTaXplLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSBpdGVtc1dpdGhGcmFjdGlvbmFsU2l6ZVtpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50SXRlbS5zaXplID0gZnJhY3Rpb25hbEFsbG9jYXRlZFNpemUgKiAoY29udGVudEl0ZW0uc2l6ZSAvIHRvdGFsRnJhY3Rpb25hbFNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRJdGVtLnNpemVVbml0ID0gU2l6ZVVuaXRFbnVtLlBlcmNlbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3BlY3RNaW5JdGVtU2l6ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogSWYgdGhlIHRvdGFsIGlzID4gMTAwLCBidXQgdGhlcmUgYXJlIGFsc28gaXRlbXMgd2l0aCBhIGZyYWN0aW9uYWwgc2l6ZSwgYXNzaWduIGFub3RoZXIgNTAlXHJcbiAgICAgICAgICAgICAgICAgKiB0byB0aGUgZnJhY3Rpb25hbCBpdGVtc1xyXG4gICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICAgICAqIFRoaXMgd2lsbCBiZSByZXNldCBpbiB0aGUgbmV4dCBzdGVwXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGlmIChNYXRoLnJvdW5kKHRvdGFsKSA+IDEwMCAmJiBpdGVtc1dpdGhGcmFjdGlvbmFsU2l6ZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtc1dpdGhGcmFjdGlvbmFsU2l6ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50SXRlbSA9IGl0ZW1zV2l0aEZyYWN0aW9uYWxTaXplW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50SXRlbS5zaXplID0gNTAgKiAoY29udGVudEl0ZW0uc2l6ZSAvIHRvdGFsRnJhY3Rpb25hbFNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50SXRlbS5zaXplVW5pdCA9IFNpemVVbml0RW51bS5QZXJjZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0b3RhbCArPSA1MDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIFNldCBldmVyeSBpdGVtcyBzaXplIHJlbGF0aXZlIHRvIDEwMCByZWxhdGl2ZSB0byBpdHMgc2l6ZSB0byB0b3RhbFxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSB0aGlzLmNvbnRlbnRJdGVtc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50SXRlbS5zaXplID0gKGNvbnRlbnRJdGVtLnNpemUgLyB0b3RhbCkgKiAxMDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNwZWN0TWluSXRlbVNpemUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkanVzdHMgdGhlIGNvbHVtbiB3aWR0aHMgdG8gcmVzcGVjdCB0aGUgZGltZW5zaW9ucyBtaW5JdGVtV2lkdGggaWYgc2V0LlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVzcGVjdE1pbkl0ZW1TaXplKCkge1xyXG4gICAgICAgIGludGVyZmFjZSBFbnRyeSB7XHJcbiAgICAgICAgICAgIHNpemU6IG51bWJlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG1pbkl0ZW1TaXplID0gdGhpcy5jYWxjdWxhdGVDb250ZW50SXRlbU1pblNpemUodGhpcyk7XHJcblxyXG4gICAgICAgIGlmIChtaW5JdGVtU2l6ZSA8PSAwIHx8IHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCA8PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgdG90YWxPdmVyTWluID0gMDtcclxuICAgICAgICAgICAgbGV0IHRvdGFsVW5kZXJNaW4gPSAwO1xyXG4gICAgICAgICAgICBjb25zdCBlbnRyaWVzT3Zlck1pbjogRW50cnlbXSA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBhbGxFbnRyaWVzOiBFbnRyeVtdID0gW107XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhYnNvbHV0ZVNpemVzID0gdGhpcy5jYWxjdWxhdGVBYnNvbHV0ZVNpemVzKCk7XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogRmlndXJlIG91dCBob3cgbXVjaCB3ZSBhcmUgdW5kZXIgdGhlIG1pbiBpdGVtIHNpemUgdG90YWwgYW5kIGhvdyBtdWNoIHJvb20gd2UgaGF2ZSB0byB1c2UuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFic29sdXRlU2l6ZXMuaXRlbVNpemVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtU2l6ZSA9IGFic29sdXRlU2l6ZXMuaXRlbVNpemVzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBlbnRyeTogRW50cnk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbVNpemUgPCBtaW5JdGVtU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsVW5kZXJNaW4gKz0gbWluSXRlbVNpemUgLSBpdGVtU2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogbWluSXRlbVNpemVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG90YWxPdmVyTWluICs9IGl0ZW1TaXplIC0gbWluSXRlbVNpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgZW50cnkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IGl0ZW1TaXplXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyaWVzT3Zlck1pbi5wdXNoKGVudHJ5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBhbGxFbnRyaWVzLnB1c2goZW50cnkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogSWYgdGhlcmUgaXMgbm90aGluZyB1bmRlciBtaW4sIG9yIHRoZXJlIGlzIG5vdCBlbm91Z2ggb3ZlciB0byBtYWtlIHVwIHRoZSBkaWZmZXJlbmNlLCBkbyBub3RoaW5nLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYgKHRvdGFsVW5kZXJNaW4gPT09IDAgfHwgdG90YWxVbmRlck1pbiA+IHRvdGFsT3Zlck1pbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBFdmVubHkgcmVkdWNlIGFsbCBjb2x1bW5zIHRoYXQgYXJlIG92ZXIgdGhlIG1pbiBpdGVtIHdpZHRoIHRvIG1ha2UgdXAgdGhlIGRpZmZlcmVuY2UuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZHVjZVBlcmNlbnQgPSB0b3RhbFVuZGVyTWluIC8gdG90YWxPdmVyTWluO1xyXG4gICAgICAgICAgICAgICAgbGV0IHJlbWFpbmluZ1NpemUgPSB0b3RhbFVuZGVyTWluO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbnRyaWVzT3Zlck1pbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gZW50cmllc092ZXJNaW5baV07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVkdWNlZFNpemUgPSBNYXRoLnJvdW5kKChlbnRyeS5zaXplIC0gbWluSXRlbVNpemUpICogcmVkdWNlUGVyY2VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nU2l6ZSAtPSByZWR1Y2VkU2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5zaXplIC09IHJlZHVjZWRTaXplO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogVGFrZSBhbnl0aGluZyByZW1haW5pbmcgZnJvbSB0aGUgbGFzdCBpdGVtLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICBpZiAocmVtYWluaW5nU2l6ZSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbEVudHJpZXNbYWxsRW50cmllcy5sZW5ndGggLSAxXS5zaXplIC09IHJlbWFpbmluZ1NpemU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBTZXQgZXZlcnkgaXRlbXMgc2l6ZSByZWxhdGl2ZSB0byAxMDAgcmVsYXRpdmUgdG8gaXRzIHNpemUgdG8gdG90YWxcclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtID0gdGhpcy5jb250ZW50SXRlbXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudEl0ZW0uc2l6ZSA9IChhbGxFbnRyaWVzW2ldLnNpemUgLyBhYnNvbHV0ZVNpemVzLnRvdGFsU2l6ZSkgKiAxMDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnN0YW50aWF0ZXMgYSBuZXcgU3BsaXR0ZXIsIGJpbmRzIGV2ZW50cyB0byBpdCBhbmQgYWRkc1xyXG4gICAgICogaXQgdG8gdGhlIGFycmF5IG9mIHNwbGl0dGVycyBhdCB0aGUgcG9zaXRpb24gc3BlY2lmaWVkIGFzIHRoZSBpbmRleCBhcmd1bWVudFxyXG4gICAgICpcclxuICAgICAqIFdoYXQgaXQgZG9lc24ndCBkbyB0aG91Z2ggaXMgYXBwZW5kIHRoZSBzcGxpdHRlciB0byB0aGUgRE9NXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGluZGV4IC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBzcGxpdHRlclxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVTcGxpdHRlcihpbmRleDogbnVtYmVyKTogU3BsaXR0ZXIge1xyXG4gICAgICAgIGNvbnN0IHNwbGl0dGVyID0gbmV3IFNwbGl0dGVyKHRoaXMuX2lzQ29sdW1uLCB0aGlzLl9zcGxpdHRlclNpemUsIHRoaXMuX3NwbGl0dGVyR3JhYlNpemUpO1xyXG4gICAgICAgIHNwbGl0dGVyLm9uKCdkcmFnJywgKG9mZnNldFgsIG9mZnNldFkpID0+IHRoaXMub25TcGxpdHRlckRyYWcoc3BsaXR0ZXIsIG9mZnNldFgsIG9mZnNldFkpKTtcclxuICAgICAgICBzcGxpdHRlci5vbignZHJhZ1N0b3AnLCAoKSA9PiB0aGlzLm9uU3BsaXR0ZXJEcmFnU3RvcChzcGxpdHRlcikpO1xyXG4gICAgICAgIHNwbGl0dGVyLm9uKCdkcmFnU3RhcnQnLCAoKSA9PiB0aGlzLm9uU3BsaXR0ZXJEcmFnU3RhcnQoc3BsaXR0ZXIpKTtcclxuICAgICAgICB0aGlzLl9zcGxpdHRlci5zcGxpY2UoaW5kZXgsIDAsIHNwbGl0dGVyKTtcclxuICAgICAgICByZXR1cm4gc3BsaXR0ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb2NhdGVzIHRoZSBpbnN0YW5jZSBvZiBTcGxpdHRlciBpbiB0aGUgYXJyYXkgb2ZcclxuICAgICAqIHJlZ2lzdGVyZWQgc3BsaXR0ZXJzIGFuZCByZXR1cm5zIGEgbWFwIGNvbnRhaW5pbmcgdGhlIGNvbnRlbnRJdGVtXHJcbiAgICAgKiBiZWZvcmUgYW5kIGFmdGVyIHRoZSBzcGxpdHRlcnMsIGJvdGggb2Ygd2hpY2ggYXJlIGFmZmVjdGVkIGlmIHRoZVxyXG4gICAgICogc3BsaXR0ZXIgaXMgbW92ZWRcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyBBIG1hcCBvZiBjb250ZW50SXRlbXMgdGhhdCB0aGUgc3BsaXR0ZXIgYWZmZWN0c1xyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0U3BsaXRJdGVtcyhzcGxpdHRlcjogU3BsaXR0ZXIpIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX3NwbGl0dGVyLmluZGV4T2Yoc3BsaXR0ZXIpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiZWZvcmU6IHRoaXMuY29udGVudEl0ZW1zW2luZGV4XSxcclxuICAgICAgICAgICAgYWZ0ZXI6IHRoaXMuY29udGVudEl0ZW1zW2luZGV4ICsgMV1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2FsY3VsYXRlQ29udGVudEl0ZW1NaW5TaXplKGNvbnRlbnRJdGVtOiBDb250ZW50SXRlbSkge1xyXG4gICAgICAgIGNvbnN0IG1pblNpemUgPSBjb250ZW50SXRlbS5taW5TaXplO1xyXG4gICAgICAgIGlmIChtaW5TaXplICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRlbnRJdGVtLm1pblNpemVVbml0ID09PSBTaXplVW5pdEVudW0uUGl4ZWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtaW5TaXplO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdST0NHTUQ5ODgzMScsIEpTT04uc3RyaW5naWZ5KGNvbnRlbnRJdGVtKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBkaW1lbnNpb25zID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmxheW91dENvbmZpZy5kaW1lbnNpb25zO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNDb2x1bW4gPyBkaW1lbnNpb25zLmRlZmF1bHRNaW5JdGVtSGVpZ2h0IDogZGltZW5zaW9ucy5kZWZhdWx0TWluSXRlbVdpZHRoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIG1pbmltdW0gZGltZW5zaW9ucyBmb3IgdGhlIGdpdmVuIGl0ZW0gY29uZmlndXJhdGlvbiBhcnJheVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2FsY3VsYXRlQ29udGVudEl0ZW1zVG90YWxNaW5TaXplKGNvbnRlbnRJdGVtczogcmVhZG9ubHkgQ29udGVudEl0ZW1bXSkge1xyXG4gICAgICAgIGxldCB0b3RhbE1pblNpemUgPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGNvbnRlbnRJdGVtIG9mIGNvbnRlbnRJdGVtcykge1xyXG4gICAgICAgICAgICB0b3RhbE1pblNpemUgKz0gdGhpcy5jYWxjdWxhdGVDb250ZW50SXRlbU1pblNpemUoY29udGVudEl0ZW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRvdGFsTWluU2l6ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEludm9rZWQgd2hlbiBhIHNwbGl0dGVyJ3MgZHJhZ0xpc3RlbmVyIGZpcmVzIGRyYWdTdGFydC4gQ2FsY3VsYXRlcyB0aGUgc3BsaXR0ZXJzXHJcbiAgICAgKiBtb3ZlbWVudCBhcmVhIG9uY2UgKHNvIHRoYXQgaXQgZG9lc24ndCBuZWVkIGNhbGN1bGF0aW5nIG9uIGV2ZXJ5IG1vdXNlbW92ZSBldmVudClcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uU3BsaXR0ZXJEcmFnU3RhcnQoc3BsaXR0ZXI6IFNwbGl0dGVyKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLmdldFNwbGl0SXRlbXMoc3BsaXR0ZXIpO1xyXG5cclxuICAgICAgICBjb25zdCBiZWZvcmVXaWR0aCA9IHBpeGVsc1RvTnVtYmVyKGl0ZW1zLmJlZm9yZS5lbGVtZW50LnN0eWxlW3RoaXMuX2RpbWVuc2lvbl0pO1xyXG4gICAgICAgIGNvbnN0IGFmdGVyU2l6ZSA9IHBpeGVsc1RvTnVtYmVyKGl0ZW1zLmFmdGVyLmVsZW1lbnQuc3R5bGVbdGhpcy5fZGltZW5zaW9uXSk7XHJcbiAgICAgICAgY29uc3QgYmVmb3JlTWluU2l6ZSA9IHRoaXMuY2FsY3VsYXRlQ29udGVudEl0ZW1zVG90YWxNaW5TaXplKGl0ZW1zLmJlZm9yZS5jb250ZW50SXRlbXMpO1xyXG4gICAgICAgIGNvbnN0IGFmdGVyTWluU2l6ZSA9IHRoaXMuY2FsY3VsYXRlQ29udGVudEl0ZW1zVG90YWxNaW5TaXplKGl0ZW1zLmFmdGVyLmNvbnRlbnRJdGVtcyk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NwbGl0dGVyUG9zaXRpb24gPSAwO1xyXG4gICAgICAgIHRoaXMuX3NwbGl0dGVyTWluUG9zaXRpb24gPSAtMSAqIChiZWZvcmVXaWR0aCAtIGJlZm9yZU1pblNpemUpO1xyXG4gICAgICAgIHRoaXMuX3NwbGl0dGVyTWF4UG9zaXRpb24gPSBhZnRlclNpemUgLSBhZnRlck1pblNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VkIHdoZW4gYSBzcGxpdHRlcidzIERyYWdMaXN0ZW5lciBmaXJlcyBkcmFnLiBVcGRhdGVzIHRoZSBzcGxpdHRlcidzIERPTSBwb3NpdGlvbixcclxuICAgICAqIGJ1dCBub3QgdGhlIHNpemVzIG9mIHRoZSBlbGVtZW50cyB0aGUgc3BsaXR0ZXIgY29udHJvbHMgaW4gb3JkZXIgdG8gbWluaW1pemUgcmVzaXplIGV2ZW50c1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzcGxpdHRlciAtXHJcbiAgICAgKiBAcGFyYW0gb2Zmc2V0WCAtIFJlbGF0aXZlIHBpeGVsIHZhbHVlcyB0byB0aGUgc3BsaXR0ZXIncyBvcmlnaW5hbCBwb3NpdGlvbi4gQ2FuIGJlIG5lZ2F0aXZlXHJcbiAgICAgKiBAcGFyYW0gb2Zmc2V0WSAtIFJlbGF0aXZlIHBpeGVsIHZhbHVlcyB0byB0aGUgc3BsaXR0ZXIncyBvcmlnaW5hbCBwb3NpdGlvbi4gQ2FuIGJlIG5lZ2F0aXZlXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvblNwbGl0dGVyRHJhZyhzcGxpdHRlcjogU3BsaXR0ZXIsIG9mZnNldFg6IG51bWJlciwgb2Zmc2V0WTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IG9mZnNldCA9IHRoaXMuX2lzQ29sdW1uID8gb2Zmc2V0WSA6IG9mZnNldFg7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9zcGxpdHRlck1pblBvc2l0aW9uID09PSBudWxsIHx8IHRoaXMuX3NwbGl0dGVyTWF4UG9zaXRpb24gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ1JPQ09TRDU5MjI2Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9mZnNldCA9IE1hdGgubWF4KG9mZnNldCwgdGhpcy5fc3BsaXR0ZXJNaW5Qb3NpdGlvbik7XHJcbiAgICAgICAgb2Zmc2V0ID0gTWF0aC5taW4ob2Zmc2V0LCB0aGlzLl9zcGxpdHRlck1heFBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5fc3BsaXR0ZXJQb3NpdGlvbiA9IG9mZnNldDtcclxuICAgICAgICBjb25zdCBvZmZzZXRQaXhlbHMgPSBudW1iZXJUb1BpeGVscyhvZmZzZXQgLSBzcGxpdHRlci5kcmFnSGFuZGxlT2Zmc2V0KTtcclxuICAgICAgICBpZiAodGhpcy5faXNDb2x1bW4pIHtcclxuICAgICAgICAgICAgc3BsaXR0ZXIuZHJhZ0hhbmRsZUVsZW1lbnQuc3R5bGUudG9wID0gb2Zmc2V0UGl4ZWxzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNwbGl0dGVyLmRyYWdIYW5kbGVFbGVtZW50LnN0eWxlLmxlZnQgPSBvZmZzZXRQaXhlbHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW52b2tlZCB3aGVuIGEgc3BsaXR0ZXIncyBEcmFnTGlzdGVuZXIgZmlyZXMgZHJhZ1N0b3AuIFJlc2V0cyB0aGUgc3BsaXR0ZXJzIERPTSBwb3NpdGlvbixcclxuICAgICAqIGFuZCBhcHBsaWVzIHRoZSBuZXcgc2l6ZXMgdG8gdGhlIGVsZW1lbnRzIGJlZm9yZSBhbmQgYWZ0ZXIgdGhlIHNwbGl0dGVyIGFuZCB0aGVpciBjaGlsZHJlblxyXG4gICAgICogb24gdGhlIG5leHQgYW5pbWF0aW9uIGZyYW1lXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBvblNwbGl0dGVyRHJhZ1N0b3Aoc3BsaXR0ZXI6IFNwbGl0dGVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NwbGl0dGVyUG9zaXRpb24gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ1JPQ09TRFM2NjkzMicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5nZXRTcGxpdEl0ZW1zKHNwbGl0dGVyKTtcclxuICAgICAgICAgICAgY29uc3Qgc2l6ZUJlZm9yZSA9IHBpeGVsc1RvTnVtYmVyKGl0ZW1zLmJlZm9yZS5lbGVtZW50LnN0eWxlW3RoaXMuX2RpbWVuc2lvbl0pO1xyXG4gICAgICAgICAgICBjb25zdCBzaXplQWZ0ZXIgPSBwaXhlbHNUb051bWJlcihpdGVtcy5hZnRlci5lbGVtZW50LnN0eWxlW3RoaXMuX2RpbWVuc2lvbl0pO1xyXG4gICAgICAgICAgICBjb25zdCBzcGxpdHRlclBvc2l0aW9uSW5SYW5nZSA9ICh0aGlzLl9zcGxpdHRlclBvc2l0aW9uICsgc2l6ZUJlZm9yZSkgLyAoc2l6ZUJlZm9yZSArIHNpemVBZnRlcik7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsUmVsYXRpdmVTaXplID0gaXRlbXMuYmVmb3JlLnNpemUgKyBpdGVtcy5hZnRlci5zaXplO1xyXG5cclxuICAgICAgICAgICAgaXRlbXMuYmVmb3JlLnNpemUgPSBzcGxpdHRlclBvc2l0aW9uSW5SYW5nZSAqIHRvdGFsUmVsYXRpdmVTaXplO1xyXG4gICAgICAgICAgICBpdGVtcy5hZnRlci5zaXplID0gKDEgLSBzcGxpdHRlclBvc2l0aW9uSW5SYW5nZSkgKiB0b3RhbFJlbGF0aXZlU2l6ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHNwbGl0dGVyLmRyYWdIYW5kbGVPZmZzZXQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0NvbHVtbilcclxuICAgICAgICAgICAgICAgIHNwbGl0dGVyLmRyYWdIYW5kbGVFbGVtZW50LnN0eWxlLnRvcCA9IGAkey1vZmZzZXR9cHhgO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBzcGxpdHRlci5kcmFnSGFuZGxlRWxlbWVudC5zdHlsZS5sZWZ0ID0gYCR7LW9mZnNldH1weGA7XHJcblxyXG4gICAgICAgICAgICBnbG9iYWxUaGlzLnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnVwZGF0ZVNpemUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFJvd09yQ29sdW1uIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQWJzb2x1dGVTaXplcyB7XHJcbiAgICAgICAgaXRlbVNpemVzOiBudW1iZXJbXSxcclxuICAgICAgICBhZGRpdGlvbmFsUGl4ZWw6IG51bWJlcixcclxuICAgICAgICB0b3RhbFNpemU6IG51bWJlcixcclxuICAgICAgICBjcm9zc0F4aXNTaXplOiBudW1iZXJcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudERpbWVuc2lvblNpemUoZWxlbWVudDogSFRNTEVsZW1lbnQsIGRpbWVuc2lvbjogV2lkdGhPckhlaWdodFByb3BlcnR5TmFtZSk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKGRpbWVuc2lvbiA9PT0gJ3dpZHRoJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0RWxlbWVudFdpZHRoKGVsZW1lbnQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRFbGVtZW50SGVpZ2h0KGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gc2V0RWxlbWVudERpbWVuc2lvblNpemUoZWxlbWVudDogSFRNTEVsZW1lbnQsIGRpbWVuc2lvbjogV2lkdGhPckhlaWdodFByb3BlcnR5TmFtZSwgdmFsdWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGlmIChkaW1lbnNpb24gPT09ICd3aWR0aCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNldEVsZW1lbnRXaWR0aChlbGVtZW50LCB2YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNldEVsZW1lbnRIZWlnaHQoZWxlbWVudCwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnRJdGVtQ29uZmlnLCBJdGVtQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2NvbmZpZyc7XHJcbmltcG9ydCB7IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZywgUmVzb2x2ZWRIZWFkZXJlZEl0ZW1Db25maWcsIFJlc29sdmVkSXRlbUNvbmZpZywgUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcgfSBmcm9tICcuLi9jb25maWcvcmVzb2x2ZWQtY29uZmlnJztcclxuaW1wb3J0IHsgSGVhZGVyIH0gZnJvbSAnLi4vY29udHJvbHMvaGVhZGVyJztcclxuaW1wb3J0IHsgQXNzZXJ0RXJyb3IsIFVuZXhwZWN0ZWROdWxsRXJyb3IsIFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9pbnRlcm5hbC1lcnJvcic7XHJcbmltcG9ydCB7IExheW91dE1hbmFnZXIgfSBmcm9tICcuLi9sYXlvdXQtbWFuYWdlcic7XHJcbmltcG9ydCB7IERvbUNvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL2RvbS1jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBEcmFnTGlzdGVuZXIgfSBmcm9tICcuLi91dGlscy9kcmFnLWxpc3RlbmVyJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi4vdXRpbHMvZXZlbnQtZW1pdHRlcic7XHJcbmltcG9ydCB7IEFyZWFMaW5rZWRSZWN0LCBJdGVtVHlwZSwgSnNvblZhbHVlLCBTaWRlLCBTaXplVW5pdEVudW0gfSBmcm9tICcuLi91dGlscy90eXBlcyc7XHJcbmltcG9ydCB7XHJcbiAgICBzZXRFbGVtZW50RGlzcGxheVZpc2liaWxpdHlcclxufSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IENvbXBvbmVudEl0ZW0gfSBmcm9tICcuL2NvbXBvbmVudC1pdGVtJztcclxuaW1wb3J0IHsgQ29tcG9uZW50UGFyZW50YWJsZUl0ZW0gfSBmcm9tICcuL2NvbXBvbmVudC1wYXJlbnRhYmxlLWl0ZW0nO1xyXG5pbXBvcnQgeyBDb250ZW50SXRlbSB9IGZyb20gJy4vY29udGVudC1pdGVtJztcclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBjbGFzcyBTdGFjayBleHRlbmRzIENvbXBvbmVudFBhcmVudGFibGVJdGVtIHtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2hlYWRlckNvbmZpZzogUmVzb2x2ZWRIZWFkZXJlZEl0ZW1Db25maWcuSGVhZGVyIHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfaGVhZGVyOiBIZWFkZXI7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jaGlsZEVsZW1lbnRDb250YWluZXI6IEhUTUxFbGVtZW50O1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfbWF4aW1pc2VkRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2FjdGl2ZUNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0gfCB1bmRlZmluZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9kcm9wU2VnbWVudDogU3RhY2suU2VnbWVudDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2Ryb3BJbmRleDogbnVtYmVyO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfY29udGVudEFyZWFEaW1lbnNpb25zOiBTdGFjay5Db250ZW50QXJlYURpbWVuc2lvbnM7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9oZWFkZXJTaWRlQ2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfaW5pdGlhbFdhbnRNYXhpbWlzZTogYm9vbGVhbjtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2luaXRpYWxBY3RpdmVJdGVtSW5kZXg6IG51bWJlcjtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9yZXNpemVMaXN0ZW5lciA9ICgpID0+IHRoaXMudXBkYXRlVGFiU2l6ZXMoKTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX21heGltaXNlZExpc3RlbmVyID0gKCkgPT4gdGhpcy5oYW5kbGVNYXhpbWlzZWQoKTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX21pbmltaXNlZExpc3RlbmVyID0gKCkgPT4gdGhpcy5oYW5kbGVNaW5pbWlzZWQoKTtcclxuXHJcbiAgICBnZXQgY2hpbGRFbGVtZW50Q29udGFpbmVyKCk6IEhUTUxFbGVtZW50IHsgcmV0dXJuIHRoaXMuX2NoaWxkRWxlbWVudENvbnRhaW5lcjsgfVxyXG4gICAgZ2V0IGhlYWRlcigpOiBIZWFkZXIgeyByZXR1cm4gdGhpcy5faGVhZGVyOyB9XHJcbiAgICBnZXQgaGVhZGVyU2hvdygpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX2hlYWRlci5zaG93OyB9XHJcbiAgICBnZXQgaGVhZGVyU2lkZSgpOiBTaWRlIHsgcmV0dXJuIHRoaXMuX2hlYWRlci5zaWRlOyB9XHJcbiAgICBnZXQgaGVhZGVyTGVmdFJpZ2h0U2lkZWQoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9oZWFkZXIubGVmdFJpZ2h0U2lkZWQ7IH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGdldCBjb250ZW50QXJlYURpbWVuc2lvbnMoKTogU3RhY2suQ29udGVudEFyZWFEaW1lbnNpb25zIHwgdW5kZWZpbmVkIHsgcmV0dXJuIHRoaXMuX2NvbnRlbnRBcmVhRGltZW5zaW9uczsgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZ2V0IGluaXRpYWxXYW50TWF4aW1pc2UoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9pbml0aWFsV2FudE1heGltaXNlOyB9XHJcbiAgICBnZXQgaXNNYXhpbWlzZWQoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzID09PSB0aGlzLmxheW91dE1hbmFnZXIubWF4aW1pc2VkU3RhY2s7IH1cclxuICAgIGdldCBzdGFja1BhcmVudCgpOiBDb250ZW50SXRlbSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBhcmVudCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0YWNrIHNob3VsZCBhbHdheXMgaGF2ZSBhIHBhcmVudCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgY29uc3RydWN0b3IobGF5b3V0TWFuYWdlcjogTGF5b3V0TWFuYWdlciwgY29uZmlnOiBSZXNvbHZlZFN0YWNrSXRlbUNvbmZpZywgcGFyZW50OiBDb250ZW50SXRlbSkge1xyXG4gICAgICAgIHN1cGVyKGxheW91dE1hbmFnZXIsIGNvbmZpZywgcGFyZW50LCBDb250ZW50SXRlbS5jcmVhdGVFbGVtZW50KERvbUNvbnN0YW50cy5DbGFzc05hbWUuU3RhY2spKTtcclxuICAgICAgICB0aGlzLl9oZWFkZXJDb25maWcgPSBjb25maWcuaGVhZGVyO1xyXG4gICAgICAgIGNvbnN0IGxheW91dEhlYWRlckNvbmZpZyA9IGxheW91dE1hbmFnZXIubGF5b3V0Q29uZmlnLmhlYWRlcjtcclxuICAgICAgICBjb25zdCBjb25maWdDb250ZW50ID0gY29uZmlnLmNvbnRlbnQ7XHJcbiAgICAgICAgLy8gSWYgc3RhY2sgaGFzIG9ubHkgb25lIGNvbXBvbmVudCwgdGhlbiB3ZSBjYW4gYWxzbyBjaGVjayB0aGlzIGZvciBoZWFkZXIgc2V0dGluZ3NcclxuICAgICAgICBsZXQgY29tcG9uZW50SGVhZGVyQ29uZmlnOiBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKGNvbmZpZ0NvbnRlbnQubGVuZ3RoICE9PSAxKSB7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudEhlYWRlckNvbmZpZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdENoaWxkSXRlbUNvbmZpZyA9IGNvbmZpZ0NvbnRlbnRbMF07XHJcbiAgICAgICAgICAgIGNvbXBvbmVudEhlYWRlckNvbmZpZyA9IChmaXJzdENoaWxkSXRlbUNvbmZpZyBhcyBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZykuaGVhZGVyOyAvLyB3aWxsIGJlIHVuZGVmaW5lZCBpZiBub3QgY29tcG9uZW50IChhbmQgd29udCBiZSBzdGFjaylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2luaXRpYWxXYW50TWF4aW1pc2UgPSBjb25maWcubWF4aW1pc2VkO1xyXG4gICAgICAgIHRoaXMuX2luaXRpYWxBY3RpdmVJdGVtSW5kZXggPSBjb25maWcuYWN0aXZlSXRlbUluZGV4ID8/IDA7IC8vIG1ha2Ugc3VyZSBkZWZpbmVkXHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGZvciBkZWZpbmVkIHZhbHVlIGZvciBlYWNoIGl0ZW0gaW4gb3JkZXIgb2YgU3RhY2sgKHRoaXMgSXRlbSksIENvbXBvbmVudCAoZmlyc3QgY2hpbGQpLCBNYW5hZ2VyLlxyXG4gICAgICAgIGNvbnN0IHNob3cgPSB0aGlzLl9oZWFkZXJDb25maWc/LnNob3cgPz8gY29tcG9uZW50SGVhZGVyQ29uZmlnPy5zaG93ID8/IGxheW91dEhlYWRlckNvbmZpZy5zaG93O1xyXG4gICAgICAgIGNvbnN0IHBvcG91dCA9IHRoaXMuX2hlYWRlckNvbmZpZz8ucG9wb3V0ID8/IGNvbXBvbmVudEhlYWRlckNvbmZpZz8ucG9wb3V0ID8/IGxheW91dEhlYWRlckNvbmZpZy5wb3BvdXQ7XHJcbiAgICAgICAgY29uc3QgbWF4aW1pc2UgPSB0aGlzLl9oZWFkZXJDb25maWc/Lm1heGltaXNlID8/IGNvbXBvbmVudEhlYWRlckNvbmZpZz8ubWF4aW1pc2UgPz8gbGF5b3V0SGVhZGVyQ29uZmlnLm1heGltaXNlO1xyXG4gICAgICAgIGNvbnN0IGNsb3NlID0gdGhpcy5faGVhZGVyQ29uZmlnPy5jbG9zZSA/PyBjb21wb25lbnRIZWFkZXJDb25maWc/LmNsb3NlID8/IGxheW91dEhlYWRlckNvbmZpZy5jbG9zZTtcclxuICAgICAgICBjb25zdCBtaW5pbWlzZSA9IHRoaXMuX2hlYWRlckNvbmZpZz8ubWluaW1pc2UgPz8gY29tcG9uZW50SGVhZGVyQ29uZmlnPy5taW5pbWlzZSA/PyBsYXlvdXRIZWFkZXJDb25maWcubWluaW1pc2U7XHJcbiAgICAgICAgY29uc3QgdGFiRHJvcGRvd24gPSB0aGlzLl9oZWFkZXJDb25maWc/LnRhYkRyb3Bkb3duID8/IGNvbXBvbmVudEhlYWRlckNvbmZpZz8udGFiRHJvcGRvd24gPz8gbGF5b3V0SGVhZGVyQ29uZmlnLnRhYkRyb3Bkb3duO1xyXG4gICAgICAgIHRoaXMuX21heGltaXNlZEVuYWJsZWQgPSBtYXhpbWlzZSAhPT0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgaGVhZGVyU2V0dGluZ3M6IEhlYWRlci5TZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgc2hvdzogc2hvdyAhPT0gZmFsc2UsXHJcbiAgICAgICAgICAgIHNpZGU6IHNob3cgPT09IGZhbHNlID8gU2lkZS50b3AgOiBzaG93LFxyXG4gICAgICAgICAgICBwb3BvdXRFbmFibGVkOiBwb3BvdXQgIT09IGZhbHNlLFxyXG4gICAgICAgICAgICBwb3BvdXRMYWJlbDogcG9wb3V0ID09PSBmYWxzZSA/ICcnIDogcG9wb3V0LFxyXG4gICAgICAgICAgICBtYXhpbWlzZUVuYWJsZWQ6IHRoaXMuX21heGltaXNlZEVuYWJsZWQsXHJcbiAgICAgICAgICAgIG1heGltaXNlTGFiZWw6IG1heGltaXNlID09PSBmYWxzZSA/ICcnIDogbWF4aW1pc2UsXHJcbiAgICAgICAgICAgIGNsb3NlRW5hYmxlZDogY2xvc2UgIT09IGZhbHNlLFxyXG4gICAgICAgICAgICBjbG9zZUxhYmVsOiBjbG9zZSA9PT0gZmFsc2UgPyAnJyA6IGNsb3NlLFxyXG4gICAgICAgICAgICBtaW5pbWlzZUVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIG1pbmltaXNlTGFiZWw6IG1pbmltaXNlLFxyXG4gICAgICAgICAgICB0YWJEcm9wZG93bkVuYWJsZWQ6IHRhYkRyb3Bkb3duICE9PSBmYWxzZSxcclxuICAgICAgICAgICAgdGFiRHJvcGRvd25MYWJlbDogdGFiRHJvcGRvd24gPT09IGZhbHNlID8gJycgOiB0YWJEcm9wZG93bixcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLl9oZWFkZXIgPSBuZXcgSGVhZGVyKGxheW91dE1hbmFnZXIsXHJcbiAgICAgICAgICAgIHRoaXMsIGhlYWRlclNldHRpbmdzLFxyXG4gICAgICAgICAgICBjb25maWcuaXNDbG9zYWJsZSAmJiBjbG9zZSAhPT0gZmFsc2UsXHJcbiAgICAgICAgICAgICgpID0+IHRoaXMuZ2V0QWN0aXZlQ29tcG9uZW50SXRlbSgpLFxyXG4gICAgICAgICAgICAoKSA9PiB0aGlzLnJlbW92ZSgpLFxyXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmhhbmRsZVBvcG91dEV2ZW50KCksXHJcbiAgICAgICAgICAgICgpID0+IHRoaXMudG9nZ2xlTWF4aW1pc2UoKSxcclxuICAgICAgICAgICAgKGV2KSA9PiB0aGlzLmhhbmRsZUhlYWRlckNsaWNrRXZlbnQoZXYpLFxyXG4gICAgICAgICAgICAoZXYpID0+IHRoaXMuaGFuZGxlSGVhZGVyVG91Y2hTdGFydEV2ZW50KGV2KSxcclxuICAgICAgICAgICAgKGl0ZW0pID0+IHRoaXMuaGFuZGxlSGVhZGVyQ29tcG9uZW50UmVtb3ZlRXZlbnQoaXRlbSksXHJcbiAgICAgICAgICAgIChpdGVtKSA9PiB0aGlzLmhhbmRsZUhlYWRlckNvbXBvbmVudEZvY3VzRXZlbnQoaXRlbSksXHJcbiAgICAgICAgICAgICh4LCB5LCBkcmFnTGlzdGVuZXIsIGl0ZW0pID0+IHRoaXMuaGFuZGxlSGVhZGVyQ29tcG9uZW50U3RhcnREcmFnRXZlbnQoeCwgeSwgZHJhZ0xpc3RlbmVyLCBpdGVtKSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyB0aGlzLl9kcm9wWm9uZXMgPSB7fTtcclxuXHJcbiAgICAgICAgdGhpcy5pc1N0YWNrID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5fY2hpbGRFbGVtZW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VjdGlvbicpO1xyXG4gICAgICAgIHRoaXMuX2NoaWxkRWxlbWVudENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuSXRlbXMpO1xyXG5cclxuICAgICAgICB0aGlzLm9uKCdyZXNpemUnLCB0aGlzLl9yZXNpemVMaXN0ZW5lcik7XHJcbiAgICAgICAgaWYgKHRoaXMuX21heGltaXNlZEVuYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5vbignbWF4aW1pc2VkJywgdGhpcy5fbWF4aW1pc2VkTGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB0aGlzLm9uKCdtaW5pbWlzZWQnLCB0aGlzLl9taW5pbWlzZWRMaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5faGVhZGVyLmVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9jaGlsZEVsZW1lbnRDb250YWluZXIpO1xyXG5cclxuICAgICAgICB0aGlzLnNldHVwSGVhZGVyUG9zaXRpb24oKTtcclxuICAgICAgICB0aGlzLl9oZWFkZXIudXBkYXRlQ2xvc2FiaWxpdHkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBpbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGlzZWQgPT09IHRydWUpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVOb2RlU2l6ZSgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkRWxlbWVudENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNvbnRlbnRJdGVtc1tpXS5lbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN1cGVyLmluaXQoKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW1zID0gdGhpcy5jb250ZW50SXRlbXM7XHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW1Db3VudCA9IGNvbnRlbnRJdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGNvbnRlbnRJdGVtQ291bnQgPiAwKSB7IC8vIGNvbnRlbnRJdGVtQ291bnQgd2lsbCBiZSAwIG9uIGRyYWcgZHJvcFxyXG4gICAgICAgICAgICBpZiAodGhpcy5faW5pdGlhbEFjdGl2ZUl0ZW1JbmRleCA8IDAgfHwgdGhpcy5faW5pdGlhbEFjdGl2ZUl0ZW1JbmRleCA+PSBjb250ZW50SXRlbUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFjdGl2ZUl0ZW1JbmRleCBvdXQgb2YgcmFuZ2U6ICR7dGhpcy5faW5pdGlhbEFjdGl2ZUl0ZW1JbmRleH0gaWQ6ICR7dGhpcy5pZH1gKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudEl0ZW1Db3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSBjb250ZW50SXRlbXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoY29udGVudEl0ZW0gaW5zdGFuY2VvZiBDb21wb25lbnRJdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFN0YWNrIENvbnRlbnQgSXRlbSBpcyBub3Qgb2YgdHlwZSBDb21wb25lbnRJdGVtOiAke2l9IGlkOiAke3RoaXMuaWR9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGVhZGVyLmNyZWF0ZVRhYihjb250ZW50SXRlbSwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRJdGVtLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEl0ZW0uY29udGFpbmVyLnNldEJhc2VMb2dpY2FsWkluZGV4KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlQ29tcG9uZW50SXRlbShjb250ZW50SXRlbXNbdGhpcy5faW5pdGlhbEFjdGl2ZUl0ZW1JbmRleF0gYXMgQ29tcG9uZW50SXRlbSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlVGFiU2l6ZXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faGVhZGVyLnVwZGF0ZUNsb3NhYmlsaXR5KCk7XHJcbiAgICAgICAgdGhpcy5pbml0Q29udGVudEl0ZW1zKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgKFN0YWNrOmNsYXNzKS5zZXRBY3RpdmVDb21wb25lbnRJdGVtfSAqL1xyXG4gICAgc2V0QWN0aXZlQ29udGVudEl0ZW0oaXRlbTogQ29udGVudEl0ZW0pOiB2b2lkIHtcclxuICAgICAgICBpZiAoIUNvbnRlbnRJdGVtLmlzQ29tcG9uZW50SXRlbShpdGVtKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0YWNrLnNldEFjdGl2ZUNvbnRlbnRJdGVtOiBpdGVtIGlzIG5vdCBhIENvbXBvbmVudEl0ZW0nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNldEFjdGl2ZUNvbXBvbmVudEl0ZW0oaXRlbSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRBY3RpdmVDb21wb25lbnRJdGVtKGNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0sIGZvY3VzOiBib29sZWFuLCBzdXBwcmVzc0ZvY3VzRXZlbnQgPSBmYWxzZSk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVDb21wb25lbnRJdGVtICE9PSBjb21wb25lbnRJdGVtKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRlbnRJdGVtcy5pbmRleE9mKGNvbXBvbmVudEl0ZW0pID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb21wb25lbnRJdGVtIGlzIG5vdCBhIGNoaWxkIG9mIHRoaXMgc3RhY2snKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmVDb21wb25lbnRJdGVtICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVDb21wb25lbnRJdGVtLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZUNvbXBvbmVudEl0ZW0gPSBjb21wb25lbnRJdGVtO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGVhZGVyLnByb2Nlc3NBY3RpdmVDb21wb25lbnRDaGFuZ2VkKGNvbXBvbmVudEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50SXRlbS5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ2FjdGl2ZUNvbnRlbnRJdGVtQ2hhbmdlZCcsIGNvbXBvbmVudEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLmVtaXQoJ2FjdGl2ZUNvbnRlbnRJdGVtQ2hhbmdlZCcsIGNvbXBvbmVudEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0U3RhdGVDaGFuZ2VkRXZlbnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZm9jdXNlZCB8fCBmb2N1cykge1xyXG4gICAgICAgICAgICB0aGlzLmxheW91dE1hbmFnZXIuc2V0Rm9jdXNlZENvbXBvbmVudEl0ZW0oY29tcG9uZW50SXRlbSwgc3VwcHJlc3NGb2N1c0V2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgKFN0YWNrOmNsYXNzKS5nZXRBY3RpdmVDb21wb25lbnRJdGVtfSAqL1xyXG4gICAgZ2V0QWN0aXZlQ29udGVudEl0ZW0oKTogQ29udGVudEl0ZW0gfCBudWxsIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRBY3RpdmVDb21wb25lbnRJdGVtKCkgPz8gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBY3RpdmVDb21wb25lbnRJdGVtKCk6IENvbXBvbmVudEl0ZW0gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVDb21wb25lbnRJdGVtO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGZvY3VzQWN0aXZlQ29udGVudEl0ZW0oKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlQ29tcG9uZW50SXRlbT8uZm9jdXMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvdmVycmlkZSBzZXRGb2N1c2VkVmFsdWUodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Gb2N1c2VkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShEb21Db25zdGFudHMuQ2xhc3NOYW1lLkZvY3VzZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9oZWFkZXIuYXBwbHlGb2N1c2VkVmFsdWUodmFsdWUpO1xyXG4gICAgICAgIHN1cGVyLnNldEZvY3VzZWRWYWx1ZSh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgc2V0Um93Q29sdW1uQ2xvc2FibGUodmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9oZWFkZXIuc2V0Um93Q29sdW1uQ2xvc2FibGUodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIG5ld0NvbXBvbmVudChjb21wb25lbnRUeXBlOiBKc29uVmFsdWUsIGNvbXBvbmVudFN0YXRlPzogSnNvblZhbHVlLCB0aXRsZT86IHN0cmluZywgaW5kZXg/OiBudW1iZXIpOiBDb21wb25lbnRJdGVtIHtcclxuICAgICAgICBjb25zdCBpdGVtQ29uZmlnOiBDb21wb25lbnRJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnY29tcG9uZW50JyxcclxuICAgICAgICAgICAgY29tcG9uZW50VHlwZSxcclxuICAgICAgICAgICAgY29tcG9uZW50U3RhdGUsXHJcbiAgICAgICAgICAgIHRpdGxlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmV3SXRlbShpdGVtQ29uZmlnLCBpbmRleCkgYXMgQ29tcG9uZW50SXRlbTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRDb21wb25lbnQoY29tcG9uZW50VHlwZTogSnNvblZhbHVlLCBjb21wb25lbnRTdGF0ZT86IEpzb25WYWx1ZSwgdGl0bGU/OiBzdHJpbmcsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBpdGVtQ29uZmlnOiBDb21wb25lbnRJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnY29tcG9uZW50JyxcclxuICAgICAgICAgICAgY29tcG9uZW50VHlwZSxcclxuICAgICAgICAgICAgY29tcG9uZW50U3RhdGUsXHJcbiAgICAgICAgICAgIHRpdGxlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkSXRlbShpdGVtQ29uZmlnLCBpbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmV3SXRlbShpdGVtQ29uZmlnOiBDb21wb25lbnRJdGVtQ29uZmlnLCAgaW5kZXg/OiBudW1iZXIpOiBDb250ZW50SXRlbSB7XHJcbiAgICAgICAgaW5kZXggPSB0aGlzLmFkZEl0ZW0oaXRlbUNvbmZpZywgaW5kZXgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRJdGVtc1tpbmRleF07XHJcbiAgICB9XHJcblxyXG4gICAgYWRkSXRlbShpdGVtQ29uZmlnOiBDb21wb25lbnRJdGVtQ29uZmlnLCBpbmRleD86IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLmNoZWNrTWluaW1pc2VNYXhpbWlzZWRTdGFjaygpO1xyXG5cclxuICAgICAgICBjb25zdCByZXNvbHZlZEl0ZW1Db25maWcgPSBJdGVtQ29uZmlnLnJlc29sdmUoaXRlbUNvbmZpZywgZmFsc2UpO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmNyZWF0ZUFuZEluaXRDb250ZW50SXRlbShyZXNvbHZlZEl0ZW1Db25maWcsIHRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZENoaWxkKGNvbnRlbnRJdGVtLCBpbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGUgYWRkQ2hpbGQoY29udGVudEl0ZW06IENvbnRlbnRJdGVtLCBpbmRleD86IG51bWJlciwgZm9jdXMgPSBmYWxzZSk6IG51bWJlciB7XHJcbiAgICAgICAgaWYoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpbmRleCA+IHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIGluZGV4IC09IDE7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignU0FDOTk3MjgnKTsgLy8gdW5kaXNwbGF5Q2hpbGQoKSByZW1vdmVkIHNvIHRoaXMgY29uZGl0aW9uIHNob3VsZCBubyBsb25nZXIgb2NjdXJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghKGNvbnRlbnRJdGVtIGluc3RhbmNlb2YgQ29tcG9uZW50SXRlbSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdTQUNDODg1MzInKTsgLy8gU3RhY2tzIGNhbiBvbmx5IGhhdmUgQ29tcG9uZW50IGNoaWxkcmVuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5kZXggPSBzdXBlci5hZGRDaGlsZChjb250ZW50SXRlbSwgaW5kZXgpO1xyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZEVsZW1lbnRDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGVudEl0ZW0uZWxlbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYWRlci5jcmVhdGVUYWIoY29udGVudEl0ZW0sIGluZGV4KTtcclxuICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVDb21wb25lbnRJdGVtKGNvbnRlbnRJdGVtLCBmb2N1cyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYWRlci51cGRhdGVUYWJTaXplcygpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICAgICAgY29udGVudEl0ZW0uY29udGFpbmVyLnNldEJhc2VMb2dpY2FsWkluZGV4KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYWRlci51cGRhdGVDbG9zYWJpbGl0eSgpO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRTdGF0ZUNoYW5nZWRFdmVudCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG92ZXJyaWRlIHJlbW92ZUNoaWxkKGNvbnRlbnRJdGVtOiBDb250ZW50SXRlbSwga2VlcENoaWxkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgY29tcG9uZW50SXRlbSA9IGNvbnRlbnRJdGVtIGFzIENvbXBvbmVudEl0ZW07XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmNvbnRlbnRJdGVtcy5pbmRleE9mKGNvbXBvbmVudEl0ZW0pO1xyXG4gICAgICAgIGNvbnN0IHN0YWNrV2lsbEJlRGVsZXRlZCA9IHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCA9PT0gMTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZUNvbXBvbmVudEl0ZW0gPT09IGNvbXBvbmVudEl0ZW0pIHtcclxuICAgICAgICAgICAgaWYgKGNvbXBvbmVudEl0ZW0uZm9jdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgY29tcG9uZW50SXRlbS5ibHVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFzdGFja1dpbGxCZURlbGV0ZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UncmUgYWxyZWFkeSBzdXJlIHdlIGhhdmUgYXQgbGVhc3Qgb25lIGNvbnRlbnQgaXRlbSBsZWZ0ICphZnRlcipcclxuICAgICAgICAgICAgICAgIC8vIHJlbW92aW5nIGNvbnRlbnRJdGVtLCBzbyB3ZSBjYW4gc2FmZWx5IGFzc3VtZSBpbmRleCAxIGlzIGEgdmFsaWQgb25lIGlmXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgaW5kZXggb2YgY29udGVudEl0ZW0gaXMgMCwgb3RoZXJ3aXNlIHdlIGp1c3QgdXNlIHRoZSBwcmV2aW91cyBjb250ZW50IGl0ZW0uXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdBY3RpdmVDb21wb25lbnRJZHggPSBpbmRleCA9PT0gMCA/IDEgOiBpbmRleCAtIDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEFjdGl2ZUNvbXBvbmVudEl0ZW0odGhpcy5jb250ZW50SXRlbXNbbmV3QWN0aXZlQ29tcG9uZW50SWR4XSBhcyBDb21wb25lbnRJdGVtLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2hlYWRlci5yZW1vdmVUYWIoY29tcG9uZW50SXRlbSk7XHJcblxyXG4gICAgICAgIHN1cGVyLnJlbW92ZUNoaWxkKGNvbXBvbmVudEl0ZW0sIGtlZXBDaGlsZCk7XHJcblxyXG4gICAgICAgIGlmICghc3RhY2tXaWxsQmVEZWxldGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYWRlci51cGRhdGVDbG9zYWJpbGl0eSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5lbWl0U3RhdGVDaGFuZ2VkRXZlbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1heGltaXNlcyB0aGUgSXRlbSBvciBtaW5pbWlzZXMgaXQgaWYgaXQgaXMgYWxyZWFkeSBtYXhpbWlzZWRcclxuICAgICAqL1xyXG4gICAgdG9nZ2xlTWF4aW1pc2UoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNNYXhpbWlzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5taW5pbWlzZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubWF4aW1pc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbWF4aW1pc2UoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzTWF4aW1pc2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci5zZXRNYXhpbWlzZWRTdGFjayh0aGlzKTtcclxuICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW1zID0gdGhpcy5jb250ZW50SXRlbXM7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtQ291bnQgPSBjb250ZW50SXRlbXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnRJdGVtQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSBjb250ZW50SXRlbXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudEl0ZW0gaW5zdGFuY2VvZiBDb21wb25lbnRJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudEl0ZW0uZW50ZXJTdGFja01heGltaXNlZCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ1NNQVhJODc3NzMnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmVtaXRTdGF0ZUNoYW5nZWRFdmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtaW5pbWlzZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5pc01heGltaXNlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmxheW91dE1hbmFnZXIuc2V0TWF4aW1pc2VkU3RhY2sodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW1zID0gdGhpcy5jb250ZW50SXRlbXM7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtQ291bnQgPSBjb250ZW50SXRlbXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnRJdGVtQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSBjb250ZW50SXRlbXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudEl0ZW0gaW5zdGFuY2VvZiBDb21wb25lbnRJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudEl0ZW0uZXhpdFN0YWNrTWF4aW1pc2VkKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignU01JTkk4Nzc3MycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdFN0YXRlQ2hhbmdlZEV2ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIG92ZXJyaWRlIGRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZUNvbXBvbmVudEl0ZW0/LmZvY3VzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fYWN0aXZlQ29tcG9uZW50SXRlbS5ibHVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcclxuICAgICAgICB0aGlzLm9mZigncmVzaXplJywgdGhpcy5fcmVzaXplTGlzdGVuZXIpO1xyXG4gICAgICAgIGlmICh0aGlzLl9tYXhpbWlzZWRFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub2ZmKCdtYXhpbWlzZWQnLCB0aGlzLl9tYXhpbWlzZWRMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMub2ZmKCdtaW5pbWlzZWQnLCB0aGlzLl9taW5pbWlzZWRMaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2hlYWRlci5kZXN0cm95KCk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9Db25maWcoKTogUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcge1xyXG4gICAgICAgIGxldCBhY3RpdmVJdGVtSW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlQ29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgICAgICBhY3RpdmVJdGVtSW5kZXggPSB0aGlzLmNvbnRlbnRJdGVtcy5pbmRleE9mKHRoaXMuX2FjdGl2ZUNvbXBvbmVudEl0ZW0pO1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlSXRlbUluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhY3RpdmUgY29tcG9uZW50IGl0ZW0gbm90IGZvdW5kIGluIHN0YWNrJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGVudEl0ZW1zLmxlbmd0aCA+IDAgJiYgYWN0aXZlSXRlbUluZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCBub24tZW1wdHkgc3RhY2sgdG8gaGF2ZSBhbiBhY3RpdmUgY29tcG9uZW50IGl0ZW0nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQ6IFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3N0YWNrJyxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMuY2FsY3VsYXRlQ29uZmlnQ29udGVudCgpIGFzIFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZ1tdLFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogdGhpcy5zaXplLFxyXG4gICAgICAgICAgICAgICAgc2l6ZVVuaXQ6IHRoaXMuc2l6ZVVuaXQsXHJcbiAgICAgICAgICAgICAgICBtaW5TaXplOiB0aGlzLm1pblNpemUsXHJcbiAgICAgICAgICAgICAgICBtaW5TaXplVW5pdDogdGhpcy5taW5TaXplVW5pdCxcclxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxyXG4gICAgICAgICAgICAgICAgaXNDbG9zYWJsZTogdGhpcy5pc0Nsb3NhYmxlLFxyXG4gICAgICAgICAgICAgICAgbWF4aW1pc2VkOiB0aGlzLmlzTWF4aW1pc2VkLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiB0aGlzLmNyZWF0ZUhlYWRlckNvbmZpZygpLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlSXRlbUluZGV4LFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT2ssIHRoaXMgb25lIGlzIGdvaW5nIHRvIGJlIHRoZSB0cmlja3kgb25lOiBUaGUgdXNlciBoYXMgZHJvcHBlZCBhIHtAbGluayAoQ29udGVudEl0ZW06Y2xhc3MpfSBvbnRvIHRoaXMgc3RhY2suXHJcbiAgICAgKlxyXG4gICAgICogSXQgd2FzIGRyb3BwZWQgb24gZWl0aGVyIHRoZSBzdGFja3MgaGVhZGVyIG9yIHRoZSB0b3AsIHJpZ2h0LCBib3R0b20gb3IgbGVmdCBiaXQgb2YgdGhlIGNvbnRlbnQgYXJlYVxyXG4gICAgICogKHdoaWNoIG9uZSBvZiB0aG9zZSBpcyBzdG9yZWQgaW4gdGhpcy5fZHJvcFNlZ21lbnQpLiBOb3csIGlmIHRoZSB1c2VyIGhhcyBkcm9wcGVkIG9uIHRoZSBoZWFkZXIgdGhlIGNhc2VcclxuICAgICAqIGlzIHJlbGF0aXZlbHkgY2xlYXI6IFdlIGFkZCB0aGUgaXRlbSB0byB0aGUgZXhpc3Rpbmcgc3RhY2suLi4gam9iIGRvbmUgKG1pZ2h0IGJlIGdvb2QgdG8gaGF2ZVxyXG4gICAgICogdGFiIHJlb3JkZXJpbmcgYXQgc29tZSBwb2ludCwgYnV0IGxldHMgbm90IHN3ZWF0IGl0IHJpZ2h0IG5vdylcclxuICAgICAqXHJcbiAgICAgKiBJZiB0aGUgaXRlbSB3YXMgZHJvcHBlZCBvbiB0aGUgY29udGVudCBwYXJ0IHRoaW5ncyBhcmUgYSBiaXQgbW9yZSBjb21wbGljYXRlZC4gSWYgaXQgd2FzIGRyb3BwZWQgb24gZWl0aGVyIHRoZVxyXG4gICAgICogdG9wIG9yIGJvdHRvbSByZWdpb24gd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgY29sdW1uIGFuZCBwbGFjZSB0aGUgaXRlbXMgYWNjb3JkaW5nbHkuXHJcbiAgICAgKiBVbmxlc3MsIG9mIGNvdXJzZSBpZiB0aGUgc3RhY2sgaXMgYWxyZWFkeSB3aXRoaW4gYSBjb2x1bW4uLi4gaW4gd2hpY2ggY2FzZSB3ZSB3YW50XHJcbiAgICAgKiB0byBhZGQgdGhlIG5ld2x5IGNyZWF0ZWQgaXRlbSB0byB0aGUgZXhpc3RpbmcgY29sdW1uLi4uXHJcbiAgICAgKiBlaXRoZXIgcHJlcGVuZCBvciBhcHBlbmQgaXQsIGRlcGVuZGluZyBvbiB3ZXRoZXIgaXRzIHRvcCBvciBib3R0b20uXHJcbiAgICAgKlxyXG4gICAgICogU2FtZSB0aGluZyBmb3Igcm93cyBhbmQgbGVmdCAvIHJpZ2h0IGRyb3Agc2VnbWVudHMuLi4gc28gaW4gdG90YWwgdGhlcmUgYXJlIDkgdGhpbmdzIHRoYXQgY2FuIHBvdGVudGlhbGx5IGhhcHBlblxyXG4gICAgICogKGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSkgKiBpcyBjaGlsZCBvZiB0aGUgcmlnaHQgcGFyZW50IChyb3csIGNvbHVtbikgKyBoZWFkZXIgZHJvcFxyXG4gICAgICpcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvdmVycmlkZSBvbkRyb3AoY29udGVudEl0ZW06IENvbnRlbnRJdGVtLCBhcmVhOiBDb250ZW50SXRlbS5BcmVhKTogdm9pZCB7XHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBUaGUgaXRlbSB3YXMgZHJvcHBlZCBvbiB0aGUgaGVhZGVyIGFyZWEuIEp1c3QgYWRkIGl0IGFzIGEgY2hpbGQgb2YgdGhpcyBzdGFjayBhbmRcclxuICAgICAgICAgKiBnZXQgdGhlIGhlbGwgb3V0IG9mIHRoaXMgbG9naWNcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodGhpcy5fZHJvcFNlZ21lbnQgPT09IFN0YWNrLlNlZ21lbnQuSGVhZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRIZWFkZXJEcm9wWm9uZSgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZHJvcEluZGV4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ1NPRERJNjg5OTAnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkQ2hpbGQoY29udGVudEl0ZW0sIHRoaXMuX2Ryb3BJbmRleCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICogVGhlIHN0YWNrIGlzIGVtcHR5LiBMZXQncyBqdXN0IGFkZCB0aGUgZWxlbWVudC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodGhpcy5fZHJvcFNlZ21lbnQgPT09IFN0YWNrLlNlZ21lbnQuQm9keSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZENoaWxkKGNvbnRlbnRJdGVtLCAwLCB0cnVlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBUaGUgaXRlbSB3YXMgZHJvcHBlZCBvbiB0aGUgdG9wLSwgbGVmdC0sIGJvdHRvbS0gb3IgcmlnaHQtIHBhcnQgb2YgdGhlIGNvbnRlbnQuIExldCdzXHJcbiAgICAgICAgICogYWdncmVnYXRlIHNvbWUgY29uZGl0aW9ucyB0byBtYWtlIHRoZSBpZiBzdGF0ZW1lbnRzIGxhdGVyIG9uIG1vcmUgcmVhZGFibGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCBpc1ZlcnRpY2FsID0gdGhpcy5fZHJvcFNlZ21lbnQgPT09IFN0YWNrLlNlZ21lbnQuVG9wIHx8IHRoaXMuX2Ryb3BTZWdtZW50ID09PSBTdGFjay5TZWdtZW50LkJvdHRvbTtcclxuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLl9kcm9wU2VnbWVudCA9PT0gU3RhY2suU2VnbWVudC5MZWZ0IHx8IHRoaXMuX2Ryb3BTZWdtZW50ID09PSBTdGFjay5TZWdtZW50LlJpZ2h0O1xyXG4gICAgICAgIGNvbnN0IGluc2VydEJlZm9yZSA9IHRoaXMuX2Ryb3BTZWdtZW50ID09PSBTdGFjay5TZWdtZW50LlRvcCB8fCB0aGlzLl9kcm9wU2VnbWVudCA9PT0gU3RhY2suU2VnbWVudC5MZWZ0O1xyXG4gICAgICAgIGNvbnN0IGhhc0NvcnJlY3RQYXJlbnQgPSAoaXNWZXJ0aWNhbCAmJiB0aGlzLnN0YWNrUGFyZW50LmlzQ29sdW1uKSB8fCAoaXNIb3Jpem9udGFsICYmIHRoaXMuc3RhY2tQYXJlbnQuaXNSb3cpO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIFRoZSBjb250ZW50IGl0ZW0gY2FuIGJlIGVpdGhlciBhIGNvbXBvbmVudCBvciBhIHN0YWNrLiBJZiBpdCBpcyBhIGNvbXBvbmVudCwgd3JhcCBpdCBpbnRvIGEgc3RhY2tcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoY29udGVudEl0ZW0uaXNDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbUNvbmZpZyA9IFJlc29sdmVkU3RhY2tJdGVtQ29uZmlnLmNyZWF0ZURlZmF1bHQoKTtcclxuICAgICAgICAgICAgaXRlbUNvbmZpZy5oZWFkZXIgPSB0aGlzLmNyZWF0ZUhlYWRlckNvbmZpZygpO1xyXG4gICAgICAgICAgICBjb25zdCBzdGFjayA9IHRoaXMubGF5b3V0TWFuYWdlci5jcmVhdGVBbmRJbml0Q29udGVudEl0ZW0oaXRlbUNvbmZpZywgdGhpcyk7XHJcbiAgICAgICAgICAgIHN0YWNrLmFkZENoaWxkKGNvbnRlbnRJdGVtKTtcclxuICAgICAgICAgICAgY29udGVudEl0ZW0gPSBzdGFjaztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIElmIHRoZSBjb250ZW50SXRlbSB0aGF0J3MgYmVpbmcgZHJvcHBlZCBpcyBub3QgZHJvcHBlZCBvbiBhIFN0YWNrIChjYXNlcyB3aGljaCBqdXN0IHBhc3NlZCBhYm92ZSBhbmRcclxuICAgICAgICAgKiB3aGljaCB3b3VsZCB3cmFwIHRoZSBjb250ZW50SXRlbSBpbiBhIFN0YWNrKSB3ZSBuZWVkIHRvIGNoZWNrIHdoZXRoZXIgY29udGVudEl0ZW0gaXMgYSBSb3dPckNvbHVtbi5cclxuICAgICAgICAgKiBJZiBpdCBpcywgd2UgbmVlZCB0byByZS13cmFwIGl0IGluIGEgU3RhY2sgbGlrZSBpdCB3YXMgd2hlbiBpdCB3YXMgZHJhZ2dlZCBieSBpdHMgVGFiIChpdCB3YXMgZHJhZ2dlZCEpLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmKGNvbnRlbnRJdGVtLnR5cGUgPT09IEl0ZW1UeXBlLnJvdyB8fCBjb250ZW50SXRlbS50eXBlID09PSBJdGVtVHlwZS5jb2x1bW4pe1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtQ29uZmlnID0gUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcuY3JlYXRlRGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBpdGVtQ29uZmlnLmhlYWRlciA9IHRoaXMuY3JlYXRlSGVhZGVyQ29uZmlnKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmNyZWF0ZUNvbnRlbnRJdGVtKGl0ZW1Db25maWcsIHRoaXMpO1xyXG4gICAgICAgICAgICBzdGFjay5hZGRDaGlsZChjb250ZW50SXRlbSlcclxuICAgICAgICAgICAgY29udGVudEl0ZW0gPSBzdGFja1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBJZiB0aGUgaXRlbSBpcyBkcm9wcGVkIG9uIHRvcCBvciBib3R0b20gb2YgYSBjb2x1bW4gb3IgbGVmdCBhbmQgcmlnaHQgb2YgYSByb3csIGl0J3MgYWxyZWFkeVxyXG4gICAgICAgICAqIGxheWQgb3V0IGluIHRoZSBjb3JyZWN0IHdheS4gSnVzdCBhZGQgaXQgYXMgYSBjaGlsZFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChoYXNDb3JyZWN0UGFyZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5zdGFja1BhcmVudC5jb250ZW50SXRlbXMuaW5kZXhPZih0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5zdGFja1BhcmVudC5hZGRDaGlsZChjb250ZW50SXRlbSwgaW5zZXJ0QmVmb3JlID8gaW5kZXggOiBpbmRleCArIDEsIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLnNpemUgKj0gMC41O1xyXG4gICAgICAgICAgICBjb250ZW50SXRlbS5zaXplID0gdGhpcy5zaXplO1xyXG4gICAgICAgICAgICBjb250ZW50SXRlbS5zaXplVW5pdCA9IHRoaXMuc2l6ZVVuaXQ7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhY2tQYXJlbnQudXBkYXRlU2l6ZSgpO1xyXG4gICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgKiBUaGlzIGhhbmRsZXMgaXRlbXMgdGhhdCBhcmUgZHJvcHBlZCBvbiB0b3Agb3IgYm90dG9tIG9mIGEgcm93IG9yIGxlZnQgLyByaWdodCBvZiBhIGNvbHVtbi4gV2UgbmVlZFxyXG4gICAgICAgICAgICAgKiB0byBjcmVhdGUgdGhlIGFwcHJvcHJpYXRlIGNvbnRlbnRJdGVtIGZvciB0aGVtIHRvIGxpdmUgaW5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGlzVmVydGljYWwgPyBJdGVtVHlwZS5jb2x1bW4gOiBJdGVtVHlwZS5yb3c7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1Db25maWcgPSBSZXNvbHZlZEl0ZW1Db25maWcuY3JlYXRlRGVmYXVsdCh0eXBlKSBhcyBSZXNvbHZlZEl0ZW1Db25maWc7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvd09yQ29sdW1uID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmNyZWF0ZUNvbnRlbnRJdGVtKGl0ZW1Db25maWcsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnN0YWNrUGFyZW50LnJlcGxhY2VDaGlsZCh0aGlzLCByb3dPckNvbHVtbik7XHJcblxyXG4gICAgICAgICAgICByb3dPckNvbHVtbi5hZGRDaGlsZChjb250ZW50SXRlbSwgaW5zZXJ0QmVmb3JlID8gMCA6IHVuZGVmaW5lZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHJvd09yQ29sdW1uLmFkZENoaWxkKHRoaXMsIGluc2VydEJlZm9yZSA/IHVuZGVmaW5lZCA6IDAsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zaXplID0gNTA7XHJcbiAgICAgICAgICAgIGNvbnRlbnRJdGVtLnNpemUgPSA1MDtcclxuICAgICAgICAgICAgY29udGVudEl0ZW0uc2l6ZVVuaXQgPSBTaXplVW5pdEVudW0uUGVyY2VudDtcclxuICAgICAgICAgICAgcm93T3JDb2x1bW4udXBkYXRlU2l6ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIElmIHRoZSB1c2VyIGhvdmVycyBhYm92ZSB0aGUgaGVhZGVyIHBhcnQgb2YgdGhlIHN0YWNrLCBpbmRpY2F0ZSBkcm9wIHBvc2l0aW9ucyBmb3IgdGFicy5cclxuICAgICAqIG90aGVyd2lzZSBpbmRpY2F0ZSB3aGljaCBzZWdtZW50IG9mIHRoZSBib2R5IHRoZSBkcmFnZ2VkIGl0ZW0gd291bGQgYmUgZHJvcHBlZCBvblxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB4IC0gQWJzb2x1dGUgU2NyZWVuIFhcclxuICAgICAqIEBwYXJhbSB5IC0gQWJzb2x1dGUgU2NyZWVuIFlcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBvdmVycmlkZSBoaWdobGlnaHREcm9wWm9uZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX2NvbnRlbnRBcmVhRGltZW5zaW9ucykge1xyXG4gICAgICAgICAgICBjb25zdCBzZWdtZW50ID0ga2V5IGFzIFN0YWNrLlNlZ21lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGFyZWEgPSB0aGlzLl9jb250ZW50QXJlYURpbWVuc2lvbnNbc2VnbWVudF0uaG92ZXJBcmVhO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFyZWEueDEgPCB4ICYmIGFyZWEueDIgPiB4ICYmIGFyZWEueTEgPCB5ICYmIGFyZWEueTIgPiB5KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNlZ21lbnQgPT09IFN0YWNrLlNlZ21lbnQuSGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHJvcFNlZ21lbnQgPSBTdGFjay5TZWdtZW50LkhlYWRlcjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZ2hsaWdodEhlYWRlckRyb3Bab25lKHRoaXMuX2hlYWRlci5sZWZ0UmlnaHRTaWRlZCA/IHkgOiB4KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldEhlYWRlckRyb3Bab25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWdobGlnaHRCb2R5RHJvcFpvbmUoc2VnbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGdldEFyZWEoKTogQ29udGVudEl0ZW0uQXJlYSB8IG51bGwge1xyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaGVhZGVyQXJlYSA9IHN1cGVyLmdldEVsZW1lbnRBcmVhKHRoaXMuX2hlYWRlci5lbGVtZW50KTtcclxuICAgICAgICBjb25zdCBjb250ZW50QXJlYSA9IHN1cGVyLmdldEVsZW1lbnRBcmVhKHRoaXMuX2NoaWxkRWxlbWVudENvbnRhaW5lcik7XHJcbiAgICAgICAgaWYgKGhlYWRlckFyZWEgPT09IG51bGwgfHwgY29udGVudEFyZWEgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ1NHQUhDMTMwODYnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29udGVudFdpZHRoID0gY29udGVudEFyZWEueDIgLSBjb250ZW50QXJlYS54MTtcclxuICAgICAgICBjb25zdCBjb250ZW50SGVpZ2h0ID0gY29udGVudEFyZWEueTIgLSBjb250ZW50QXJlYS55MTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29udGVudEFyZWFEaW1lbnNpb25zID0ge1xyXG4gICAgICAgICAgICBoZWFkZXI6IHtcclxuICAgICAgICAgICAgICAgIGhvdmVyQXJlYToge1xyXG4gICAgICAgICAgICAgICAgICAgIHgxOiBoZWFkZXJBcmVhLngxLFxyXG4gICAgICAgICAgICAgICAgICAgIHkxOiBoZWFkZXJBcmVhLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgIHgyOiBoZWFkZXJBcmVhLngyLFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiBoZWFkZXJBcmVhLnkyXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0QXJlYToge1xyXG4gICAgICAgICAgICAgICAgICAgIHgxOiBoZWFkZXJBcmVhLngxLFxyXG4gICAgICAgICAgICAgICAgICAgIHkxOiBoZWFkZXJBcmVhLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgIHgyOiBoZWFkZXJBcmVhLngyLFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiBoZWFkZXJBcmVhLnkyXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIaWdobGlnaHQgdGhlIGVudGlyZSBib2R5IGlmIHRoZSBzdGFjayBpcyBlbXB0eVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRlbnRJdGVtcy5sZW5ndGggPT09IDApIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRlbnRBcmVhRGltZW5zaW9ucy5ib2R5ID0ge1xyXG4gICAgICAgICAgICAgICAgaG92ZXJBcmVhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDE6IGNvbnRlbnRBcmVhLngxLFxyXG4gICAgICAgICAgICAgICAgICAgIHkxOiBjb250ZW50QXJlYS55MSxcclxuICAgICAgICAgICAgICAgICAgICB4MjogY29udGVudEFyZWEueDIsXHJcbiAgICAgICAgICAgICAgICAgICAgeTI6IGNvbnRlbnRBcmVhLnkyXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0QXJlYToge1xyXG4gICAgICAgICAgICAgICAgICAgIHgxOiBjb250ZW50QXJlYS54MSxcclxuICAgICAgICAgICAgICAgICAgICB5MTogY29udGVudEFyZWEueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgeDI6IGNvbnRlbnRBcmVhLngyLFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiBjb250ZW50QXJlYS55MlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmdldEVsZW1lbnRBcmVhKHRoaXMuZWxlbWVudCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udGVudEFyZWFEaW1lbnNpb25zLmxlZnQgPSB7XHJcbiAgICAgICAgICAgICAgICBob3ZlckFyZWE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogY29udGVudEFyZWEueDEsXHJcbiAgICAgICAgICAgICAgICAgICAgeTE6IGNvbnRlbnRBcmVhLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgIHgyOiBjb250ZW50QXJlYS54MSArIGNvbnRlbnRXaWR0aCAqIDAuMjUsXHJcbiAgICAgICAgICAgICAgICAgICAgeTI6IGNvbnRlbnRBcmVhLnkyXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0QXJlYToge1xyXG4gICAgICAgICAgICAgICAgICAgIHgxOiBjb250ZW50QXJlYS54MSxcclxuICAgICAgICAgICAgICAgICAgICB5MTogY29udGVudEFyZWEueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgeDI6IGNvbnRlbnRBcmVhLngxICsgY29udGVudFdpZHRoICogMC41LFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiBjb250ZW50QXJlYS55MlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fY29udGVudEFyZWFEaW1lbnNpb25zLnRvcCA9IHtcclxuICAgICAgICAgICAgICAgIGhvdmVyQXJlYToge1xyXG4gICAgICAgICAgICAgICAgICAgIHgxOiBjb250ZW50QXJlYS54MSArIGNvbnRlbnRXaWR0aCAqIDAuMjUsXHJcbiAgICAgICAgICAgICAgICAgICAgeTE6IGNvbnRlbnRBcmVhLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgIHgyOiBjb250ZW50QXJlYS54MSArIGNvbnRlbnRXaWR0aCAqIDAuNzUsXHJcbiAgICAgICAgICAgICAgICAgICAgeTI6IGNvbnRlbnRBcmVhLnkxICsgY29udGVudEhlaWdodCAqIDAuNVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodEFyZWE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogY29udGVudEFyZWEueDEsXHJcbiAgICAgICAgICAgICAgICAgICAgeTE6IGNvbnRlbnRBcmVhLnkxLFxyXG4gICAgICAgICAgICAgICAgICAgIHgyOiBjb250ZW50QXJlYS54MixcclxuICAgICAgICAgICAgICAgICAgICB5MjogY29udGVudEFyZWEueTEgKyBjb250ZW50SGVpZ2h0ICogMC41XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9jb250ZW50QXJlYURpbWVuc2lvbnMucmlnaHQgPSB7XHJcbiAgICAgICAgICAgICAgICBob3ZlckFyZWE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogY29udGVudEFyZWEueDEgKyBjb250ZW50V2lkdGggKiAwLjc1LFxyXG4gICAgICAgICAgICAgICAgICAgIHkxOiBjb250ZW50QXJlYS55MSxcclxuICAgICAgICAgICAgICAgICAgICB4MjogY29udGVudEFyZWEueDIsXHJcbiAgICAgICAgICAgICAgICAgICAgeTI6IGNvbnRlbnRBcmVhLnkyXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0QXJlYToge1xyXG4gICAgICAgICAgICAgICAgICAgIHgxOiBjb250ZW50QXJlYS54MSArIGNvbnRlbnRXaWR0aCAqIDAuNSxcclxuICAgICAgICAgICAgICAgICAgICB5MTogY29udGVudEFyZWEueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgeDI6IGNvbnRlbnRBcmVhLngyLFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiBjb250ZW50QXJlYS55MlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fY29udGVudEFyZWFEaW1lbnNpb25zLmJvdHRvbSA9IHtcclxuICAgICAgICAgICAgICAgIGhvdmVyQXJlYToge1xyXG4gICAgICAgICAgICAgICAgICAgIHgxOiBjb250ZW50QXJlYS54MSArIGNvbnRlbnRXaWR0aCAqIDAuMjUsXHJcbiAgICAgICAgICAgICAgICAgICAgeTE6IGNvbnRlbnRBcmVhLnkxICsgY29udGVudEhlaWdodCAqIDAuNSxcclxuICAgICAgICAgICAgICAgICAgICB4MjogY29udGVudEFyZWEueDEgKyBjb250ZW50V2lkdGggKiAwLjc1LFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiBjb250ZW50QXJlYS55MlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhpZ2hsaWdodEFyZWE6IHtcclxuICAgICAgICAgICAgICAgICAgICB4MTogY29udGVudEFyZWEueDEsXHJcbiAgICAgICAgICAgICAgICAgICAgeTE6IGNvbnRlbnRBcmVhLnkxICsgY29udGVudEhlaWdodCAqIDAuNSxcclxuICAgICAgICAgICAgICAgICAgICB4MjogY29udGVudEFyZWEueDIsXHJcbiAgICAgICAgICAgICAgICAgICAgeTI6IGNvbnRlbnRBcmVhLnkyXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc3VwZXIuZ2V0RWxlbWVudEFyZWEodGhpcy5lbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9ncmFtbWF0aWNhbGx5IG9wZXJhdGUgd2l0aCBoZWFkZXIgcG9zaXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBvc2l0aW9uIC1cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyBwcmV2aW91cyBoZWFkZXIgcG9zaXRpb25cclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwb3NpdGlvbkhlYWRlcihwb3NpdGlvbjogU2lkZSk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9oZWFkZXIuc2lkZSAhPT0gcG9zaXRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5faGVhZGVyLnNldFNpZGUocG9zaXRpb24pO1xyXG4gICAgICAgICAgICB0aGlzLl9oZWFkZXJTaWRlQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBIZWFkZXJQb3NpdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICB1cGRhdGVOb2RlU2l6ZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgIT09ICdub25lJykge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3Jlc2l6ZScpO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRTdGF0ZUNoYW5nZWRFdmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGhpZ2hsaWdodEhlYWRlckRyb3Bab25lKHg6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHRhYkRyb3BQbGFjZWhvbGRlciA9IHRoaXMubGF5b3V0TWFuYWdlci50YWJEcm9wUGxhY2Vob2xkZXI7XHJcbiAgICAgICAgdGFiRHJvcFBsYWNlaG9sZGVyLnJlbW92ZSgpO1xyXG4gICAgICAgIGNvbnN0IHRhYnNDb250YWluZXJFbGVtZW50ID0gdGhpcy5faGVhZGVyLnRhYnNDb250YWluZXJFbGVtZW50O1xyXG4gICAgICAgIGNvbnN0IHRhYnNDb250YWluZXJFbGVtZW50Q2hpbGROb2RlcyA9IHRhYnNDb250YWluZXJFbGVtZW50LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgLy8gT25seSB3YWxrIG92ZXIgdGhlIHZpc2libGUgdGFic1xyXG4gICAgICAgIGNvbnN0IHZpc2libGVUYWJzTGVuZ3RoID0gdGFic0NvbnRhaW5lckVsZW1lbnRDaGlsZE5vZGVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICAvLyBDcmVhdGUgc2hhbGxvdyBjb3B5IG9mIGNoaWxkTm9kZXMgbGlzdCwgZXhjbHVkaW5nIERyb3BQbGFjZUhvbGRlciwgYXMgd2Ugd2lsbCBiZSBtb2RpZnlpbmcgdGhlIGNoaWxkTm9kZXMgbGlzdFxyXG4gICAgICAgIGNvbnN0IHZpc2libGVUYWJFbGVtZW50cyA9IG5ldyBBcnJheTxIVE1MRWxlbWVudD4odmlzaWJsZVRhYnNMZW5ndGgpO1xyXG4gICAgICAgIGxldCB0YWJJbmRleCA9IDA7XHJcbiAgICAgICAgbGV0IHRhYkNvdW50ID0gMDtcclxuICAgICAgICB3aGlsZSAodGFiQ291bnQgPCB2aXNpYmxlVGFic0xlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCB2aXNpYmxlVGFiRWxlbWVudCA9IHRhYnNDb250YWluZXJFbGVtZW50Q2hpbGROb2Rlc1t0YWJJbmRleCsrXSBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKHZpc2libGVUYWJFbGVtZW50ICE9PSB0aGlzLmxheW91dE1hbmFnZXIudGFiRHJvcFBsYWNlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgICAgICB2aXNpYmxlVGFiRWxlbWVudHNbdGFiQ291bnQrK10gPSB2aXNpYmxlVGFiRWxlbWVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKi9cclxuXHJcbiAgICAgICAgY29uc3QgZHJvcFRhcmdldEluZGljYXRvciA9IHRoaXMubGF5b3V0TWFuYWdlci5kcm9wVGFyZ2V0SW5kaWNhdG9yO1xyXG4gICAgICAgIGlmIChkcm9wVGFyZ2V0SW5kaWNhdG9yID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdTSEhEWkRUSTk3MTEwJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgYXJlYTogQXJlYUxpbmtlZFJlY3Q7XHJcblxyXG4gICAgICAgIC8vIEVtcHR5IHN0YWNrXHJcbiAgICAgICAgaWYgKHZpc2libGVUYWJzTGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlclJlY3QgPSB0aGlzLl9oZWFkZXIuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgY29uc3QgaGVhZGVyVG9wID0gaGVhZGVyUmVjdC50b3AgKyBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgY29uc3QgaGVhZGVyTGVmdCA9IGhlYWRlclJlY3QubGVmdCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdDtcclxuXHJcbiAgICAgICAgICAgIGFyZWEgPSB7XHJcbiAgICAgICAgICAgICAgICB4MTogaGVhZGVyTGVmdCxcclxuICAgICAgICAgICAgICAgIHgyOiBoZWFkZXJMZWZ0ICsgMTAwLFxyXG4gICAgICAgICAgICAgICAgeTE6IGhlYWRlclRvcCArIGhlYWRlclJlY3QuaGVpZ2h0IC0gMjAsXHJcbiAgICAgICAgICAgICAgICB5MjogaGVhZGVyVG9wICsgaGVhZGVyUmVjdC5oZWlnaHQsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9kcm9wSW5kZXggPSAwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCB0YWJJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgaW5kaWNhdGVzIHdoZXRoZXIgb3VyIGN1cnNvciBpcyBleGFjdGx5IG92ZXIgYSB0YWJcclxuICAgICAgICAgICAgbGV0IGlzQWJvdmVUYWIgPSBmYWxzZTtcclxuICAgICAgICAgICAgbGV0IHRhYlRvcDogbnVtYmVyO1xyXG4gICAgICAgICAgICBsZXQgdGFiTGVmdDogbnVtYmVyO1xyXG4gICAgICAgICAgICBsZXQgdGFiV2lkdGg6IG51bWJlcjtcclxuICAgICAgICAgICAgbGV0IHRhYkVsZW1lbnQ6IEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICBsZXQgYWZ0ZXJEcmFnID0gMDtcclxuICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgdGFiRWxlbWVudCA9IHRhYnNDb250YWluZXJFbGVtZW50Q2hpbGROb2Rlc1t0YWJJbmRleF0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAvL3RhYkVsZW1lbnQgPSB2aXNpYmxlVGFiRWxlbWVudHNbdGFiSW5kZXhdIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFiUmVjdCA9IHRhYkVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YWJSZWN0VG9wID0gdGFiUmVjdC50b3AgKyBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRhYlJlY3RMZWZ0ID0gdGFiUmVjdC5sZWZ0ICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9oZWFkZXIubGVmdFJpZ2h0U2lkZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJMZWZ0ID0gdGFiUmVjdFRvcDtcclxuICAgICAgICAgICAgICAgICAgICB0YWJUb3AgPSB0YWJSZWN0TGVmdDtcclxuICAgICAgICAgICAgICAgICAgICB0YWJXaWR0aCA9IHRhYlJlY3QuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0YWJMZWZ0ID0gdGFiUmVjdExlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiVG9wID0gdGFiUmVjdFRvcDtcclxuICAgICAgICAgICAgICAgICAgICB0YWJXaWR0aCA9IHRhYlJlY3Qud2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGFiRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5EcmFnZ2luZykpIHtcclxuICAgICAgICAgICAgICAgICAgICBhZnRlckRyYWcrKztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoeCA+PSB0YWJMZWZ0ICYmIHggPCB0YWJMZWZ0ICsgdGFiV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc0Fib3ZlVGFiID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXgrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSB3aGlsZSAodGFiSW5kZXggPCB2aXNpYmxlVGFic0xlbmd0aCAmJiAhaXNBYm92ZVRhYik7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB3ZSdyZSBub3QgYWJvdmUgYW55IHRhYnMsIG9yIHRvIHRoZSByaWdodCBvZiBhbnkgdGFiLCB3ZSBhcmUgb3V0IG9mIHRoZSBhcmVhLCBzbyBnaXZlIHVwXHJcbiAgICAgICAgICAgIGlmIChpc0Fib3ZlVGFiID09PSBmYWxzZSAmJiB4IDwgdGFiTGVmdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwcmVmZXJOZXh0ID0geCA+PSAodGFiTGVmdCArIHRhYldpZHRoIC8gMik7XHJcbiAgICAgICAgICAgIHRoaXMuX2Ryb3BJbmRleCA9IHRhYkluZGV4ICsgKHRhYkluZGV4IDwgdmlzaWJsZVRhYnNMZW5ndGggJiYgcHJlZmVyTmV4dCA/IDEgOiAwKSAtIGFmdGVyRHJhZztcclxuICAgICAgICAgICAgdGFiRWxlbWVudC5wYXJlbnROb2RlPy5pbnNlcnRCZWZvcmUodGFiRHJvcFBsYWNlaG9sZGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVmZXJOZXh0ID8gdGFiRWxlbWVudC5uZXh0U2libGluZyA6IHRhYkVsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdGFiRHJvcFBsYWNlaG9sZGVyUmVjdCA9IHRoaXMubGF5b3V0TWFuYWdlci50YWJEcm9wUGxhY2Vob2xkZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhYkRyb3BQbGFjZWhvbGRlclJlY3RUb3AgPSB0YWJEcm9wUGxhY2Vob2xkZXJSZWN0LnRvcCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICBjb25zdCB0YWJEcm9wUGxhY2Vob2xkZXJSZWN0TGVmdCA9IHRhYkRyb3BQbGFjZWhvbGRlclJlY3QubGVmdCArIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdDtcclxuICAgICAgICAgICAgY29uc3QgdGFiRHJvcFBsYWNlaG9sZGVyUmVjdFdpZHRoID0gdGFiRHJvcFBsYWNlaG9sZGVyUmVjdC53aWR0aDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9oZWFkZXIubGVmdFJpZ2h0U2lkZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlSG9sZGVyVG9wID0gdGFiRHJvcFBsYWNlaG9sZGVyUmVjdFRvcDtcclxuICAgICAgICAgICAgICAgIGFyZWEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDE6IHRhYlRvcCxcclxuICAgICAgICAgICAgICAgICAgICB4MjogdGFiVG9wICsgdGFiRWxlbWVudC5jbGllbnRIZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgeTE6IHBsYWNlSG9sZGVyVG9wLFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiBwbGFjZUhvbGRlclRvcCArIHRhYkRyb3BQbGFjZWhvbGRlclJlY3RXaWR0aCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZUhvbGRlckxlZnQgPSB0YWJEcm9wUGxhY2Vob2xkZXJSZWN0TGVmdDtcclxuXHJcbiAgICAgICAgICAgICAgICBhcmVhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHgxOiBwbGFjZUhvbGRlckxlZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgeDI6IHBsYWNlSG9sZGVyTGVmdCArIHRhYkRyb3BQbGFjZWhvbGRlclJlY3RXaWR0aCxcclxuICAgICAgICAgICAgICAgICAgICB5MTogdGFiVG9wLFxyXG4gICAgICAgICAgICAgICAgICAgIHkyOiB0YWJUb3AgKyB0YWJFbGVtZW50LmNsaWVudEhlaWdodCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRyb3BUYXJnZXRJbmRpY2F0b3IuaGlnaGxpZ2h0QXJlYShhcmVhLCAwKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZXNldEhlYWRlckRyb3Bab25lKCkge1xyXG4gICAgICAgIHRoaXMubGF5b3V0TWFuYWdlci50YWJEcm9wUGxhY2Vob2xkZXIucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBzZXR1cEhlYWRlclBvc2l0aW9uKCkge1xyXG4gICAgICAgIHNldEVsZW1lbnREaXNwbGF5VmlzaWJpbGl0eSh0aGlzLl9oZWFkZXIuZWxlbWVudCwgdGhpcy5faGVhZGVyLnNob3cpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKERvbUNvbnN0YW50cy5DbGFzc05hbWUuTGVmdCwgRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5SaWdodCwgRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5Cb3R0b20pO1xyXG4gICAgICAgIGlmICh0aGlzLl9oZWFkZXIubGVmdFJpZ2h0U2lkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2xtXycgKyB0aGlzLl9oZWFkZXIuc2lkZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2lmIChbU2lkZS5yaWdodCwgU2lkZS5ib3R0b21dLmluY2x1ZGVzKHRoaXMuX2hlYWRlci5zaWRlKSkge1xyXG4gICAgICAgIC8vICAgIC8vIG1vdmUgdGhlIGhlYWRlciBiZWhpbmQgdGhlIGNvbnRlbnQuXHJcbiAgICAgICAgLy8gICAgdGhpcy5lbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2hlYWRlci5lbGVtZW50KTtcclxuICAgICAgICAvL31cclxuICAgICAgICB0aGlzLnVwZGF0ZVNpemUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGhpZ2hsaWdodEJvZHlEcm9wWm9uZShzZWdtZW50OiBTdGFjay5TZWdtZW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRlbnRBcmVhRGltZW5zaW9ucyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ1NIQkRaQzgyMjY1Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaGlnaGxpZ2h0QXJlYSA9IHRoaXMuX2NvbnRlbnRBcmVhRGltZW5zaW9uc1tzZWdtZW50XS5oaWdobGlnaHRBcmVhO1xyXG4gICAgICAgICAgICBjb25zdCBkcm9wVGFyZ2V0SW5kaWNhdG9yID0gdGhpcy5sYXlvdXRNYW5hZ2VyLmRyb3BUYXJnZXRJbmRpY2F0b3I7XHJcbiAgICAgICAgICAgIGlmIChkcm9wVGFyZ2V0SW5kaWNhdG9yID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignU0hCRFpEOTYxMTAnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRyb3BUYXJnZXRJbmRpY2F0b3IuaGlnaGxpZ2h0QXJlYShoaWdobGlnaHRBcmVhLCAxKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3BTZWdtZW50ID0gc2VnbWVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVUYWJTaXplcygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5faGVhZGVyKVxyXG4gICAgICAgICAgICB0aGlzLl9oZWFkZXIudXBkYXRlVGFiU2l6ZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGhhbmRsZU1heGltaXNlZCgpIHtcclxuICAgICAgICB0aGlzLl9oZWFkZXIucHJvY2Vzc01heGltaXNlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlTWluaW1pc2VkKCkge1xyXG4gICAgICAgIHRoaXMuX2hlYWRlci5wcm9jZXNzTWluaW1pc2VkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVQb3BvdXRFdmVudCgpIHtcclxuICAgICAgICB0aGlzLnBvcG91dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgaGFuZGxlSGVhZGVyQ2xpY2tFdmVudChldjogTW91c2VFdmVudCkge1xyXG4gICAgICAgIC8vIEZvcmNlcyB1cGRhdGVzIGlmIGNsaWNrIGlzIHdoZW4gdG9wLWxldmVsIHdpbmRvdyBoYXMgbG9zdCBmb2N1cy5cclxuICAgICAgICBpZiAodGhpcy5fYWN0aXZlQ29tcG9uZW50SXRlbSlcclxuICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVDb21wb25lbnRJdGVtKHRoaXMuX2FjdGl2ZUNvbXBvbmVudEl0ZW0sIHRydWUpO1xyXG4gICAgICAgIGNvbnN0IGV2ZW50TmFtZSA9IEV2ZW50RW1pdHRlci5oZWFkZXJDbGlja0V2ZW50TmFtZTtcclxuICAgICAgICBjb25zdCBidWJibGluZ0V2ZW50ID0gbmV3IEV2ZW50RW1pdHRlci5DbGlja0J1YmJsaW5nRXZlbnQoZXZlbnROYW1lLCB0aGlzLCBldik7XHJcbiAgICAgICAgdGhpcy5lbWl0KGV2ZW50TmFtZSwgYnViYmxpbmdFdmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVIZWFkZXJUb3VjaFN0YXJ0RXZlbnQoZXY6IFRvdWNoRXZlbnQpIHtcclxuICAgICAgICBjb25zdCBldmVudE5hbWUgPSBFdmVudEVtaXR0ZXIuaGVhZGVyVG91Y2hTdGFydEV2ZW50TmFtZTtcclxuICAgICAgICBjb25zdCBidWJibGluZ0V2ZW50ID0gbmV3IEV2ZW50RW1pdHRlci5Ub3VjaFN0YXJ0QnViYmxpbmdFdmVudChldmVudE5hbWUsIHRoaXMsIGV2KTtcclxuICAgICAgICB0aGlzLmVtaXQoZXZlbnROYW1lLCBidWJibGluZ0V2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGhhbmRsZUhlYWRlckNvbXBvbmVudFJlbW92ZUV2ZW50KGl0ZW06IENvbXBvbmVudEl0ZW0pIHtcclxuICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKGl0ZW0sIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGhhbmRsZUhlYWRlckNvbXBvbmVudEZvY3VzRXZlbnQoaXRlbTogQ29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgIHRoaXMuc2V0QWN0aXZlQ29tcG9uZW50SXRlbShpdGVtLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGhhbmRsZUhlYWRlckNvbXBvbmVudFN0YXJ0RHJhZ0V2ZW50KHg6IG51bWJlciwgeTogbnVtYmVyLCBkcmFnTGlzdGVuZXI6IERyYWdMaXN0ZW5lciwgY29tcG9uZW50SXRlbTogQ29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzTWF4aW1pc2VkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlTWF4aW1pc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sYXlvdXRNYW5hZ2VyLnN0YXJ0Q29tcG9uZW50RHJhZ09sZCh4LCB5LCBkcmFnTGlzdGVuZXIsIGNvbXBvbmVudEl0ZW0sIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlSGVhZGVyQ29uZmlnKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5faGVhZGVyU2lkZUNoYW5nZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJlc29sdmVkSGVhZGVyZWRJdGVtQ29uZmlnLkhlYWRlci5jcmVhdGVDb3B5KHRoaXMuX2hlYWRlckNvbmZpZyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgc2hvdyA9IHRoaXMuX2hlYWRlci5zaG93ID8gdGhpcy5faGVhZGVyLnNpZGUgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBSZXNvbHZlZEhlYWRlcmVkSXRlbUNvbmZpZy5IZWFkZXIuY3JlYXRlQ29weSh0aGlzLl9oZWFkZXJDb25maWcsIHNob3cpO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93LFxyXG4gICAgICAgICAgICAgICAgICAgIHBvcG91dDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heGltaXNlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xvc2U6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICBtaW5pbWlzZTogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhYkRyb3Bkb3duOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgZW1pdFN0YXRlQ2hhbmdlZEV2ZW50KCkge1xyXG4gICAgICAgIHRoaXMuZW1pdEJhc2VCdWJibGluZ0V2ZW50KCdzdGF0ZUNoYW5nZWQnKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBTdGFjayB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBleHBvcnQgY29uc3QgZW51bSBTZWdtZW50IHtcclxuICAgICAgICBIZWFkZXIgPSAnaGVhZGVyJyxcclxuICAgICAgICBCb2R5ID0gJ2JvZHknLFxyXG4gICAgICAgIExlZnQgPSAnbGVmdCcsXHJcbiAgICAgICAgUmlnaHQgPSAncmlnaHQnLFxyXG4gICAgICAgIFRvcCA9ICd0b3AnLFxyXG4gICAgICAgIEJvdHRvbSA9ICdib3R0b20nLFxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29udGVudEFyZWFEaW1lbnNpb24ge1xyXG4gICAgICAgIGhvdmVyQXJlYTogQXJlYUxpbmtlZFJlY3Q7XHJcbiAgICAgICAgaGlnaGxpZ2h0QXJlYTogQXJlYUxpbmtlZFJlY3Q7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IHR5cGUgQ29udGVudEFyZWFEaW1lbnNpb25zID0ge1xyXG4gICAgICAgIFtzZWdtZW50OiBzdHJpbmddOiBDb250ZW50QXJlYURpbWVuc2lvbjtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50SXRlbUNvbmZpZywgSXRlbUNvbmZpZywgTGF5b3V0Q29uZmlnLCBSb3dPckNvbHVtbkl0ZW1Db25maWcsIFN0YWNrSXRlbUNvbmZpZyB9IGZyb20gJy4vY29uZmlnL2NvbmZpZyc7XHJcbmltcG9ydCB7XHJcbiAgICBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcsXHJcbiAgICBSZXNvbHZlZEl0ZW1Db25maWcsXHJcbiAgICBSZXNvbHZlZExheW91dENvbmZpZyxcclxuICAgIFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnLFxyXG4gICAgUmVzb2x2ZWRSb290SXRlbUNvbmZpZyxcclxuICAgIFJlc29sdmVkUm93T3JDb2x1bW5JdGVtQ29uZmlnLFxyXG4gICAgUmVzb2x2ZWRTdGFja0l0ZW1Db25maWdcclxufSBmcm9tIFwiLi9jb25maWcvcmVzb2x2ZWQtY29uZmlnXCI7XHJcbmltcG9ydCB7IENvbXBvbmVudENvbnRhaW5lciB9IGZyb20gJy4vY29udGFpbmVyL2NvbXBvbmVudC1jb250YWluZXInO1xyXG5pbXBvcnQgeyBCcm93c2VyUG9wb3V0IH0gZnJvbSAnLi9jb250cm9scy9icm93c2VyLXBvcG91dCc7XHJcbmltcG9ydCB7IERyYWdQcm94eSB9IGZyb20gJy4vY29udHJvbHMvZHJhZy1wcm94eSc7XHJcbmltcG9ydCB7IERyYWdTb3VyY2UgfSBmcm9tICcuL2NvbnRyb2xzL2RyYWctc291cmNlJztcclxuaW1wb3J0IHsgRHJvcFRhcmdldEluZGljYXRvciB9IGZyb20gJy4vY29udHJvbHMvZHJvcC10YXJnZXQtaW5kaWNhdG9yJztcclxuaW1wb3J0IHsgQ29uZmlndXJhdGlvbkVycm9yIH0gZnJvbSAnLi9lcnJvcnMvZXh0ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBBc3NlcnRFcnJvciwgVW5leHBlY3RlZE51bGxFcnJvciwgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yLCBVbnJlYWNoYWJsZUNhc2VFcnJvciB9IGZyb20gJy4vZXJyb3JzL2ludGVybmFsLWVycm9yJztcclxuaW1wb3J0IHsgQ29tcG9uZW50SXRlbSB9IGZyb20gJy4vaXRlbXMvY29tcG9uZW50LWl0ZW0nO1xyXG5pbXBvcnQgeyBDb21wb25lbnRQYXJlbnRhYmxlSXRlbSB9IGZyb20gJy4vaXRlbXMvY29tcG9uZW50LXBhcmVudGFibGUtaXRlbSc7XHJcbmltcG9ydCB7IENvbnRlbnRJdGVtIH0gZnJvbSAnLi9pdGVtcy9jb250ZW50LWl0ZW0nO1xyXG5pbXBvcnQgeyBHcm91bmRJdGVtIH0gZnJvbSAnLi9pdGVtcy9ncm91bmQtaXRlbSc7XHJcbmltcG9ydCB7IFJvd09yQ29sdW1uIH0gZnJvbSAnLi9pdGVtcy9yb3ctb3ItY29sdW1uJztcclxuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICcuL2l0ZW1zL3N0YWNrJztcclxuaW1wb3J0IHsgQ29uZmlnTWluaWZpZXIgfSBmcm9tICcuL3V0aWxzL2NvbmZpZy1taW5pZmllcic7XHJcbmltcG9ydCB7IERvbUNvbnN0YW50cyB9IGZyb20gJy4vdXRpbHMvZG9tLWNvbnN0YW50cyc7XHJcbmltcG9ydCB7IERyYWdMaXN0ZW5lciB9IGZyb20gJy4vdXRpbHMvZHJhZy1saXN0ZW5lcic7XHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJy4vdXRpbHMvZXZlbnQtZW1pdHRlcic7XHJcbmltcG9ydCB7IEV2ZW50SHViIH0gZnJvbSAnLi91dGlscy9ldmVudC1odWInO1xyXG5pbXBvcnQgeyBJMThuU3RyaW5nSWQsIEkxOG5TdHJpbmdzLCBpMThuU3RyaW5ncyB9IGZyb20gJy4vdXRpbHMvaTE4bi1zdHJpbmdzJztcclxuaW1wb3J0IHsgSXRlbVR5cGUsIEpzb25WYWx1ZSwgUmVjdCwgUmVzcG9uc2l2ZU1vZGUsIFdpZHRoQW5kSGVpZ2h0IH0gZnJvbSAnLi91dGlscy90eXBlcyc7XHJcbmltcG9ydCB7XHJcbiAgICBlbmFibGVJRnJhbWVQb2ludGVyRXZlbnRzLFxyXG4gICAgZ2V0RWxlbWVudFdpZHRoQW5kSGVpZ2h0LFxyXG4gICAgcmVtb3ZlRnJvbUFycmF5LFxyXG4gICAgc2V0RWxlbWVudEhlaWdodCxcclxuICAgIHNldEVsZW1lbnRXaWR0aFxyXG59IGZyb20gJy4vdXRpbHMvdXRpbHMnO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICBfX2dsSW5zdGFuY2U6IExheW91dE1hbmFnZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmVudW0gRHJhZ1N0YXRlIHtcclxuICAgIE5vdERyYWdnaW5nID0gMCxcclxuICAgIERyb3BwZWRJblRoaXNXaW5kb3cgPSAxLFxyXG4gICAgRHJvcHBlZEVsc2V3aGVyZSA9IDIsXHJcbiAgICBDdXJyZW50bHlEcmFnZ2luZyA9IDMsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgbWFpbiBjbGFzcyB0aGF0IHdpbGwgYmUgZXhwb3NlZCBhcyBHb2xkZW5MYXlvdXQuXHJcbiAqL1xyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIExheW91dE1hbmFnZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xyXG4gICAgLyoqIFdoZXRoZXIgdGhlIGxheW91dCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgYmUgcmVzaXplZCB0byBjb250YWluZXIgd2hlbmV2ZXIgdGhlIGNvbnRhaW5lcidzIHNpemUgaXMgY2hhbmdlZFxyXG4gICAgICogRGVmYXVsdCBpcyB0cnVlIGlmIDxib2R5PiBpcyB0aGUgY29udGFpbmVyIG90aGVyd2lzZSBmYWxzZVxyXG4gICAgICogRGVmYXVsdCB3aWxsIGJlIGNoYW5nZWQgdG8gdHJ1ZSBmb3IgYW55IGNvbnRhaW5lciBpbiB0aGUgZnV0dXJlXHJcbiAgICAgKi9cclxuICAgIHJlc2l6ZVdpdGhDb250YWluZXJBdXRvbWF0aWNhbGx5ID0gZmFsc2U7XHJcbiAgICAvKiogVGhlIGRlYm91bmNlIGludGVydmFsIChpbiBtaWxsaXNlY29uZHMpIHVzZWQgd2hlbmV2ZXIgYSBsYXlvdXQgaXMgYXV0b21hdGljYWxseSByZXNpemVkLiAgMCBtZWFucyBuZXh0IHRpY2sgKi9cclxuICAgIHJlc2l6ZURlYm91bmNlSW50ZXJ2YWwgPSAxMDA7XHJcbiAgICAvKiogRXh0ZW5kIHRoZSBjdXJyZW50IGRlYm91bmNlIGRlbGF5IHRpbWUgcGVyaW9kIGlmIGl0IGlzIHRyaWdnZXJlZCBkdXJpbmcgdGhlIGRlbGF5LlxyXG4gICAgICogSWYgdGhpcyBpcyB0cnVlLCB0aGUgbGF5b3V0IHdpbGwgb25seSByZXNpemUgd2hlbiBpdHMgY29udGFpbmVyIGhhcyBzdG9wcGVkIGJlaW5nIHJlc2l6ZWQuXHJcbiAgICAgKiBJZiBpdCBpcyBmYWxzZSwgdGhlIGxheW91dCB3aWxsIHJlc2l6ZSBhdCBpbnRlcnZhbHMgd2hpbGUgaXRzIGNvbnRhaW5lciBpcyBiZWluZyByZXNpemVkLlxyXG4gICAgICovXHJcbiAgICByZXNpemVEZWJvdW5jZUV4dGVuZGVkV2hlblBvc3NpYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9jb250YWluZXJFbGVtZW50OiBIVE1MRWxlbWVudDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2NvbnRhaW5lclBvc2l0aW9uOiBOb2RlIHwgbnVsbDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2lzSW5pdGlhbGlzZWQgPSBmYWxzZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2dyb3VuZEl0ZW06IEdyb3VuZEl0ZW0gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9vcGVuUG9wb3V0czogQnJvd3NlclBvcG91dFtdID0gW107XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9kcm9wVGFyZ2V0SW5kaWNhdG9yOiBEcm9wVGFyZ2V0SW5kaWNhdG9yIHwgbnVsbCA9IG51bGw7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9yZXNpemVUaW1lb3V0SWQ6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+IHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfaXRlbUFyZWFzOiBDb250ZW50SXRlbS5BcmVhW10gfCBudWxsID0gbnVsbDtcclxuICAgIHByaXZhdGUgX2RyYWdTdGF0ZTogRHJhZ1N0YXRlID0gRHJhZ1N0YXRlLk5vdERyYWdnaW5nO1xyXG4gICAgcHJpdmF0ZSBfbGFzdERyYWdMZWF2ZVRpbWUgPSAwO1xyXG4gICAgcHJpdmF0ZSBfZHJhZ2dlZENvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0gfCB1bmRlZmluZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9kcmFnRW50ZXJDb3VudCA9IDA7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9tYXhpbWlzZWRTdGFjazogU3RhY2sgfCB1bmRlZmluZWQ7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9tYXhpbWlzZVBsYWNlaG9sZGVyID0gTGF5b3V0TWFuYWdlci5jcmVhdGVNYXhpbWlzZVBsYWNlRWxlbWVudChkb2N1bWVudCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF90YWJEcm9wUGxhY2Vob2xkZXIgPSBMYXlvdXRNYW5hZ2VyLmNyZWF0ZVRhYkRyb3BQbGFjZWhvbGRlckVsZW1lbnQoZG9jdW1lbnQpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfZHJhZ1NvdXJjZXM6IERyYWdTb3VyY2VbXSA9IFtdO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfdXBkYXRpbmdDb2x1bW5zUmVzcG9uc2l2ZSA9IGZhbHNlO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfZmlyc3RMb2FkID0gdHJ1ZTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2V2ZW50SHViID0gbmV3IEV2ZW50SHViKHRoaXMpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfd2lkdGg6IG51bWJlciB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXIgfCBudWxsID0gbnVsbDtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX2ZvY3VzZWRDb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtIHwgdW5kZWZpbmVkO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfdmlydHVhbFNpemVkQ29udGFpbmVyczogQ29tcG9uZW50Q29udGFpbmVyW10gPSBbXTtcclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgX3ZpcnR1YWxTaXplZENvbnRhaW5lckFkZGluZ0JlZ2luQ291bnQgPSAwO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJvdGVjdGVkIF9jb25zdHJ1Y3Rvck9yU3ViV2luZG93TGF5b3V0Q29uZmlnOiBMYXlvdXRDb25maWcgfCB1bmRlZmluZWQ7IC8vIHByb3RlY3RlZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9yZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoKSA9PiB0aGlzLmhhbmRsZUNvbnRhaW5lclJlc2l6ZSgpKTtcclxuICAgIC8qKiBAaW50ZXJuYWwgQGRlcHJlY2F0ZWQgdG8gYmUgcmVtb3ZlZCBpbiB2ZXJzaW9uIDMgKi9cclxuICAgIHByaXZhdGUgX3dpbmRvd0JlZm9yZVVubG9hZExpc3RlbmVyID0gKCkgPT4gdGhpcy5vbkJlZm9yZVVubG9hZCgpO1xyXG4gICAgLyoqIEBpbnRlcm5hbCBAZGVwcmVjYXRlZCB0byBiZSByZW1vdmVkIGluIHZlcnNpb24gMyAqL1xyXG4gICAgcHJpdmF0ZSBfd2luZG93QmVmb3JlVW5sb2FkTGlzdGVuaW5nID0gZmFsc2U7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9tYXhpbWlzZWRTdGFja0JlZm9yZURlc3Ryb3llZExpc3RlbmVyID0gKGV2OiBFdmVudEVtaXR0ZXIuQnViYmxpbmdFdmVudCkgPT4gdGhpcy5jbGVhbnVwQmVmb3JlTWF4aW1pc2VkU3RhY2tEZXN0cm95ZWQoZXYpO1xyXG4gICAgcHJpdmF0ZSBfYXJlYTogQ29udGVudEl0ZW0uQXJlYSB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfbGFzdFZhbGlkQXJlYTogQ29udGVudEl0ZW0uQXJlYSB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfYWN0aW9uc09uRHJhZ0VuZDogKChjYW5jZWw6IGJvb2xlYW4pPT52b2lkKVtdID0gW107XHJcblxyXG4gICAgcG9wb3V0Q2xpY2tIYW5kbGVyOiAoaXRlbTogU3RhY2ssIGV2OiBFdmVudCk9PmJvb2xlYW4gPSAoKSA9PiBmYWxzZTtcclxuICAgIHByaXZhdGUgX3JlbW92ZUl0ZW06ICgoKT0+dm9pZCkgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XHJcbiAgICAvLyBNYXkgYmUgc2V0IGJ5IGNsaWVudCBjb2RlLlxyXG4gICAgaW5Tb21lV2luZG93ID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGRlbGF5ZWREcmFnRW5kVGltZXI6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+IHwgdW5kZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSBkZWxheWVkRHJhZ0VuZEZ1bmN0aW9uOiAoKCk9PnZvaWQpIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gICAgY3JlYXRlRHJhZ1Byb3h5OiAoKGl0ZW06IENvbXBvbmVudEl0ZW0sIHg6IG51bWJlciwgeTogbnVtYmVyKT0+dm9pZCl8dW5kZWZpbmVkO1xyXG5cclxuICAgIHJlYWRvbmx5IGlzU3ViV2luZG93OiBib29sZWFuO1xyXG4gICAgbGF5b3V0Q29uZmlnOiBSZXNvbHZlZExheW91dENvbmZpZztcclxuXHJcbiAgICAvKiogUmV0dXJuIHdpZHRoIGFuZCBoZWlnaHQgYXZhaWxhYmxlIGZvciByb290IGVsZW1lbnQuXHJcbiAgICAgKiBCeSBkZWZhdWx0IHNpemUgb2YgY29udGFpbmVyRWxlbWVudCAtIHdoaWNoIGlzIHVzdWFsbHkgZG9jdW1lbnQucm9vdC5cclxuICAgICAqIFNob3VsZCBiZSBvdmVycmlkZGVuIGlmIG5vdCAxMDAlIG9mIGNvbnRhaW5lckVsZW1lbnQuICovXHJcbiAgICBjb250YWluZXJXaWR0aEFuZEhlaWdodDogKCkgPT4gV2lkdGhBbmRIZWlnaHQ7XHJcbiAgICBiZWZvcmVWaXJ0dWFsUmVjdGluZ0V2ZW50OiBMYXlvdXRNYW5hZ2VyLkJlZm9yZVZpcnR1YWxSZWN0aW5nRXZlbnQgfCB1bmRlZmluZWQ7XHJcbiAgICBhZnRlclZpcnR1YWxSZWN0aW5nRXZlbnQ6IExheW91dE1hbmFnZXIuQWZ0ZXJWaXJ0dWFsUmVjdGluZ0V2ZW50IHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIGNyZWF0ZUNvbXBvbmVudEVsZW1lbnQ6IChjb25maWc6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZywgY29tcG9uZW50OiBDb21wb25lbnRDb250YWluZXIpPT5IVE1MRWxlbWVudHx1bmRlZmluZWRcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgICAgICA9IChjb25maWcsIGNvbXBvbmVudCkgPT4ge1xyXG4gICAgICAgIGxldCBwYXJlbnQgPSB0aGlzLmdyb3VuZEl0ZW0/LmVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keTtcclxuICAgICAgICBjb25zdCBjb250ZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGxldCBjb21wb25lbnRFbGVtZW50ID0gY29udGVudEVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKHRoaXMubGF5b3V0Q29uZmlnLnNldHRpbmdzLmNvcHlGb3JEcmFnSW1hZ2VcclxuICAgICAgICAgICAgPz8gdGhpcy5sYXlvdXRDb25maWcuc2V0dGluZ3MudXNlRHJhZ0FuZERyb3ApIHtcclxuICAgICAgICAgICAgY29tcG9uZW50RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY29tcG9uZW50RWxlbWVudCk7XHJcbiAgICAgICAgICAgIHBhcmVudCA9IGNvbXBvbmVudEVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChjb250ZW50RWxlbWVudCk7XHJcbiAgICAgICAgY29udGVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkNvbnRlbnQpO1xyXG4gICAgICAgIHJldHVybiBjb21wb25lbnRFbGVtZW50O1xyXG4gICAgfTtcclxuXHJcbiAgICBlbnRlck9yTGVhdmVTb21lV2luZG93KGVudGVyaW5nOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pblNvbWVXaW5kb3cgPSBlbnRlcmluZztcclxuICAgICAgICBpZiAoISBlbnRlcmluZykge1xyXG4gICAgICAgICAgICB0aGlzLl9sYXN0RHJhZ0xlYXZlVGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGNvbnRhaW5lcigpOiBIVE1MRWxlbWVudCB7IHJldHVybiB0aGlzLl9jb250YWluZXJFbGVtZW50OyB9XHJcbiAgICBnZXQgaXNJbml0aWFsaXNlZCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX2lzSW5pdGlhbGlzZWQ7IH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGdldCBncm91bmRJdGVtKCk6IEdyb3VuZEl0ZW0gfCB1bmRlZmluZWQgeyByZXR1cm4gdGhpcy5fZ3JvdW5kSXRlbTsgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChMYXlvdXRNYW5hZ2VyOmNsYXNzKS5ncm91bmRJdGVtfSBpbnN0ZWFkICovXHJcbiAgICBnZXQgcm9vdCgpOiBHcm91bmRJdGVtIHwgdW5kZWZpbmVkIHsgcmV0dXJuIHRoaXMuX2dyb3VuZEl0ZW07IH1cclxuICAgIGdldCBvcGVuUG9wb3V0cygpOiBCcm93c2VyUG9wb3V0W10geyByZXR1cm4gdGhpcy5fb3BlblBvcG91dHM7IH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGdldCBkcm9wVGFyZ2V0SW5kaWNhdG9yKCk6IERyb3BUYXJnZXRJbmRpY2F0b3IgfCBudWxsIHsgcmV0dXJuIHRoaXMuX2Ryb3BUYXJnZXRJbmRpY2F0b3I7IH1cclxuICAgIGdldCB3aWR0aCgpOiBudW1iZXIgfCBudWxsIHsgcmV0dXJuIHRoaXMuX3dpZHRoOyB9XHJcbiAgICBnZXQgaGVpZ2h0KCk6IG51bWJlciB8IG51bGwgeyByZXR1cm4gdGhpcy5faGVpZ2h0OyB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHJpZXZlcyB0aGUge0BsaW5rIChFdmVudEh1YjpjbGFzcyl9IGluc3RhbmNlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGxheW91dCBtYW5hZ2VyLlxyXG4gICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBwcm9wYWdhdGUgZXZlbnRzIGJldHdlZW4gdGhlIHdpbmRvd3NcclxuICAgICAqIEBwdWJsaWNcclxuICAgICAqL1xyXG4gICAgZ2V0IGV2ZW50SHViKCk6IEV2ZW50SHViIHsgcmV0dXJuIHRoaXMuX2V2ZW50SHViOyB9XHJcbiAgICBnZXQgcm9vdEl0ZW0oKTogQ29udGVudEl0ZW0gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYWNjZXNzIHJvb3RJdGVtIGJlZm9yZSBpbml0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgZ3JvdW5kQ29udGVudEl0ZW1zID0gdGhpcy5fZ3JvdW5kSXRlbS5jb250ZW50SXRlbXM7XHJcbiAgICAgICAgICAgIGlmIChncm91bmRDb250ZW50SXRlbXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VuZEl0ZW0uY29udGVudEl0ZW1zWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGZvY3VzZWRDb21wb25lbnRJdGVtKCk6IENvbXBvbmVudEl0ZW0gfCB1bmRlZmluZWQgeyByZXR1cm4gdGhpcy5fZm9jdXNlZENvbXBvbmVudEl0ZW07IH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGdldCB0YWJEcm9wUGxhY2Vob2xkZXIoKTogSFRNTEVsZW1lbnQgeyByZXR1cm4gdGhpcy5fdGFiRHJvcFBsYWNlaG9sZGVyOyB9XHJcbiAgICBnZXQgbWF4aW1pc2VkU3RhY2soKTogU3RhY2sgfCB1bmRlZmluZWQgeyByZXR1cm4gdGhpcy5fbWF4aW1pc2VkU3RhY2s7IH1cclxuXHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgaW5kaWNhdGVzIGRlcHJlY2F0ZWQgY29uc3RydWN0b3IgdXNlICovXHJcbiAgICBnZXQgZGVwcmVjYXRlZENvbnN0cnVjdG9yKCk6IGJvb2xlYW4geyByZXR1cm4gIXRoaXMuaXNTdWJXaW5kb3cgJiYgdGhpcy5fY29uc3RydWN0b3JPclN1YldpbmRvd0xheW91dENvbmZpZyAhPT0gdW5kZWZpbmVkOyB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBAcGFyYW0gY29udGFpbmVyIC0gQSBEb20gSFRNTCBlbGVtZW50LiBEZWZhdWx0cyB0byBib2R5XHJcbiAgICAqIEBpbnRlcm5hbFxyXG4gICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnM6IExheW91dE1hbmFnZXIuQ29uc3RydWN0b3JQYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy5pc1N1YldpbmRvdyA9IHBhcmFtZXRlcnMuaXNTdWJXaW5kb3c7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbnN0cnVjdG9yT3JTdWJXaW5kb3dMYXlvdXRDb25maWcgPSBwYXJhbWV0ZXJzLmNvbnN0cnVjdG9yT3JTdWJXaW5kb3dMYXlvdXRDb25maWc7XHJcblxyXG4gICAgICAgIEkxOG5TdHJpbmdzLmNoZWNrSW5pdGlhbGlzZSgpO1xyXG4gICAgICAgIENvbmZpZ01pbmlmaWVyLmNoZWNrSW5pdGlhbGlzZSgpO1xyXG5cclxuICAgICAgICBpZiAocGFyYW1ldGVycy5jb250YWluZXJFbGVtZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyRWxlbWVudCA9IHBhcmFtZXRlcnMuY29udGFpbmVyRWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMuY29udGFpbmVyUG9zaXRpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXJQb3NpdGlvbiA9IHBhcmFtZXRlcnMuY29udGFpbmVyUG9zaXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyV2lkdGhBbmRIZWlnaHQgPSAoKSA9PiBnZXRFbGVtZW50V2lkdGhBbmRIZWlnaHQodGhpcy5fY29udGFpbmVyRWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0cm95cyB0aGUgTGF5b3V0TWFuYWdlciBpbnN0YW5jZSBpdHNlbGYgYXMgd2VsbCBhcyBldmVyeSBDb250ZW50SXRlbVxyXG4gICAgICogd2l0aGluIGl0LiBBZnRlciB0aGlzIGlzIGNhbGxlZCBub3RoaW5nIHNob3VsZCBiZSBsZWZ0IG9mIHRoZSBMYXlvdXRNYW5hZ2VyLlxyXG4gICAgICpcclxuICAgICAqIFRoaXMgZnVuY3Rpb24gb25seSBuZWVkcyB0byBiZSBjYWxsZWQgaWYgYW4gYXBwbGljYXRpb24gd2lzaGVzIHRvIGRlc3Ryb3kgdGhlIEdvbGRlbiBMYXlvdXQgb2JqZWN0IHdoaWxlXHJcbiAgICAgKiBhIHBhZ2UgcmVtYWlucyBsb2FkZWQuIFdoZW4gYSBwYWdlIGlzIHVubG9hZGVkLCBhbGwgcmVzb3VyY2VzIGNsYWltZWQgYnkgR29sZGVuIExheW91dCB3aWxsIGF1dG9tYXRpY2FsbHlcclxuICAgICAqIGJlIHJlbGVhc2VkLlxyXG4gICAgICovXHJcbiAgICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0luaXRpYWxpc2VkKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl93aW5kb3dCZWZvcmVVbmxvYWRMaXN0ZW5pbmcpIHtcclxuICAgICAgICAgICAgICAgIGdsb2JhbFRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdGhpcy5fd2luZG93QmVmb3JlVW5sb2FkTGlzdGVuZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2luZG93QmVmb3JlVW5sb2FkTGlzdGVuaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxheW91dENvbmZpZy5zZXR0aW5ncy5jbG9zZVBvcG91dHNPblVubG9hZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUFsbE9wZW5Qb3BvdXRzKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0NsZWFyUmVzaXplVGltZW91dCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZ3JvdW5kSXRlbS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fdGFiRHJvcFBsYWNlaG9sZGVyLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZHJvcFRhcmdldEluZGljYXRvciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHJvcFRhcmdldEluZGljYXRvci5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZXZlbnRIdWIuZGVzdHJveSgpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBkcmFnU291cmNlIG9mIHRoaXMuX2RyYWdTb3VyY2VzKSB7XHJcbiAgICAgICAgICAgICAgICBkcmFnU291cmNlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9kcmFnU291cmNlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5faXNJbml0aWFsaXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRha2VzIGEgR29sZGVuTGF5b3V0IGNvbmZpZ3VyYXRpb24gb2JqZWN0IGFuZFxyXG4gICAgICogcmVwbGFjZXMgaXRzIGtleXMgYW5kIHZhbHVlcyByZWN1cnNpdmVseSB3aXRoXHJcbiAgICAgKiBvbmUgbGV0dGVyIGNvZGVzXHJcbiAgICAgKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIChSZXNvbHZlZExheW91dENvbmZpZzpuYW1lc3BhY2UpLm1pbmlmeUNvbmZpZ30gaW5zdGVhZFxyXG4gICAgICovXHJcbiAgICBtaW5pZnlDb25maWcoY29uZmlnOiBSZXNvbHZlZExheW91dENvbmZpZyk6IFJlc29sdmVkTGF5b3V0Q29uZmlnIHtcclxuICAgICAgICByZXR1cm4gUmVzb2x2ZWRMYXlvdXRDb25maWcubWluaWZ5Q29uZmlnKGNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgdXNlTmF0aXZlRHJhZ0FuZERyb3AoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLmxheW91dENvbmZpZy5zZXR0aW5ncy51c2VEcmFnQW5kRHJvcDsgfVxyXG5cclxuICAgIGN1cnJlbnRseURyYWdnaW5nKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fZHJhZ1N0YXRlID09IERyYWdTdGF0ZS5DdXJyZW50bHlEcmFnZ2luZzsgfVxyXG5cclxuICAgIGRyYWdEYXRhTWltZXR5cGUoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMubGF5b3V0Q29uZmlnLnNldHRpbmdzLmRyYWdEYXRhTWltZXR5cGU7IH1cclxuXHJcbiAgICB2YWxpZERyYWdFdmVudChlOiBEcmFnRXZlbnQpOiBib29sZWFuIHtcclxuICAgICAgICAvLyBGSVhNRS4gTWlnaHQgYmUgYSBnb29kIGlkZWEgdG8gY2hlY2sgdGhhdCBhbGwgY29tcG9uZW50VHlwZXMgaW4gdGhlXHJcbiAgICAgICAgLy8gZGF0YVRyYW5zZmVyIHZhbHVlIGFyZSByZWdpc3RlcmVkIHR5cGVzLlxyXG4gICAgICAgIC8vIFRoYXQgc2hvdWxkIG1ha2UgaXQgbW9yZSByb2J1c3QgZXZlbiBpZiBkcmFnRGF0YU1pbWV0eXBlIGlzIHRoZSBkZWZhdWx0LlxyXG4gICAgICAgIHJldHVybiBlLmRhdGFUcmFuc2Zlcj8udHlwZXMuaW5jbHVkZXModGhpcy5kcmFnRGF0YU1pbWV0eXBlKCkpIHx8IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGFrZXMgYSBjb25maWd1cmF0aW9uIE9iamVjdCB0aGF0IHdhcyBwcmV2aW91c2x5IG1pbmlmaWVkXHJcbiAgICAgKiB1c2luZyBtaW5pZnlDb25maWcgYW5kIHJldHVybnMgaXRzIG9yaWdpbmFsIHZlcnNpb25cclxuICAgICAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgKFJlc29sdmVkTGF5b3V0Q29uZmlnOm5hbWVzcGFjZSkudW5taW5pZnlDb25maWd9IGluc3RlYWRcclxuICAgICAqL1xyXG4gICAgdW5taW5pZnlDb25maWcoY29uZmlnOiBSZXNvbHZlZExheW91dENvbmZpZyk6IFJlc29sdmVkTGF5b3V0Q29uZmlnIHtcclxuICAgICAgICByZXR1cm4gUmVzb2x2ZWRMYXlvdXRDb25maWcudW5taW5pZnlDb25maWcoY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBhYnN0cmFjdCBiaW5kQ29tcG9uZW50KGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCBpdGVtQ29uZmlnOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcpOiBDb21wb25lbnRDb250YWluZXIuSGFuZGxlO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgYWJzdHJhY3QgdW5iaW5kQ29tcG9uZW50KGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCBoYW5kbGU6IENvbXBvbmVudENvbnRhaW5lci5IYW5kbGUpOiB2b2lkO1xyXG5cclxuICAgIF9oaWRlVGFyZ2V0SW5kaWNhdG9yKCkgOiB2b2lkIHsgLy8gRklYTUUgcmVuYW1lPyBoaWRlVGFyZ2V0SW5kaWNhdG9yXHJcbiAgICAgICAgY29uc3QgZHJvcFRhcmdldEluZGljYXRvciA9IHRoaXMuZHJvcFRhcmdldEluZGljYXRvcjtcclxuICAgICAgICBpZiAoZHJvcFRhcmdldEluZGljYXRvciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignRFBPRDMwMDExJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZHJvcFRhcmdldEluZGljYXRvci5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBmcm9tIEdvbGRlbkxheW91dCBjbGFzcy4gRmluaXNoZXMgb2YgaW5pdFxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIGluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRDb250YWluZXIoKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVNpemVGcm9tQ29udGFpbmVyKCk7XHJcblxyXG4gICAgICAgIGxldCBzdWJXaW5kb3dSb290Q29uZmlnOiBDb21wb25lbnRJdGVtQ29uZmlnIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICh0aGlzLmlzU3ViV2luZG93KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb25zdHJ1Y3Rvck9yU3ViV2luZG93TGF5b3V0Q29uZmlnID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIFN1YldpbmRvdyBMYXlvdXRDb25maWcgc2hvdWxkIGhhdmUgYmVlbiBnZW5lcmF0ZWQgYnkgY29uc3RydWN0b3JcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0xNSVUwNzE1NScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm9vdCA9IHRoaXMuX2NvbnN0cnVjdG9yT3JTdWJXaW5kb3dMYXlvdXRDb25maWcucm9vdDtcclxuICAgICAgICAgICAgICAgIGlmIChyb290ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBTdWJXaW5kb3cgTGF5b3V0Q29uZmlnIG11c3Qgbm90IGJlIGVtcHR5XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdMTUlDMDcxNTYnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEl0ZW1Db25maWcuaXNDb21wb25lbnQocm9vdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViV2luZG93Um9vdENvbmZpZyA9IHJvb3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3ViV2luZG93IExheW91dENvbmZpZyBtdXN0IGhhdmUgQ29tcG9uZW50IGFzIFJvb3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdMTUlDMDcxNTcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZExheW91dENvbmZpZyA9IExheW91dENvbmZpZy5yZXNvbHZlKHRoaXMuX2NvbnN0cnVjdG9yT3JTdWJXaW5kb3dMYXlvdXRDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHJvb3QgZnJvbSBsYXlvdXRDb25maWdcclxuICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0Q29uZmlnID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnJlc29sdmVkTGF5b3V0Q29uZmlnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJvb3Q6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb25zdHJ1Y3Rvck9yU3ViV2luZG93TGF5b3V0Q29uZmlnID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0Q29uZmlnID0gUmVzb2x2ZWRMYXlvdXRDb25maWcuY3JlYXRlRGVmYXVsdCgpOyAvLyB3aWxsIG92ZXJ3cml0dGVuIGJlIGxvYWRlZCB2aWEgbG9hZExheW91dFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcclxuICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0Q29uZmlnID0gTGF5b3V0Q29uZmlnLnJlc29sdmUodGhpcy5fY29uc3RydWN0b3JPclN1YldpbmRvd0xheW91dENvbmZpZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbGF5b3V0Q29uZmlnID0gdGhpcy5sYXlvdXRDb25maWc7XHJcbiAgICAgICAgdGhpcy5fZ3JvdW5kSXRlbSA9IG5ldyBHcm91bmRJdGVtKHRoaXMsIGxheW91dENvbmZpZy5yb290LCB0aGlzLl9jb250YWluZXJFbGVtZW50LCB0aGlzLl9jb250YWluZXJQb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5fZ3JvdW5kSXRlbS5pbml0KCk7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2dyb3VuZEl0ZW0uZWxlbWVudDtcclxuICAgICAgICB0aGlzLl9kcm9wVGFyZ2V0SW5kaWNhdG9yID0gbmV3IERyb3BUYXJnZXRJbmRpY2F0b3IoZWxlbWVudCwgZWxlbWVudC5maXJzdENoaWxkKTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGVja0xvYWRlZExheW91dE1heGltaXNlSXRlbSgpO1xyXG5cclxuICAgICAgICB0aGlzLl9yZXNpemVPYnNlcnZlci5vYnNlcnZlKHRoaXMuX2NvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuX2lzSW5pdGlhbGlzZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYWRqdXN0Q29sdW1uc1Jlc3BvbnNpdmUoKTtcclxuICAgICAgICB0aGlzLmVtaXQoJ2luaXRpYWxpc2VkJyk7XHJcblxyXG4gICAgICAgIGlmIChzdWJXaW5kb3dSb290Q29uZmlnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8gbXVzdCBiZSBTdWJXaW5kb3dcclxuICAgICAgICAgICAgdGhpcy5sb2FkQ29tcG9uZW50QXNSb290KHN1YldpbmRvd1Jvb3RDb25maWcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZWxtID0gZG9jdW1lbnQuYm9keTsgLy90aGlzLl9ncm91bmRJdGVtLmVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKHRoaXMudXNlTmF0aXZlRHJhZ0FuZERyb3AoKSkge1xyXG4gICAgICAgICAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCAoZSkgPT4gdGhpcy5vbkRyYWdPdmVyKGUpLCB0cnVlKTtcclxuICAgICAgICAgICAgZWxtLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbnRlcicsIChlKSA9PiB0aGlzLm9uRHJhZ0VudGVyKGUpLCB0cnVlKTtcclxuICAgICAgICAgICAgZWxtLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIChlKSA9PiB0aGlzLm9uRHJhZ0xlYXZlKGUpLCB0cnVlKTtcclxuICAgICAgICAgICAgZWxtLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbmQnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IGUuc2NyZWVuWCwgeSA9IGUuc2NyZWVuWTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kcmFnU3RhdGUgPT09IERyYWdTdGF0ZS5DdXJyZW50bHlEcmFnZ2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsYXllZERyYWdFbmRGdW5jdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVsYXllZERyYWdFbmRUaW1lcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmRlbGF5ZWREcmFnRW5kVGltZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGF5ZWREcmFnRW5kVGltZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsYXllZERyYWdFbmRGdW5jdGlvbiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkRyYWdFbmQoeCwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGF5ZWREcmFnRW5kVGltZXIgPSBnbG9iYWxUaGlzLnNldFRpbWVvdXQodGhpcy5kZWxheWVkRHJhZ0VuZEZ1bmN0aW9uLCAxMDApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkRyYWdFbmQoeCwgeSwgZSk7XHJcbiAgICAgICAgICAgIH0sIHRydWUpO1xyXG4gICAgICAgICAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIChlKSA9PiB7Y29uc29sZS5sb2coXCJkcm9wIGV2ZW50XCIpOyB0aGlzLm9uRHJvcChlKTt9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgdGFyZ2V0IHBvc2l0aW9uLCBoaWdobGlnaHRpbmcgdGhlIGFwcHJvcHJpYXRlIGFyZWFcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0geCAtIFRoZSB4IHBvc2l0aW9uIGluIHB4XHJcbiAgICAgKiBAcGFyYW0geSAtIFRoZSB5IHBvc2l0aW9uIGluIHB4XHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2V0RHJvcFBvc2l0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAvLyB0aGlzLl9lbGVtZW50LnN0eWxlLmxlZnQgPSBudW1iZXJUb1BpeGVscyh4KTtcclxuICAgICAgIC8vIHRoaXMuX2VsZW1lbnQuc3R5bGUudG9wID0gbnVtYmVyVG9QaXhlbHMoeSk7XHJcbiAgICAgICAgdGhpcy5fYXJlYSA9IHRoaXMuZ2V0QXJlYSh4LCB5KTtcclxuICAgICAgICBpZiAodGhpcy5fYXJlYSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9sYXN0VmFsaWRBcmVhID0gdGhpcy5fYXJlYTtcclxuICAgICAgICAgICAgdGhpcy5fYXJlYS5jb250ZW50SXRlbS5oaWdobGlnaHREcm9wWm9uZSh4LCB5LCB0aGlzLl9hcmVhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgIHByaXZhdGUgb25EcmFnKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LnBhZ2VYO1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5wYWdlWTtcclxuICAgICAgICBpZiAodGhpcy5faXRlbUFyZWFzID09PSBudWxsKVxyXG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZUl0ZW1BcmVhcygpO1xyXG4gICAgICAgIGlmICh0aGlzLl9pdGVtQXJlYXMgPT09IG51bGwgfHwgdGhpcy5faXRlbUFyZWFzLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLnNldERyb3BQb3NpdGlvbih4LCB5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIExvYWRzIGEgbmV3IGxheW91dFxyXG4gICAgICogQHBhcmFtIGxheW91dENvbmZpZyAtIE5ldyBsYXlvdXQgdG8gYmUgbG9hZGVkXHJcbiAgICAgKi9cclxuICAgIGxvYWRMYXlvdXQobGF5b3V0Q29uZmlnOiBMYXlvdXRDb25maWcpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXNlZCkge1xyXG4gICAgICAgICAgICAvLyBJbiBjYXNlIGFwcGxpY2F0aW9uIG5vdCBjb3JyZWN0bHkgdXNpbmcgbGVnYWN5IGNvbnN0cnVjdG9yXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR29sZGVuTGF5b3V0OiBOZWVkIHRvIGNhbGwgaW5pdCgpIGlmIExheW91dENvbmZpZyB3aXRoIGRlZmluZWQgcm9vdCBwYXNzZWQgdG8gY29uc3RydWN0b3InKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0xNTEwxMTExOScpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVTdWJXaW5kb3dzKCk7IC8vIHN0aWxsIG5lZWRzIHRvIGJlIHRlc3RlZFxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0Q29uZmlnID0gTGF5b3V0Q29uZmlnLnJlc29sdmUobGF5b3V0Q29uZmlnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2dyb3VuZEl0ZW0ubG9hZFJvb3QodGhpcy5sYXlvdXRDb25maWcucm9vdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrTG9hZGVkTGF5b3V0TWF4aW1pc2VJdGVtKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkanVzdENvbHVtbnNSZXNwb25zaXZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbGF5b3V0IGNvbmZpZ3VyYXRpb24gb2JqZWN0IGJhc2VkIG9uIHRoZSB0aGUgY3VycmVudCBzdGF0ZVxyXG4gICAgICpcclxuICAgICAqIEBwdWJsaWNcclxuICAgICAqIEByZXR1cm5zIEdvbGRlbkxheW91dCBjb25maWd1cmF0aW9uXHJcbiAgICAgKi9cclxuICAgIHNhdmVMYXlvdXQoKTogUmVzb2x2ZWRMYXlvdXRDb25maWcge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0luaXRpYWxpc2VkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3QgY3JlYXRlIGNvbmZpZywgbGF5b3V0IG5vdCB5ZXQgaW5pdGlhbGlzZWQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgKHJvb3QgIT09IHVuZGVmaW5lZCAmJiAhKHJvb3QgaW5zdGFuY2VvZiBDb250ZW50SXRlbSkpIHtcclxuICAgICAgICAgICAgLy8gICAgIHRocm93IG5ldyBFcnJvcignUm9vdCBtdXN0IGJlIGEgQ29udGVudEl0ZW0nKTtcclxuICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgKiBDb250ZW50XHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0xNVEMxODI0NCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3JvdW5kQ29udGVudCA9IHRoaXMuX2dyb3VuZEl0ZW0uY2FsY3VsYXRlQ29uZmlnQ29udGVudCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCByb290SXRlbUNvbmZpZzogUmVzb2x2ZWRSb290SXRlbUNvbmZpZyB8IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGlmIChncm91bmRDb250ZW50Lmxlbmd0aCAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvb3RJdGVtQ29uZmlnID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByb290SXRlbUNvbmZpZyA9IGdyb3VuZENvbnRlbnRbMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICogUmV0cmlldmUgY29uZmlnIGZvciBzdWJ3aW5kb3dzXHJcbiAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbmNpbGVQb3BvdXRXaW5kb3dzKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcGVuUG9wb3V0czogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWdbXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9vcGVuUG9wb3V0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5Qb3BvdXRzLnB1c2godGhpcy5fb3BlblBvcG91dHNbaV0udG9Db25maWcoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlnOiBSZXNvbHZlZExheW91dENvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgICAgICByb290OiByb290SXRlbUNvbmZpZyxcclxuICAgICAgICAgICAgICAgICAgICBvcGVuUG9wb3V0cyxcclxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczogIFJlc29sdmVkTGF5b3V0Q29uZmlnLlNldHRpbmdzLmNyZWF0ZUNvcHkodGhpcy5sYXlvdXRDb25maWcuc2V0dGluZ3MpLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpbWVuc2lvbnM6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkRpbWVuc2lvbnMuY3JlYXRlQ29weSh0aGlzLmxheW91dENvbmZpZy5kaW1lbnNpb25zKSxcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IFJlc29sdmVkTGF5b3V0Q29uZmlnLkhlYWRlci5jcmVhdGVDb3B5KHRoaXMubGF5b3V0Q29uZmlnLmhlYWRlciksXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZXMgYW55IGV4aXN0aW5nIGxheW91dC4gRWZmZWN0aXZlbHksIGFuIGVtcHR5IGxheW91dCB3aWxsIGJlIGxvYWRlZC5cclxuICAgICAqL1xyXG5cclxuICAgIGNsZWFyKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignTE1DTDExMTI5Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZ3JvdW5kSXRlbS5jbGVhclJvb3QoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIChMYXlvdXRNYW5hZ2VyOmNsYXNzKS5zYXZlTGF5b3V0fVxyXG4gICAgICovXHJcbiAgICB0b0NvbmZpZygpOiBSZXNvbHZlZExheW91dENvbmZpZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2F2ZUxheW91dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIG5ldyBDb21wb25lbnRJdGVtLiAgV2lsbCB1c2UgZGVmYXVsdCBsb2NhdGlvbiBzZWxlY3RvcnMgdG8gZW5zdXJlIGEgbG9jYXRpb24gaXMgZm91bmQgYW5kXHJcbiAgICAgKiBjb21wb25lbnQgaXMgc3VjY2Vzc2Z1bGx5IGFkZGVkXHJcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50VHlwZU5hbWUgLSBOYW1lIG9mIGNvbXBvbmVudCB0eXBlIHRvIGJlIGNyZWF0ZWQuXHJcbiAgICAgKiBAcGFyYW0gc3RhdGUgLSBPcHRpb25hbCBpbml0aWFsIHN0YXRlIHRvIGJlIGFzc2lnbmVkIHRvIGNvbXBvbmVudFxyXG4gICAgICogQHJldHVybnMgTmV3IENvbXBvbmVudEl0ZW0gY3JlYXRlZC5cclxuICAgICAqL1xyXG4gICAgbmV3Q29tcG9uZW50KGNvbXBvbmVudFR5cGU6IEpzb25WYWx1ZSwgY29tcG9uZW50U3RhdGU/OiBKc29uVmFsdWUsIHRpdGxlPzogc3RyaW5nKTogQ29tcG9uZW50SXRlbSB7XHJcbiAgICAgICAgY29uc3QgY29tcG9uZW50SXRlbSA9IHRoaXMubmV3Q29tcG9uZW50QXRMb2NhdGlvbihjb21wb25lbnRUeXBlLCBjb21wb25lbnRTdGF0ZSwgdGl0bGUpO1xyXG4gICAgICAgIGlmIChjb21wb25lbnRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdMTU5DNjU1ODgnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50SXRlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgQ29tcG9uZW50SXRlbSBhdCB0aGUgZmlyc3QgdmFsaWQgc2VsZWN0b3IgbG9jYXRpb24uXHJcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50VHlwZU5hbWUgLSBOYW1lIG9mIGNvbXBvbmVudCB0eXBlIHRvIGJlIGNyZWF0ZWQuXHJcbiAgICAgKiBAcGFyYW0gc3RhdGUgLSBPcHRpb25hbCBpbml0aWFsIHN0YXRlIHRvIGJlIGFzc2lnbmVkIHRvIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIGxvY2F0aW9uU2VsZWN0b3JzIC0gQXJyYXkgb2YgbG9jYXRpb24gc2VsZWN0b3JzIHVzZWQgdG8gZmluZCBsb2NhdGlvbiBpbiBsYXlvdXQgd2hlcmUgY29tcG9uZW50XHJcbiAgICAgKiB3aWxsIGJlIGFkZGVkLiBGaXJzdCBsb2NhdGlvbiBpbiBhcnJheSB3aGljaCBpcyB2YWxpZCB3aWxsIGJlIHVzZWQuIElmIGxvY2F0aW9uU2VsZWN0b3JzIGlzIHVuZGVmaW5lZCxcclxuICAgICAqIHtAbGluayAoTGF5b3V0TWFuYWdlcjpuYW1lc3BhY2UpLmRlZmF1bHRMb2NhdGlvblNlbGVjdG9yc30gd2lsbCBiZSB1c2VkXHJcbiAgICAgKiBAcmV0dXJucyBOZXcgQ29tcG9uZW50SXRlbSBjcmVhdGVkIG9yIHVuZGVmaW5lZCBpZiBubyB2YWxpZCBsb2NhdGlvbiBzZWxlY3RvciB3YXMgaW4gYXJyYXkuXHJcbiAgICAgKi9cclxuICAgIG5ld0NvbXBvbmVudEF0TG9jYXRpb24oY29tcG9uZW50VHlwZTogSnNvblZhbHVlLCBjb21wb25lbnRTdGF0ZT86IEpzb25WYWx1ZSwgdGl0bGU/OiBzdHJpbmcsXHJcbiAgICAgICAgbG9jYXRpb25TZWxlY3RvcnM/OiBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uU2VsZWN0b3JbXVxyXG4gICAgKTogQ29tcG9uZW50SXRlbSB8IHVuZGVmaW5lZHtcclxuICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFkZCBjb21wb25lbnQgYmVmb3JlIGluaXQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuYWRkQ29tcG9uZW50QXRMb2NhdGlvbihjb21wb25lbnRUeXBlLCBjb21wb25lbnRTdGF0ZSwgdGl0bGUsIGxvY2F0aW9uU2VsZWN0b3JzKTtcclxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjcmVhdGVkSXRlbSA9IGxvY2F0aW9uLnBhcmVudEl0ZW0uY29udGVudEl0ZW1zW2xvY2F0aW9uLmluZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmICghQ29udGVudEl0ZW0uaXNDb21wb25lbnRJdGVtKGNyZWF0ZWRJdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignTE1OQzk5Mjg3NzUzMycpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlZEl0ZW07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgbmV3IENvbXBvbmVudEl0ZW0uICBXaWxsIHVzZSBkZWZhdWx0IGxvY2F0aW9uIHNlbGVjdG9ycyB0byBlbnN1cmUgYSBsb2NhdGlvbiBpcyBmb3VuZCBhbmRcclxuICAgICAqIGNvbXBvbmVudCBpcyBzdWNjZXNzZnVsbHkgYWRkZWRcclxuICAgICAqIEBwYXJhbSBjb21wb25lbnRUeXBlIC0gVHlwZSBvZiBjb21wb25lbnQgdG8gYmUgY3JlYXRlZC5cclxuICAgICAqIEBwYXJhbSBzdGF0ZSAtIE9wdGlvbmFsIGluaXRpYWwgc3RhdGUgdG8gYmUgYXNzaWduZWQgdG8gY29tcG9uZW50XHJcbiAgICAgKiBAcmV0dXJucyBMb2NhdGlvbiBvZiBuZXcgQ29tcG9uZW50SXRlbSBjcmVhdGVkLlxyXG4gICAgICovXHJcbiAgICBhZGRDb21wb25lbnQoY29tcG9uZW50VHlwZTogSnNvblZhbHVlLCBjb21wb25lbnRTdGF0ZT86IEpzb25WYWx1ZSwgdGl0bGU/OiBzdHJpbmcpOiBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uIHtcclxuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuYWRkQ29tcG9uZW50QXRMb2NhdGlvbihjb21wb25lbnRUeXBlLCBjb21wb25lbnRTdGF0ZSwgdGl0bGUpO1xyXG4gICAgICAgIGlmIChsb2NhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignTE1BQzk5OTQzJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBDb21wb25lbnRJdGVtIGF0IHRoZSBmaXJzdCB2YWxpZCBzZWxlY3RvciBsb2NhdGlvbi5cclxuICAgICAqIEBwYXJhbSBjb21wb25lbnRUeXBlIC0gVHlwZSBvZiBjb21wb25lbnQgdG8gYmUgY3JlYXRlZC5cclxuICAgICAqIEBwYXJhbSBzdGF0ZSAtIE9wdGlvbmFsIGluaXRpYWwgc3RhdGUgdG8gYmUgYXNzaWduZWQgdG8gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0gbG9jYXRpb25TZWxlY3RvcnMgLSBBcnJheSBvZiBsb2NhdGlvbiBzZWxlY3RvcnMgdXNlZCB0byBmaW5kIGRldGVybWluZSBsb2NhdGlvbiBpbiBsYXlvdXQgd2hlcmUgY29tcG9uZW50XHJcbiAgICAgKiB3aWxsIGJlIGFkZGVkLiBGaXJzdCBsb2NhdGlvbiBpbiBhcnJheSB3aGljaCBpcyB2YWxpZCB3aWxsIGJlIHVzZWQuIElmIHVuZGVmaW5lZCxcclxuICAgICAqIHtAbGluayAoTGF5b3V0TWFuYWdlcjpuYW1lc3BhY2UpLmRlZmF1bHRMb2NhdGlvblNlbGVjdG9yc30gd2lsbCBiZSB1c2VkLlxyXG4gICAgICogQHJldHVybnMgTG9jYXRpb24gb2YgbmV3IENvbXBvbmVudEl0ZW0gY3JlYXRlZCBvciB1bmRlZmluZWQgaWYgbm8gdmFsaWQgbG9jYXRpb24gc2VsZWN0b3Igd2FzIGluIGFycmF5LlxyXG4gICAgICovXHJcbiAgICBhZGRDb21wb25lbnRBdExvY2F0aW9uKGNvbXBvbmVudFR5cGU6IEpzb25WYWx1ZSwgY29tcG9uZW50U3RhdGU/OiBKc29uVmFsdWUsIHRpdGxlPzogc3RyaW5nLFxyXG4gICAgICAgIGxvY2F0aW9uU2VsZWN0b3JzPzogcmVhZG9ubHkgTGF5b3V0TWFuYWdlci5Mb2NhdGlvblNlbGVjdG9yW11cclxuICAgICk6IExheW91dE1hbmFnZXIuTG9jYXRpb24gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1Db25maWc6IENvbXBvbmVudEl0ZW1Db25maWcgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdjb21wb25lbnQnLFxyXG4gICAgICAgICAgICBjb21wb25lbnRUeXBlLFxyXG4gICAgICAgICAgICBjb21wb25lbnRTdGF0ZSxcclxuICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkSXRlbUF0TG9jYXRpb24oaXRlbUNvbmZpZywgbG9jYXRpb25TZWxlY3RvcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIG5ldyBDb250ZW50SXRlbS4gIFdpbGwgdXNlIGRlZmF1bHQgbG9jYXRpb24gc2VsZWN0b3JzIHRvIGVuc3VyZSBhIGxvY2F0aW9uIGlzIGZvdW5kIGFuZFxyXG4gICAgICogY29tcG9uZW50IGlzIHN1Y2Nlc3NmdWxseSBhZGRlZFxyXG4gICAgICogQHBhcmFtIGl0ZW1Db25maWcgLSBSZXNvbHZlZEl0ZW1Db25maWcgb2YgY2hpbGQgdG8gYmUgYWRkZWQuXHJcbiAgICAgKiBAcmV0dXJucyBOZXcgQ29udGVudEl0ZW0gY3JlYXRlZC5cclxuICAgICovXHJcbiAgICBuZXdJdGVtKGl0ZW1Db25maWc6IFJvd09yQ29sdW1uSXRlbUNvbmZpZyB8IFN0YWNrSXRlbUNvbmZpZyB8IENvbXBvbmVudEl0ZW1Db25maWcpOiBDb250ZW50SXRlbSB7XHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSB0aGlzLm5ld0l0ZW1BdExvY2F0aW9uKGl0ZW1Db25maWcpO1xyXG4gICAgICAgIGlmIChjb250ZW50SXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignTE1OQzY1NTg4Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRJdGVtO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBuZXcgY2hpbGQgQ29udGVudEl0ZW0gdW5kZXIgdGhlIHJvb3QgQ29udGVudEl0ZW0uICBJZiBhIHJvb3QgZG9lcyBub3QgZXhpc3QsIHRoZW4gY3JlYXRlIHJvb3QgQ29udGVudEl0ZW0gaW5zdGVhZFxyXG4gICAgICogQHBhcmFtIGl0ZW1Db25maWcgLSBSZXNvbHZlZEl0ZW1Db25maWcgb2YgY2hpbGQgdG8gYmUgYWRkZWQuXHJcbiAgICAgKiBAcGFyYW0gbG9jYXRpb25TZWxlY3RvcnMgLSBBcnJheSBvZiBsb2NhdGlvbiBzZWxlY3RvcnMgdXNlZCB0byBmaW5kIGRldGVybWluZSBsb2NhdGlvbiBpbiBsYXlvdXQgd2hlcmUgQ29udGVudEl0ZW1cclxuICAgICAqIHdpbGwgYmUgYWRkZWQuIEZpcnN0IGxvY2F0aW9uIGluIGFycmF5IHdoaWNoIGlzIHZhbGlkIHdpbGwgYmUgdXNlZC4gSWYgdW5kZWZpbmVkLFxyXG4gICAgICoge0BsaW5rIChMYXlvdXRNYW5hZ2VyOm5hbWVzcGFjZSkuZGVmYXVsdExvY2F0aW9uU2VsZWN0b3JzfSB3aWxsIGJlIHVzZWQuXHJcbiAgICAgKiBAcmV0dXJucyBOZXcgQ29udGVudEl0ZW0gY3JlYXRlZCBvciB1bmRlZmluZWQgaWYgbm8gdmFsaWQgbG9jYXRpb24gc2VsZWN0b3Igd2FzIGluIGFycmF5LiAqL1xyXG4gICAgbmV3SXRlbUF0TG9jYXRpb24oaXRlbUNvbmZpZzogUm93T3JDb2x1bW5JdGVtQ29uZmlnIHwgU3RhY2tJdGVtQ29uZmlnIHwgQ29tcG9uZW50SXRlbUNvbmZpZyxcclxuICAgICAgICBsb2NhdGlvblNlbGVjdG9ycz86IHJlYWRvbmx5IExheW91dE1hbmFnZXIuTG9jYXRpb25TZWxlY3RvcltdXHJcbiAgICApOiBDb250ZW50SXRlbSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBhZGQgY29tcG9uZW50IGJlZm9yZSBpbml0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLmFkZEl0ZW1BdExvY2F0aW9uKGl0ZW1Db25maWcsIGxvY2F0aW9uU2VsZWN0b3JzKTtcclxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjcmVhdGVkSXRlbSA9IGxvY2F0aW9uLnBhcmVudEl0ZW0uY29udGVudEl0ZW1zW2xvY2F0aW9uLmluZGV4XTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVkSXRlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBuZXcgQ29udGVudEl0ZW0uICBXaWxsIHVzZSBkZWZhdWx0IGxvY2F0aW9uIHNlbGVjdG9ycyB0byBlbnN1cmUgYSBsb2NhdGlvbiBpcyBmb3VuZCBhbmRcclxuICAgICAqIGNvbXBvbmVudCBpcyBzdWNjZXNzZnVsbHkgYWRkZWQuXHJcbiAgICAgKiBAcGFyYW0gaXRlbUNvbmZpZyAtIFJlc29sdmVkSXRlbUNvbmZpZyBvZiBjaGlsZCB0byBiZSBhZGRlZC5cclxuICAgICAqIEByZXR1cm5zIExvY2F0aW9uIG9mIG5ldyBDb250ZW50SXRlbSBjcmVhdGVkLiAqL1xyXG4gICAgYWRkSXRlbShpdGVtQ29uZmlnOiBSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBTdGFja0l0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnKTogTGF5b3V0TWFuYWdlci5Mb2NhdGlvbiB7XHJcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLmFkZEl0ZW1BdExvY2F0aW9uKGl0ZW1Db25maWcpO1xyXG4gICAgICAgIGlmIChsb2NhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignTE1BSTk5OTQzJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgYSBDb250ZW50SXRlbSBhdCB0aGUgZmlyc3QgdmFsaWQgc2VsZWN0b3IgbG9jYXRpb24uXHJcbiAgICAgKiBAcGFyYW0gaXRlbUNvbmZpZyAtIFJlc29sdmVkSXRlbUNvbmZpZyBvZiBjaGlsZCB0byBiZSBhZGRlZC5cclxuICAgICAqIEBwYXJhbSBsb2NhdGlvblNlbGVjdG9ycyAtIEFycmF5IG9mIGxvY2F0aW9uIHNlbGVjdG9ycyB1c2VkIHRvIGZpbmQgZGV0ZXJtaW5lIGxvY2F0aW9uIGluIGxheW91dCB3aGVyZSBDb250ZW50SXRlbVxyXG4gICAgICogd2lsbCBiZSBhZGRlZC4gRmlyc3QgbG9jYXRpb24gaW4gYXJyYXkgd2hpY2ggaXMgdmFsaWQgd2lsbCBiZSB1c2VkLiBJZiB1bmRlZmluZWQsXHJcbiAgICAgKiB7QGxpbmsgKExheW91dE1hbmFnZXI6bmFtZXNwYWNlKS5kZWZhdWx0TG9jYXRpb25TZWxlY3RvcnN9IHdpbGwgYmUgdXNlZC5cclxuICAgICAqIEByZXR1cm5zIExvY2F0aW9uIG9mIG5ldyBDb250ZW50SXRlbSBjcmVhdGVkIG9yIHVuZGVmaW5lZCBpZiBubyB2YWxpZCBsb2NhdGlvbiBzZWxlY3RvciB3YXMgaW4gYXJyYXkuICovXHJcbiAgICBhZGRJdGVtQXRMb2NhdGlvbihpdGVtQ29uZmlnOiBSb3dPckNvbHVtbkl0ZW1Db25maWcgfCBTdGFja0l0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnLFxyXG4gICAgICAgIGxvY2F0aW9uU2VsZWN0b3JzPzogcmVhZG9ubHkgTGF5b3V0TWFuYWdlci5Mb2NhdGlvblNlbGVjdG9yW11cclxuICAgICk6IExheW91dE1hbmFnZXIuTG9jYXRpb24gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYWRkIGNvbXBvbmVudCBiZWZvcmUgaW5pdCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChsb2NhdGlvblNlbGVjdG9ycyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0TG9jYXRpb25TZWxlY3RvcnMgc2hvdWxkIGFsd2F5cyBmaW5kIGEgbG9jYXRpb25cclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uU2VsZWN0b3JzID0gTGF5b3V0TWFuYWdlci5kZWZhdWx0TG9jYXRpb25TZWxlY3RvcnM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5maW5kRmlyc3RMb2NhdGlvbihsb2NhdGlvblNlbGVjdG9ycyk7XHJcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhcmVudEl0ZW0gPSBsb2NhdGlvbi5wYXJlbnRJdGVtO1xyXG4gICAgICAgICAgICAgICAgbGV0IGFkZElkeDogbnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChwYXJlbnRJdGVtLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmdyb3VuZDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBncm91bmRJdGVtID0gcGFyZW50SXRlbSBhcyBHcm91bmRJdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRJZHggPSBncm91bmRJdGVtLmFkZEl0ZW0oaXRlbUNvbmZpZywgbG9jYXRpb24uaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWRkSWR4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEl0ZW0gPSB0aGlzLl9ncm91bmRJdGVtLmNvbnRlbnRJdGVtc1swXTsgLy8gd2FzIGFkZGVkIHRvIHJvb3RJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRJZHggPSAwOyAvLyB3YXMgYWRkZWQgYXMgcm9vdEl0ZW0gKHdoaWNoIGlzIHRoZSBmaXJzdCBhbmQgb25seSBDb250ZW50SXRlbSBpbiBHcm91bmRJdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLnJvdzpcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEl0ZW1UeXBlLmNvbHVtbjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb3dPckNvbHVtbiA9IHBhcmVudEl0ZW0gYXMgUm93T3JDb2x1bW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZElkeCA9IHJvd09yQ29sdW1uLmFkZEl0ZW0oaXRlbUNvbmZpZywgbG9jYXRpb24uaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5zdGFjazoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUl0ZW1Db25maWcuaXNDb21wb25lbnQoaXRlbUNvbmZpZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGkxOG5TdHJpbmdzW0kxOG5TdHJpbmdJZC5JdGVtQ29uZmlnSXNOb3RUeXBlQ29tcG9uZW50XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFjayA9IHBhcmVudEl0ZW0gYXMgU3RhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRJZHggPSBzdGFjay5hZGRJdGVtKGl0ZW1Db25maWcsIGxvY2F0aW9uLmluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29tcG9uZW50OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBBc3NlcnRFcnJvcignTE1BSUFMQzg3NDQ0NjAyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNhc2VFcnJvcignTE1BSUFMVTk4ODgxNzMzJywgcGFyZW50SXRlbS50eXBlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoSXRlbUNvbmZpZy5pc0NvbXBvbmVudChpdGVtQ29uZmlnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlZSBpZiBzdGFjayB3YXMgaW5zZXJ0ZWRcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gcGFyZW50SXRlbS5jb250ZW50SXRlbXNbYWRkSWR4XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ29udGVudEl0ZW0uaXNTdGFjayhpdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRJdGVtID0gaXRlbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkSWR4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbG9jYXRpb24ucGFyZW50SXRlbSA9IHBhcmVudEl0ZW07XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5pbmRleCA9IGFkZElkeDtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIExvYWRzIHRoZSBzcGVjaWZpZWQgY29tcG9uZW50IFJlc29sdmVkSXRlbUNvbmZpZyBhcyByb290LlxyXG4gICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBkaXNwbGF5IGEgQ29tcG9uZW50IGFsbCBieSBpdHNlbGYuICBUaGUgbGF5b3V0IGNhbm5vdCBiZSBjaGFuZ2VkIG90aGVyIHRoYW4gaGF2aW5nIGFub3RoZXIgbmV3IGxheW91dCBsb2FkZWQuXHJcbiAgICAgKiBOb3RlIHRoYXQsIGlmIHRoaXMgbGF5b3V0IGlzIHNhdmVkIGFuZCByZWxvYWRlZCwgaXQgd2lsbCByZWxvYWQgd2l0aCB0aGUgQ29tcG9uZW50IGFzIGEgY2hpbGQgb2YgYSBTdGFjay5cclxuICAgICovXHJcbiAgICBsb2FkQ29tcG9uZW50QXNSb290KGl0ZW1Db25maWc6IENvbXBvbmVudEl0ZW1Db25maWcpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGFkZCBpdGVtIGJlZm9yZSBpbml0Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZ3JvdW5kSXRlbS5sb2FkQ29tcG9uZW50QXNSb290KGl0ZW1Db25maWcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayAoTGF5b3V0TWFuYWdlcjpjbGFzcykuc2V0U2l6ZX0gKi9cclxuICAgIHVwZGF0ZVNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldFNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGVzIHRoZSBsYXlvdXQgbWFuYWdlcnMgc2l6ZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB3aWR0aCAtIFdpZHRoIGluIHBpeGVsc1xyXG4gICAgICogQHBhcmFtIGhlaWdodCAtIEhlaWdodCBpbiBwaXhlbHNcclxuICAgICAqL1xyXG4gICAgc2V0U2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNJbml0aWFsaXNlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdMTVVTMTg4ODEnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2dyb3VuZEl0ZW0uc2V0U2l6ZSh0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWF4aW1pc2VkU3RhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuY29udGFpbmVyV2lkdGhBbmRIZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRFbGVtZW50V2lkdGgodGhpcy5fbWF4aW1pc2VkU3RhY2suZWxlbWVudCwgd2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldEVsZW1lbnRIZWlnaHQodGhpcy5fbWF4aW1pc2VkU3RhY2suZWxlbWVudCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXhpbWlzZWRTdGFjay51cGRhdGVTaXplKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGp1c3RDb2x1bW5zUmVzcG9uc2l2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHVwZGF0ZVNpemVGcm9tQ29udGFpbmVyKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5jb250YWluZXJXaWR0aEFuZEhlaWdodCgpO1xyXG4gICAgICAgIHRoaXMuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSB0aGUgc2l6ZSBvZiB0aGUgcm9vdCBDb250ZW50SXRlbS4gIFRoaXMgd2lsbCB1cGRhdGUgdGhlIHNpemUgb2YgYWxsIGNvbnRlbnRJdGVtcyBpbiB0aGUgdHJlZVxyXG4gICAgICovXHJcbiAgICB1cGRhdGVSb290U2l6ZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0xNVVJTMjg4ODEnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9ncm91bmRJdGVtLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBwdWJsaWMgKi9cclxuICAgIGNyZWF0ZUFuZEluaXRDb250ZW50SXRlbShjb25maWc6IFJlc29sdmVkSXRlbUNvbmZpZywgcGFyZW50OiBDb250ZW50SXRlbSk6IENvbnRlbnRJdGVtIHtcclxuICAgICAgICBjb25zdCBuZXdJdGVtID0gdGhpcy5jcmVhdGVDb250ZW50SXRlbShjb25maWcsIHBhcmVudCk7XHJcbiAgICAgICAgbmV3SXRlbS5pbml0KCk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0l0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWN1cnNpdmVseSBjcmVhdGVzIG5ldyBpdGVtIHRyZWUgc3RydWN0dXJlcyBiYXNlZCBvbiBhIHByb3ZpZGVkXHJcbiAgICAgKiBJdGVtQ29uZmlndXJhdGlvbiBvYmplY3RcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY29uZmlnIC0gUmVzb2x2ZWRJdGVtQ29uZmlnXHJcbiAgICAgKiBAcGFyYW0gcGFyZW50IC0gVGhlIGl0ZW0gdGhlIG5ld2x5IGNyZWF0ZWQgaXRlbSBzaG91bGQgYmUgYSBjaGlsZCBvZlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUNvbnRlbnRJdGVtKGNvbmZpZzogUmVzb2x2ZWRJdGVtQ29uZmlnLCBwYXJlbnQ6IENvbnRlbnRJdGVtKTogQ29udGVudEl0ZW0ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnLnR5cGUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBDb25maWd1cmF0aW9uRXJyb3IoJ01pc3NpbmcgcGFyYW1ldGVyIFxcJ3R5cGVcXCcnLCBKU09OLnN0cmluZ2lmeShjb25maWcpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFdlIGFkZCBhbiBhZGRpdGlvbmFsIHN0YWNrIGFyb3VuZCBldmVyeSBjb21wb25lbnQgdGhhdCdzIG5vdCB3aXRoaW4gYSBzdGFjayBhbnl3YXlzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIGNvbXBvbmVudFxyXG4gICAgICAgICAgICBSZXNvbHZlZEl0ZW1Db25maWcuaXNDb21wb25lbnRJdGVtKGNvbmZpZykgJiZcclxuXHJcbiAgICAgICAgICAgIC8vIGFuZCBpdCdzIG5vdCBhbHJlYWR5IHdpdGhpbiBhIHN0YWNrXHJcbiAgICAgICAgICAgICEocGFyZW50IGluc3RhbmNlb2YgU3RhY2spICYmXHJcblxyXG4gICAgICAgICAgICAvLyBhbmQgd2UgaGF2ZSBhIHBhcmVudFxyXG4gICAgICAgICAgICAhIXBhcmVudCAmJlxyXG5cclxuICAgICAgICAgICAgLy8gYW5kIGl0J3Mgbm90IHRoZSB0b3Btb3N0IGl0ZW0gaW4gYSBuZXcgd2luZG93XHJcbiAgICAgICAgICAgICEodGhpcy5pc1N1YldpbmRvdyA9PT0gdHJ1ZSAmJiBwYXJlbnQgaW5zdGFuY2VvZiBHcm91bmRJdGVtKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFja0NvbmZpZzogUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBJdGVtVHlwZS5zdGFjayxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFtjb25maWddLFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogY29uZmlnLnNpemUsXHJcbiAgICAgICAgICAgICAgICBzaXplVW5pdDogY29uZmlnLnNpemVVbml0LFxyXG4gICAgICAgICAgICAgICAgbWluU2l6ZTogY29uZmlnLm1pblNpemUsXHJcbiAgICAgICAgICAgICAgICBtaW5TaXplVW5pdDogY29uZmlnLm1pblNpemVVbml0LFxyXG4gICAgICAgICAgICAgICAgaWQ6IGNvbmZpZy5pZCxcclxuICAgICAgICAgICAgICAgIG1heGltaXNlZDogY29uZmlnLm1heGltaXNlZCxcclxuICAgICAgICAgICAgICAgIGlzQ2xvc2FibGU6IGNvbmZpZy5pc0Nsb3NhYmxlLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlSXRlbUluZGV4OiAwLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25maWcgPSBzdGFja0NvbmZpZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtID0gdGhpcy5jcmVhdGVDb250ZW50SXRlbUZyb21Db25maWcoY29uZmlnLCBwYXJlbnQpO1xyXG4gICAgICAgIHJldHVybiBjb250ZW50SXRlbTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kRmlyc3RDb21wb25lbnRJdGVtQnlJZChpZDogc3RyaW5nKTogQ29tcG9uZW50SXRlbSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmRGaXJzdENvbnRlbnRJdGVtVHlwZUJ5SWRSZWN1cnNpdmUoSXRlbVR5cGUuY29tcG9uZW50LCBpZCwgdGhpcy5fZ3JvdW5kSXRlbSkgYXMgQ29tcG9uZW50SXRlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgcG9wb3V0IHdpbmRvdyB3aXRoIHRoZSBzcGVjaWZpZWQgY29udGVudCBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGl0ZW1Db25maWdPckNvbnRlbnRJdGVtIC0gVGhlIGNvbnRlbnQgb2YgdGhlIHBvcG91dCB3aW5kb3cncyBsYXlvdXQgbWFuYWdlciBkZXJpdmVkIGZyb20gZWl0aGVyXHJcbiAgICAgKiBhIHtAbGluayAoQ29udGVudEl0ZW06Y2xhc3MpfSBvciB7QGxpbmsgKEl0ZW1Db25maWc6aW50ZXJmYWNlKX0gb3IgUmVzb2x2ZWRJdGVtQ29uZmlnIGNvbnRlbnQgKGFycmF5IG9mIHtAbGluayAoSXRlbUNvbmZpZzppbnRlcmZhY2UpfSlcclxuICAgICAqIEBwYXJhbSBwb3NpdGlvbkFuZFNpemUgLSBUaGUgd2lkdGgsIGhlaWdodCwgbGVmdCBhbmQgdG9wIG9mIFBvcG91dCB3aW5kb3dcclxuICAgICAqIEBwYXJhbSBwYXJlbnRJZCAtVGhlIGlkIG9mIHRoZSBlbGVtZW50IHRoaXMgaXRlbSB3aWxsIGJlIGFwcGVuZGVkIHRvIHdoZW4gcG9wSW4gaXMgY2FsbGVkXHJcbiAgICAgKiBAcGFyYW0gaW5kZXhJblBhcmVudCAtIFRoZSBwb3NpdGlvbiBvZiB0aGlzIGl0ZW0gd2l0aGluIGl0cyBwYXJlbnQgZWxlbWVudFxyXG4gICAgICovXHJcblxyXG4gICAgY3JlYXRlUG9wb3V0KGl0ZW1Db25maWdPckNvbnRlbnRJdGVtOiBDb250ZW50SXRlbSB8IFJlc29sdmVkUm9vdEl0ZW1Db25maWcsXHJcbiAgICAgICAgcG9zaXRpb25BbmRTaXplOiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZy5XaW5kb3csXHJcbiAgICAgICAgcGFyZW50SWQ6IHN0cmluZyB8IG51bGwsXHJcbiAgICAgICAgaW5kZXhJblBhcmVudDogbnVtYmVyIHwgbnVsbFxyXG4gICAgKTogQnJvd3NlclBvcG91dCB7XHJcbiAgICAgICAgaWYgKGl0ZW1Db25maWdPckNvbnRlbnRJdGVtIGluc3RhbmNlb2YgQ29udGVudEl0ZW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUG9wb3V0RnJvbUNvbnRlbnRJdGVtKGl0ZW1Db25maWdPckNvbnRlbnRJdGVtLCBwb3NpdGlvbkFuZFNpemUsIHBhcmVudElkLCBpbmRleEluUGFyZW50KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVQb3BvdXRGcm9tSXRlbUNvbmZpZyhpdGVtQ29uZmlnT3JDb250ZW50SXRlbSwgcG9zaXRpb25BbmRTaXplLCBwYXJlbnRJZCwgaW5kZXhJblBhcmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNyZWF0ZVBvcG91dEZyb21Db250ZW50SXRlbShpdGVtOiBDb250ZW50SXRlbSxcclxuICAgICAgICB3aW5kb3c6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnLldpbmRvdyB8IHVuZGVmaW5lZCxcclxuICAgICAgICBwYXJlbnRJZDogc3RyaW5nIHwgbnVsbCxcclxuICAgICAgICBpbmRleEluUGFyZW50OiBudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkLFxyXG4gICAgKTogQnJvd3NlclBvcG91dCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSWYgdGhlIGl0ZW0gaXMgdGhlIG9ubHkgY29tcG9uZW50IHdpdGhpbiBhIHN0YWNrIG9yIGZvciBzb21lXHJcbiAgICAgICAgICogb3RoZXIgcmVhc29uIHRoZSBvbmx5IGNoaWxkIG9mIGl0cyBwYXJlbnQgdGhlIHBhcmVudCB3aWxsIGJlIGRlc3Ryb3llZFxyXG4gICAgICAgICAqIHdoZW4gdGhlIGNoaWxkIGlzIHJlbW92ZWQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBJbiBvcmRlciB0byBzdXBwb3J0IHRoaXMgd2UgbW92ZSB1cCB0aGUgdHJlZSB1bnRpbCB3ZSBmaW5kIHNvbWV0aGluZ1xyXG4gICAgICAgICAqIHRoYXQgd2lsbCByZW1haW4gYWZ0ZXIgdGhlIGl0ZW0gaXMgYmVpbmcgcG9wcGVkIG91dFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxldCBwYXJlbnQgPSBpdGVtLnBhcmVudDtcclxuICAgICAgICBsZXQgY2hpbGQgPSBpdGVtO1xyXG4gICAgICAgIHdoaWxlIChwYXJlbnQgIT09IG51bGwgJiYgcGFyZW50LmNvbnRlbnRJdGVtcy5sZW5ndGggPT09IDEgJiYgIXBhcmVudC5pc0dyb3VuZCkge1xyXG4gICAgICAgICAgICBjaGlsZCA9IHBhcmVudDtcclxuICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwYXJlbnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ0xNQ1BGQ0kwMDgzNCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleEluUGFyZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGluZGV4SW5QYXJlbnQgPSBwYXJlbnQuY29udGVudEl0ZW1zLmluZGV4T2YoY2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocGFyZW50SWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudC5hZGRQb3BJblBhcmVudElkKHBhcmVudElkKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHdpbmRvdyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3aW5kb3dMZWZ0ID0gZ2xvYmFsVGhpcy5zY3JlZW5YIHx8IGdsb2JhbFRoaXMuc2NyZWVuTGVmdDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdpbmRvd1RvcCA9IGdsb2JhbFRoaXMuc2NyZWVuWSB8fCBnbG9iYWxUaGlzLnNjcmVlblRvcDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldExlZnQgPSBpdGVtLmVsZW1lbnQub2Zmc2V0TGVmdDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldFRvcCA9IGl0ZW0uZWxlbWVudC5vZmZzZXRUb3BcclxuICAgICAgICAgICAgICAgIC8vIGNvbnN0IHsgbGVmdDogb2Zmc2V0TGVmdCwgdG9wOiBvZmZzZXRUb3AgfSA9IGdldEpRdWVyeUxlZnRBbmRUb3AoaXRlbS5lbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gZ2V0RWxlbWVudFdpZHRoQW5kSGVpZ2h0KGl0ZW0uZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgd2luZG93ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHdpbmRvd0xlZnQgKyBvZmZzZXRMZWZ0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogd2luZG93VG9wICsgb2Zmc2V0VG9wLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1Db25maWcgPSBpdGVtLnRvQ29uZmlnKCk7XHJcbiAgICAgICAgICAgIGl0ZW0ucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIVJlc29sdmVkUm9vdEl0ZW1Db25maWcuaXNSb290SXRlbUNvbmZpZyhpdGVtQ29uZmlnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2kxOG5TdHJpbmdzW0kxOG5TdHJpbmdJZC5Qb3BvdXRDYW5ub3RCZUNyZWF0ZWRXaXRoR3JvdW5kSXRlbUNvbmZpZ119YCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVQb3BvdXRGcm9tSXRlbUNvbmZpZyhpdGVtQ29uZmlnLCB3aW5kb3csIHBhcmVudElkLCBpbmRleEluUGFyZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBiZWdpblZpcnR1YWxTaXplZENvbnRhaW5lckFkZGluZygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fdmlydHVhbFNpemVkQ29udGFpbmVyQWRkaW5nQmVnaW5Db3VudCsrID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZpcnR1YWxTaXplZENvbnRhaW5lcnMubGVuZ3RoID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgYWRkVmlydHVhbFNpemVkQ29udGFpbmVyKGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fdmlydHVhbFNpemVkQ29udGFpbmVycy5wdXNoKGNvbnRhaW5lcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZW5kVmlydHVhbFNpemVkQ29udGFpbmVyQWRkaW5nKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICgtLXRoaXMuX3ZpcnR1YWxTaXplZENvbnRhaW5lckFkZGluZ0JlZ2luQ291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLl92aXJ0dWFsU2l6ZWRDb250YWluZXJzLmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKGNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iZWZvcmVWaXJ0dWFsUmVjdGluZ0V2ZW50Py4oY291bnQpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5fdmlydHVhbFNpemVkQ29udGFpbmVyc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIubm90aWZ5VmlydHVhbFJlY3RpbmdSZXF1aXJlZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5hZnRlclZpcnR1YWxSZWN0aW5nRXZlbnQ/LigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmlydHVhbFNpemVkQ29udGFpbmVycy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlUG9wb3V0RnJvbUl0ZW1Db25maWcocm9vdEl0ZW1Db25maWc6IFJlc29sdmVkUm9vdEl0ZW1Db25maWcsXHJcbiAgICAgICAgd2luZG93OiBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZy5XaW5kb3csXHJcbiAgICAgICAgcGFyZW50SWQ6IHN0cmluZyB8IG51bGwsXHJcbiAgICAgICAgaW5kZXhJblBhcmVudDogbnVtYmVyIHwgbnVsbFxyXG4gICAgKSB7XHJcbiAgICAgICAgY29uc3QgbGF5b3V0Q29uZmlnID0gdGhpcy50b0NvbmZpZygpO1xyXG5cclxuICAgICAgICBjb25zdCBwb3BvdXRMYXlvdXRDb25maWc6IFJlc29sdmVkUG9wb3V0TGF5b3V0Q29uZmlnID0ge1xyXG4gICAgICAgICAgICByb290OiByb290SXRlbUNvbmZpZyxcclxuICAgICAgICAgICAgb3BlblBvcG91dHM6IFtdLFxyXG4gICAgICAgICAgICBzZXR0aW5nczogbGF5b3V0Q29uZmlnLnNldHRpbmdzLFxyXG4gICAgICAgICAgICBkaW1lbnNpb25zOiBsYXlvdXRDb25maWcuZGltZW5zaW9ucyxcclxuICAgICAgICAgICAgaGVhZGVyOiBsYXlvdXRDb25maWcuaGVhZGVyLFxyXG4gICAgICAgICAgICB3aW5kb3csXHJcbiAgICAgICAgICAgIHBhcmVudElkLFxyXG4gICAgICAgICAgICBpbmRleEluUGFyZW50LFxyXG4gICAgICAgICAgICByZXNvbHZlZDogdHJ1ZSxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVBvcG91dEZyb21Qb3BvdXRMYXlvdXRDb25maWcocG9wb3V0TGF5b3V0Q29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjcmVhdGVQb3BvdXRGcm9tUG9wb3V0TGF5b3V0Q29uZmlnKGNvbmZpZzogUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcpOiBCcm93c2VyUG9wb3V0IHtcclxuICAgICAgICBjb25zdCBjb25maWdXaW5kb3cgPSBjb25maWcud2luZG93O1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxXaW5kb3c6IFJlY3QgPSB7XHJcbiAgICAgICAgICAgIGxlZnQ6IGNvbmZpZ1dpbmRvdy5sZWZ0ID8/IChnbG9iYWxUaGlzLnNjcmVlblggfHwgZ2xvYmFsVGhpcy5zY3JlZW5MZWZ0ICsgMjApLFxyXG4gICAgICAgICAgICB0b3A6IGNvbmZpZ1dpbmRvdy50b3AgPz8gKGdsb2JhbFRoaXMuc2NyZWVuWSB8fCBnbG9iYWxUaGlzLnNjcmVlblRvcCArIDIwKSxcclxuICAgICAgICAgICAgd2lkdGg6IGNvbmZpZ1dpbmRvdy53aWR0aCA/PyA1MDAsXHJcbiAgICAgICAgICAgIGhlaWdodDogY29uZmlnV2luZG93LmhlaWdodCA/PyAzMDksXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgYnJvd3NlclBvcG91dCA9IG5ldyBCcm93c2VyUG9wb3V0KGNvbmZpZywgaW5pdGlhbFdpbmRvdywgdGhpcyk7XHJcblxyXG4gICAgICAgIGJyb3dzZXJQb3BvdXQub24oJ2luaXRpYWxpc2VkJywgKCkgPT4gdGhpcy5lbWl0KCd3aW5kb3dPcGVuZWQnLCBicm93c2VyUG9wb3V0KSk7XHJcbiAgICAgICAgYnJvd3NlclBvcG91dC5vbignY2xvc2VkJywgKCkgPT4gdGhpcy5yZWNvbmNpbGVQb3BvdXRXaW5kb3dzKCkpO1xyXG5cclxuICAgICAgICB0aGlzLl9vcGVuUG9wb3V0cy5wdXNoKGJyb3dzZXJQb3BvdXQpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5sYXlvdXRDb25maWcuc2V0dGluZ3MuY2xvc2VQb3BvdXRzT25VbmxvYWQgJiYgIXRoaXMuX3dpbmRvd0JlZm9yZVVubG9hZExpc3RlbmluZykge1xyXG4gICAgICAgICAgICBnbG9iYWxUaGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHRoaXMuX3dpbmRvd0JlZm9yZVVubG9hZExpc3RlbmVyLCB7IHBhc3NpdmU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3dpbmRvd0JlZm9yZVVubG9hZExpc3RlbmluZyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYnJvd3NlclBvcG91dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENsb3NlcyBhbGwgT3BlbiBQb3BvdXRzXHJcbiAgICAgKiBBcHBsaWNhdGlvbnMgY2FuIGNhbGwgdGhpcyBtZXRob2Qgd2hlbiBhIHBhZ2UgaXMgdW5sb2FkZWQgdG8gcmVtb3ZlIGl0cyBvcGVuIHBvcG91dHNcclxuICAgICAqL1xyXG5cclxuICAgIGNsb3NlQWxsT3BlblBvcG91dHMoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9vcGVuUG9wb3V0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9vcGVuUG9wb3V0c1tpXS5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fb3BlblBvcG91dHMubGVuZ3RoID0gMDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3dpbmRvd0JlZm9yZVVubG9hZExpc3RlbmluZykge1xyXG4gICAgICAgICAgICBnbG9iYWxUaGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHRoaXMuX3dpbmRvd0JlZm9yZVVubG9hZExpc3RlbmVyKTtcclxuICAgICAgICAgICAgdGhpcy5fd2luZG93QmVmb3JlVW5sb2FkTGlzdGVuaW5nID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXR0YWNoZXMgRHJhZ0xpc3RlbmVyIHRvIGFueSBnaXZlbiBET00gZWxlbWVudFxyXG4gICAgICogYW5kIHR1cm5zIGl0IGludG8gYSB3YXkgb2YgY3JlYXRpbmcgbmV3IENvbXBvbmVudEl0ZW1zXHJcbiAgICAgKiBieSAnZHJhZ2dpbmcnIHRoZSBET00gZWxlbWVudCBpbnRvIHRoZSBsYXlvdXRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCAtIFRoZSBIVE1MIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBsaXN0ZW5lZCB0byBmb3IgY29tbWVuY2VtZW50IG9mIGRyYWcuXHJcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50VHlwZU9ySXRlbUNvbmZpZ0NhbGxiYWNrIC0gVHlwZSBvZiBjb21wb25lbnQgdG8gYmUgY3JlYXRlZCwgb3IgYSBjYWxsYmFjayB3aGljaCB3aWxsIHByb3ZpZGUgdGhlIEl0ZW1Db25maWdcclxuICAgICAqIHRvIGJlIHVzZWQgdG8gY3JlYXRlIHRoZSBjb21wb25lbnQuXHJcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50U3RhdGUgLSBPcHRpb25hbCBpbml0aWFsIHN0YXRlIG9mIGNvbXBvbmVudC4gIFRoaXMgd2lsbCBiZSBpZ25vcmVkIGlmIGNvbXBvbmVudFR5cGVPckZ0biBpcyBhIGZ1bmN0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIGFuIG9wYXF1ZSBvYmplY3QgdGhhdCBpZGVudGlmaWVzIHRoZSBET00gZWxlbWVudFxyXG5cdCAqICAgICAgICAgIGFuZCB0aGUgYXR0YWNoZWQgaXRlbUNvbmZpZy4gVGhpcyBjYW4gYmUgdXNlZCBpblxyXG5cdCAqICAgICAgICAgIHJlbW92ZURyYWdTb3VyY2UoKSBsYXRlciB0byBnZXQgcmlkIG9mIHRoZSBkcmFnIGxpc3RlbmVycy5cclxuICAgICAqL1xyXG4gICAgbmV3RHJhZ1NvdXJjZShlbGVtZW50OiBIVE1MRWxlbWVudCwgaXRlbUNvbmZpZ0NhbGxiYWNrOiAoKSA9PiAoRHJhZ1NvdXJjZS5Db21wb25lbnRJdGVtQ29uZmlnIHwgQ29tcG9uZW50SXRlbUNvbmZpZykpOiBEcmFnU291cmNlO1xyXG4gICAgLyoqIEBkZXByZWNhdGVkIHdpbGwgYmUgcmVwbGFjZWQgaW4gdmVyc2lvbiAzIHdpdGggbmV3RHJhZ1NvdXJjZShlbGVtZW50OiBIVE1MRWxlbWVudCwgaXRlbUNvbmZpZzogQ29tcG9uZW50SXRlbUNvbmZpZykgKi9cclxuICAgIG5ld0RyYWdTb3VyY2UoZWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbXBvbmVudFR5cGU6IEpzb25WYWx1ZSwgY29tcG9uZW50U3RhdGU/OiBKc29uVmFsdWUsIHRpdGxlPzogSnNvblZhbHVlLCBpZD86IHN0cmluZyk6IERyYWdTb3VyY2U7XHJcbiAgICBuZXdEcmFnU291cmNlKGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxyXG4gICAgICAgIGNvbXBvbmVudFR5cGVPckl0ZW1Db25maWdDYWxsYmFjazogSnNvblZhbHVlIHwgKCgpID0+IChEcmFnU291cmNlLkNvbXBvbmVudEl0ZW1Db25maWcgfCBDb21wb25lbnRJdGVtQ29uZmlnKSksXHJcbiAgICAgICAgY29tcG9uZW50U3RhdGU/OiBKc29uVmFsdWUsXHJcbiAgICAgICAgdGl0bGU/OiBzdHJpbmdcclxuICAgICk6IERyYWdTb3VyY2Uge1xyXG4gICAgICAgIGNvbnN0IGRyYWdTb3VyY2UgPSBuZXcgRHJhZ1NvdXJjZSh0aGlzLCBlbGVtZW50LCBjb21wb25lbnRUeXBlT3JJdGVtQ29uZmlnQ2FsbGJhY2ssIGNvbXBvbmVudFN0YXRlLCB0aXRsZSk7XHJcbiAgICAgICAgdGhpcy5fZHJhZ1NvdXJjZXMucHVzaChkcmFnU291cmNlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRyYWdTb3VyY2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGEgRHJhZ0xpc3RlbmVyIGFkZGVkIGJ5IGNyZWF0ZURyYWdTb3VyY2UoKSBzbyB0aGUgY29ycmVzcG9uZGluZ1xyXG4gICAgICogRE9NIGVsZW1lbnQgaXMgbm90IGEgZHJhZyBzb3VyY2UgYW55IG1vcmUuXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZURyYWdTb3VyY2UoZHJhZ1NvdXJjZTogRHJhZ1NvdXJjZSk6IHZvaWQge1xyXG5cdHJlbW92ZUZyb21BcnJheShkcmFnU291cmNlLCB0aGlzLl9kcmFnU291cmNlcyApO1xyXG5cdGRyYWdTb3VyY2UuZGVzdHJveSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUVsZW1lbnRFdmVudHVhbGx5KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudGx5RHJhZ2dpbmcoKSkge1xyXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICAgICAgICAgIHRoaXMuX2FjdGlvbnNPbkRyYWdFbmQucHVzaCgoY2FuY2VsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsKVxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGVmZXJJZkRyYWdnaW5nKGFjdGlvbjogKGNhbmNlbDogYm9vbGVhbik9PnZvaWQpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50bHlEcmFnZ2luZygpKVxyXG4gICAgICAgICAgICB0aGlzLl9hY3Rpb25zT25EcmFnRW5kLnB1c2goYWN0aW9uKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGFjdGlvbihmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZG9EZWZlcnJlZEFjdGlvbnMoY2FuY2VsOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChjb25zdCBhY3Rpb24gb2YgdGhpcy5fYWN0aW9uc09uRHJhZ0VuZCkge1xyXG4gICAgICAgICAgICBhY3Rpb24oY2FuY2VsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fYWN0aW9uc09uRHJhZ0VuZC5sZW5ndGggPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHN0YXJ0Q29tcG9uZW50RHJhZ09sZCh4OiBudW1iZXIsIHk6IG51bWJlciwgZHJhZ0xpc3RlbmVyOiBEcmFnTGlzdGVuZXIsIGNvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0sIHN0YWNrOiBTdGFjayk6IHZvaWRcclxuICAgICAgICB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3JlYXRlRHJhZ1Byb3h5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlRHJhZ1Byb3h5KGNvbXBvbmVudEl0ZW0sIHgsIHkpO1xyXG4gICAgICAgICAgICAvLyByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5ldyBEcmFnUHJveHkoXHJcbiAgICAgICAgICAgIHgsXHJcbiAgICAgICAgICAgIHksXHJcbiAgICAgICAgICAgIGRyYWdMaXN0ZW5lcixcclxuICAgICAgICAgICAgdGhpcyxcclxuICAgICAgICAgICAgY29tcG9uZW50SXRlbSxcclxuICAgICAgICAgICAgc3RhY2tcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHN0YXJ0Q29tcG9uZW50RHJhZyhldjogRHJhZ0V2ZW50LCBjb21wb25lbnRJdGVtOiBDb21wb25lbnRJdGVtKTogdm9pZFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMuX2RyYWdTdGF0ZSA9IERyYWdTdGF0ZS5DdXJyZW50bHlEcmFnZ2luZztcclxuICAgICAgICB0aGlzLl9kcmFnZ2VkQ29tcG9uZW50SXRlbSA9IGNvbXBvbmVudEl0ZW07XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHtjb25maWc6IGNvbXBvbmVudEl0ZW0udG9Db25maWcoKX07XHJcbiAgICAgICAgaWYgKGV2IGluc3RhbmNlb2YgRHJhZ0V2ZW50ICYmIGV2LmRhdGFUcmFuc2Zlcikge1xyXG4gICAgICAgICAgICBjb25zdCBqZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG4gICAgICAgICAgICBldi5kYXRhVHJhbnNmZXIuc2V0RGF0YSh0aGlzLmRyYWdEYXRhTWltZXR5cGUoKSwgamRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTWFrZSBkcmFnLWltYWdlXHJcbiAgICAgICAgY29uc3QgdGFiRWxlbWVudCA9IGNvbXBvbmVudEl0ZW0udGFiLmVsZW1lbnQ7XHJcbiAgICAgICAgLy90YWJFbGVtZW50LnN0eWxlLnZpc2liaWxpdHk9XCJ2aXNpYmxlXCI7XHJcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBjb21wb25lbnRJdGVtLnBhcmVudCBhcyBTdGFjaztcclxuICAgICAgICBjb25zdCBpc0FjdGl2ZVRhYiA9IHN0YWNrLmdldEFjdGl2ZUNvbXBvbmVudEl0ZW0oKSA9PT0gY29tcG9uZW50SXRlbTtcclxuICAgICAgICBjb25zdCBoZWFkZXJFbGVtZW50ID0gc3RhY2suaGVhZGVyLmVsZW1lbnQ7XHJcbiAgICAgICAgLy9oZWFkZXJFbGVtZW50LnN0eWxlLnZpc2liaWxpdHk9XCJoaWRkZW5cIjtcclxuICAgICAgICBjb25zdCB0YWJDbG9uZSA9IHRhYkVsZW1lbnQuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICAgIGNvbnN0IHRhYnNDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWN0aW9uJyk7XHJcbiAgICAgICAgdGFic0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuVGFicyk7XHJcbiAgICAgICAgdGFic0NvbnRhaW5lci5hcHBlbmRDaGlsZCh0YWJDbG9uZSk7XHJcbiAgICAgICAgY29uc3QgaGVhZGVyQ2xvbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWN0aW9uJyk7XHJcbiAgICAgICAgaGVhZGVyQ2xvbmUuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkhlYWRlcik7XHJcbiAgICAgICAgaGVhZGVyQ2xvbmUuYXBwZW5kQ2hpbGQodGFic0NvbnRhaW5lcik7XHJcbiAgICAgICAgbGV0IGltYWdlOiBIVE1MRWxlbWVudDtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gY29tcG9uZW50SXRlbS5jb250YWluZXIuZWxlbWVudDtcclxuICAgICAgICBjb25zdCBjb250ZW50RWxlbWVudCA9IGNvbXBvbmVudEl0ZW0uY29udGFpbmVyLmNvbnRlbnRFbGVtZW50O1xyXG4gICAgICAgIC8vIHVzdWFsbHkgc2FtZSBhcyBlZmZlY3RpdmUgY29weUZvckRyYWdJbWFnZSAtIHNlZSBjcmVhdGVDb21wb25lbnRFbGVtZW50XHJcbiAgICAgICAgY29uc3QgdXNlRnJlc2hEcmFnSW1hZ2UgPSAhIGVsZW1lbnQgfHwgZWxlbWVudCA9PT0gY29udGVudEVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKHVzZUZyZXNoRHJhZ0ltYWdlKSB7XHJcbiAgICAgICAgICAgIGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VjdGlvbicpO1xyXG4gICAgICAgICAgICBpbWFnZS5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRHJhZ0ltYWdlKTtcclxuICAgICAgICAgICAgY29uc3QgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgaW5uZXIuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkRyYWdJbWFnZUlubmVyKTtcclxuICAgICAgICAgICAgaW1hZ2UuYXBwZW5kQ2hpbGQoaGVhZGVyQ2xvbmUpO1xyXG4gICAgICAgICAgICBpbWFnZS5hcHBlbmRDaGlsZChpbm5lcik7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaW1hZ2UpO1xyXG4gICAgICAgICAgICBjb25zdCBzdGFja0JvdW5kcyA9IHN0YWNrLmVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIGltYWdlLnN0eWxlLnRvcCA9IGAke3N0YWNrQm91bmRzLnRvcH1weGA7XHJcbiAgICAgICAgICAgIGltYWdlLnN0eWxlLmxlZnQgPSBgJHtzdGFja0JvdW5kcy5sZWZ0fXB4YDtcclxuICAgICAgICAgICAgaW1hZ2Uuc3R5bGUud2lkdGggPSBgJHtzdGFja0JvdW5kcy53aWR0aH1weGA7XHJcbiAgICAgICAgICAgIGltYWdlLnN0eWxlLmhlaWdodCA9IGAke3N0YWNrQm91bmRzLmhlaWdodH1weGA7XHJcbiAgICAgICAgICAgIGlubmVyLnN0eWxlLmxlZnQgPSBcIjBweFwiO1xyXG4gICAgICAgICAgICBpbm5lci5zdHlsZS5yaWdodCA9IFwiMHB4XCI7XHJcbiAgICAgICAgICAgIGlubmVyLnN0eWxlLmhlaWdodCA9IGAke3N0YWNrQm91bmRzLmhlaWdodC10YWJzQ29udGFpbmVyLmNsaWVudEhlaWdodH1weGA7XHJcbiAgICAgICAgICAgIGlubmVyLnN0eWxlLnRvcCA9IGAke3RhYnNDb250YWluZXIuY2xpZW50SGVpZ2h0fXB4YDtcclxuICAgICAgICAgICAgaW5uZXIuc3R5bGUuYm90dG9tID0gXCIwcHhcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbWFnZSA9IGVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGltYWdlLmluc2VydEJlZm9yZShoZWFkZXJDbG9uZSwgaW1hZ2UuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhlYWRlckNsb25lLnN0eWxlLmJhY2tncm91bmQgPSBcInRyYW5zcGFyZW50XCI7XHJcbiAgICAgICAgaGVhZGVyQ2xvbmUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XHJcbiAgICAgICAgaGVhZGVyQ2xvbmUuc3R5bGUudG9wID0gXCIwcHhcIjtcclxuICAgICAgICBpZiAoISBpc0FjdGl2ZVRhYikge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNpYmxpbmcgb2Ygc3RhY2suY29udGVudEl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2libGluZyAhPT0gY29tcG9uZW50SXRlbSlcclxuICAgICAgICAgICAgICAgICAgICBzaWJsaW5nLmVsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcwJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBvbGRPcGFjaXR5ID0gaW1hZ2Uuc3R5bGUub3BhY2l0eTtcclxuICAgICAgICAvL0lkZWFsbHkgd2UnZCBsaWtlIHRvIGhhdmUgdGhlIGRyYWcgaW1hZ2UgYmUgcGFydGlhbGx5IHRyYW5zcGFyZW50LlxyXG4gICAgICAgIC8vVGhhdCBpcyB0aGUgZGVmYXVsdCBvbiBGaXJlZm94LCBzbyB3ZSdyZSBPSy5cclxuICAgICAgICAvL1RoZSBmb2xsb3dpbmcgd29ya3Mgb24gR3RrV2ViS2l0IGFuZCBwcmVzdW1hYmx5IFNhZmFyaVxyXG4gICAgICAgIC8vVEhFIEZPTExPV0lORyBTRUVNUyBUTyBCRSBORUVERUQgSUYgIXVzZUZyZXNoRHJhZ0ltYWdlXHJcbiAgICAgICAgLy8oT04gQ2hyb21lL0VsZWN0cm9uL1F0IEFORCBXZWJLaXQgQlVUIE5PVCBGaXJlZm94KS5cclxuICAgICAgICBpbWFnZS5zdHlsZS5vcGFjaXR5ID0gXCIwLjZcIjtcclxuICAgICAgICAvL0hvd2V2ZXIsIGl0IHNlbWktYnJlYWtzIEZpcmVmb3gsIG1ha2luZyBpdCB0b28gdHJhbnNwYXJlbnQuXHJcbiAgICAgICAgLy9JdCBhbHNvIHNlZW1zIHRvIGhhdmUgbm8gZWZmZWN0IG9uIENocm9tZS9FbGVjdHJvbi5cclxuICAgICAgICAvL01heWJlIHRoaXMgbmVlZHMgdG8gYmUgYSBicm93c2VyLWRlcGVuZGVudCBzZXR0aW5nLiAgRklYTUUuXHJcbiAgICAgICAgLy9UaGUgb2Zmc2V0IGZyb20gdGhlIG1vdXNlIHBvaW50ZXIgaXMgd3Jvbmcgb24gR3RrV2ViS2l0OlxyXG4gICAgICAgIC8vLSBJdCBzZWVtcyB0byBpZ25vcmUgdGhlIG9mZnNldCBhbmQganVzdCBjZW50ZXIgdGhlIGltYWdlIG92ZXJcclxuICAgICAgICAvLy0gdGhlIG1vdXNlIGN1cnNvci4gRklYTUUuXHJcbiAgICAgICAgLy9QZXJoYXBzIHNjYWxlIHRoZSBpbWFnZSBpZiBpdCBpcyByZWFsbHkgbGFyZ2UuIEZJWE1FLlxyXG4gICAgICAgIGNvbnN0IGV0YXJnZXQgPSBldi50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgZFggPSBldi5vZmZzZXRYICsgZXRhcmdldC5vZmZzZXRMZWZ0O1xyXG4gICAgICAgIGNvbnN0IGRZID0gZXYub2Zmc2V0WSArIGV0YXJnZXQub2Zmc2V0VG9wO1xyXG4gICAgICAgIHRhYnNDb250YWluZXIuc3R5bGUubWFyZ2luTGVmdCA9IGAkeyhldi50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLm9mZnNldExlZnR9cHhgO1xyXG4gICAgICAgIGV2LmRhdGFUcmFuc2Zlcj8uc2V0RHJhZ0ltYWdlKGltYWdlIGFzIEhUTUxFbGVtZW50LCBkWCwgZFkpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnZHJhZ3N0YXJ0JywgZXYsIGNvbXBvbmVudEl0ZW0pO1xyXG4gICAgICAgIGVuYWJsZUlGcmFtZVBvaW50ZXJFdmVudHMoZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyBXZSBuZWVkIHRvIHZpc2libHkgcmVtb3ZlIHRoZSBjb21wb25lbnRJdGVtIGR1cmluZyBkcmFnZ2luZy5cclxuICAgICAgICAvLyBIb3dldmVyLCB0aGlzIG5lZWRzIHRvIGhhcHBlbiBhdCBhIGxhdGVyICd0aWNrJyB0aGFuIHNldERyYWdJbWFnZSxcclxuICAgICAgICAvLyBhdCBsZWFzdCBpZiAhdXNlRnJlc2hEcmFnSW1hZ2UuXHJcbiAgICAgICAgdGhpcy5fcmVtb3ZlSXRlbSA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCEgdGhpcy5fcmVtb3ZlSXRlbSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlSXRlbSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgICAgIC8vIFNldCAnaWdub3JpbmcnIHByb3BlcnR5IHNvIGNhbGN1bGF0ZUl0ZW1BcmVhcyB3b3Jrcy5cclxuICAgICAgICAgICAgLy8gVGhlIGxhdHRlciBpcyBjYWxsZWQgZnJvbSBvbkRyYWdFbnRlciwgd2hpY2ggbWF5IGhhcHBlblxyXG4gICAgICAgICAgICAvLyBiZWZvcmUgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSBhY3Rpb24uXHJcbiAgICAgICAgICAgIGZvciAobGV0IGl0ZW06IENvbnRlbnRJdGVtID0gY29tcG9uZW50SXRlbTsgOyApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGl0ZW0ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKCEgcGFyZW50KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uY29udGVudEl0ZW1zLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PT0gY29tcG9uZW50SXRlbSB8fCBpdGVtLmlzU3RhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpdGVtLmlnbm9yaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuaWdub3JpbmdDaGlsZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50LmlzR3JvdW5kKVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgaXRlbSA9IHBhcmVudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVGFrZSB0aGUgbG1faXRlbSBvdXQgb2YgdGhlIGxheW91dCAoc2V0IHBvc2l0aW9uIHRvIGFic29sdXRlKSxcclxuICAgICAgICAgICAgLy8gc28gcmVtYWluaW5nIGVsZW1lbnRzIGNhbiBiZSByZS1wb3NpdGlvbmVkLlxyXG4gICAgICAgICAgICAvLyBXaGxlIGRvaW5nIHNvLCBhZGQgYSBkYXNoZWQgYm9yZGVyIChhdCB0aGUgb2xkIHBvc2l0aW9uKVxyXG4gICAgICAgICAgICAvLyBhcyBhIHZpc3VhbCBmZWVkYmFrYy5cclxuICAgICAgICAgICAgY29uc3QgaWVsZW1lbnQgPSBjb21wb25lbnRJdGVtLmVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wYXJlbnQgPSBzdGFjay5lbGVtZW50Lm9mZnNldFBhcmVudDtcclxuICAgICAgICAgICAgY29uc3QgZHJhZ2dpbmdXaG9sZVN0YWNrID0gc3RhY2suY29udGVudEl0ZW1zLmxlbmd0aCA8PSAxO1xyXG4gICAgICAgICAgICAvLyBGVVRVUkU6IGRyYWdnaW5nV2hvbGVTdGFjayBzaG91bGQgYWxzbyBiZSBzZXQgaWYgZHJhZ2dpbmdcclxuICAgICAgICAgICAgLy8gYW4gZW50dXJlIHN0YWNrIGFzIGEgdW5pdC5cclxuICAgICAgICAgICAgaWYgKHRoaXMubGF5b3V0Q29uZmlnLnNldHRpbmdzLnNob3dPbGRQb3NpdGlvbldoZW5EcmFnZ2luZ1xyXG4gICAgICAgICAgICAgICAgJiYgc3RhY2sucGFyZW50ICYmIG9wYXJlbnQgLy8mJiBzdGFjay5wYXJlbnQuaXNHcm91bmRcclxuICAgICAgICAgICAgICAgICYmIGllbGVtZW50LnN0eWxlLnBvc2l0aW9uID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhY2tCb3VuZHMgPSBzdGFjay5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50Qm91bmRzID0gb3BhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgICAgIHN0YWNrLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImxtX2RyYWdfb2xkX3Bvc2l0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgc3RhY2suZWxlbWVudC5zdHlsZS56SW5kZXggPSAnNCc7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHJhZ2dpbmdXaG9sZVN0YWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3N0eWxlID0gc3RhY2suZWxlbWVudC5zdHlsZTtcclxuICAgICAgICAgICAgICAgICAgICBzc3R5bGUudG9wID0gYCR7c3RhY2tCb3VuZHMudG9wIC0gcGFyZW50Qm91bmRzLnRvcH1weGA7XHJcbiAgICAgICAgICAgICAgICAgICAgc3N0eWxlLmxlZnQgPSBgJHtzdGFja0JvdW5kcy5sZWZ0IC0gcGFyZW50Qm91bmRzLmxlZnR9cHhgO1xyXG4gICAgICAgICAgICAgICAgICAgIHNzdHlsZS53aWR0aCA9IGAke3N0YWNrQm91bmRzLndpZHRoIC0gMn1weGA7XHJcbiAgICAgICAgICAgICAgICAgICAgc3N0eWxlLmhlaWdodCA9IGAke3N0YWNrQm91bmRzLmhlaWdodCAtIDJ9cHhgO1xyXG4gICAgICAgICAgICAgICAgICAgIHNzdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvbnNPbkRyYWdFbmQucHVzaCgoY2FuY2VsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhY2suZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibG1fZHJhZ19vbGRfcG9zaXRpb25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhY2suZWxlbWVudC5zdHlsZS56SW5kZXggPSAnJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ2dpbmdXaG9sZVN0YWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNzdHlsZSA9IHN0YWNrLmVsZW1lbnQuc3R5bGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNzdHlsZS50b3AgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3N0eWxlLmxlZnQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3N0eWxlLndpZHRoID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNzdHlsZS5oZWlnaHQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3N0eWxlLnBvc2l0aW9uID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGhlYWRlckNsb25lLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBpZiAoISBpc0FjdGl2ZVRhYikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzaWJsaW5nIG9mIHN0YWNrLmNvbnRlbnRJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaWJsaW5nICE9PSBjb21wb25lbnRJdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaWJsaW5nLmVsZW1lbnQuc3R5bGUub3BhY2l0eSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRhYkVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xyXG4gICAgICAgICAgICBoZWFkZXJFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAnJztcclxuICAgICAgICAgICAgaWYgKHVzZUZyZXNoRHJhZ0ltYWdlKVxyXG4gICAgICAgICAgICAgICAgaW1hZ2UucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGltYWdlLnN0eWxlLm9wYWNpdHkgPSBvbGRPcGFjaXR5O1xyXG4gICAgICAgICAgICBjb21wb25lbnRJdGVtLnBhcmVudD8ucmVtb3ZlQ2hpbGQoY29tcG9uZW50SXRlbSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGNvbXBvbmVudEl0ZW0uY29udGFpbmVyO1xyXG4gICAgICAgICAgICBpZiAoY29udGFpbmVyLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zZXRWaXNpYmlsaXR5KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvbnNPbkRyYWdFbmQucHVzaCgoY2FuY2VsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnNldFZpc2liaWxpdHkodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImFmdGVyIHJlbW92ZUNoaWxkXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLl9yZW1vdmVJdGVtKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2dyYW1tYXRpY2FsbHkgZm9jdXNlcyBhbiBpdGVtLiBUaGlzIGZvY3VzZXMgdGhlIHNwZWNpZmllZCBjb21wb25lbnQgaXRlbVxyXG4gICAgICogYW5kIHRoZSBpdGVtIGVtaXRzIGEgZm9jdXMgZXZlbnRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaXRlbSAtIFRoZSBjb21wb25lbnQgaXRlbSB0byBiZSBmb2N1c2VkXHJcbiAgICAgKiBAcGFyYW0gc3VwcHJlc3NFdmVudCAtIFdoZXRoZXIgdG8gZW1pdCBmb2N1cyBldmVudFxyXG4gICAgICovXHJcbiAgICBmb2N1c0NvbXBvbmVudChpdGVtOiBDb21wb25lbnRJdGVtLCBzdXBwcmVzc0V2ZW50ID0gZmFsc2UpOiB2b2lkIHtcclxuICAgICAgICBpdGVtLmZvY3VzKHN1cHByZXNzRXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvZ3JhbW1hdGljYWxseSBibHVycyAoZGVmb2N1c2VzKSB0aGUgY3VycmVudGx5IGZvY3VzZWQgY29tcG9uZW50LlxyXG4gICAgICogSWYgYSBjb21wb25lbnQgaXRlbSBpcyBmb2N1c2VkLCB0aGVuIGl0IGlzIGJsdXJyZWQgYW5kIGFuZCB0aGUgaXRlbSBlbWl0cyBhIGJsdXIgZXZlbnRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaXRlbSAtIFRoZSBjb21wb25lbnQgaXRlbSB0byBiZSBibHVycmVkXHJcbiAgICAgKiBAcGFyYW0gc3VwcHJlc3NFdmVudCAtIFdoZXRoZXIgdG8gZW1pdCBibHVyIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIGNsZWFyQ29tcG9uZW50Rm9jdXMoc3VwcHJlc3NFdmVudCA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRGb2N1c2VkQ29tcG9uZW50SXRlbSh1bmRlZmluZWQsIHN1cHByZXNzRXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJvZ3JhbW1hdGljYWxseSBmb2N1c2VzIGEgY29tcG9uZW50IGl0ZW0gb3IgcmVtb3ZlcyBmb2N1cyAoYmx1cnMpIGZyb20gYW4gZXhpc3RpbmcgZm9jdXNlZCBjb21wb25lbnQgaXRlbS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaXRlbSAtIElmIGRlZmluZWQsIHNwZWNpZmllcyB0aGUgY29tcG9uZW50IGl0ZW0gdG8gYmUgZ2l2ZW4gZm9jdXMuICBJZiB1bmRlZmluZWQsIGNsZWFyIGNvbXBvbmVudCBmb2N1cy5cclxuICAgICAqIEBwYXJhbSBzdXBwcmVzc0V2ZW50cyAtIFdoZXRoZXIgdG8gZW1pdCBmb2N1cyBhbmQgYmx1ciBldmVudHNcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBzZXRGb2N1c2VkQ29tcG9uZW50SXRlbShpdGVtOiBDb21wb25lbnRJdGVtIHwgdW5kZWZpbmVkLCBzdXBwcmVzc0V2ZW50cyA9IGZhbHNlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGl0ZW0gIT09IHRoaXMuX2ZvY3VzZWRDb21wb25lbnRJdGVtKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgbmV3Rm9jdXNlZFBhcmVudEl0ZW06IENvbXBvbmVudFBhcmVudGFibGVJdGVtIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdGb2N1c2VkUGFyZW50SXRlbSA9PT0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmV3Rm9jdXNlZFBhcmVudEl0ZW0gPSBpdGVtLnBhcmVudEl0ZW07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9mb2N1c2VkQ29tcG9uZW50SXRlbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvbGRGb2N1c2VkSXRlbSA9IHRoaXMuX2ZvY3VzZWRDb21wb25lbnRJdGVtO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNlZENvbXBvbmVudEl0ZW0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBvbGRGb2N1c2VkSXRlbS5zZXRCbHVycmVkKHN1cHByZXNzRXZlbnRzKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9sZEZvY3VzZWRQYXJlbnRJdGVtID0gb2xkRm9jdXNlZEl0ZW0ucGFyZW50SXRlbTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdGb2N1c2VkUGFyZW50SXRlbSA9PT0gb2xkRm9jdXNlZFBhcmVudEl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdGb2N1c2VkUGFyZW50SXRlbSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2xkRm9jdXNlZFBhcmVudEl0ZW0uc2V0Rm9jdXNlZFZhbHVlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGl0ZW0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNlZENvbXBvbmVudEl0ZW0gPSBpdGVtO1xyXG4gICAgICAgICAgICAgICAgaXRlbS5zZXRGb2N1c2VkKHN1cHByZXNzRXZlbnRzKTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdGb2N1c2VkUGFyZW50SXRlbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3Rm9jdXNlZFBhcmVudEl0ZW0uc2V0Rm9jdXNlZFZhbHVlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlQ29udGVudEl0ZW1Gcm9tQ29uZmlnKGNvbmZpZzogUmVzb2x2ZWRJdGVtQ29uZmlnLCBwYXJlbnQ6IENvbnRlbnRJdGVtKTogQ29udGVudEl0ZW0ge1xyXG4gICAgICAgIHN3aXRjaCAoY29uZmlnLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5ncm91bmQ6IHRocm93IG5ldyBBc3NlcnRFcnJvcignTE1DQ0lGQzY4ODcxJyk7XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUucm93OiByZXR1cm4gbmV3IFJvd09yQ29sdW1uKGZhbHNlLCB0aGlzLCBjb25maWcgYXMgUmVzb2x2ZWRSb3dPckNvbHVtbkl0ZW1Db25maWcsIHBhcmVudCk7XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29sdW1uOiByZXR1cm4gbmV3IFJvd09yQ29sdW1uKHRydWUsIHRoaXMsIGNvbmZpZyBhcyBSZXNvbHZlZFJvd09yQ29sdW1uSXRlbUNvbmZpZywgcGFyZW50KTtcclxuICAgICAgICAgICAgY2FzZSBJdGVtVHlwZS5zdGFjazogcmV0dXJuIG5ldyBTdGFjayh0aGlzLCBjb25maWcgYXMgUmVzb2x2ZWRTdGFja0l0ZW1Db25maWcsIHBhcmVudCk7XHJcbiAgICAgICAgICAgIGNhc2UgSXRlbVR5cGUuY29tcG9uZW50OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wb25lbnRJdGVtKHRoaXMsIGNvbmZpZyBhcyBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcsIHBhcmVudCBhcyBTdGFjayk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5yZWFjaGFibGVDYXNlRXJyb3IoJ0NDQzkxMzU2NCcsIGNvbmZpZy50eXBlLCAnSW52YWxpZCBDb25maWcgSXRlbSB0eXBlIHNwZWNpZmllZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGZyb20gc3RhY2sgY29tcG9uZW50LlxyXG4gICAgICogU3RhY2sgd2lsbCBsb29rIGFmdGVyIGRvY2tpbmcgcHJvY2Vzc2luZyBhc3NvY2lhdGVkIHdpdGggbWF4aW1pc2UvbWluaW1pc2VcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICoqL1xyXG4gICAgc2V0TWF4aW1pc2VkU3RhY2soc3RhY2s6IFN0YWNrIHwgdW5kZWZpbmVkKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHN0YWNrID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX21heGltaXNlZFN0YWNrICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc01pbmltaXNlTWF4aW1pc2VkU3RhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChzdGFjayAhPT0gdGhpcy5fbWF4aW1pc2VkU3RhY2spIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tYXhpbWlzZWRTdGFjayAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzTWluaW1pc2VNYXhpbWlzZWRTdGFjaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc01heGltaXNlU3RhY2soc3RhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrTWluaW1pc2VNYXhpbWlzZWRTdGFjaygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fbWF4aW1pc2VkU3RhY2sgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXhpbWlzZWRTdGFjay5taW5pbWlzZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBzaG93QWxsQWN0aXZlQ29udGVudEl0ZW1zKCkgd2FzIGNhbGxlZCBmcm9tIENvbnRlbnRJdGVtLnNob3coKS4gIE5vdCBzdXJlIHdoYXQgaXRzIHB1cnBvc2Ugd2FzIHNvIGhhdmUgY29tbWVudGVkIG91dFxyXG4gICAgLy8gRXZlcnl0aGluZyBzZWVtcyB0byB3b3JrIG9rIHdpdGhvdXQgdGhpcy4gIEhhdmUgbGVmdCBjb21tZW50ZWQgY29kZSBqdXN0IGluIGNhc2UgdGhlcmUgd2FzIGEgcmVhc29uIGZvciBpdCBiZWNvbWVzXHJcbiAgICAvLyBhcHBhcmVudFxyXG5cclxuICAgIC8vIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIC8vIHNob3dBbGxBY3RpdmVDb250ZW50SXRlbXMoKTogdm9pZCB7XHJcbiAgICAvLyAgICAgY29uc3QgYWxsU3RhY2tzID0gdGhpcy5nZXRBbGxTdGFja3MoKTtcclxuXHJcbiAgICAvLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxTdGFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgIC8vICAgICAgICAgY29uc3Qgc3RhY2sgPSBhbGxTdGFja3NbaV07XHJcbiAgICAvLyAgICAgICAgIGNvbnN0IGFjdGl2ZUNvbnRlbnRJdGVtID0gc3RhY2suZ2V0QWN0aXZlQ29tcG9uZW50SXRlbSgpO1xyXG5cclxuICAgIC8vICAgICAgICAgaWYgKGFjdGl2ZUNvbnRlbnRJdGVtICE9PSB1bmRlZmluZWQpIHtcclxuICAgIC8vICAgICAgICAgICAgIGlmICghKGFjdGl2ZUNvbnRlbnRJdGVtIGluc3RhbmNlb2YgQ29tcG9uZW50SXRlbSkpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ0xNU0FBQ0lTMjIyOTgnKTtcclxuICAgIC8vICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYWN0aXZlQ29udGVudEl0ZW0uY29udGFpbmVyLnNob3coKTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyBoaWRlQWxsQWN0aXZlQ29udGVudEl0ZW1zKCkgd2FzIGNhbGxlZCBmcm9tIENvbnRlbnRJdGVtLmhpZGUoKS4gIE5vdCBzdXJlIHdoYXQgaXRzIHB1cnBvc2Ugd2FzIHNvIGhhdmUgY29tbWVudGVkIG91dFxyXG4gICAgLy8gRXZlcnl0aGluZyBzZWVtcyB0byB3b3JrIG9rIHdpdGhvdXQgdGhpcy4gIEhhdmUgbGVmdCBjb21tZW50ZWQgY29kZSBqdXN0IGluIGNhc2UgdGhlcmUgd2FzIGEgcmVhc29uIGZvciBpdCBiZWNvbWVzXHJcbiAgICAvLyBhcHBhcmVudFxyXG5cclxuICAgIC8vIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIC8vIGhpZGVBbGxBY3RpdmVDb250ZW50SXRlbXMoKTogdm9pZCB7XHJcbiAgICAvLyAgICAgY29uc3QgYWxsU3RhY2tzID0gdGhpcy5nZXRBbGxTdGFja3MoKTtcclxuXHJcbiAgICAvLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxTdGFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgIC8vICAgICAgICAgY29uc3Qgc3RhY2sgPSBhbGxTdGFja3NbaV07XHJcbiAgICAvLyAgICAgICAgIGNvbnN0IGFjdGl2ZUNvbnRlbnRJdGVtID0gc3RhY2suZ2V0QWN0aXZlQ29tcG9uZW50SXRlbSgpO1xyXG5cclxuICAgIC8vICAgICAgICAgaWYgKGFjdGl2ZUNvbnRlbnRJdGVtICE9PSB1bmRlZmluZWQpIHtcclxuICAgIC8vICAgICAgICAgICAgIGlmICghKGFjdGl2ZUNvbnRlbnRJdGVtIGluc3RhbmNlb2YgQ29tcG9uZW50SXRlbSkpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ0xNU0FBQ0lIMjIyOTgnKTtcclxuICAgIC8vICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgYWN0aXZlQ29udGVudEl0ZW0uY29udGFpbmVyLmhpZGUoKTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGNsZWFudXBCZWZvcmVNYXhpbWlzZWRTdGFja0Rlc3Ryb3llZChldmVudDogRXZlbnRFbWl0dGVyLkJ1YmJsaW5nRXZlbnQpIHtcclxuXHRcdGlmICh0aGlzLl9tYXhpbWlzZWRTdGFjayAhPT0gbnVsbCAmJiB0aGlzLl9tYXhpbWlzZWRTdGFjayA9PT0gZXZlbnQudGFyZ2V0KSB7XHJcblx0XHRcdHRoaXMuX21heGltaXNlZFN0YWNrLm9mZignYmVmb3JlSXRlbURlc3Ryb3llZCcsIHRoaXMuX21heGltaXNlZFN0YWNrQmVmb3JlRGVzdHJveWVkTGlzdGVuZXIpO1xyXG5cdFx0XHR0aGlzLl9tYXhpbWlzZWRTdGFjayA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgdG8gZ2V0IGFyb3VuZCBzYW5kYm94ZWQgaWZyYW1lIHJlc3RyaWN0aW9ucy5cclxuICAgICAqIElmICdhbGxvdy10b3AtbmF2aWdhdGlvbicgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgaWZyYW1lJ3MgJ3NhbmRib3gnIGF0dHJpYnV0ZVxyXG4gICAgICogKGFzIGlzIHRoZSBjYXNlIHdpdGggY29kZXBlbnMpIHRoZSBwYXJlbnQgd2luZG93IGlzIGZvcmJpZGRlbiBmcm9tIGNhbGxpbmcgY2VydGFpblxyXG4gICAgICogbWV0aG9kcyBvbiB0aGUgY2hpbGQsIHN1Y2ggYXMgd2luZG93LmNsb3NlKCkgb3Igc2V0dGluZyBkb2N1bWVudC5sb2NhdGlvbi5ocmVmLlxyXG4gICAgICpcclxuICAgICAqIFRoaXMgcHJldmVudGVkIEdvbGRlbkxheW91dCBwb3BvdXRzIGZyb20gcG9wcGluZyBpbiBpbiBjb2RlcGVucy4gVGhlIGZpeCBpcyB0byBjYWxsXHJcbiAgICAgKiBfJGNsb3NlV2luZG93IG9uIHRoZSBjaGlsZCB3aW5kb3cncyBnbCBpbnN0YW5jZSB3aGljaCAoYWZ0ZXIgYSB0aW1lb3V0IHRvIGRpc2Nvbm5lY3RcclxuICAgICAqIHRoZSBpbnZva2luZyBtZXRob2QgZnJvbSB0aGUgY2xvc2UgY2FsbCkgY2xvc2VzIGl0c2VsZi5cclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgY2xvc2VXaW5kb3coKTogdm9pZCB7XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5zZXRUaW1lb3V0KCgpID0+IGdsb2JhbFRoaXMuY2xvc2UoKSwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZ2V0QXJlYSh4OiBudW1iZXIsIHk6IG51bWJlcik6IENvbnRlbnRJdGVtLkFyZWEgfCBudWxsIHtcclxuICAgICAgICBsZXQgbWF0Y2hpbmdBcmVhID0gbnVsbDtcclxuICAgICAgICBsZXQgc21hbGxlc3RTdXJmYWNlID0gSW5maW5pdHk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pdGVtQXJlYXMgPT09IG51bGwpXHJcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlSXRlbUFyZWFzKCk7XHJcbiAgICAgICAgY29uc3QgaXRlbUFyZWFzID0gdGhpcy5faXRlbUFyZWFzIGFzIENvbnRlbnRJdGVtLkFyZWFbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1BcmVhcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBhcmVhID0gaXRlbUFyZWFzW2ldO1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICB4ID49IGFyZWEueDEgJiZcclxuICAgICAgICAgICAgICAgIHggPCBhcmVhLngyICYmIC8vIHgyIGlzIG5vdCBpbmNsdWRlZCBpbiBhcmVhXHJcbiAgICAgICAgICAgICAgICB5ID49IGFyZWEueTEgJiZcclxuICAgICAgICAgICAgICAgIHkgPCBhcmVhLnkyICYmIC8vIHkyIGlzIG5vdCBpbmNsdWRlZCBpbiBhcmVhXHJcbiAgICAgICAgICAgICAgICBzbWFsbGVzdFN1cmZhY2UgPiBhcmVhLnN1cmZhY2VcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBzbWFsbGVzdFN1cmZhY2UgPSBhcmVhLnN1cmZhY2U7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGluZ0FyZWEgPSBhcmVhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbWF0Y2hpbmdBcmVhO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNhbGN1bGF0ZUl0ZW1BcmVhcygpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBhbGxDb250ZW50SXRlbXMgPSB0aGlzLmdldEFsbENvbnRlbnRJdGVtcygpO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElmIHRoZSBsYXN0IGl0ZW0gaXMgZHJhZ2dlZCBvdXQsIGhpZ2hsaWdodCB0aGUgZW50aXJlIGNvbnRhaW5lciBzaXplIHRvXHJcbiAgICAgICAgICogYWxsb3cgdG8gcmUtZHJvcCBpdC4gdGhpcy5ncm91bmQuY29udGVudGlJdGVtcy5sZW5ndGggPT09IDAgYXQgdGhpcyBwb2ludFxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogRG9uJ3QgaW5jbHVkZSBncm91bmQgaW50byB0aGUgcG9zc2libGUgZHJvcCBhcmVhcyB0aG91Z2ggb3RoZXJ3aXNlIHNpbmNlIGl0XHJcbiAgICAgICAgICogd2lsbCB1c2VkIGZvciBldmVyeSBnYXAgaW4gdGhlIGxheW91dCwgZS5nLiBzcGxpdHRlcnNcclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCBncm91bmRJdGVtID0gdGhpcy5fZ3JvdW5kSXRlbTtcclxuICAgICAgICBpZiAoZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0xNQ0lBUjQ0MzY1Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGFsbENvbnRlbnRJdGVtcy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIC8vIE5vIHJvb3QgQ29udGVudEl0ZW0gKGp1c3QgR3JvdW5kIENvbnRlbnRJdGVtKVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3JvdW5kQXJlYSA9IGdyb3VuZEl0ZW0uZ2V0RWxlbWVudEFyZWEoKTtcclxuICAgICAgICAgICAgICAgIGlmIChncm91bmRBcmVhID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWROdWxsRXJyb3IoJ0xNQ0lBUkE0NDM2NScpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1BcmVhcyA9IFtncm91bmRBcmVhXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChhbGxDb250ZW50SXRlbXNbMV0uaXNTdGFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vIHJvd3MvY29sdW1ucyAoZXhjZXB0IG9uZXMgd2UncmUgaWdub3JpbmcpLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHJvb3QgaXMgU3RhY2ssIHRoZW4gc3BsaXQgc3RhY2sgYW5kIHNpZGVzIG9mIExheW91dCBhcmUgc2FtZSwgc28gc2tpcCBzaWRlc1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1BcmVhcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzaWRlcyBvZiBsYXlvdXRcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pdGVtQXJlYXMgPSBncm91bmRJdGVtLmNyZWF0ZVNpZGVBcmVhcygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsQ29udGVudEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSBhbGxDb250ZW50SXRlbXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKENvbnRlbnRJdGVtLmlzU3RhY2soc3RhY2spKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyZWEgPSBzdGFjay5nZXRBcmVhKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJlYSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pdGVtQXJlYXMucHVzaChhcmVhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YWNrQ29udGVudEFyZWFEaW1lbnNpb25zID0gc3RhY2suY29udGVudEFyZWFEaW1lbnNpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrQ29udGVudEFyZWFEaW1lbnNpb25zID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdMTUNJQVNDNDU1OTknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGlnaGxpZ2h0QXJlYSA9IHN0YWNrQ29udGVudEFyZWFEaW1lbnNpb25zLmhlYWRlci5oaWdobGlnaHRBcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3VyZmFjZSA9IChoaWdobGlnaHRBcmVhLngyIC0gaGlnaGxpZ2h0QXJlYS54MSkgKiAoaGlnaGxpZ2h0QXJlYS55MiAtIGhpZ2hsaWdodEFyZWEueTEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXI6IENvbnRlbnRJdGVtLkFyZWEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxOiBoaWdobGlnaHRBcmVhLngxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MjogaGlnaGxpZ2h0QXJlYS54MixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeTE6IGhpZ2hsaWdodEFyZWEueTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkyOiBoaWdobGlnaHRBcmVhLnkyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50SXRlbTogc3RhY2ssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cmZhY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pdGVtQXJlYXMucHVzaChoZWFkZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwibC1tIGNhbGN1bGF0ZUl0ZW1BcmVhczogXCIrdGhpcy5faXRlbUFyZWFzLmxlbmd0aCtcIiBhcmVhc1wiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCBhcyBwYXJ0IG9mIGxvYWRpbmcgYSBuZXcgbGF5b3V0IChpbmNsdWRpbmcgaW5pdGlhbCBpbml0KCkpLlxyXG4gICAgICogQ2hlY2tzIHRvIHNlZSBsYXlvdXQgaGFzIGEgbWF4aW1pc2VkIGl0ZW0uIElmIHNvLCBpdCBtYXhpbWlzZXMgdGhhdCBpdGVtLlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2hlY2tMb2FkZWRMYXlvdXRNYXhpbWlzZUl0ZW0oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdMTUNMTE1JNDM0MzInKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjb25maWdNYXhpbWlzZWRJdGVtcyA9IHRoaXMuX2dyb3VuZEl0ZW0uZ2V0Q29uZmlnTWF4aW1pc2VkSXRlbXMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb25maWdNYXhpbWlzZWRJdGVtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXRlbSA9IGNvbmZpZ01heGltaXNlZEl0ZW1zWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKENvbnRlbnRJdGVtLmlzQ29tcG9uZW50SXRlbShpdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gaXRlbS5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkTnVsbEVycm9yKCdMTVhMTE1JNjk5OTknKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtID0gc3RhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFDb250ZW50SXRlbS5pc1N0YWNrKGl0ZW0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdMTUNMTE1JMTk5OTMnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5tYXhpbWlzZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcHJvY2Vzc01heGltaXNlU3RhY2soc3RhY2s6IFN0YWNrKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fbWF4aW1pc2VkU3RhY2sgPSBzdGFjaztcclxuICAgICAgICBzdGFjay5vbignYmVmb3JlSXRlbURlc3Ryb3llZCcsIHRoaXMuX21heGltaXNlZFN0YWNrQmVmb3JlRGVzdHJveWVkTGlzdGVuZXIpO1xyXG4gICAgICAgIHN0YWNrLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLk1heGltaXNlZCk7XHJcbiAgICAgICAgc3RhY2suZWxlbWVudC5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgdGhpcy5fbWF4aW1pc2VQbGFjZWhvbGRlcik7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdMTU1YSTE5OTkzJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZ3JvdW5kSXRlbS5lbGVtZW50LnByZXBlbmQoc3RhY2suZWxlbWVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5jb250YWluZXJXaWR0aEFuZEhlaWdodCgpO1xyXG4gICAgICAgICAgICBzZXRFbGVtZW50V2lkdGgoc3RhY2suZWxlbWVudCwgd2lkdGgpO1xyXG4gICAgICAgICAgICBzZXRFbGVtZW50SGVpZ2h0KHN0YWNrLmVsZW1lbnQsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIHN0YWNrLnVwZGF0ZVNpemUoKTtcclxuICAgICAgICAgICAgc3RhY2suZm9jdXNBY3RpdmVDb250ZW50SXRlbSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9tYXhpbWlzZWRTdGFjay5lbWl0KCdtYXhpbWlzZWQnKTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdzdGF0ZUNoYW5nZWQnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBwcm9jZXNzTWluaW1pc2VNYXhpbWlzZWRTdGFjaygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fbWF4aW1pc2VkU3RhY2sgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ0xNTU1TNzQ0MjInKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBzdGFjayA9IHRoaXMuX21heGltaXNlZFN0YWNrO1xyXG4gICAgICAgICAgICBpZiAoc3RhY2sucGFyZW50ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignTE1NSTEzNjY4Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5NYXhpbWlzZWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWF4aW1pc2VQbGFjZWhvbGRlci5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyZW5kJywgc3RhY2suZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXhpbWlzZVBsYWNlaG9sZGVyLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgc3RhY2sucGFyZW50LnVwZGF0ZVNpemUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21heGltaXNlZFN0YWNrID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgc3RhY2sub2ZmKCdiZWZvcmVJdGVtRGVzdHJveWVkJywgdGhpcy5fbWF4aW1pc2VkU3RhY2tCZWZvcmVEZXN0cm95ZWRMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICBzdGFjay5lbWl0KCdtaW5pbWlzZWQnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnc3RhdGVDaGFuZ2VkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJdGVyYXRlcyB0aHJvdWdoIHRoZSBhcnJheSBvZiBvcGVuIHBvcG91dCB3aW5kb3dzIGFuZCByZW1vdmVzIHRoZSBvbmVzXHJcbiAgICAgKiB0aGF0IGFyZSBlZmZlY3RpdmVseSBjbG9zZWQuIFRoaXMgaXMgbmVjZXNzYXJ5IGR1ZSB0byB0aGUgbGFjayBvZiByZWxpYWJseVxyXG4gICAgICogbGlzdGVuaW5nIGZvciB3aW5kb3cuY2xvc2UgLyB1bmxvYWQgZXZlbnRzIGluIGEgY3Jvc3MgYnJvd3NlciBjb21wYXRpYmxlIGZhc2hpb24uXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZWNvbmNpbGVQb3BvdXRXaW5kb3dzKCkge1xyXG4gICAgICAgIGNvbnN0IG9wZW5Qb3BvdXRzOiBCcm93c2VyUG9wb3V0W10gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9vcGVuUG9wb3V0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3BlblBvcG91dHNbaV0uZ2V0V2luZG93KCkuY2xvc2VkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgb3BlblBvcG91dHMucHVzaCh0aGlzLl9vcGVuUG9wb3V0c1tpXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3dpbmRvd0Nsb3NlZCcsIHRoaXMuX29wZW5Qb3BvdXRzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX29wZW5Qb3BvdXRzLmxlbmd0aCAhPT0gb3BlblBvcG91dHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wZW5Qb3BvdXRzID0gb3BlblBvcG91dHM7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnc3RhdGVDaGFuZ2VkJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgYWxsIGNvbnRlbnQgaXRlbXMsXHJcbiAgICAgKiByZWdhcmRsZXMgb2YgbGV2ZWwgb3IgdHlwZVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0QWxsQ29udGVudEl0ZW1zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignTE1HQUNJMTMxMzAnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ3JvdW5kSXRlbS5nZXRBbGxDb250ZW50SXRlbXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIFN1YndpbmRvd3MgKGlmIHRoZXJlIGFyZSBhbnkpLiBUaHJvd3MgYW4gZXJyb3JcclxuICAgICAqIGlmIHBvcG91dHMgYXJlIGJsb2NrZWQuXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVTdWJXaW5kb3dzKCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sYXlvdXRDb25maWcub3BlblBvcG91dHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcG9wb3V0Q29uZmlnID0gdGhpcy5sYXlvdXRDb25maWcub3BlblBvcG91dHNbaV07XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUG9wb3V0RnJvbVBvcG91dExheW91dENvbmZpZyhwb3BvdXRDb25maWcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlYm91bmNlcyByZXNpemUgZXZlbnRzXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVDb250YWluZXJSZXNpemUoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVzaXplV2l0aENvbnRhaW5lckF1dG9tYXRpY2FsbHkpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzUmVzaXplV2l0aERlYm91bmNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVib3VuY2VzIHJlc2l6ZSBldmVudHNcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHByb2Nlc3NSZXNpemVXaXRoRGVib3VuY2UoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVzaXplRGVib3VuY2VFeHRlbmRlZFdoZW5Qb3NzaWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrQ2xlYXJSZXNpemVUaW1lb3V0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fcmVzaXplVGltZW91dElkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVzaXplVGltZW91dElkID0gc2V0VGltZW91dChcclxuICAgICAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXNpemVUaW1lb3V0SWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTaXplRnJvbUNvbnRhaW5lcigpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplRGVib3VuY2VJbnRlcnZhbCxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0NsZWFyUmVzaXplVGltZW91dCgpIHtcclxuICAgICAgICBpZiAodGhpcy5fcmVzaXplVGltZW91dElkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3Jlc2l6ZVRpbWVvdXRJZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZVRpbWVvdXRJZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXRlcm1pbmVzIHdoYXQgZWxlbWVudCB0aGUgbGF5b3V0IHdpbGwgYmUgY3JlYXRlZCBpblxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2V0Q29udGFpbmVyKCkge1xyXG4gICAgICAgIGNvbnN0IGJvZHlFbGVtZW50ID0gZG9jdW1lbnQuYm9keTtcclxuICAgICAgICBjb25zdCBjb250YWluZXJFbGVtZW50ID0gdGhpcy5fY29udGFpbmVyRWxlbWVudCA/PyBib2R5RWxlbWVudDtcclxuXHJcbiAgICAgICAgaWYgKGNvbnRhaW5lckVsZW1lbnQgPT09IGJvZHlFbGVtZW50XHJcbiAgICAgICAgICAgICAgICAmJiBib2R5RWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc2l6ZVdpdGhDb250YWluZXJBdXRvbWF0aWNhbGx5ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuICAgICAgICAgICAgZG9jdW1lbnRFbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDAlJztcclxuICAgICAgICAgICAgZG9jdW1lbnRFbGVtZW50LnN0eWxlLm1hcmdpbiA9ICcwJztcclxuICAgICAgICAgICAgZG9jdW1lbnRFbGVtZW50LnN0eWxlLnBhZGRpbmcgPSAnMCc7XHJcbiAgICAgICAgICAgIGRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdjbGlwJztcclxuICAgICAgICAgICAgYm9keUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgICAgICBib2R5RWxlbWVudC5zdHlsZS5tYXJnaW4gPSAnMCc7XHJcbiAgICAgICAgICAgIGJvZHlFbGVtZW50LnN0eWxlLnBhZGRpbmcgPSAnMCc7XHJcbiAgICAgICAgICAgIGJvZHlFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2NsaXAnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fY29udGFpbmVyRWxlbWVudCA9IGNvbnRhaW5lckVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgd2luZG93IGlzIGNsb3NlZCBvciB0aGUgdXNlciBuYXZpZ2F0ZXMgYXdheVxyXG4gICAgICogZnJvbSB0aGUgcGFnZVxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKiBAZGVwcmVjYXRlZCB0byBiZSByZW1vdmVkIGluIHZlcnNpb24gM1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uQmVmb3JlVW5sb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRqdXN0cyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdG8gYmUgbG93ZXIgdG8gZml0IHRoZSBzY3JlZW4gYW5kIHN0aWxsIG1haW50YWluIG1pbkl0ZW1XaWR0aC5cclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFkanVzdENvbHVtbnNSZXNwb25zaXZlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignTE1BQ1IyMDg4MycpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpcnN0TG9hZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBtaW4gd2lkdGggc2V0LCBvciBub3QgY29udGVudCBpdGVtcywgZG8gbm90aGluZy5cclxuICAgICAgICAgICAgaWYgKHRoaXMudXNlUmVzcG9uc2l2ZUxheW91dCgpICYmXHJcbiAgICAgICAgICAgICAgICAhdGhpcy5fdXBkYXRpbmdDb2x1bW5zUmVzcG9uc2l2ZSAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZ3JvdW5kSXRlbS5jb250ZW50SXRlbXMubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZ3JvdW5kSXRlbS5jb250ZW50SXRlbXNbMF0uaXNSb3cpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd2lkdGggPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdMTUFDUjc3NDEyJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG9ubHkgb25lIGNvbHVtbiwgZG8gbm90aGluZy5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2x1bW5Db3VudCA9IHRoaXMuX2dyb3VuZEl0ZW0uY29udGVudEl0ZW1zWzBdLmNvbnRlbnRJdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbkNvdW50IDw9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXkgYWxsIHN0aWxsIGZpdCwgZG8gbm90aGluZy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluSXRlbVdpZHRoID0gdGhpcy5sYXlvdXRDb25maWcuZGltZW5zaW9ucy5kZWZhdWx0TWluSXRlbVdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0b3RhbE1pbldpZHRoID0gY29sdW1uQ291bnQgKiBtaW5JdGVtV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b3RhbE1pbldpZHRoIDw9IHRoaXMuX3dpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHVwZGF0ZXMgd2hpbGUgaXQgaXMgYWxyZWFkeSBoYXBwZW5pbmcuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGluZ0NvbHVtbnNSZXNwb25zaXZlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaWd1cmUgb3V0IGhvdyBtYW55IGNvbHVtbnMgdG8gc3RhY2ssIGFuZCBwdXQgdGhlbSBhbGwgaW4gdGhlIGZpcnN0IHN0YWNrIGNvbnRhaW5lci5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbmFsQ29sdW1uQ291bnQgPSBNYXRoLm1heChNYXRoLmZsb29yKHRoaXMuX3dpZHRoIC8gbWluSXRlbVdpZHRoKSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFja0NvbHVtbkNvdW50ID0gY29sdW1uQ291bnQgLSBmaW5hbENvbHVtbkNvdW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvb3RDb250ZW50SXRlbSA9IHRoaXMuX2dyb3VuZEl0ZW0uY29udGVudEl0ZW1zWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxsU3RhY2tzID0gdGhpcy5nZXRBbGxTdGFja3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGxTdGFja3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFzc2VydEVycm9yKCdMTUFDUlM3NzQxMycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0U3RhY2tDb250YWluZXIgPSBhbGxTdGFja3NbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGFja0NvbHVtbkNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RhY2sgZnJvbSByaWdodC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sdW1uID0gcm9vdENvbnRlbnRJdGVtLmNvbnRlbnRJdGVtc1tyb290Q29udGVudEl0ZW0uY29udGVudEl0ZW1zLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZENoaWxkQ29udGVudEl0ZW1zVG9Db250YWluZXIoZmlyc3RTdGFja0NvbnRhaW5lciwgY29sdW1uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0aW5nQ29sdW1uc1Jlc3BvbnNpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERldGVybWluZXMgaWYgcmVzcG9uc2l2ZSBsYXlvdXQgc2hvdWxkIGJlIHVzZWQuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiByZXNwb25zaXZlIGxheW91dCBzaG91bGQgYmUgdXNlZDsgb3RoZXJ3aXNlIGZhbHNlLlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgdXNlUmVzcG9uc2l2ZUxheW91dCgpIHtcclxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IHRoaXMubGF5b3V0Q29uZmlnLnNldHRpbmdzO1xyXG4gICAgICAgIGNvbnN0IGFsd2F5c1Jlc3BvbnNpdmVNb2RlID0gc2V0dGluZ3MucmVzcG9uc2l2ZU1vZGUgPT09IFJlc3BvbnNpdmVNb2RlLmFsd2F5cztcclxuICAgICAgICBjb25zdCBvbkxvYWRSZXNwb25zaXZlTW9kZUFuZEZpcnN0ID0gc2V0dGluZ3MucmVzcG9uc2l2ZU1vZGUgPT09IFJlc3BvbnNpdmVNb2RlLm9ubG9hZCAmJiB0aGlzLl9maXJzdExvYWQ7XHJcbiAgICAgICAgcmV0dXJuIGFsd2F5c1Jlc3BvbnNpdmVNb2RlIHx8IG9uTG9hZFJlc3BvbnNpdmVNb2RlQW5kRmlyc3Q7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGFsbCBjaGlsZHJlbiBvZiBhIG5vZGUgdG8gYW5vdGhlciBjb250YWluZXIgcmVjdXJzaXZlbHkuXHJcbiAgICAgKiBAcGFyYW0gY29udGFpbmVyIC0gQ29udGFpbmVyIHRvIGFkZCBjaGlsZCBjb250ZW50IGl0ZW1zIHRvLlxyXG4gICAgICogQHBhcmFtIG5vZGUgLSBOb2RlIHRvIHNlYXJjaCBmb3IgY29udGVudCBpdGVtcy5cclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFkZENoaWxkQ29udGVudEl0ZW1zVG9Db250YWluZXIoY29udGFpbmVyOiBDb250ZW50SXRlbSwgbm9kZTogQ29udGVudEl0ZW0pIHtcclxuICAgICAgICBjb25zdCBjb250ZW50SXRlbXMgPSBub2RlLmNvbnRlbnRJdGVtcztcclxuICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFN0YWNrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gY29udGVudEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChpdGVtLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hZGRDaGlsZChpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudEl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gY29udGVudEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRDaGlsZENvbnRlbnRJdGVtc1RvQ29udGFpbmVyKGNvbnRhaW5lciwgaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbkRyYWdFbnRlcihlOiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3JlbW92ZUl0ZW0pXHJcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUl0ZW0oKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgRHJhZ0V2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChlLmRhdGFUcmFuc2ZlcikgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdtb3ZlJztcclxuICAgICAgICAgICAgaWYgKCEgdGhpcy52YWxpZERyYWdFdmVudChlKSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2RyYWdFbnRlckNvdW50ID09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdkcmFnLWVudGVyLXdpbmRvdycsIGUpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZUl0ZW1BcmVhcygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9kcmFnRW50ZXJDb3VudCsrO1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uRHJhZ0xlYXZlKGU6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLl9sYXN0RHJhZ0xlYXZlVGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIERyYWdFdmVudCkge1xyXG4gICAgICAgICAgICBpZiAoISB0aGlzLnZhbGlkRHJhZ0V2ZW50KGUpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9kcmFnRW50ZXJDb3VudC0tO1xyXG4gICAgICAgIGlmICh0aGlzLl9kcmFnRW50ZXJDb3VudCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXhpdERyYWcoKTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdkcmFnLWxlYXZlLXdpbmRvdycsIGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uRHJhZ092ZXIoZTogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgRHJhZ0V2ZW50ICYmIGUuZGF0YVRyYW5zZmVyKSBlLmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gJ21vdmUnO1xyXG4gICAgICAgIGNvbnN0IHZhbGlkID0gZSBpbnN0YW5jZW9mIERyYWdFdmVudCAmJiB0aGlzLnZhbGlkRHJhZ0V2ZW50KGUpO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCJkcmFnb3ZlciBcIisoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpK1wiIHZhbGlkOlwiK3ZhbGlkK1wiIGVudGVyY291bnQ6XCIrdGhpcy5fZHJhZ0VudGVyQ291bnQrKGUgaW5zdGFuY2VvZiBEcmFnRXZlbnQgPyAoXCIgZHJvcEVmZmVjdDpcIitlLmRhdGFUcmFuc2Zlcj8uZHJvcEVmZmVjdCk6XCJcIikpO1xyXG4gICAgICAgIC8vICAgICAgZHJhZy1saXN0ZW5lci5vblBvaW50ZXJNb3ZlIC0+IGVtaXQoJ2RyYWcnLCAuLi4pXHJcbiAgICAgICAgdGhpcy5vbkRyYWcoZSk7XHJcbiAgICAgICAgaWYgKHZhbGlkICYmIHRoaXMuX2FyZWEpXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gYWxsb3cgZHJvcFxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25EcmFnRW5kKCBzY3JlZW5YOiBudW1iZXIsIHNjcmVlblk6IG51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgICBldmVudDogTW91c2VFdmVudHxudWxsID0gbnVsbCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwib25EcmFnRW5kIHN0OlwiK3RoaXMuX2RyYWdTdGF0ZStcIiB0aW1lcjpcIit0aGlzLmRlbGF5ZWREcmFnRW5kVGltZXIpO1xyXG5cclxuICAgICAgICAvLyBUaGVyZSBhcmUgZm91ciBjYXNlcyB3ZSB3YW50IHRvIGhhbmRsZS4gVW5mb3J0dW5hdGVseSwgaXQgaXMgbm90XHJcbiAgICAgICAgLy8gcG9zc2libGUgdG8gcmVsaWFibHkgZGlzdGluZ3Vpc2ggdGhlbSBvbiBhbGwgYnJvd3NlcnMgd2UgY2FyZSBhYm91dC5cclxuICAgICAgICAvLyAoMSkgTm9ybWFsIGRyb3AgaW4gdGhpcyB3aW5kb3cgKF9kcmFnU3RhdGUgPT0gRHJvcHBlZEluVGhpc1dpbmRvdylcclxuICAgICAgICAvLyAoMikgTm9ybWFsIGRyb3AgaW4gb3RoZXIgd2luZG93IChfZHJhZ1N0YXRlID09IERyb3BwZWRFbHNld2hlcmUpXHJcbiAgICAgICAgLy8gV2UgY2FuJ3QgZGV0ZWN0IHRoaXMgY2FzZSB1bmxlc3Mgd2UgZ2V0IGFuIGV4dGVybmFsIG5vdGlmaWNhdGlvblxyXG4gICAgICAgIC8vICh0aGUgYXBwbGljYXRpb24gY2FsbHMgZHJvcHBlZEluT3RoZXJXaW5kb3cpLiBUaGUgbm90aWZpY2F0aW9uIG1heVxyXG4gICAgICAgIC8vIGhhcHBlbiBhZnRlciB0aGUgZHJhZ2VuZCBldmVudCwgd2hpY2ggaXMgb25lIHJlYXNvbiB3ZSB3YWl0IGEgYml0LlxyXG4gICAgICAgIC8vIElmIHdlIGRvbid0IGdldCB0aGUgbm90aWZpY2F0aW9uIGluIHRpbWUsIHdlIGhhbmRsZSBpdCBhcyBjYXNlICgzKS5cclxuICAgICAgICAvLyAoMykgRHJvcCB0byBkZXNrdG9wXHJcbiAgICAgICAgLy8gKDQpIERyYWcgd2FzIGNhbmNlbGxlZCAoYnkgdHlwaW5nIEVzYykuXHJcblxyXG4gICAgICAgIC8vIFRyeSB0byBkZXRhY3QgYSBjYW5jZWxsZWQgZHJhZy4gVGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgd2F5XHJcbiAgICAgICAgLy8gdG8gZGV0ZWN0IHRoaXMgcmVsaWFibHkgZXhjZXB0IG9uIEZpcmVmb3ggKHdpdGggbW96VXNlckNhbmNlbGxlZCkuXHJcbiAgICAgICAgLy8gTm90ZSB0aGF0IHdoaWxlIHRoZSBzcGVjaWZpY2F0aW9uIHNheXMgZHJvcEVmZmVjdCBpcyBzdXBwb3NlZFxyXG4gICAgICAgIC8vIHRvIGJlIFwibm9uZVwiIGlmIHRoZSBkcmFnIHdhcyBjYW5jZWxsZWQsIHRoaXMgaXMgdW5yZWxpYWJsZS5cclxuICAgICAgICBsZXQgY2FuY2VsID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgRHJhZ0V2ZW50XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgICYmIChldmVudC5kYXRhVHJhbnNmZXIgYXMgYW55KS5tb3pVc2VyQ2FuY2VsbGVkKVxyXG4gICAgICAgICAgICBjYW5jZWwgPSB0cnVlO1xyXG4gICAgICAgIGlmICh0aGlzLl9kcmFnU3RhdGUgPT0gRHJhZ1N0YXRlLkN1cnJlbnRseURyYWdnaW5nICYmICEgY2FuY2VsKSB7XHJcbiAgICAgICAgICAgIC8vIEhldXJpc3RpYzogSWYgdGhlIG1vc3QgcmVjZW50IGRyYWdsZWF2ZSB3YXMgbGVzcyB0aGFuIDIwMG1zIGFnbyxcclxuICAgICAgICAgICAgLy8gaXQgd2FzIHByb2JhYmx5IGNhdXNlZCBieSBhICdjYW5jZWwnIChFc2NhcGUgcHJlc3NlZCkuXHJcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIGlmIChub3cgPj0gdGhpcy5fbGFzdERyYWdMZWF2ZVRpbWVcclxuICAgICAgICAgICAgICAgICYmIG5vdyAtIHRoaXMuX2xhc3REcmFnTGVhdmVUaW1lIDw9IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgY2FuY2VsID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5fZHJhZ2dlZENvbXBvbmVudEl0ZW07XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJvbkRyYWdFbmQgbm93OlwiK0RhdGUubm93KCkrXCIgY2FuY2VsOlwiK2NhbmNlbCtcIiBjb21wOlwiK2NvbXBvbmVudCtcIiBjdXItZHJhZzpcIit0aGlzLl9kcmFnU3RhdGUrXCIgaW4td2luOlwiK3RoaXMuaW5Tb21lV2luZG93K1wiIGVjbnQ6XCIrdGhpcy5fZHJhZ0VudGVyQ291bnQpO1xyXG4gICAgICAgIC8vIGlmIHRoaXMgaXMgdGhlIG9ubHkgY29tcG9uZW50LCBhbmQgaXQgaXMgZHJvcHBlZCB0byB0aGUgZGVza3RvcCxcclxuICAgICAgICAvLyBqdXN0IHJldXNlIHRoZSB3aW5kb3cgKHRob3VnaCBtb3ZlIGl0IC0gaWYgcG9zc2libGUpLlxyXG4gICAgICAgIGNvbnN0IG9ubHlXaW5kb3cgPSBjb21wb25lbnQ/LnBhcmVudFxyXG4gICAgICAgICAgICAmJiBjb21wb25lbnQucGFyZW50LnR5cGUgPT09IFwic3RhY2tcIlxyXG4gICAgICAgICAgICAmJiBjb21wb25lbnQucGFyZW50LmNvbnRlbnRJdGVtcy5sZW5ndGggPT09IDFcclxuICAgICAgICAgICAgJiYgY29tcG9uZW50LnBhcmVudC5jb250ZW50SXRlbXNbMF0gPT09IGNvbXBvbmVudFxyXG4gICAgICAgICAgICAmJiBjb21wb25lbnQucGFyZW50LnBhcmVudD8udHlwZSA9PT0gXCJncm91bmRcIjtcclxuICAgICAgICBsZXQgZHJvcEl0ZW0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RyYWdnZWRDb21wb25lbnRJdGVtXHJcbiAgICAgICAgICAgICYmIHRoaXMuX2RyYWdTdGF0ZSA9PSBEcmFnU3RhdGUuRHJvcHBlZEluVGhpc1dpbmRvdykge1xyXG4gICAgICAgICAgICBpZiAob25seVdpbmRvdylcclxuICAgICAgICAgICAgICAgIGNhbmNlbCA9IHRydWU7XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZHJvcEl0ZW0gPSB0aGlzLl9kcmFnZ2VkQ29tcG9uZW50SXRlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbW92ZVdpbmRvdyA9ICEgY2FuY2VsICYmICEgdGhpcy5pblNvbWVXaW5kb3cgJiYgb25seVdpbmRvdztcclxuICAgICAgICBpZiAoISAoY2FuY2VsIHx8IG1vdmVXaW5kb3cpXHJcbiAgICAgICAgICAgICYmIGNvbXBvbmVudCAmJiBjb21wb25lbnQuY29udGFpbmVyXHJcbiAgICAgICAgICAgICYmIHRoaXMuX2RyYWdTdGF0ZSA+PSBEcmFnU3RhdGUuRHJvcHBlZEVsc2V3aGVyZSkge1xyXG4gICAgICAgICAgICAvLyBkcm9wcGVkIGluIG90aGVyIHdpbmRvdyBvciB0byBkZXNrdG9wXHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGNvbXBvbmVudC5wYXJlbnQ7XHJcbiAgICAgICAgICAgIC8vIGRyYWdFeHBvcnRlZCBjYWxsYmFjayBtYXkgbmVlZCBzaXplL3Bvc2l0aW9uIG9mIGVsZW1lbnQsXHJcbiAgICAgICAgICAgIC8vIHdoaWNoIGl0IGNhbid0IGdldCBpZiBkaXNwbGF5IGlzICdub25lJy5cclxuICAgICAgICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQudHlwZSA9PT0gJ3N0YWNrJylcclxuICAgICAgICAgICAgICAgIHBhcmVudC5lbGVtZW50LnN0eWxlLmRpc3BsYXk9Jyc7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudC5jb250YWluZXIuZW1pdCgnZHJhZ0V4cG9ydGVkJywgc2NyZWVuWCwgc2NyZWVuWSwgY29tcG9uZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZG9EZWZlcnJlZEFjdGlvbnMoY2FuY2VsIHx8ICEhbW92ZVdpbmRvdyk7XHJcbiAgICAgICAgaWYgKGRyb3BJdGVtICYmIHRoaXMuX2FyZWEpXHJcbiAgICAgICAgICAgIHRoaXMuX2FyZWEuY29udGVudEl0ZW0ub25Ecm9wKGRyb3BJdGVtLCB0aGlzLl9hcmVhKTtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKFwiZHJhZ2VuZCBldi1oYW5kbGVyIGVudGVyLWNvdW50OlwiK3RoaXMuX2RyYWdFbnRlckNvdW50KTtcclxuICAgICAgICAvLyBGSVhNRSBpbmNvcnBvcmF0ZSBkcmFnLWxpc3RlbmVyOnByb2Nlc3NEcmFnU3RvcFxyXG4gICAgICAgIC8vIFNlZSBwcm9jZXNzRHJhZ1N0b3AgaW4gZHJhZy1saXN0ZW5lclxyXG4gICAgICAgIC8vZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRHJhZ2dpbmcpO1xyXG4gICAgICAgIC8vIGlmIGlmcmFtZTogY2xlYXIgc3R5bGUucG9pbnRlci1ldmVudHNcclxuICAgICAgICBlbmFibGVJRnJhbWVQb2ludGVyRXZlbnRzKHRydWUpO1xyXG4gICAgICAgIGlmIChtb3ZlV2luZG93ICYmIGNvbXBvbmVudCAmJiBjb21wb25lbnQuY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudC5jb250YWluZXIuZW1pdCgnZHJhZ01vdmVkJywgc2NyZWVuWCwgc2NyZWVuWSwgY29tcG9uZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZHJhZ2dlZENvbXBvbmVudEl0ZW0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5fZHJhZ1N0YXRlID0gRHJhZ1N0YXRlLk5vdERyYWdnaW5nO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnZHJhZ2VuZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZXhpdERyYWcoKSB7XHJcbiAgICAgICAgdGhpcy5fZHJhZ0VudGVyQ291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuX2hpZGVUYXJnZXRJbmRpY2F0b3IoKTtcclxuICAgICAgICAvL3RoaXMuZHJvcFRhcmdldEluZGljYXRvci5oaWRlKCk7XHJcbiAgICAgICAgLy90aGlzLl9jb21wb25lbnRJdGVtLmV4aXREcmFnTW9kZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEEgZHJhZyB3YXMgc3RhcnRlZC9lbmRpbmcgaW4gYW5vdGhlciAodG9wLWxldmVsKSB3aW5kb3dcclxuICAgIC8vIE5lZWRzIHRvIGJlIGNhbGxlZCBmcm9tIGFwcGxpY2F0aW9uLlxyXG4gICAgcHVibGljIGRyYWdnaW5nSW5PdGhlcldpbmRvdyhlbmRpbmc6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgICBlbmFibGVJRnJhbWVQb2ludGVyRXZlbnRzKGVuZGluZyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRHJvcHBlZCB0byBhbm90aGVyICh0b3AtbGV2ZWwpIHdpbmRvdy5cclxuICAgIC8vIE5lZWRzIHRvIGJlIGNhbGxlZCBmcm9tIGFwcGxpY2F0aW9uLlxyXG4gICAgcHVibGljIGRyb3BwZWRJbk90aGVyV2luZG93KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2RyYWdTdGF0ZSA9IERyYWdTdGF0ZS5Ecm9wcGVkRWxzZXdoZXJlO1xyXG4gICAgICAgIGlmICh0aGlzLmRlbGF5ZWREcmFnRW5kRnVuY3Rpb24pXHJcbiAgICAgICAgICAgIHRoaXMuZGVsYXllZERyYWdFbmRGdW5jdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Ecm9wKGU6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLmVtaXQoJ2Ryb3AnLCBlKTtcclxuICAgICAgICBsZXQgZGF0YTtcclxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIERyYWdFdmVudCkge1xyXG4gICAgICAgICAgICBpZiAoZS5kYXRhVHJhbnNmZXIpIGUuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3Q9XCJtb3ZlXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGR2YWx1ZSA9IGUuZGF0YVRyYW5zZmVyPy5nZXREYXRhKHRoaXMuZHJhZ0RhdGFNaW1ldHlwZSgpKTtcclxuICAgICAgICAgICAgZGF0YSA9IGR2YWx1ZSAmJiBKU09OLnBhcnNlKGR2YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9kcmFnZ2VkQ29tcG9uZW50SXRlbSkge1xyXG4gICAgICAgICAgICBkYXRhID0ge2NvbmZpZzogdGhpcy5fZHJhZ2dlZENvbXBvbmVudEl0ZW0udG9Db25maWcoKX07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwib25Ecm9wIGFyZWE6XCIrdGhpcy5fYXJlYSk7XHJcbiAgICAgICAgLy8gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5leGl0RHJhZygpO1xyXG4gICAgICAgIC8vIEZJWE1FIGNoZWNrIHR5cGVcclxuXHJcbiAgICAgICAgLy8gU0VFIGRyYWctcHJveHk6b25Ecm9wXHJcbiAgICAgICAgLy9sZXQgZHJvcHBlZENvbXBvbmVudEl0ZW06IENvbXBvbmVudEl0ZW0gfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKHRoaXMuX2FyZWEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2RyYWdnZWRDb21wb25lbnRJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAvL3RoaXMuZG9EZWZlcnJlZEFjdGlvbnMoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgIGRyb3BwZWRDb21wb25lbnRJdGVtID0gdGhpcy5fZHJhZ2dlZENvbXBvbmVudEl0ZW07XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hcmVhLmNvbnRlbnRJdGVtLm9uRHJvcChkcm9wcGVkQ29tcG9uZW50SXRlbSwgdGhpcy5fYXJlYSk7XHJcbiAgICAgICAgICAgICAgICAoZHJvcHBlZENvbXBvbmVudEl0ZW0uY29udGFpbmVyLmNvbXBvbmVudCBhcyBIVE1MRWxlbWVudCkuc3R5bGUuekluZGV4ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImRyb3BwZWQgZnJvbSBkaWZmZXJlbnQgd2luZG93IFwiK0pTT04uc3RyaW5naWZ5KGRhdGEuY29uZmlnKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gbmV3IENvbXBvbmVudEl0ZW0odGhpcywgZGF0YS5jb25maWcsIHRoaXMuZ3JvdW5kSXRlbSBhcyBDb21wb25lbnRQYXJlbnRhYmxlSXRlbSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hcmVhLmNvbnRlbnRJdGVtLm9uRHJvcChpdGVtLCB0aGlzLl9hcmVhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9kcmFnU3RhdGUgPSBEcmFnU3RhdGUuRHJvcHBlZEluVGhpc1dpbmRvdztcclxuICAgICAgICBpZiAodGhpcy5kZWxheWVkRHJhZ0VuZEZ1bmN0aW9uKVxyXG4gICAgICAgICAgICB0aGlzLmRlbGF5ZWREcmFnRW5kRnVuY3Rpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpbmRzIGFsbCB0aGUgc3RhY2tzLlxyXG4gICAgICogQHJldHVybnMgVGhlIGZvdW5kIHN0YWNrIGNvbnRhaW5lcnMuXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXRBbGxTdGFja3MoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yKCdMTUZBU0M1Mjc3OCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrczogU3RhY2tbXSA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmZpbmRBbGxTdGFja3NSZWN1cnNpdmUoc3RhY2tzLCB0aGlzLl9ncm91bmRJdGVtKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzdGFja3M7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgZmluZEZpcnN0Q29udGVudEl0ZW1UeXBlKHR5cGU6IEl0ZW1UeXBlKTogQ29udGVudEl0ZW0gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9ncm91bmRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignTE1GRkNJVDgyNDQ2Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluZEZpcnN0Q29udGVudEl0ZW1UeXBlUmVjdXJzaXZlKHR5cGUsIHRoaXMuX2dyb3VuZEl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGZpbmRGaXJzdENvbnRlbnRJdGVtVHlwZVJlY3Vyc2l2ZSh0eXBlOiBJdGVtVHlwZSwgbm9kZTogQ29udGVudEl0ZW0pOiBDb250ZW50SXRlbSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW1zID0gbm9kZS5jb250ZW50SXRlbXM7XHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW1Db3VudCA9IGNvbnRlbnRJdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGNvbnRlbnRJdGVtQ291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnRJdGVtQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudEl0ZW0gPSBjb250ZW50SXRlbXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudEl0ZW0udHlwZSA9PT0gdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50SXRlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50SXRlbUNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtID0gY29udGVudEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm91bmRDb250ZW50SXRlbSA9IHRoaXMuZmluZEZpcnN0Q29udGVudEl0ZW1UeXBlUmVjdXJzaXZlKHR5cGUsIGNvbnRlbnRJdGVtKTtcclxuICAgICAgICAgICAgICAgIGlmIChmb3VuZENvbnRlbnRJdGVtICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm91bmRDb250ZW50SXRlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBmaW5kRmlyc3RDb250ZW50SXRlbVR5cGVCeUlkUmVjdXJzaXZlKHR5cGU6IEl0ZW1UeXBlLCBpZDogc3RyaW5nLCBub2RlOiBDb250ZW50SXRlbSk6IENvbnRlbnRJdGVtIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBjb250ZW50SXRlbXMgPSBub2RlLmNvbnRlbnRJdGVtcztcclxuICAgICAgICBjb25zdCBjb250ZW50SXRlbUNvdW50ID0gY29udGVudEl0ZW1zLmxlbmd0aDtcclxuICAgICAgICBpZiAoY29udGVudEl0ZW1Db3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudEl0ZW1Db3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50SXRlbSA9IGNvbnRlbnRJdGVtc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50SXRlbS50eXBlID09PSB0eXBlICYmIGNvbnRlbnRJdGVtLmlkID09PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50SXRlbTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50SXRlbUNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRJdGVtID0gY29udGVudEl0ZW1zW2ldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm91bmRDb250ZW50SXRlbSA9IHRoaXMuZmluZEZpcnN0Q29udGVudEl0ZW1UeXBlQnlJZFJlY3Vyc2l2ZSh0eXBlLCBpZCwgY29udGVudEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kQ29udGVudEl0ZW0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZENvbnRlbnRJdGVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpbmRzIGFsbCB0aGUgc3RhY2sgY29udGFpbmVycy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc3RhY2tzIC0gU2V0IG9mIGNvbnRhaW5lcnMgdG8gcG9wdWxhdGUuXHJcbiAgICAgKiBAcGFyYW0gbm9kZSAtIEN1cnJlbnQgbm9kZSB0byBwcm9jZXNzLlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZmluZEFsbFN0YWNrc1JlY3Vyc2l2ZShzdGFja3M6IFN0YWNrW10sIG5vZGU6IENvbnRlbnRJdGVtKSB7XHJcbiAgICAgICAgY29uc3QgY29udGVudEl0ZW1zID0gbm9kZS5jb250ZW50SXRlbXM7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50SXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGNvbnRlbnRJdGVtc1tpXTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBTdGFjaykge1xyXG4gICAgICAgICAgICAgICAgc3RhY2tzLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWl0ZW0uaXNDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbmRBbGxTdGFja3NSZWN1cnNpdmUoc3RhY2tzLCBpdGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIGZpbmRGaXJzdExvY2F0aW9uKHNlbGVjdG9yczogcmVhZG9ubHkgTGF5b3V0TWFuYWdlci5Mb2NhdGlvblNlbGVjdG9yW10pOiBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBjb3VudCA9IHNlbGVjdG9ycy5sZW5ndGg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yID0gc2VsZWN0b3JzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuZmluZExvY2F0aW9uKHNlbGVjdG9yKTtcclxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgZmluZExvY2F0aW9uKHNlbGVjdG9yOiBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uU2VsZWN0b3IpOiBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBzZWxlY3RvckluZGV4ID0gc2VsZWN0b3IuaW5kZXg7XHJcbiAgICAgICAgc3dpdGNoIChzZWxlY3Rvci50eXBlSWQpIHtcclxuICAgICAgICAgICAgY2FzZSBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uU2VsZWN0b3IuVHlwZUlkLkZvY3VzZWRJdGVtOiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZm9jdXNlZENvbXBvbmVudEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50SXRlbSA9IHRoaXMuX2ZvY3VzZWRDb21wb25lbnRJdGVtLnBhcmVudEl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50Q29udGVudEl0ZW1zID0gcGFyZW50SXRlbS5jb250ZW50SXRlbXM7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50Q29udGVudEl0ZW1Db3VudCA9IHBhcmVudENvbnRlbnRJdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9ySW5kZXggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXJlbnRJdGVtLCBpbmRleDogcGFyZW50Q29udGVudEl0ZW1Db3VudCB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvY3VzZWRJbmRleCA9IHBhcmVudENvbnRlbnRJdGVtcy5pbmRleE9mKHRoaXMuX2ZvY3VzZWRDb21wb25lbnRJdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBmb2N1c2VkSW5kZXggKyBzZWxlY3RvckluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gcGFyZW50Q29udGVudEl0ZW1Db3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhcmVudEl0ZW0sIGluZGV4IH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uU2VsZWN0b3IuVHlwZUlkLkZvY3VzZWRTdGFjazoge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2ZvY3VzZWRDb21wb25lbnRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEl0ZW0gPSB0aGlzLl9mb2N1c2VkQ29tcG9uZW50SXRlbS5wYXJlbnRJdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyeUNyZWF0ZUxvY2F0aW9uRnJvbVBhcmVudEl0ZW0ocGFyZW50SXRlbSwgc2VsZWN0b3JJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uU2VsZWN0b3IuVHlwZUlkLkZpcnN0U3RhY2s6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEl0ZW0gPSB0aGlzLmZpbmRGaXJzdENvbnRlbnRJdGVtVHlwZShJdGVtVHlwZS5zdGFjayk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50SXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJ5Q3JlYXRlTG9jYXRpb25Gcm9tUGFyZW50SXRlbShwYXJlbnRJdGVtLCBzZWxlY3RvckluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIExheW91dE1hbmFnZXIuTG9jYXRpb25TZWxlY3Rvci5UeXBlSWQuRmlyc3RSb3dPckNvbHVtbjoge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhcmVudEl0ZW0gPSB0aGlzLmZpbmRGaXJzdENvbnRlbnRJdGVtVHlwZShJdGVtVHlwZS5yb3cpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudEl0ZW0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyeUNyZWF0ZUxvY2F0aW9uRnJvbVBhcmVudEl0ZW0ocGFyZW50SXRlbSwgc2VsZWN0b3JJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudEl0ZW0gPSB0aGlzLmZpbmRGaXJzdENvbnRlbnRJdGVtVHlwZShJdGVtVHlwZS5jb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRJdGVtICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudHJ5Q3JlYXRlTG9jYXRpb25Gcm9tUGFyZW50SXRlbShwYXJlbnRJdGVtLCBzZWxlY3RvckluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIExheW91dE1hbmFnZXIuTG9jYXRpb25TZWxlY3Rvci5UeXBlSWQuRmlyc3RSb3c6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEl0ZW0gPSB0aGlzLmZpbmRGaXJzdENvbnRlbnRJdGVtVHlwZShJdGVtVHlwZS5yb3cpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRyeUNyZWF0ZUxvY2F0aW9uRnJvbVBhcmVudEl0ZW0ocGFyZW50SXRlbSwgc2VsZWN0b3JJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uU2VsZWN0b3IuVHlwZUlkLkZpcnN0Q29sdW1uOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRJdGVtID0gdGhpcy5maW5kRmlyc3RDb250ZW50SXRlbVR5cGUoSXRlbVR5cGUuY29sdW1uKTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRJdGVtID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50cnlDcmVhdGVMb2NhdGlvbkZyb21QYXJlbnRJdGVtKHBhcmVudEl0ZW0sIHNlbGVjdG9ySW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgTGF5b3V0TWFuYWdlci5Mb2NhdGlvblNlbGVjdG9yLlR5cGVJZC5FbXB0eToge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2dyb3VuZEl0ZW0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ0xNRkxSSUYxODI0NCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yb290SXRlbSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9ySW5kZXggPT09IHVuZGVmaW5lZCB8fCBzZWxlY3RvckluZGV4ID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFyZW50SXRlbTogdGhpcy5fZ3JvdW5kSXRlbSwgaW5kZXg6IDAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgTGF5b3V0TWFuYWdlci5Mb2NhdGlvblNlbGVjdG9yLlR5cGVJZC5Sb290OiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZ3JvdW5kSXRlbSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFVuZXhwZWN0ZWRVbmRlZmluZWRFcnJvcignTE1GTEYxODI0NCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBncm91bmRDb250ZW50SXRlbXMgPSB0aGlzLl9ncm91bmRJdGVtLmNvbnRlbnRJdGVtcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdW5kQ29udGVudEl0ZW1zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3JJbmRleCA9PT0gdW5kZWZpbmVkIHx8IHNlbGVjdG9ySW5kZXggPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXJlbnRJdGVtOiB0aGlzLl9ncm91bmRJdGVtLCBpbmRleDogMCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRJdGVtID0gZ3JvdW5kQ29udGVudEl0ZW1zWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50cnlDcmVhdGVMb2NhdGlvbkZyb21QYXJlbnRJdGVtKHBhcmVudEl0ZW0sIHNlbGVjdG9ySW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIHRyeUNyZWF0ZUxvY2F0aW9uRnJvbVBhcmVudEl0ZW0ocGFyZW50SXRlbTogQ29udGVudEl0ZW0sXHJcbiAgICAgICAgc2VsZWN0b3JJbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkXHJcbiAgICApOiBMYXlvdXRNYW5hZ2VyLkxvY2F0aW9uIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBwYXJlbnRDb250ZW50SXRlbXMgPSBwYXJlbnRJdGVtLmNvbnRlbnRJdGVtcztcclxuICAgICAgICBjb25zdCBwYXJlbnRDb250ZW50SXRlbUNvdW50ID0gcGFyZW50Q29udGVudEl0ZW1zLmxlbmd0aDtcclxuICAgICAgICBpZiAoc2VsZWN0b3JJbmRleCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHBhcmVudEl0ZW0sIGluZGV4OiBwYXJlbnRDb250ZW50SXRlbUNvdW50IH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHNlbGVjdG9ySW5kZXggPCAwIHx8IHNlbGVjdG9ySW5kZXggPiBwYXJlbnRDb250ZW50SXRlbUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFyZW50SXRlbSwgaW5kZXg6IHNlbGVjdG9ySW5kZXggfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBMYXlvdXRNYW5hZ2VyIHtcclxuICAgIGV4cG9ydCB0eXBlIEJlZm9yZVZpcnR1YWxSZWN0aW5nRXZlbnQgPSAodGhpczogdm9pZCwgY291bnQ6IG51bWJlcikgPT4gdm9pZDtcclxuICAgIGV4cG9ydCB0eXBlIEFmdGVyVmlydHVhbFJlY3RpbmdFdmVudCA9ICh0aGlzOiB2b2lkKSA9PiB2b2lkO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29uc3RydWN0b3JQYXJhbWV0ZXJzIHtcclxuICAgICAgICBjb25zdHJ1Y3Rvck9yU3ViV2luZG93TGF5b3V0Q29uZmlnOiBMYXlvdXRDb25maWcgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgaXNTdWJXaW5kb3c6IGJvb2xlYW47XHJcbiAgICAgICAgY29udGFpbmVyRWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgY29udGFpbmVyUG9zaXRpb246IE5vZGUgfCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNYXhpbWlzZVBsYWNlRWxlbWVudChkb2N1bWVudDogRG9jdW1lbnQpOiBIVE1MRWxlbWVudCB7XHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLk1heGltaXNlUGxhY2UpO1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUYWJEcm9wUGxhY2Vob2xkZXJFbGVtZW50KGRvY3VtZW50OiBEb2N1bWVudCk6IEhUTUxFbGVtZW50IHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRHJvcFRhYlBsYWNlaG9sZGVyKTtcclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNwZWNpZmllcyBhIGxvY2F0aW9uIG9mIGEgQ29udGVudEl0ZW0gd2l0aG91dCByZWZlcmVuY2luZyB0aGUgY29udGVudCBpdGVtLlxyXG4gICAgICogVXNlZCB0byBzcGVjaWZ5IHdoZXJlIGEgbmV3IGl0ZW0gaXMgdG8gYmUgYWRkZWRcclxuICAgICAqIEBwdWJsaWNcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBMb2NhdGlvbiB7XHJcbiAgICAgICAgcGFyZW50SXRlbTogQ29udGVudEl0ZW07XHJcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEEgc2VsZWN0b3IgdXNlZCB0byBzcGVjaWZ5IGEgdW5pcXVlIGxvY2F0aW9uIGluIHRoZSBsYXlvdXRcclxuICAgICAqIEBwdWJsaWNcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGludGVyZmFjZSBMb2NhdGlvblNlbGVjdG9yIHtcclxuICAgICAgICAvKiogU3BlY2lmaWVzIHNlbGVjdG9yIGFsZ29yaXRobSAqL1xyXG4gICAgICAgIHR5cGVJZDogTG9jYXRpb25TZWxlY3Rvci5UeXBlSWQ7XHJcbiAgICAgICAgLyoqIFVzZWQgYnkgYWxnb3JpdGhtIHRvIGRldGVybWluZSBpbmRleCBpbiBmb3VuZCBDb250ZW50SXRlbSAqL1xyXG4gICAgICAgIGluZGV4PzogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAcHVibGljICovXHJcbiAgICBleHBvcnQgbmFtZXNwYWNlIExvY2F0aW9uU2VsZWN0b3Ige1xyXG4gICAgICAgIGV4cG9ydCBjb25zdCBlbnVtIFR5cGVJZCB7XHJcbiAgICAgICAgICAgIC8qKiBTdGFjayB3aXRoIGZvY3VzZWQgSXRlbS4gSW5kZXggc3BlY2lmaWVzIG9mZnNldCBmcm9tIGluZGV4IG9mIGZvY3VzZWQgaXRlbSAoZWcgMSBpcyB0aGUgcG9zaXRpb24gYWZ0ZXIgZm9jdXNlZCBpdGVtKSAqL1xyXG4gICAgICAgICAgICBGb2N1c2VkSXRlbSxcclxuICAgICAgICAgICAgLyoqIFN0YWNrIHdpdGggZm9jdXNlZCBJdGVtLiBJbmRleCBzcGVjZmllcyBDb250ZW50SXRlbXMgaW5kZXggKi9cclxuICAgICAgICAgICAgRm9jdXNlZFN0YWNrLFxyXG4gICAgICAgICAgICAvKiogRmlyc3Qgc3RhY2sgZm91bmQgaW4gbGF5b3V0ICovXHJcbiAgICAgICAgICAgIEZpcnN0U3RhY2ssXHJcbiAgICAgICAgICAgIC8qKiBGaXJzdCBSb3cgb3IgQ29sdW1uIGZvdW5kIGluIGxheW91dCAocm93cyBhcmUgc2VhcmNoZWQgZmlyc3QpICovXHJcbiAgICAgICAgICAgIEZpcnN0Um93T3JDb2x1bW4sXHJcbiAgICAgICAgICAgIC8qKiBGaXJzdCBSb3cgaW4gbGF5b3V0ICovXHJcbiAgICAgICAgICAgIEZpcnN0Um93LFxyXG4gICAgICAgICAgICAvKiogRmlyc3QgQ29sdW1uIGluIGxheW91dCAqL1xyXG4gICAgICAgICAgICBGaXJzdENvbHVtbixcclxuICAgICAgICAgICAgLyoqIEZpbmRzIGEgbG9jYXRpb24gaWYgbGF5b3V0IGlzIGVtcHR5LiBUaGUgZm91bmQgbG9jYXRpb24gd2lsbCBiZSB0aGUgcm9vdCBDb250ZW50SXRlbS4gKi9cclxuICAgICAgICAgICAgRW1wdHksXHJcbiAgICAgICAgICAgIC8qKiBGaW5kcyByb290IGlmIGxheW91dCBpcyBlbXB0eSwgb3RoZXJ3aXNlIGEgY2hpbGQgdW5kZXIgcm9vdCAqL1xyXG4gICAgICAgICAgICBSb290LFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQgTG9jYXRpb25TZWxlY3RvcnMgYXJyYXkgdXNlZCBpZiBub25lIGlzIHNwZWNpZmllZC4gIFdpbGwgYWx3YXlzIGZpbmQgYSBsb2NhdGlvbi5cclxuICAgICAqIEBwdWJsaWNcclxuICAgICAqL1xyXG4gICAgZXhwb3J0IGNvbnN0IGRlZmF1bHRMb2NhdGlvblNlbGVjdG9yczogcmVhZG9ubHkgTG9jYXRpb25TZWxlY3RvcltdID0gW1xyXG4gICAgICAgIHsgdHlwZUlkOiBMb2NhdGlvblNlbGVjdG9yLlR5cGVJZC5Gb2N1c2VkU3RhY2ssIGluZGV4OiB1bmRlZmluZWQgfSxcclxuICAgICAgICB7IHR5cGVJZDogTG9jYXRpb25TZWxlY3Rvci5UeXBlSWQuRmlyc3RTdGFjaywgaW5kZXg6IHVuZGVmaW5lZCB9LFxyXG4gICAgICAgIHsgdHlwZUlkOiBMb2NhdGlvblNlbGVjdG9yLlR5cGVJZC5GaXJzdFJvd09yQ29sdW1uLCBpbmRleDogdW5kZWZpbmVkIH0sXHJcbiAgICAgICAgeyB0eXBlSWQ6IExvY2F0aW9uU2VsZWN0b3IuVHlwZUlkLlJvb3QsIGluZGV4OiB1bmRlZmluZWQgfSxcclxuICAgIF07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb2NhdGlvblNlbGVjdG9ycyB0byB0cnkgdG8gZ2V0IGxvY2F0aW9uIG5leHQgdG8gZXhpc3RpbmcgZm9jdXNlZCBpdGVtXHJcbiAgICAgKiBAcHVibGljXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBjb25zdCBhZnRlckZvY3VzZWRJdGVtSWZQb3NzaWJsZUxvY2F0aW9uU2VsZWN0b3JzOiByZWFkb25seSBMb2NhdGlvblNlbGVjdG9yW10gPSBbXHJcbiAgICAgICAgeyB0eXBlSWQ6IExvY2F0aW9uU2VsZWN0b3IuVHlwZUlkLkZvY3VzZWRJdGVtLCBpbmRleDogMSB9LFxyXG4gICAgICAgIHsgdHlwZUlkOiBMb2NhdGlvblNlbGVjdG9yLlR5cGVJZC5GaXJzdFN0YWNrLCBpbmRleDogdW5kZWZpbmVkIH0sXHJcbiAgICAgICAgeyB0eXBlSWQ6IExvY2F0aW9uU2VsZWN0b3IuVHlwZUlkLkZpcnN0Um93T3JDb2x1bW4sIGluZGV4OiB1bmRlZmluZWQgfSxcclxuICAgICAgICB7IHR5cGVJZDogTG9jYXRpb25TZWxlY3Rvci5UeXBlSWQuUm9vdCwgaW5kZXg6IHVuZGVmaW5lZCB9LFxyXG4gICAgXTtcclxufVxyXG4iLCIvKipcclxuICogTWluaWZpZXMgYW5kIHVubWluaWZpZXMgY29uZmlncyBieSByZXBsYWNpbmcgZnJlcXVlbnQga2V5c1xyXG4gKiBhbmQgdmFsdWVzIHdpdGggb25lIGxldHRlciBzdWJzdGl0dXRlcy4gQ29uZmlnIG9wdGlvbnMgbXVzdFxyXG4gKiByZXRhaW4gYXJyYXkgcG9zaXRpb24vaW5kZXgsIGFkZCBuZXcgb3B0aW9ucyBhdCB0aGUgZW5kLlxyXG4gKiBAaW50ZXJuYWxcclxuKi9cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgQ29uZmlnTWluaWZpZXIge1xyXG5cclxuICAgIGV4cG9ydCB0eXBlIFlZID0gJ2lkJyB8ICd0aXRsZSc7XHJcbiAgICBleHBvcnQgY29uc3QgZW51bSBYWCB7XHJcbiAgICAgICAgaWQgPSAnaWQnXHJcbiAgICB9XHJcbiAgICBjb25zdCBrZXlzOiByZWFkb25seSBzdHJpbmdbXSA9IFtcclxuICAgICAgICAnc2V0dGluZ3MnLFxyXG4gICAgICAgICdoYXNIZWFkZXJzJyxcclxuICAgICAgICAnY29uc3RyYWluRHJhZ1RvQ29udGFpbmVyJyxcclxuICAgICAgICAnc2VsZWN0aW9uRW5hYmxlZCcsXHJcbiAgICAgICAgJ2RpbWVuc2lvbnMnLFxyXG4gICAgICAgICdib3JkZXJXaWR0aCcsXHJcbiAgICAgICAgJ21pbkl0ZW1IZWlnaHQnLFxyXG4gICAgICAgICdtaW5JdGVtV2lkdGgnLFxyXG4gICAgICAgICdoZWFkZXJIZWlnaHQnLFxyXG4gICAgICAgICdkcmFnUHJveHlXaWR0aCcsXHJcbiAgICAgICAgJ2RyYWdQcm94eUhlaWdodCcsXHJcbiAgICAgICAgJ2xhYmVscycsXHJcbiAgICAgICAgJ2Nsb3NlJyxcclxuICAgICAgICAnbWF4aW1pc2UnLFxyXG4gICAgICAgICdtaW5pbWlzZScsXHJcbiAgICAgICAgJ3BvcG91dCcsXHJcbiAgICAgICAgJ2NvbnRlbnQnLFxyXG4gICAgICAgICdjb21wb25lbnRUeXBlJyxcclxuICAgICAgICAnY29tcG9uZW50U3RhdGUnLFxyXG4gICAgICAgICdpZCcsXHJcbiAgICAgICAgJ3dpZHRoJyxcclxuICAgICAgICAndHlwZScsXHJcbiAgICAgICAgJ2hlaWdodCcsXHJcbiAgICAgICAgJ2lzQ2xvc2FibGUnLFxyXG4gICAgICAgICd0aXRsZScsXHJcbiAgICAgICAgJ3BvcG91dFdob2xlU3RhY2snLFxyXG4gICAgICAgICdvcGVuUG9wb3V0cycsXHJcbiAgICAgICAgJ3BhcmVudElkJyxcclxuICAgICAgICAnYWN0aXZlSXRlbUluZGV4JyxcclxuICAgICAgICAncmVvcmRlckVuYWJsZWQnLFxyXG4gICAgICAgICdib3JkZXJHcmFiV2lkdGgnLFxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAvL01heGltdW0gMzYgZW50cmllcywgZG8gbm90IGNyb3NzIHRoaXMgbGluZSFcclxuICAgIF07XHJcblxyXG4gICAgY29uc3QgdmFsdWVzOiByZWFkb25seSAoYm9vbGVhbiB8IHN0cmluZylbXSA9IFtcclxuICAgICAgICB0cnVlLFxyXG4gICAgICAgIGZhbHNlLFxyXG4gICAgICAgICdyb3cnLFxyXG4gICAgICAgICdjb2x1bW4nLFxyXG4gICAgICAgICdzdGFjaycsXHJcbiAgICAgICAgJ2NvbXBvbmVudCcsXHJcbiAgICAgICAgJ2Nsb3NlJyxcclxuICAgICAgICAnbWF4aW1pc2UnLFxyXG4gICAgICAgICdtaW5pbWlzZScsXHJcbiAgICAgICAgJ29wZW4gaW4gbmV3IHdpbmRvdydcclxuICAgIF07XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNoZWNrSW5pdGlhbGlzZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoa2V5cy5sZW5ndGggPiAzNikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvbyBtYW55IGtleXMgaW4gY29uZmlnIG1pbmlmaWVyIG1hcCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlT2JqZWN0KGZyb206IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBtaW5pZnk6IGJvb2xlYW4pOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB7XHJcbiAgICAgICAgY29uc3QgdG86IFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0ge307XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZnJvbSkge1xyXG4gICAgICAgICAgICBpZiAoZnJvbS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7IC8vIEluIGNhc2Ugc29tZXRoaW5nIGhhcyBleHRlbmRlZCBPYmplY3QgcHJvdG90eXBlc1xyXG4gICAgICAgICAgICAgICAgbGV0IHRyYW5zbGF0ZWRLZXk6IHN0cmluZztcclxuICAgICAgICAgICAgICAgIGlmIChtaW5pZnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGVkS2V5ID0gbWluaWZ5S2V5KGtleSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZWRLZXkgPSB1bm1pbmlmeUtleShrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGZyb21WYWx1ZSA9IGZyb21ba2V5XTtcclxuICAgICAgICAgICAgICAgIHRvW3RyYW5zbGF0ZWRLZXldID0gdHJhbnNsYXRlVmFsdWUoZnJvbVZhbHVlLCBtaW5pZnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdG87XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlQXJyYXkoZnJvbTogdW5rbm93bltdLCBtaW5pZnk6IGJvb2xlYW4pIHtcclxuICAgICAgICBjb25zdCBsZW5ndGggPSBmcm9tLmxlbmd0aDtcclxuICAgICAgICBjb25zdCB0byA9IG5ldyBBcnJheTx1bmtub3duPihsZW5ndGgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gSW4gb3JpZ2luYWwgY29kZSwgYXJyYXkgaW5kaWNlcyB3ZXJlIG51bWJlcnMgYW5kIG5vdCB0cmFuc2xhdGVkXHJcbiAgICAgICAgICAgIGNvbnN0IGZyb21WYWx1ZSA9IGZyb21baV07XHJcbiAgICAgICAgICAgIHRvW2ldID0gdHJhbnNsYXRlVmFsdWUoZnJvbVZhbHVlLCBtaW5pZnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdG87XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlVmFsdWUoZnJvbTogdW5rbm93biwgbWluaWZ5OiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBmcm9tID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBpZiAoZnJvbSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmcm9tKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGVBcnJheShmcm9tLCBtaW5pZnkpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRlT2JqZWN0KGZyb20gYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sIG1pbmlmeSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAobWluaWZ5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWluaWZ5VmFsdWUoZnJvbSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5taW5pZnlWYWx1ZShmcm9tKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtaW5pZnlLZXkodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElmIGEgdmFsdWUgYWN0dWFsbHkgaXMgYSBzaW5nbGUgY2hhcmFjdGVyLCBwcmVmaXggaXRcclxuICAgICAgICAgKiB3aXRoIF9fXyB0byBhdm9pZCBtaXN0YWtpbmcgaXQgZm9yIGEgbWluaWZpY2F0aW9uIGNvZGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuICdfX18nICsgdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBpbmRleE9mS2V5KHZhbHVlKTtcclxuICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHZhbHVlIG5vdCBmb3VuZCBpbiB0aGUgZGljdGlvbmFyeSwgcmV0dXJuIGl0IHVubW9kaWZpZWRcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIFxyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogdmFsdWUgZm91bmQgaW4gZGljdGlvbmFyeSwgcmV0dXJuIGl0cyBiYXNlMzYgY291bnRlcnBhcnRcclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4LnRvU3RyaW5nKDM2KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW5taW5pZnlLZXkoa2V5OiBzdHJpbmcpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiB2YWx1ZSBpcyBhIHNpbmdsZSBjaGFyYWN0ZXIuIEFzc3VtZSB0aGF0IGl0J3MgYSB0cmFuc2xhdGlvblxyXG4gICAgICAgICAqIGFuZCByZXR1cm4gdGhlIG9yaWdpbmFsIHZhbHVlIGZyb20gdGhlIGRpY3Rpb25hcnlcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4ga2V5c1twYXJzZUludChrZXksIDM2KV07XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogdmFsdWUgb3JpZ2luYWxseSB3YXMgYSBzaW5nbGUgY2hhcmFjdGVyIGFuZCB3YXMgcHJlZml4ZWQgd2l0aCBfX19cclxuICAgICAgICAgKiB0byBhdm9pZCBtaXN0YWtpbmcgaXQgZm9yIGEgdHJhbnNsYXRpb24uIFJlbW92ZSB0aGUgcHJlZml4XHJcbiAgICAgICAgICogYW5kIHJldHVybiB0aGUgb3JpZ2luYWwgY2hhcmFjdGVyXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKGtleS5zdWJzdHIoMCwgMykgPT09ICdfX18nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBrZXlbM107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHZhbHVlIHdhcyBub3QgbWluaWZpZWRcclxuICAgICAgICAgKi9cclxuICAgICAgICByZXR1cm4ga2V5O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1pbmlmeVZhbHVlKHZhbHVlOiB1bmtub3duKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSWYgYSB2YWx1ZSBhY3R1YWxseSBpcyBhIHNpbmdsZSBjaGFyYWN0ZXIsIHByZWZpeCBpdFxyXG4gICAgICAgICAqIHdpdGggX19fIHRvIGF2b2lkIG1pc3Rha2luZyBpdCBmb3IgYSBtaW5pZmljYXRpb24gY29kZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJ19fXycgKyB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICBjb25zdCBpbmRleCA9IGluZGV4T2ZWYWx1ZSh2YWx1ZSk7XHJcbiAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiB2YWx1ZSBub3QgZm91bmQgaW4gdGhlIGRpY3Rpb25hcnksIHJldHVybiBpdCB1bm1vZGlmaWVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICBcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIHZhbHVlIGZvdW5kIGluIGRpY3Rpb25hcnksIHJldHVybiBpdHMgYmFzZTM2IGNvdW50ZXJwYXJ0XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleC50b1N0cmluZygzNik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVubWluaWZ5VmFsdWUodmFsdWU6IHVua25vd24pIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiB2YWx1ZSBpcyBhIHNpbmdsZSBjaGFyYWN0ZXIuIEFzc3VtZSB0aGF0IGl0J3MgYSB0cmFuc2xhdGlvblxyXG4gICAgICAgICAqIGFuZCByZXR1cm4gdGhlIG9yaWdpbmFsIHZhbHVlIGZyb20gdGhlIGRpY3Rpb25hcnlcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1twYXJzZUludCh2YWx1ZSwgMzYpXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHZhbHVlIG9yaWdpbmFsbHkgd2FzIGEgc2luZ2xlIGNoYXJhY3RlciBhbmQgd2FzIHByZWZpeGVkIHdpdGggX19fXHJcbiAgICAgICAgICogdG8gYXZvaWQgbWlzdGFraW5nIGl0IGZvciBhIHRyYW5zbGF0aW9uLiBSZW1vdmUgdGhlIHByZWZpeFxyXG4gICAgICAgICAqIGFuZCByZXR1cm4gdGhlIG9yaWdpbmFsIGNoYXJhY3RlclxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLnN1YnN0cigwLCAzKSA9PT0gJ19fXycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlWzNdO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiB2YWx1ZSB3YXMgbm90IG1pbmlmaWVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluZGV4T2ZLZXkoa2V5OiBzdHJpbmcpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGtleXNbaV0gPT09IGtleSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluZGV4T2ZWYWx1ZSh2YWx1ZTogdW5rbm93bikge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbaV0gPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRG9tQ29uc3RhbnRzIH0gZnJvbSAnLi9kb20tY29uc3RhbnRzJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi9ldmVudC1lbWl0dGVyJztcclxuaW1wb3J0IHsgZW5hYmxlSUZyYW1lUG9pbnRlckV2ZW50cyB9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgY2xhc3MgRHJhZ0xpc3RlbmVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICAgIHByaXZhdGUgX3RpbWVvdXQ6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+IHwgdW5kZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSBfb0RvY3VtZW50OiBEb2N1bWVudDtcclxuICAgIHByaXZhdGUgX2VCb2R5OiBIVE1MRWxlbWVudDtcclxuICAgIHByaXZhdGUgX25EZWxheTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfbkRpc3RhbmNlOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9uWDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfblk6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX25PcmlnaW5hbFg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX25PcmlnaW5hbFk6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX2RyYWdnaW5nOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBfcG9pbnRlclRyYWNraW5nID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBfcG9pbnRlckRvd25FdmVudExpc3RlbmVyID0gKGV2OiBQb2ludGVyRXZlbnQpID0+IHRoaXMub25Qb2ludGVyRG93bihldik7XHJcbiAgICBwcml2YXRlIF9wb2ludGVyTW92ZUV2ZW50TGlzdGVuZXIgPSAoZXY6IFBvaW50ZXJFdmVudCkgPT4gdGhpcy5vblBvaW50ZXJNb3ZlKGV2KTtcclxuICAgIHByaXZhdGUgX3BvaW50ZXJVcEV2ZW50TGlzdGVuZXIgPSAoZXY6IFBvaW50ZXJFdmVudCkgPT4gdGhpcy5vblBvaW50ZXJVcChldik7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZUVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgdGhpcy5fb0RvY3VtZW50ID0gZG9jdW1lbnQ7XHJcbiAgICAgICAgdGhpcy5fZUJvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZGVsYXkgYWZ0ZXIgd2hpY2ggdG8gc3RhcnQgdGhlIGRyYWcgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICAgICAgICogRG8gTk9UIG1ha2UgdG9vIHNob3J0IChwcmV2aW91cyB2YWx1ZSBvZiAyMDAgd2FzIG5vdCBsb25nIGVub3VnaCBmb3IgbXkgdG91Y2hwYWQpXHJcbiAgICAgICAgICogU2hvdWxkIGdlbmVyYWxseSByZWx5IG9uIHRoZSBtb3VzZSBtb3ZlIHRvIHN0YXJ0IGRyYWcuICBOb3QgdGhpcyBkZWxheS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9uRGVsYXkgPSAxODAwO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgZGlzdGFuY2UgdGhlIG1vdXNlIG5lZWRzIHRvIGJlIG1vdmVkIHRvIHF1YWxpZnkgYXMgYSBkcmFnXHJcbiAgICAgICAgICogUHJldmlvdXMgY29tbWVudDogd29ya3MgYmV0dGVyIHdpdGggZGVsYXkgb25seVxyXG4gICAgICAgICAqID8/P1xyXG4gICAgICAgICAqIFByb2JhYmx5IHNvbWVob3cgbmVlZHMgdHVuaW5nIGZvciBkaWZmZXJlbnQgZGV2aWNlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX25EaXN0YW5jZSA9IDEwO1xyXG5cclxuICAgICAgICB0aGlzLl9uWCA9IDA7XHJcbiAgICAgICAgdGhpcy5fblkgPSAwO1xyXG5cclxuICAgICAgICB0aGlzLl9uT3JpZ2luYWxYID0gMDtcclxuICAgICAgICB0aGlzLl9uT3JpZ2luYWxZID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy5fZHJhZ2dpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5fZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLl9wb2ludGVyRG93bkV2ZW50TGlzdGVuZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2hlY2tSZW1vdmVQb2ludGVyVHJhY2tpbmdFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgICAgICB0aGlzLl9lRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIHRoaXMuX3BvaW50ZXJEb3duRXZlbnRMaXN0ZW5lcik7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuY2VsRHJhZygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnByb2Nlc3NEcmFnU3RvcCh1bmRlZmluZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Qb2ludGVyRG93bihvRXZlbnQ6IFBvaW50ZXJFdmVudCkge1xyXG4gICAgICAgIGZvciAobGV0IHRhcmdldCA9IG9FdmVudC50YXJnZXQ7IDsgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgaWYgKCEgKHRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY29uc3QgZHJhZ2dhYmxlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZHJhZ2dhYmxlJyk7XHJcbiAgICAgICAgICAgIGlmIChkcmFnZ2FibGUgPT09ICd0cnVlJylcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBpZiAoZHJhZ2dhYmxlICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wcm9jZXNzUG9pbnRlckRvd24odGhpcy5nZXRQb2ludGVyQ29vcmRpbmF0ZXMob0V2ZW50KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwcm9jZXNzUG9pbnRlckRvd24oY29vcmRpbmF0ZXM6IERyYWdMaXN0ZW5lci5Qb2ludGVyQ29vcmRpbmF0ZXMpIHtcclxuICAgICAgICB0aGlzLl9uT3JpZ2luYWxYID0gY29vcmRpbmF0ZXMueDtcclxuICAgICAgICB0aGlzLl9uT3JpZ2luYWxZID0gY29vcmRpbmF0ZXMueTtcclxuXHJcbiAgICAgICAgdGhpcy5fb0RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgdGhpcy5fcG9pbnRlck1vdmVFdmVudExpc3RlbmVyKTtcclxuICAgICAgICB0aGlzLl9vRG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgdGhpcy5fcG9pbnRlclVwRXZlbnRMaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xyXG4gICAgICAgIHRoaXMuX3BvaW50ZXJUcmFja2luZyA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KFxyXG4gICAgICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnREcmFnKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICwgdGhpcy5fbkRlbGF5KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uUG9pbnRlck1vdmUob0V2ZW50OiBQb2ludGVyRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5fcG9pbnRlclRyYWNraW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc0RyYWdNb3ZlKG9FdmVudCk7XHJcbiAgICAgICAgICAgIG9FdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHByb2Nlc3NEcmFnTW92ZShkcmFnRXZlbnQ6IFBvaW50ZXJFdmVudCkge1xyXG4gICAgICAgIHRoaXMuX25YID0gZHJhZ0V2ZW50LnBhZ2VYIC0gdGhpcy5fbk9yaWdpbmFsWDtcclxuICAgICAgICB0aGlzLl9uWSA9IGRyYWdFdmVudC5wYWdlWSAtIHRoaXMuX25PcmlnaW5hbFk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9kcmFnZ2luZyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgTWF0aC5hYnModGhpcy5fblgpID4gdGhpcy5fbkRpc3RhbmNlIHx8XHJcbiAgICAgICAgICAgICAgICBNYXRoLmFicyh0aGlzLl9uWSkgPiB0aGlzLl9uRGlzdGFuY2VcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0RHJhZygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5fZHJhZ2dpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KCdkcmFnJywgdGhpcy5fblgsIHRoaXMuX25ZLCBkcmFnRXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uUG9pbnRlclVwKG9FdmVudDogUG9pbnRlckV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzRHJhZ1N0b3Aob0V2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHByb2Nlc3NEcmFnU3RvcChkcmFnRXZlbnQ/OiBQb2ludGVyRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5fdGltZW91dCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcclxuICAgICAgICAgICAgdGhpcy5fdGltZW91dCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2hlY2tSZW1vdmVQb2ludGVyVHJhY2tpbmdFdmVudExpc3RlbmVycygpO1xyXG4gICAgXHJcbiAgICAgICAgaWYgKHRoaXMuX2RyYWdnaW5nID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VCb2R5LmNsYXNzTGlzdC5yZW1vdmUoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5EcmFnZ2luZyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2VFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5EcmFnZ2luZyk7XHJcbiAgICAgICAgICAgIGVuYWJsZUlGcmFtZVBvaW50ZXJFdmVudHModHJ1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RyYWdnaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZHJhZ1N0b3AnLCBkcmFnRXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNoZWNrUmVtb3ZlUG9pbnRlclRyYWNraW5nRXZlbnRMaXN0ZW5lcnMoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3BvaW50ZXJUcmFja2luZykge1xyXG4gICAgICAgICAgICB0aGlzLl9vRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLl9wb2ludGVyTW92ZUV2ZW50TGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB0aGlzLl9vRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgdGhpcy5fcG9pbnRlclVwRXZlbnRMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMuX3BvaW50ZXJUcmFja2luZyA9IGZhbHNlO1xyXG4gICAgICAgIH0gICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGFydERyYWcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVvdXQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2RyYWdnaW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9lQm9keS5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuRHJhZ2dpbmcpO1xyXG4gICAgICAgIHRoaXMuX2VFbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5EcmFnZ2luZyk7XHJcbiAgICAgICAgZW5hYmxlSUZyYW1lUG9pbnRlckV2ZW50cyhmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdkcmFnU3RhcnQnLCB0aGlzLl9uT3JpZ2luYWxYLCB0aGlzLl9uT3JpZ2luYWxZKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFBvaW50ZXJDb29yZGluYXRlcyhldmVudDogUG9pbnRlckV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBEcmFnTGlzdGVuZXIuUG9pbnRlckNvb3JkaW5hdGVzID0ge1xyXG4gICAgICAgICAgICB4OiBldmVudC5wYWdlWCxcclxuICAgICAgICAgICAgeTogZXZlbnQucGFnZVlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgRHJhZ0xpc3RlbmVyIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgUG9pbnRlckNvb3JkaW5hdGVzIHtcclxuICAgICAgICB4OiBudW1iZXIsXHJcbiAgICAgICAgeTogbnVtYmVyLFxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEJyb3dzZXJQb3BvdXQgfSBmcm9tICcuLi9jb250cm9scy9icm93c2VyLXBvcG91dCc7XHJcbmltcG9ydCB7IFRhYiB9IGZyb20gJy4uL2NvbnRyb2xzL3RhYic7XHJcbmltcG9ydCB7IENvbXBvbmVudEl0ZW0gfSBmcm9tICcuLi9pdGVtcy9jb21wb25lbnQtaXRlbSc7XHJcblxyXG4vKipcclxuICogQSBnZW5lcmljIGFuZCB2ZXJ5IGZhc3QgRXZlbnRFbWl0dGVyIGltcGxlbWVudGF0aW9uLiBPbiB0b3Agb2YgZW1pdHRpbmcgdGhlIGFjdHVhbCBldmVudCBpdCBlbWl0cyBhblxyXG4gKiB7QGxpbmsgKEV2ZW50RW1pdHRlcjpuYW1lc3BhY2UpLkFMTF9FVkVOVH0gZXZlbnQgZm9yIGV2ZXJ5IGV2ZW50IHRyaWdnZXJlZC4gVGhpcyBhbGxvd3MgdG8gaG9vayBpbnRvIGl0IGFuZCBwcm94eSBldmVudHMgZm9yd2FyZHNcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV2ZW50RW1pdHRlciB7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9hbGxFdmVudFN1YnNjcmlwdGlvbnM6IEV2ZW50RW1pdHRlci5Vbmtub3duQ2FsbGJhY2tbXSA9IFtdO1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uc01hcCA9IG5ldyBNYXA8c3RyaW5nLCBFdmVudEVtaXR0ZXIuVW5rbm93bkNhbGxiYWNrW10+KCk7XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgdHJ5QnViYmxlRXZlbnQobmFtZTogc3RyaW5nLCBhcmdzOiB1bmtub3duW10pOiB2b2lkIHtcclxuICAgICAgICAvLyBvdmVycmlkZGVuIGJ5IENvbnRlbnRJdGVtXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbWl0IGFuIGV2ZW50IGFuZCBub3RpZnkgbGlzdGVuZXJzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGV2ZW50TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG4gICAgICogQHBhcmFtIGFyZ3MgLSBBZGRpdGlvbmFsIGFyZ3VtZW50cyB0aGF0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBsaXN0ZW5lclxyXG4gICAgICovXHJcbiAgICBlbWl0PEsgZXh0ZW5kcyBrZXlvZiBFdmVudEVtaXR0ZXIuRXZlbnRQYXJhbXNNYXA+KGV2ZW50TmFtZTogSywgLi4uYXJnczogRXZlbnRFbWl0dGVyLkV2ZW50UGFyYW1zTWFwW0tdKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHN1YmNyaXB0aW9ucyA9IHRoaXMuX3N1YnNjcmlwdGlvbnNNYXAuZ2V0KGV2ZW50TmFtZSk7XHJcblxyXG4gICAgICAgIGlmIChzdWJjcmlwdGlvbnMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBzdWJjcmlwdGlvbnMgPSBzdWJjcmlwdGlvbnMuc2xpY2UoKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdWJjcmlwdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHN1YmNyaXB0aW9uc1tpXTtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiguLi5hcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5lbWl0QWxsRXZlbnQoZXZlbnROYW1lLCBhcmdzKTtcclxuICAgICAgICB0aGlzLnRyeUJ1YmJsZUV2ZW50KGV2ZW50TmFtZSwgYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZW1pdFVua25vd24oZXZlbnROYW1lOiBzdHJpbmcsIC4uLmFyZ3M6IEV2ZW50RW1pdHRlci5Vbmtub3duUGFyYW1zKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHN1YnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zTWFwLmdldChldmVudE5hbWUpO1xyXG5cclxuICAgICAgICBpZiAoc3VicyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHN1YnMgPSBzdWJzLnNsaWNlKCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Vicy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgc3Vic1tpXSguLi5hcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5lbWl0QWxsRXZlbnQoZXZlbnROYW1lLCBhcmdzKTtcclxuICAgICAgICB0aGlzLnRyeUJ1YmJsZUV2ZW50KGV2ZW50TmFtZSwgYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogQGludGVybmFsICoqL1xyXG4gICAgZW1pdEJhc2VCdWJibGluZ0V2ZW50PEsgZXh0ZW5kcyBrZXlvZiBFdmVudEVtaXR0ZXIuRXZlbnRQYXJhbXNNYXA+KGV2ZW50TmFtZTogSyk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlci5CdWJibGluZ0V2ZW50KGV2ZW50TmFtZSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5lbWl0VW5rbm93bihldmVudE5hbWUsIGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBlbWl0VW5rbm93bkJ1YmJsaW5nRXZlbnQoZXZlbnROYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBFdmVudEVtaXR0ZXIuQnViYmxpbmdFdmVudChldmVudE5hbWUsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZW1pdFVua25vd24oZXZlbnROYW1lLCBldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIGEgbGlzdGVuZXIgZm9yIGFuIGV2ZW50LlxyXG4gICAgICogQHBhcmFtIGV2ZW50TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudFxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gVGhlIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBjYWxsYmFjayBtZXRob2QgKG9wdGlvbmFsKVxyXG4gICAgICovXHJcbiAgICByZW1vdmVFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBFdmVudEVtaXR0ZXIuRXZlbnRQYXJhbXNNYXA+KGV2ZW50TmFtZTogSywgY2FsbGJhY2s6IEV2ZW50RW1pdHRlci5DYWxsYmFjazxLPik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHVua25vd25DYWxsYmFjayA9IGNhbGxiYWNrIGFzIEV2ZW50RW1pdHRlci5Vbmtub3duQ2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVVbmtub3duRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHVua25vd25DYWxsYmFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgb2ZmPEsgZXh0ZW5kcyBrZXlvZiBFdmVudEVtaXR0ZXIuRXZlbnRQYXJhbXNNYXA+KGV2ZW50TmFtZTogSywgY2FsbGJhY2s6IEV2ZW50RW1pdHRlci5DYWxsYmFjazxLPik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciBvZmZcclxuICAgICAqL1xyXG4gICAgdW5iaW5kID0gdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgZm9yIGVtaXRcclxuICAgICAqL1xyXG4gICAgdHJpZ2dlciA9IHRoaXMuZW1pdDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIExpc3RlbiBmb3IgZXZlbnRzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGV2ZW50TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0byBsaXN0ZW4gdG9cclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayB0byBleGVjdXRlIHdoZW4gdGhlIGV2ZW50IG9jY3Vyc1xyXG4gICAgICovXHJcbiAgICBhZGRFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBFdmVudEVtaXR0ZXIuRXZlbnRQYXJhbXNNYXA+KGV2ZW50TmFtZTogSywgY2FsbGJhY2s6IEV2ZW50RW1pdHRlci5DYWxsYmFjazxLPik6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHVua25vd25DYWxsYmFjayA9IGNhbGxiYWNrIGFzIEV2ZW50RW1pdHRlci5Vbmtub3duQ2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5hZGRVbmtub3duRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHVua25vd25DYWxsYmFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgb248SyBleHRlbmRzIGtleW9mIEV2ZW50RW1pdHRlci5FdmVudFBhcmFtc01hcD4oZXZlbnROYW1lOiBLLCBjYWxsYmFjazogRXZlbnRFbWl0dGVyLkNhbGxiYWNrPEs+KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgYWRkVW5rbm93bkV2ZW50TGlzdGVuZXIoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBFdmVudEVtaXR0ZXIuVW5rbm93bkNhbGxiYWNrKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gRXZlbnRFbWl0dGVyLkFMTF9FVkVOVCkge1xyXG4gICAgICAgICAgICB0aGlzLl9hbGxFdmVudFN1YnNjcmlwdGlvbnMucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zTWFwLmdldChldmVudE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9ucyA9IFtjYWxsYmFja107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zTWFwLnNldChldmVudE5hbWUsIHN1YnNjcmlwdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgcmVtb3ZlVW5rbm93bkV2ZW50TGlzdGVuZXIoZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBFdmVudEVtaXR0ZXIuVW5rbm93bkNhbGxiYWNrKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gRXZlbnRFbWl0dGVyLkFMTF9FVkVOVCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVN1YnNjcmlwdGlvbihldmVudE5hbWUsIHRoaXMuX2FsbEV2ZW50U3Vic2NyaXB0aW9ucywgY2FsbGJhY2spO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zTWFwLmdldChldmVudE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHN1YnNjcmlidGlvbnMgdG8gdW5zdWJzY3JpYmUgZm9yIGV2ZW50ICcgKyBldmVudE5hbWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTdWJzY3JpcHRpb24oZXZlbnROYW1lLCBzdWJzY3JpcHRpb25zLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgcHJpdmF0ZSByZW1vdmVTdWJzY3JpcHRpb24oZXZlbnROYW1lOiBzdHJpbmcsIHN1YnNjcmlwdGlvbnM6IEV2ZW50RW1pdHRlci5Vbmtub3duQ2FsbGJhY2tbXSwgY2FsbGJhY2s6IEV2ZW50RW1pdHRlci5Vbmtub3duQ2FsbGJhY2spIHtcclxuICAgICAgICBjb25zdCBpZHggPSBzdWJzY3JpcHRpb25zLmluZGV4T2YoY2FsbGJhY2spO1xyXG4gICAgICAgIGlmIChpZHggPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm90aGluZyB0byB1bmJpbmQgZm9yICcgKyBldmVudE5hbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHByaXZhdGUgZW1pdEFsbEV2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBhcmdzOiB1bmtub3duW10pIHtcclxuICAgICAgICBjb25zdCBhbGxFdmVudFN1YnNjcmlwdGlvbnNDb3VudCA9IHRoaXMuX2FsbEV2ZW50U3Vic2NyaXB0aW9ucy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGFsbEV2ZW50U3Vic2NyaXB0aW9uc0NvdW50ID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCB1bmtub3duQXJncyA9IGFyZ3Muc2xpY2UoKSBhcyBFdmVudEVtaXR0ZXIuVW5rbm93blBhcmFtcztcclxuICAgICAgICAgICAgdW5rbm93bkFyZ3MudW5zaGlmdChldmVudE5hbWUpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYWxsRXZlbnRTdWJjcmlwdGlvbnMgPSB0aGlzLl9hbGxFdmVudFN1YnNjcmlwdGlvbnMuc2xpY2UoKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsRXZlbnRTdWJzY3JpcHRpb25zQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYWxsRXZlbnRTdWJjcmlwdGlvbnNbaV0oLi4udW5rbm93bkFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIEV2ZW50RW1pdHRlciB7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBldmVudCB0aGF0J3MgdHJpZ2dlcmVkIGZvciBldmVyeSBldmVudFxyXG4gICAgICovXHJcbiAgICBleHBvcnQgY29uc3QgQUxMX0VWRU5UID0gJ19fYWxsJztcclxuXHJcbiAgICBleHBvcnQgY29uc3QgaGVhZGVyQ2xpY2tFdmVudE5hbWUgPSAnc3RhY2tIZWFkZXJDbGljayc7XHJcbiAgICBleHBvcnQgY29uc3QgaGVhZGVyVG91Y2hTdGFydEV2ZW50TmFtZSA9ICdzdGFja0hlYWRlclRvdWNoU3RhcnQnO1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCB0eXBlIFVua25vd25DYWxsYmFjayA9ICh0aGlzOiB2b2lkLCAuLi5hcmdzOiBVbmtub3duUGFyYW1zKSA9PiB2b2lkO1xyXG4gICAgZXhwb3J0IHR5cGUgQ2FsbGJhY2s8SyBleHRlbmRzIGtleW9mIEV2ZW50RW1pdHRlci5FdmVudFBhcmFtc01hcD4gPSAodGhpczogdm9pZCwgLi4uYXJnczogRXZlbnRQYXJhbXNNYXBbS10pID0+IHZvaWQ7XHJcblxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBFdmVudFBhcmFtc01hcCB7XHJcbiAgICAgICAgXCJfX2FsbFwiOiBVbmtub3duUGFyYW1zO1xyXG4gICAgICAgIFwiYWN0aXZlQ29udGVudEl0ZW1DaGFuZ2VkXCI6IENvbXBvbmVudEl0ZW1QYXJhbTtcclxuICAgICAgICBcImNsb3NlXCI6IE5vUGFyYW1zO1xyXG4gICAgICAgIFwiY2xvc2VkXCI6IE5vUGFyYW1zO1xyXG4gICAgICAgIFwiZGVzdHJveVwiOiBOb1BhcmFtcztcclxuICAgICAgICBcImRyYWdcIjogRHJhZ1BhcmFtcztcclxuICAgICAgICBcImRyYWdzdGFydFwiOiBNb3VzZUNvbXBvbmVudFBhcmFtczsgLy8gTmF0aXZlIChuZXctc3R5bGUpIGRyYWdcclxuICAgICAgICBcImRyYWdlbmRcIjogTm9QYXJhbXM7IC8vIE5hdGl2ZSAobmV3LXN0eWxlKSBkcmFnXHJcbiAgICAgICAgXCJkcmFnLWVudGVyLXdpbmRvd1wiOiBNb3VzZUV2ZW50UGFyYW1zOyAvLyBOYXRpdmUgKG5ldy1zdHlsZSkgZHJhZ1xyXG4gICAgICAgIFwiZHJhZy1sZWF2ZS13aW5kb3dcIjogTW91c2VFdmVudFBhcmFtczsgLy8gTmF0aXZlIChuZXctc3R5bGUpIGRyYWdcclxuICAgICAgICBcImRyYWdTdGFydFwiOiBEcmFnU3RhcnRQYXJhbXM7IC8vIE5vbi1uYXRpdmUgKG9sZC1zdHlsZSkgZHJhZ1xyXG4gICAgICAgIFwiZHJhZ1N0b3BcIjogRHJhZ1N0b3BQYXJhbXM7XHJcbiAgICAgICAgXCJkcmFnRXhwb3J0ZWRcIjogRHJhZ01vdmVkUGFyYW1zO1xyXG4gICAgICAgIFwiZHJhZ01vdmVkXCI6IERyYWdNb3ZlZFBhcmFtcztcclxuICAgICAgICBcImRyb3BcIjogTW91c2VFdmVudFBhcmFtczsgLy8gTmF0aXZlIChuZXctc3R5bGUpIGRyYWdcclxuICAgICAgICBcImhpZGVcIjogTm9QYXJhbXM7XHJcbiAgICAgICAgXCJpbml0aWFsaXNlZFwiOiBOb1BhcmFtcztcclxuICAgICAgICBcIml0ZW1Ecm9wcGVkXCI6IENvbXBvbmVudEl0ZW1QYXJhbTtcclxuICAgICAgICBcIm1heGltaXNlZFwiOiBOb1BhcmFtcztcclxuICAgICAgICBcIm1pbmltaXNlZFwiOiBOb1BhcmFtcztcclxuICAgICAgICBcIm9wZW5cIjogTm9QYXJhbXM7XHJcbiAgICAgICAgXCJwb3BJblwiOiBOb1BhcmFtcztcclxuICAgICAgICBcInJlc2l6ZVwiOiBOb1BhcmFtcztcclxuICAgICAgICBcInNob3dcIjogTm9QYXJhbXM7XHJcbiAgICAgICAgLyoqIEBkZXByZWNhdGVkIC0gdXNlIHNob3cgaW5zdGVhZCAqL1xyXG4gICAgICAgIFwic2hvd25cIjogTm9QYXJhbXM7XHJcbiAgICAgICAgXCJzdGF0ZUNoYW5nZWRcIjogTm9QYXJhbXM7XHJcbiAgICAgICAgXCJ0YWJcIjogVGFiUGFyYW07XHJcbiAgICAgICAgXCJ0YWJDcmVhdGVkXCI6IFRhYlBhcmFtO1xyXG4gICAgICAgIFwidGl0bGVDaGFuZ2VkXCI6IFN0cmluZ1BhcmFtO1xyXG4gICAgICAgIFwid2luZG93Q2xvc2VkXCI6IFBvcG91dFBhcmFtO1xyXG4gICAgICAgIFwid2luZG93T3BlbmVkXCI6IFBvcG91dFBhcmFtO1xyXG4gICAgICAgIFwiYmVmb3JlQ29tcG9uZW50UmVsZWFzZVwiOiBCZWZvcmVDb21wb25lbnRSZWxlYXNlUGFyYW1zO1xyXG4gICAgICAgIFwiYmVmb3JlSXRlbURlc3Ryb3llZFwiOiBCdWJibGluZ0V2ZW50UGFyYW07XHJcbiAgICAgICAgXCJpdGVtQ3JlYXRlZFwiOiBCdWJibGluZ0V2ZW50UGFyYW07XHJcbiAgICAgICAgXCJpdGVtRGVzdHJveWVkXCI6IEJ1YmJsaW5nRXZlbnRQYXJhbTtcclxuICAgICAgICBcImZvY3VzXCI6IEJ1YmJsaW5nRXZlbnRQYXJhbTtcclxuICAgICAgICBcImJsdXJcIjogQnViYmxpbmdFdmVudFBhcmFtO1xyXG4gICAgICAgIFwic3RhY2tIZWFkZXJDbGlja1wiOiBDbGlja0J1YmJsaW5nRXZlbnRQYXJhbTtcclxuICAgICAgICBcInN0YWNrSGVhZGVyVG91Y2hTdGFydFwiOiBUb3VjaFN0YXJ0QnViYmxpbmdFdmVudFBhcmFtO1xyXG4gICAgICAgIFwidXNlckJyb2FkY2FzdFwiOiBVbmtub3duUGFyYW1zO1xyXG4gICAgICAgIFwidGFiQ2xvc2VkXCI6IENvbXBvbmVudEl0ZW1QYXJhbVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCB0eXBlIFVua25vd25QYXJhbXMgPSB1bmtub3duW107XHJcbiAgICBleHBvcnQgdHlwZSBOb1BhcmFtcyA9IFtdO1xyXG4gICAgZXhwb3J0IHR5cGUgVW5rbm93blBhcmFtID0gW3Vua25vd25dO1xyXG4gICAgZXhwb3J0IHR5cGUgUG9wb3V0UGFyYW0gPSBbQnJvd3NlclBvcG91dF07XHJcbiAgICBleHBvcnQgdHlwZSBDb21wb25lbnRJdGVtUGFyYW0gPSBbQ29tcG9uZW50SXRlbV07XHJcbiAgICBleHBvcnQgdHlwZSBUYWJQYXJhbSA9IFtUYWJdO1xyXG4gICAgZXhwb3J0IHR5cGUgQnViYmxpbmdFdmVudFBhcmFtID0gW0V2ZW50RW1pdHRlci5CdWJibGluZ0V2ZW50XVxyXG4gICAgZXhwb3J0IHR5cGUgU3RyaW5nUGFyYW0gPSBbc3RyaW5nXTtcclxuICAgIGV4cG9ydCB0eXBlIERyYWdTdGFydFBhcmFtcyA9IFtvcmlnaW5hbFg6IG51bWJlciwgb3JpZ2luYWxZOiBudW1iZXJdO1xyXG4gICAgZXhwb3J0IHR5cGUgRHJhZ1N0b3BQYXJhbXMgPSBbZXZlbnQ6IFBvaW50ZXJFdmVudCB8IHVuZGVmaW5lZF07XHJcbiAgICBleHBvcnQgdHlwZSBEcmFnUGFyYW1zID0gW29mZnNldFg6IG51bWJlciwgb2Zmc2V0WTogbnVtYmVyLCBldmVudDogUG9pbnRlckV2ZW50XTtcclxuICAgIGV4cG9ydCB0eXBlIE1vdXNlRXZlbnRQYXJhbXMgPSBbZXZlbnQ6IE1vdXNlRXZlbnRdO1xyXG4gICAgZXhwb3J0IHR5cGUgTW91c2VDb21wb25lbnRQYXJhbXMgPSBbZXZlbnQ6IE1vdXNlRXZlbnQsIGNvbXBvbmVudDogQ29tcG9uZW50SXRlbV07XHJcbiAgICBleHBvcnQgdHlwZSBEcmFnTW92ZWRQYXJhbXMgPSBbb2Zmc2V0WDogbnVtYmVyLCBvZmZzZXRZOiBudW1iZXIsIGNvbXBvbmVudDogQ29tcG9uZW50SXRlbV07XHJcbiAgICBleHBvcnQgdHlwZSBCZWZvcmVDb21wb25lbnRSZWxlYXNlUGFyYW1zID0gW2NvbXBvbmVudDogdW5rbm93bl07XHJcbiAgICBleHBvcnQgdHlwZSBDbGlja0J1YmJsaW5nRXZlbnRQYXJhbSA9IFtDbGlja0J1YmJsaW5nRXZlbnRdO1xyXG4gICAgZXhwb3J0IHR5cGUgVG91Y2hTdGFydEJ1YmJsaW5nRXZlbnRQYXJhbSA9IFtUb3VjaFN0YXJ0QnViYmxpbmdFdmVudF07XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEJ1YmJsaW5nRXZlbnQge1xyXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICBwcml2YXRlIF9pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBnZXQgbmFtZSgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5fbmFtZTsgfVxyXG4gICAgICAgIGdldCB0YXJnZXQoKTogRXZlbnRFbWl0dGVyIHsgcmV0dXJuIHRoaXMuX3RhcmdldDsgfVxyXG4gICAgICAgIC8qKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIChFdmVudEVtaXR0ZXI6bmFtZXNwYWNlKS4oQnViYmxpbmdFdmVudDpjbGFzcykudGFyZ2V0fSBpbnN0ZWFkICovXHJcbiAgICAgICAgZ2V0IG9yaWdpbigpOiBFdmVudEVtaXR0ZXIgeyByZXR1cm4gdGhpcy5fdGFyZ2V0OyB9XHJcbiAgICAgICAgZ2V0IGlzUHJvcGFnYXRpb25TdG9wcGVkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5faXNQcm9wYWdhdGlvblN0b3BwZWQ7IH1cclxuXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgICAgICAvKiogQGludGVybmFsICovXHJcbiAgICAgICAgICAgIHByaXZhdGUgcmVhZG9ubHkgX25hbWU6IHN0cmluZyxcclxuICAgICAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgICAgICBwcml2YXRlIHJlYWRvbmx5IF90YXJnZXQ6IEV2ZW50RW1pdHRlcikge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RvcFByb3BhZ2F0aW9uKCk6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLl9pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBDbGlja0J1YmJsaW5nRXZlbnQgZXh0ZW5kcyBCdWJibGluZ0V2ZW50IHtcclxuICAgICAgICBnZXQgbW91c2VFdmVudCgpOiBNb3VzZUV2ZW50IHsgcmV0dXJuIHRoaXMuX21vdXNlRXZlbnQ7IH1cclxuXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdGFyZ2V0OiBFdmVudEVtaXR0ZXIsXHJcbiAgICAgICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfbW91c2VFdmVudDogTW91c2VFdmVudFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzdXBlcihuYW1lLCB0YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVG91Y2hTdGFydEJ1YmJsaW5nRXZlbnQgZXh0ZW5kcyBCdWJibGluZ0V2ZW50IHtcclxuICAgICAgICBnZXQgdG91Y2hFdmVudCgpOiBUb3VjaEV2ZW50IHsgcmV0dXJuIHRoaXMuX3RvdWNoRXZlbnQ7IH1cclxuXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgdGFyZ2V0OiBFdmVudEVtaXR0ZXIsXHJcbiAgICAgICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgICAgICAgICAgcHJpdmF0ZSByZWFkb25seSBfdG91Y2hFdmVudDogVG91Y2hFdmVudFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBzdXBlcihuYW1lLCB0YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBVbmV4cGVjdGVkTnVsbEVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2ludGVybmFsLWVycm9yJztcclxuaW1wb3J0IHsgTGF5b3V0TWFuYWdlciB9IGZyb20gJy4uL2xheW91dC1tYW5hZ2VyJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi9ldmVudC1lbWl0dGVyJztcclxuXHJcbi8vIEFkZCBvdXIgQ2hpbGRFdmVudCB0byBXaW5kb3dFdmVudE1hcCBmb3IgdHlwZSBzYWZldHlcclxuLyoqIEBwdWJsaWMgKi9cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gICAgaW50ZXJmYWNlIFdpbmRvd0V2ZW50TWFwIHtcclxuICAgICAgICBbRXZlbnRIdWIuQ2hpbGRFdmVudE5hbWVdOiBDdXN0b21FdmVudDxFdmVudEh1Yi5DaGlsZEV2ZW50RGV0YWlsPjtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFuIEV2ZW50RW1pdHRlciBzaW5nbGV0b24gdGhhdCBwcm9wYWdhdGVzIGV2ZW50c1xyXG4gKiBhY3Jvc3MgbXVsdGlwbGUgd2luZG93cy4gVGhpcyBpcyBhIGxpdHRsZSBiaXQgdHJpY2tpZXIgc2luY2VcclxuICogd2luZG93cyBhcmUgYWxsb3dlZCB0byBvcGVuIGNoaWxkV2luZG93cyBpbiB0aGVpciBvd24gcmlnaHQuXHJcbiAqXHJcbiAqIFRoaXMgbWVhbnMgdGhhdCB3ZSBkZWFsIHdpdGggYSB0cmVlIG9mIHdpbmRvd3MuIFRoZXJlZm9yZSwgd2UgZG8gdGhlIGV2ZW50IHByb3BhZ2F0aW9uIGluIHR3byBwaGFzZXM6XHJcbiAqXHJcbiAqIC0gUHJvcGFnYXRlIGV2ZW50cyBmcm9tIHRoaXMgbGF5b3V0IHRvIHRoZSBwYXJlbnQgbGF5b3V0XHJcbiAqICAgLSBSZXBlYXQgdW50aWwgdGhlIGV2ZW50IGFycml2ZWQgYXQgdGhlIHJvb3QgbGF5b3V0XHJcbiAqIC0gUHJvcGFnYXRlIGV2ZW50cyB0byB0aGlzIGxheW91dCBhbmQgdG8gYWxsIGNoaWxkcmVuXHJcbiAqICAgLSBSZXBlYXQgdW50aWwgYWxsIGxheW91dHMgZ290IHRoZSBldmVudFxyXG4gKlxyXG4gKiAqKldBUk5JTkcqKjogT25seSB1c2VyQnJvYWRjYXN0IGV2ZW50cyBhcmUgcHJvcGFnYXRlZCBiZXR3ZWVuIHdpbmRvd3MuXHJcbiAqIFRoaXMgbWVhbnMgdGhlIHlvdSBoYXZlIHRvIHRha2UgY2FyZSBvZiBwcm9wYWdhdGluZyBzdGF0ZSBjaGFuZ2VzIGJldHdlZW4gd2luZG93cyB5b3Vyc2VsZi5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV2ZW50SHViIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuXHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBwcml2YXRlIF9jaGlsZEV2ZW50TGlzdGVuZXIgPSAoY2hpbGRFdmVudDogQ3VzdG9tRXZlbnQ8RXZlbnRIdWIuQ2hpbGRFdmVudERldGFpbD4pID0+IHRoaXMub25FdmVudEZyb21DaGlsZChjaGlsZEV2ZW50KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgRXZlbnRIdWIgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBfbGF5b3V0TWFuYWdlciAtIHRoZSBsYXlvdXQgbWFuYWdlciB0byBzeW5jaHJvbml6ZSBiZXR3ZWVuIHRoZSB3aW5kb3dzXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgICAgIHByaXZhdGUgX2xheW91dE1hbmFnZXI6IExheW91dE1hbmFnZXJcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5hZGRFdmVudExpc3RlbmVyKEV2ZW50SHViLkNoaWxkRXZlbnROYW1lLCB0aGlzLl9jaGlsZEV2ZW50TGlzdGVuZXIsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVtaXQgYW4gZXZlbnQgYW5kIG5vdGlmeSBsaXN0ZW5lcnNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV2ZW50XHJcbiAgICAgKiBAcGFyYW0gYXJncyAtIEFkZGl0aW9uYWwgYXJndW1lbnRzIHRoYXQgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGxpc3RlbmVyXHJcbiAgICAgKiBAcHVibGljXHJcbiAgICAgKi9cclxuICAgIG92ZXJyaWRlIGVtaXQ8SyBleHRlbmRzIGtleW9mIEV2ZW50RW1pdHRlci5FdmVudFBhcmFtc01hcD4oZXZlbnROYW1lOiBLLCAuLi5hcmdzOiBFdmVudEVtaXR0ZXIuRXZlbnRQYXJhbXNNYXBbS10pOiB2b2lkIHtcclxuICAgICAgICBpZiAoZXZlbnROYW1lID09PSAndXNlckJyb2FkY2FzdCcpIHtcclxuICAgICAgICAgICAgLy8gRXhwbGljaXRseSByZWRpcmVjdCB0aGUgdXNlciBicm9hZGNhc3QgdG8gb3VyIG92ZXJyaWRkZW4gbWV0aG9kLlxyXG4gICAgICAgICAgICB0aGlzLmVtaXRVc2VyQnJvYWRjYXN0KC4uLmFyZ3MpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN1cGVyLmVtaXQoZXZlbnROYW1lLCAuLi5hcmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCcm9hZGNhc3RzIGEgbWVzc2FnZSB0byBhbGwgb3RoZXIgY3VycmVudGx5IG9wZW5lZCB3aW5kb3dzLlxyXG4gICAgICogQHB1YmxpY1xyXG4gICAgICovXHJcbiAgICBlbWl0VXNlckJyb2FkY2FzdCguLi5hcmdzOiBFdmVudEVtaXR0ZXIuVW5rbm93blBhcmFtcyk6IHZvaWQge1xyXG4gICAgICAgIC8vIFN0ZXAgMTogQnViYmxlIHVwIHRoZSBldmVudFxyXG4gICAgICAgIHRoaXMuaGFuZGxlVXNlckJyb2FkY2FzdEV2ZW50KCd1c2VyQnJvYWRjYXN0JywgYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0cm95cyB0aGUgRXZlbnRIdWJcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIGdsb2JhbFRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihFdmVudEh1Yi5DaGlsZEV2ZW50TmFtZSwgdGhpcy5fY2hpbGRFdmVudExpc3RlbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEludGVybmFsIHByb2Nlc3NvciB0byBwcm9jZXNzIGxvY2FsIGV2ZW50cy5cclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGhhbmRsZVVzZXJCcm9hZGNhc3RFdmVudChldmVudE5hbWU6IHN0cmluZywgYXJnczogdW5rbm93bltdKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2xheW91dE1hbmFnZXIuaXNTdWJXaW5kb3cpIHtcclxuICAgICAgICAgICAgLy8gV2UgYXJlIGEgc3ViIHdpbmRvdyBhbmQgcmVjZWl2ZWQgYW4gZXZlbnQgZnJvbSBvbmUgb2Ygb3VyIGNoaWxkcmVuLlxyXG4gICAgICAgICAgICAvLyBTbyBwcm9wYWdhdGUgaXQgdG8gdGhlIFJvb3QuXHJcbiAgICAgICAgICAgIHRoaXMucHJvcGFnYXRlVG9QYXJlbnQoZXZlbnROYW1lLCBhcmdzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBXZSBhcmUgdGhlIHJvb3Qgd2luZG93LCBwcm9wYWdhdGUgaXQgdG8gdGhlIHN1YnRyZWUgYmVsb3cgdXMuXHJcbiAgICAgICAgICAgIHRoaXMucHJvcGFnYXRlVG9UaGlzQW5kU3VidHJlZShldmVudE5hbWUsIGFyZ3MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGxiYWNrIGZvciBjaGlsZCBldmVudHMgcmFpc2VkIG9uIHRoZSB3aW5kb3dcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uRXZlbnRGcm9tQ2hpbGQoZXZlbnQ6IEN1c3RvbUV2ZW50PEV2ZW50SHViLkNoaWxkRXZlbnREZXRhaWw+KSB7XHJcbiAgICAgICAgY29uc3QgZGV0YWlsID0gZXZlbnQuZGV0YWlsO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlVXNlckJyb2FkY2FzdEV2ZW50KGRldGFpbC5ldmVudE5hbWUsIGRldGFpbC5hcmdzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb3BhZ2F0ZXMgdGhlIGV2ZW50IHRvIHRoZSBwYXJlbnQgYnkgZW1pdHRpbmdcclxuICAgICAqIGl0IG9uIHRoZSBwYXJlbnQncyBET00gd2luZG93XHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBwcm9wYWdhdGVUb1BhcmVudChldmVudE5hbWU6IHN0cmluZywgYXJnczogdW5rbm93bltdKSB7XHJcbiAgICAgICAgY29uc3QgZGV0YWlsOiBFdmVudEh1Yi5DaGlsZEV2ZW50RGV0YWlsID0ge1xyXG4gICAgICAgICAgICBsYXlvdXRNYW5hZ2VyOiB0aGlzLl9sYXlvdXRNYW5hZ2VyLFxyXG4gICAgICAgICAgICBldmVudE5hbWUsXHJcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3MsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBldmVudEluaXQ6IEV2ZW50SHViLkNoaWxkRXZlbnRJbml0ID0ge1xyXG4gICAgICAgICAgICBidWJibGVzOiB0cnVlLFxyXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBkZXRhaWwsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQ8RXZlbnRIdWIuQ2hpbGRFdmVudERldGFpbD4oRXZlbnRIdWIuQ2hpbGRFdmVudE5hbWUsIGV2ZW50SW5pdCk7XHJcbiAgICAgICAgY29uc3Qgb3BlbmVyID0gZ2xvYmFsVGhpcy5vcGVuZXI7XHJcbiAgICAgICAgaWYgKG9wZW5lciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVW5leHBlY3RlZE51bGxFcnJvcignRUhQVFAxNTc3OCcpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvcGVuZXIuZGlzcGF0Y2hFdmVudChldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9wYWdhdGUgZXZlbnRzIHRvIHRoZSB3aG9sZSBzdWJ0cmVlIHVuZGVyIHRoaXMgZXZlbnQgaHViLlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcHJvcGFnYXRlVG9UaGlzQW5kU3VidHJlZShldmVudE5hbWU6IHN0cmluZywgYXJnczogdW5rbm93bltdKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0VW5rbm93bihldmVudE5hbWUsIC4uLmFyZ3MpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fbGF5b3V0TWFuYWdlci5vcGVuUG9wb3V0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBjaGlsZEdsID0gdGhpcy5fbGF5b3V0TWFuYWdlci5vcGVuUG9wb3V0c1tpXS5nZXRHbEluc3RhbmNlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2hpbGRHbCkge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRHbC5ldmVudEh1Yi5wcm9wYWdhdGVUb1RoaXNBbmRTdWJ0cmVlKGV2ZW50TmFtZSwgYXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgRXZlbnRIdWIge1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGV4cG9ydCBjb25zdCBDaGlsZEV2ZW50TmFtZSA9ICdnbF9jaGlsZF9ldmVudCc7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IHR5cGUgQ2hpbGRFdmVudERldGFpbCA9IHtcclxuICAgICAgICBsYXlvdXRNYW5hZ2VyOiBMYXlvdXRNYW5hZ2VyO1xyXG4gICAgICAgIGV2ZW50TmFtZTogc3RyaW5nO1xyXG4gICAgICAgIGFyZ3M6IHVua25vd25bXTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IHR5cGUgQ2hpbGRFdmVudEluaXQgPSBDdXN0b21FdmVudEluaXQ8Q2hpbGRFdmVudERldGFpbD47XHJcbn1cclxuIiwiaW1wb3J0IHsgQXNzZXJ0RXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGNvbnN0IGVudW0gSTE4blN0cmluZ0lkIHtcclxuICAgIFBvcG91dENhbm5vdEJlQ3JlYXRlZFdpdGhHcm91bmRJdGVtQ29uZmlnLFxyXG4gICAgUGxlYXNlUmVnaXN0ZXJBQ29uc3RydWN0b3JGdW5jdGlvbixcclxuICAgIENvbXBvbmVudFR5cGVOb3RSZWdpc3RlcmVkQW5kQmluZENvbXBvbmVudEV2ZW50SGFuZGxlck5vdEFzc2lnbmVkLFxyXG4gICAgQ29tcG9uZW50SXNBbHJlYWR5UmVnaXN0ZXJlZCxcclxuICAgIENvbXBvbmVudElzTm90VmlydHVhYmxlLFxyXG4gICAgVmlydHVhbENvbXBvbmVudERvZXNOb3RIYXZlUm9vdEh0bWxFbGVtZW50LFxyXG4gICAgSXRlbUNvbmZpZ0lzTm90VHlwZUNvbXBvbmVudCxcclxuICAgIEludmFsaWROdW1iZXJQYXJ0SW5TaXplU3RyaW5nLFxyXG4gICAgVW5rbm93blVuaXRJblNpemVTdHJpbmcsXHJcbiAgICBVbnN1cHBvcnRlZFVuaXRJblNpemVTdHJpbmcsXHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgSTE4blN0cmluZ3Mge1xyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgbGV0IGluaXRpYWxpc2VkID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgaW50ZXJmYWNlIEluZm8ge1xyXG4gICAgICAgIHJlYWRvbmx5IGlkOiBJMThuU3RyaW5nSWQ7XHJcbiAgICAgICAgcmVhZG9ubHkgZGVmYXVsdDogc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHR5cGUgSW5mb3NPYmplY3QgPSB7IFtpZCBpbiBrZXlvZiB0eXBlb2YgSTE4blN0cmluZ0lkXTogSW5mbyB9O1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIGNvbnN0IGluZm9zT2JqZWN0OiBJbmZvc09iamVjdCA9IHtcclxuICAgICAgICBQb3BvdXRDYW5ub3RCZUNyZWF0ZWRXaXRoR3JvdW5kSXRlbUNvbmZpZzoge1xyXG4gICAgICAgICAgICBpZDogSTE4blN0cmluZ0lkLlBvcG91dENhbm5vdEJlQ3JlYXRlZFdpdGhHcm91bmRJdGVtQ29uZmlnLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAnUG9wb3V0IGNhbm5vdCBiZSBjcmVhdGVkIHdpdGggZ3JvdW5kIEl0ZW1Db25maWcnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBQbGVhc2VSZWdpc3RlckFDb25zdHJ1Y3RvckZ1bmN0aW9uOiB7XHJcbiAgICAgICAgICAgIGlkOiBJMThuU3RyaW5nSWQuUGxlYXNlUmVnaXN0ZXJBQ29uc3RydWN0b3JGdW5jdGlvbixcclxuICAgICAgICAgICAgZGVmYXVsdDogJ1BsZWFzZSByZWdpc3RlciBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgQ29tcG9uZW50VHlwZU5vdFJlZ2lzdGVyZWRBbmRCaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyTm90QXNzaWduZWQ6IHtcclxuICAgICAgICAgICAgaWQ6IEkxOG5TdHJpbmdJZC5Db21wb25lbnRUeXBlTm90UmVnaXN0ZXJlZEFuZEJpbmRDb21wb25lbnRFdmVudEhhbmRsZXJOb3RBc3NpZ25lZCxcclxuICAgICAgICAgICAgZGVmYXVsdDogJ0NvbXBvbmVudCB0eXBlIG5vdCByZWdpc3RlcmVkIGFuZCBCaW5kQ29tcG9uZW50RXZlbnQgaGFuZGxlciBub3QgYXNzaWduZWQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgQ29tcG9uZW50SXNBbHJlYWR5UmVnaXN0ZXJlZDoge1xyXG4gICAgICAgICAgICBpZDogSTE4blN0cmluZ0lkLkNvbXBvbmVudElzQWxyZWFkeVJlZ2lzdGVyZWQsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdDb21wb25lbnQgaXMgYWxyZWFkeSByZWdpc3RlcmVkJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIENvbXBvbmVudElzTm90VmlydHVhYmxlOiB7XHJcbiAgICAgICAgICAgIGlkOiBJMThuU3RyaW5nSWQuQ29tcG9uZW50SXNOb3RWaXJ0dWFibGUsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdDb21wb25lbnQgaXMgbm90IHZpcnR1YWJsZS4gUmVxdWlyZXMgcm9vdEh0bWxFbGVtZW50IGZpZWxkL2dldHRlcicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBWaXJ0dWFsQ29tcG9uZW50RG9lc05vdEhhdmVSb290SHRtbEVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgaWQ6IEkxOG5TdHJpbmdJZC5WaXJ0dWFsQ29tcG9uZW50RG9lc05vdEhhdmVSb290SHRtbEVsZW1lbnQsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdWaXJ0dWFsIGNvbXBvbmVudCBkb2VzIG5vdCBoYXZlIGdldHRlciBcInJvb3RIdG1sRWxlbWVudFwiJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIEl0ZW1Db25maWdJc05vdFR5cGVDb21wb25lbnQ6IHtcclxuICAgICAgICAgICAgaWQ6IEkxOG5TdHJpbmdJZC5JdGVtQ29uZmlnSXNOb3RUeXBlQ29tcG9uZW50LFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAnSXRlbUNvbmZpZyBpcyBub3Qgb2YgdHlwZSBjb21wb25lbnQnLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIEludmFsaWROdW1iZXJQYXJ0SW5TaXplU3RyaW5nOiB7XHJcbiAgICAgICAgICAgIGlkOiBJMThuU3RyaW5nSWQuSW52YWxpZE51bWJlclBhcnRJblNpemVTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdJbnZhbGlkIG51bWJlciBwYXJ0IGluIHNpemUgc3RyaW5nJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIFVua25vd25Vbml0SW5TaXplU3RyaW5nOiB7XHJcbiAgICAgICAgICAgIGlkOiBJMThuU3RyaW5nSWQuVW5rbm93blVuaXRJblNpemVTdHJpbmcsXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdVbmtub3duIHVuaXQgaW4gc2l6ZSBzdHJpbmcnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgVW5zdXBwb3J0ZWRVbml0SW5TaXplU3RyaW5nOiB7XHJcbiAgICAgICAgICAgIGlkOiBJMThuU3RyaW5nSWQuVW5zdXBwb3J0ZWRVbml0SW5TaXplU3RyaW5nLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAnVW5zdXBwb3J0ZWQgdW5pdCBpbiBzaXplIHN0cmluZycsXHJcbiAgICAgICAgfSxcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY29uc3QgaWRDb3VudCA9IE9iamVjdC5rZXlzKGluZm9zT2JqZWN0KS5sZW5ndGg7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjb25zdCBpbmZvcyA9IE9iamVjdC52YWx1ZXMoaW5mb3NPYmplY3QpO1xyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjaGVja0luaXRpYWxpc2UoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFpbml0aWFsaXNlZCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5mbyA9IGluZm9zW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZm8uaWQgIT09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQXNzZXJ0RXJyb3IoJ0lOU0kwMDExMCcsIGAke2l9OiAke2luZm8uaWR9YCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGkxOG5TdHJpbmdzW2ldID0gaW5mby5kZWZhdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluaXRpYWxpc2VkID0gdHJ1ZTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGNvbnN0IGkxOG5TdHJpbmdzID0gbmV3IEFycmF5PHN0cmluZz4oSTE4blN0cmluZ3MuaWRDb3VudCk7XHJcbiIsIi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgU3R5bGVDb25zdGFudHMge1xyXG4gICAgZXhwb3J0IGNvbnN0IGRlZmF1bHRDb21wb25lbnRCYXNlWkluZGV4ID0gJ2F1dG8nO1xyXG4gICAgZXhwb3J0IGNvbnN0IGRlZmF1bHRDb21wb25lbnREcmFnWkluZGV4ID0gJzMyJztcclxuICAgIGV4cG9ydCBjb25zdCBkZWZhdWx0Q29tcG9uZW50U3RhY2tNYXhpbWlzZWRaSW5kZXggPSAnNDEnO1xyXG59XHJcbiIsImltcG9ydCB7IFVucmVhY2hhYmxlQ2FzZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzL2ludGVybmFsLWVycm9yJztcclxuaW1wb3J0IHsgU3R5bGVDb25zdGFudHMgfSBmcm9tICcuL3N0eWxlLWNvbnN0YW50cyc7XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCB0eXBlIFdpZHRoT3JIZWlnaHRQcm9wZXJ0eU5hbWUgPSAnd2lkdGgnIHwgJ2hlaWdodCc7XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgV2lkdGhPckhlaWdodFByb3BlcnR5TmFtZSB7XHJcbiAgICBleHBvcnQgY29uc3Qgd2lkdGggPSAnd2lkdGgnO1xyXG4gICAgZXhwb3J0IGNvbnN0IGhlaWdodCA9ICdoZWlnaHQnO1xyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFdpZHRoQW5kSGVpZ2h0IHtcclxuICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIExlZnRBbmRUb3Age1xyXG4gICAgbGVmdDogbnVtYmVyO1xyXG4gICAgdG9wOiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCB0eXBlIFNpZGUgPSAndG9wJyB8ICdsZWZ0JyB8ICdyaWdodCcgfCAnYm90dG9tJztcclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBTaWRlIHtcclxuICAgIGV4cG9ydCBjb25zdCB0b3AgPSAndG9wJztcclxuICAgIGV4cG9ydCBjb25zdCBsZWZ0ID0gJ2xlZnQnO1xyXG4gICAgZXhwb3J0IGNvbnN0IHJpZ2h0ID0gJ3JpZ2h0JztcclxuICAgIGV4cG9ydCBjb25zdCBib3R0b20gPSAnYm90dG9tJztcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IHR5cGUgTG9naWNhbFpJbmRleCA9ICdiYXNlJyB8ICdkcmFnJyB8ICdzdGFja01heGltaXNlZCc7XHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgTG9naWNhbFpJbmRleCB7XHJcbiAgICBleHBvcnQgY29uc3QgYmFzZSA9ICdiYXNlJztcclxuICAgIGV4cG9ydCBjb25zdCBkcmFnID0gJ2RyYWcnO1xyXG4gICAgZXhwb3J0IGNvbnN0IHN0YWNrTWF4aW1pc2VkID0gJ3N0YWNrTWF4aW1pc2VkJztcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGNvbnN0IExvZ2ljYWxaSW5kZXhUb0RlZmF1bHRNYXAgPSB7XHJcbiAgICBiYXNlOiBTdHlsZUNvbnN0YW50cy5kZWZhdWx0Q29tcG9uZW50QmFzZVpJbmRleCxcclxuICAgIGRyYWc6IFN0eWxlQ29uc3RhbnRzLmRlZmF1bHRDb21wb25lbnREcmFnWkluZGV4LFxyXG4gICAgc3RhY2tNYXhpbWlzZWQ6IFN0eWxlQ29uc3RhbnRzLmRlZmF1bHRDb21wb25lbnRTdGFja01heGltaXNlZFpJbmRleCxcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFJlY3Qge1xyXG4gICAgbGVmdDogbnVtYmVyLFxyXG4gICAgdG9wOiBudW1iZXIsXHJcbiAgICB3aWR0aDogbnVtYmVyLFxyXG4gICAgaGVpZ2h0OiBudW1iZXIsXHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGludGVyZmFjZSBBcmVhTGlua2VkUmVjdCB7XHJcbiAgICB4MTogbnVtYmVyLCAvLyBsZWZ0XHJcbiAgICB4MjogbnVtYmVyLCAvLyBuZXh0TGVmdFxyXG4gICAgeTE6IG51bWJlciwgLy8gdG9wXHJcbiAgICB5MjogbnVtYmVyLCAvLyBuZXh0VG9wXHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXHJcbmV4cG9ydCB0eXBlIEpzb25WYWx1ZSA9IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBudWxsIHwgSnNvbiB8IG9iamVjdCB8IEpzb25WYWx1ZUFycmF5O1xyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEpzb24ge1xyXG4gICAgW25hbWU6IHN0cmluZ106IEpzb25WYWx1ZTtcclxufVxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgdHlwZSBKc29uVmFsdWVBcnJheSA9IEFycmF5PEpzb25WYWx1ZT5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBKc29uVmFsdWUge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGlzSnNvbih2YWx1ZTogSnNvblZhbHVlKTogdmFsdWUgaXMgSnNvbiB7XHJcbiAgICAgICAgcmV0dXJuIGlzSnNvbk9iamVjdCh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBpc0pzb25PYmplY3QodmFsdWU6IEpzb25WYWx1ZSk6IHZhbHVlIGlzIEpzb24gfCBvYmplY3Qge1xyXG4gICAgICAgIHJldHVybiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JztcclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IHR5cGUgSXRlbVR5cGUgPSAnZ3JvdW5kJyB8ICdyb3cnIHwgJ2NvbHVtbicgfCAnc3RhY2snIHwgJ2NvbXBvbmVudCc7XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIEl0ZW1UeXBlIHtcclxuICAgIGV4cG9ydCBjb25zdCBncm91bmQgPSAnZ3JvdW5kJztcclxuICAgIGV4cG9ydCBjb25zdCByb3cgPSAncm93JztcclxuICAgIGV4cG9ydCBjb25zdCBjb2x1bW4gPSAnY29sdW1uJztcclxuICAgIGV4cG9ydCBjb25zdCBzdGFjayA9ICdzdGFjayc7XHJcbiAgICBleHBvcnQgY29uc3QgY29tcG9uZW50ID0gJ2NvbXBvbmVudCc7XHJcbn1cclxuXHJcbi8qKiBAcHVibGljICovXHJcbmV4cG9ydCB0eXBlIFJlc3BvbnNpdmVNb2RlID0gJ25vbmUnIHwgJ2Fsd2F5cycgfCAnb25sb2FkJztcclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBSZXNwb25zaXZlTW9kZSB7XHJcbiAgICBleHBvcnQgY29uc3Qgbm9uZSA9ICdub25lJztcclxuICAgIGV4cG9ydCBjb25zdCBhbHdheXMgPSAnYWx3YXlzJztcclxuICAgIGV4cG9ydCBjb25zdCBvbmxvYWQgPSAnb25sb2FkJztcclxufVxyXG5cclxuLyoqXHJcbiAqIExlbmd0aCB1bml0cyB3aGljaCBjYW4gc3BlY2lmeSB0aGUgc2l6ZSBvZiBhIENvbXBvbmVudCBJdGVtXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmV4cG9ydCB0eXBlIFNpemVVbml0ID0gJ3B4JyB8ICclJyB8ICdmcicgfCAnZW0nO1xyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IGVudW0gU2l6ZVVuaXRFbnVtIHtcclxuICAgIFBpeGVsID0gJ3B4JyxcclxuICAgIFBlcmNlbnQgPSAnJScsXHJcbiAgICBGcmFjdGlvbmFsID0gJ2ZyJyxcclxuICAgIEVtID0gJ2VtJyxcclxufVxyXG5cclxuLyoqIEBwdWJsaWMgKi9cclxuZXhwb3J0IG5hbWVzcGFjZSBTaXplVW5pdEVudW0ge1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHRyeVBhcnNlKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgU2l6ZVVuaXRFbnVtLlBpeGVsOiByZXR1cm4gU2l6ZVVuaXRFbnVtLlBpeGVsO1xyXG4gICAgICAgICAgICBjYXNlIFNpemVVbml0RW51bS5QZXJjZW50OiByZXR1cm4gU2l6ZVVuaXRFbnVtLlBlcmNlbnQ7XHJcbiAgICAgICAgICAgIGNhc2UgU2l6ZVVuaXRFbnVtLkZyYWN0aW9uYWw6IHJldHVybiBTaXplVW5pdEVudW0uRnJhY3Rpb25hbDtcclxuICAgICAgICAgICAgY2FzZSBTaXplVW5pdEVudW0uRW06IHJldHVybiBTaXplVW5pdEVudW0uRW07XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBmb3JtYXQodmFsdWU6IFNpemVVbml0RW51bSkge1xyXG4gICAgICAgIHN3aXRjaCAodmFsdWUpIHtcclxuICAgICAgICAgICAgY2FzZSBTaXplVW5pdEVudW0uUGl4ZWw6IHJldHVybiBTaXplVW5pdEVudW0uUGl4ZWw7XHJcbiAgICAgICAgICAgIGNhc2UgU2l6ZVVuaXRFbnVtLlBlcmNlbnQ6IHJldHVybiBTaXplVW5pdEVudW0uUGVyY2VudDtcclxuICAgICAgICAgICAgY2FzZSBTaXplVW5pdEVudW0uRnJhY3Rpb25hbDogcmV0dXJuIFNpemVVbml0RW51bS5GcmFjdGlvbmFsO1xyXG4gICAgICAgICAgICBjYXNlIFNpemVVbml0RW51bS5FbTogcmV0dXJuIFNpemVVbml0RW51bS5FbTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNhc2VFcnJvcignU1VFRjQ0OTk4JywgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBXaWR0aEFuZEhlaWdodCB9IGZyb20gJy4vdHlwZXMnO1xyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbnVtYmVyVG9QaXhlbHModmFsdWU6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoMTApICsgJ3B4JztcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcGl4ZWxzVG9OdW1iZXIodmFsdWU6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICBjb25zdCBudW1iZXJTdHIgPSB2YWx1ZS5yZXBsYWNlKFwicHhcIiwgXCJcIik7XHJcbiAgICByZXR1cm4gcGFyc2VGbG9hdChudW1iZXJTdHIpO1xyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3BsaXRTdHJpbmdBdEZpcnN0Tm9uTnVtZXJpY0NoYXJSZXN1bHQge1xyXG4gICAgbnVtZXJpY1BhcnQ6IHN0cmluZztcclxuICAgIGZpcnN0Tm9uTnVtZXJpY0NoYXJQYXJ0OiBzdHJpbmc7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0U3RyaW5nQXRGaXJzdE5vbk51bWVyaWNDaGFyKHZhbHVlOiBzdHJpbmcpOiBTcGxpdFN0cmluZ0F0Rmlyc3ROb25OdW1lcmljQ2hhclJlc3VsdCB7XHJcbiAgICB2YWx1ZSA9IHZhbHVlLnRyaW1TdGFydCgpO1xyXG5cclxuICAgIGNvbnN0IGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcclxuICAgIGlmIChsZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4geyBudW1lcmljUGFydDogJycsIGZpcnN0Tm9uTnVtZXJpY0NoYXJQYXJ0OiAnJyB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCBmaXJzdE5vbkRpZ2l0UGFydEluZGV4ID0gbGVuZ3RoO1xyXG4gICAgICAgIGxldCBnb3REZWNpbWFsUG9pbnQgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoYXIgPSB2YWx1ZVtpXTtcclxuICAgICAgICAgICAgaWYgKCFpc0RpZ2l0KGNoYXIpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhciAhPT0gJy4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3ROb25EaWdpdFBhcnRJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChnb3REZWNpbWFsUG9pbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROb25EaWdpdFBhcnRJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvdERlY2ltYWxQb2ludCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRpZ2l0c1BhcnQgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgZmlyc3ROb25EaWdpdFBhcnRJbmRleCk7XHJcbiAgICAgICAgY29uc3QgZmlyc3ROb25EaWdpdFBhcnQgPSB2YWx1ZS5zdWJzdHJpbmcoZmlyc3ROb25EaWdpdFBhcnRJbmRleCkudHJpbSgpO1xyXG5cclxuICAgICAgICByZXR1cm4geyBudW1lcmljUGFydDogZGlnaXRzUGFydCwgZmlyc3ROb25OdW1lcmljQ2hhclBhcnQ6IGZpcnN0Tm9uRGlnaXRQYXJ0IH07XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzRGlnaXQoY2hhcjogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gY2hhciA+PSAnMCcgJiYgY2hhciA8PSAnOSc7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRXaWR0aChlbGVtZW50OiBIVE1MRWxlbWVudCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gZWxlbWVudC5vZmZzZXRXaWR0aDtcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0RWxlbWVudFdpZHRoKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCB3aWR0aDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCB3aWR0aEFzUGl4ZWxzID0gbnVtYmVyVG9QaXhlbHMod2lkdGgpO1xyXG4gICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHdpZHRoQXNQaXhlbHM7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRIZWlnaHQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG59XHJcblxyXG4vKiogQGludGVybmFsICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRFbGVtZW50SGVpZ2h0KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgY29uc3QgaGVpZ2h0QXNQaXhlbHMgPSBudW1iZXJUb1BpeGVscyhoZWlnaHQpO1xyXG4gICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBoZWlnaHRBc1BpeGVscztcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWxlbWVudFdpZHRoQW5kSGVpZ2h0KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogV2lkdGhBbmRIZWlnaHQge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB3aWR0aDogZWxlbWVudC5vZmZzZXRXaWR0aCxcclxuICAgICAgICBoZWlnaHQ6IGVsZW1lbnQub2Zmc2V0SGVpZ2h0LFxyXG4gICAgfTtcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0RWxlbWVudERpc3BsYXlWaXNpYmlsaXR5KGVsZW1lbnQ6IEhUTUxFbGVtZW50LCB2aXNpYmxlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBpZiAodmlzaWJsZSkge1xyXG4gICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZUlGcmFtZVBvaW50ZXJFdmVudHMoZW5hYmxlOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpZnJhbWUubG1fY29udGVudCcpLmZvckVhY2goKGVsZW1lbnQpID0+XHJcbiAgICAgICAgKGVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLnNldFByb3BlcnR5KCdwb2ludGVyLWV2ZW50cycsIGVuYWJsZSA/ICcnIDogJ25vbmUnKSk7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUVsZW1lbnRQb3NpdGlvbkFic29sdXRlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICBjb25zdCBhYnNvbHV0ZVBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgIGlmIChlbGVtZW50LnN0eWxlLnBvc2l0aW9uICE9PSBhYnNvbHV0ZVBvc2l0aW9uKSB7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IGFic29sdXRlUG9zaXRpb247XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXBsYWNlbWVudCBmb3IgSlF1ZXJ5ICQuZXh0ZW5kKHRhcmdldCwgb2JqKVxyXG4gKiBAaW50ZXJuYWxcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQ6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBvYmo6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4ge1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gb2JqW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlcGxhY2VtZW50IGZvciBKUXVlcnkgJC5leHRlbmQodHJ1ZSwgdGFyZ2V0LCBvYmopXHJcbiAqIEBpbnRlcm5hbFxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gZGVlcEV4dGVuZCh0YXJnZXQ6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBvYmo6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHwgdW5kZWZpbmVkKTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4ge1xyXG4gICAgaWYgKG9iaiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvYmpba2V5XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVGFyZ2V0ID0gdGFyZ2V0W2tleV07XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IGRlZXBFeHRlbmRWYWx1ZShleGlzdGluZ1RhcmdldCwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZXBFeHRlbmRWYWx1ZShleGlzdGluZ1RhcmdldDogdW5rbm93biwgdmFsdWU6IHVua25vd24pOiB1bmtub3duIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXRBcnJheSA9IG5ldyBBcnJheTx1bmtub3duPihsZW5ndGgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdmFsdWVbaV07XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRBcnJheVtpXSA9IGRlZXBFeHRlbmRWYWx1ZSh7fSwgZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldEFycmF5O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZU9iaiA9IHZhbHVlIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xyXG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nVGFyZ2V0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVlcEV4dGVuZCh7fSwgdmFsdWVPYmopOyAvLyBvdmVyd3JpdGVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBleGlzdGluZ1RhcmdldCAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVlcEV4dGVuZCh7fSwgdmFsdWVPYmopOyAvLyBvdmVyd3JpdGVcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShleGlzdGluZ1RhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWVwRXh0ZW5kKHt9LCB2YWx1ZU9iaik7IC8vIG92ZXJ3cml0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nVGFyZ2V0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZXBFeHRlbmQoe30sIHZhbHVlT2JqKTsgLy8gb3ZlcndyaXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVGFyZ2V0T2JqID0gZXhpc3RpbmdUYXJnZXQgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZXBFeHRlbmQoZXhpc3RpbmdUYXJnZXRPYmosIHZhbHVlT2JqKTsgLy8gbWVyZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRnJvbUFycmF5PFQ+KGl0ZW06IFQsIGFycmF5OiBUW10pOiB2b2lkIHtcclxuICAgIGNvbnN0IGluZGV4ID0gYXJyYXkuaW5kZXhPZihpdGVtKTtcclxuXHJcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5cXCd0IHJlbW92ZSBpdGVtIGZyb20gYXJyYXkuIEl0ZW0gaXMgbm90IGluIHRoZSBhcnJheScpO1xyXG4gICAgfVxyXG5cclxuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbn1cclxuXHJcbi8qKiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFVuaXF1ZUlkKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwMDAwMDAwKVxyXG4gICAgICAgIC50b1N0cmluZygzNilcclxuICAgICAgICAucmVwbGFjZSgnLicsICcnKTtcclxufVxyXG5cclxuLyoqIEBpbnRlcm5hbCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXJyb3JNZXNzYWdlKGU6IHVua25vd24pOiBzdHJpbmcge1xyXG4gICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgIHJldHVybiBlLm1lc3NhZ2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICdVbmtub3duIEVycm9yJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTGF5b3V0Q29uZmlnIH0gZnJvbSAnLi9jb25maWcvY29uZmlnJztcclxuaW1wb3J0IHsgUmVzb2x2ZWRDb21wb25lbnRJdGVtQ29uZmlnLCBSZXNvbHZlZExheW91dENvbmZpZywgUmVzb2x2ZWRQb3BvdXRMYXlvdXRDb25maWcgfSBmcm9tICcuL2NvbmZpZy9yZXNvbHZlZC1jb25maWcnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRDb250YWluZXIgfSBmcm9tICcuL2NvbnRhaW5lci9jb21wb25lbnQtY29udGFpbmVyJztcclxuaW1wb3J0IHsgVW5leHBlY3RlZFVuZGVmaW5lZEVycm9yIH0gZnJvbSAnLi9lcnJvcnMvaW50ZXJuYWwtZXJyb3InO1xyXG5pbXBvcnQgeyBMYXlvdXRNYW5hZ2VyIH0gZnJvbSAnLi9sYXlvdXQtbWFuYWdlcic7XHJcbmltcG9ydCB7IERvbUNvbnN0YW50cyB9IGZyb20gJy4vdXRpbHMvZG9tLWNvbnN0YW50cyc7XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmlydHVhbExheW91dCBleHRlbmRzIExheW91dE1hbmFnZXIge1xyXG4gICAgYmluZENvbXBvbmVudEV2ZW50OiBWaXJ0dWFsTGF5b3V0LkJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIgfCB1bmRlZmluZWQ7XHJcbiAgICB1bmJpbmRDb21wb25lbnRFdmVudDogVmlydHVhbExheW91dC5VbmJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCBAZGVwcmVjYXRlZCB1c2Ugd2hpbGUgY29uc3RydWN0b3IgaXMgbm90IGRldGVybWluYXRlICovXHJcbiAgICBwcml2YXRlIF9iaW5kQ29tcG9uZW50RXZlbnRIYW5sZGVyUGFzc2VkSW5Db25zdHJ1Y3RvciA9IGZhbHNlOyAvLyByZW1vdmUgd2hlbiBjb25zdHJ1Y3RvciBpcyBkZXRlcm1pbmF0ZVxyXG4gICAgLyoqIEBpbnRlcm5hbCAgQGRlcHJlY2F0ZWQgdXNlIHdoaWxlIGNvbnN0cnVjdG9yIGlzIG5vdCBkZXRlcm1pbmF0ZSAqL1xyXG4gICAgcHJpdmF0ZSBfY3JlYXRpb25UaW1lb3V0UGFzc2VkID0gZmFsc2U7IC8vIHJlbW92ZSB3aGVuIGNvbnN0cnVjdG9yIGlzIGRldGVybWluYXRlXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gY29udGFpbmVyIC0gQSBEb20gSFRNTCBlbGVtZW50LiBEZWZhdWx0cyB0byBib2R5XHJcbiAgICAgKiBAcGFyYW0gYmluZENvbXBvbmVudEV2ZW50SGFuZGxlciAtIEV2ZW50IGhhbmRsZXIgdG8gYmluZCBjb21wb25lbnRzXHJcbiAgICAgKiBAcGFyYW0gYmluZENvbXBvbmVudEV2ZW50SGFuZGxlciAtIEV2ZW50IGhhbmRsZXIgdG8gdW5iaW5kIGNvbXBvbmVudHNcclxuICAgICAqIElmIGJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIgaXMgZGVmaW5lZCwgdGhlbiBjb25zdHJ1Y3RvciB3aWxsIGJlIGRldGVybWluYXRlLiBJdCB3aWxsIGFsd2F5cyBjYWxsIHRoZSBpbml0KClcclxuICAgICAqIGZ1bmN0aW9uIGFuZCB0aGUgaW5pdCgpIGZ1bmN0aW9uIHdpbGwgYWx3YXlzIGNvbXBsZXRlLiBUaGlzIG1lYW5zIHRoYXQgdGhlIGJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIgd2lsbCBiZSBjYWxsZWRcclxuICAgICAqIGlmIGNvbnN0cnVjdG9yIGlzIGZvciBhIHBvcG91dCB3aW5kb3cuIE1ha2Ugc3VyZSBiaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyIGlzIHJlYWR5IGZvciBldmVudHMuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIGNvbnRhaW5lcj86IEhUTUxFbGVtZW50LFxyXG4gICAgICAgIGJpbmRDb21wb25lbnRFdmVudEhhbmRsZXI/OiBWaXJ0dWFsTGF5b3V0LkJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIsXHJcbiAgICAgICAgdW5iaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyPzogVmlydHVhbExheW91dC5VbmJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIsXHJcbiAgICApO1xyXG4gICAgLyoqIEBkZXByZWNhdGVkIHNwZWNpZnkgbGF5b3V0Q29uZmlnIGluIHtAbGluayAoTGF5b3V0TWFuYWdlcjpjbGFzcykubG9hZExheW91dH0gKi9cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogTGF5b3V0Q29uZmlnLCBjb250YWluZXI/OiBIVE1MRWxlbWVudCk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWdPck9wdGlvbmFsQ29udGFpbmVyOiBMYXlvdXRDb25maWcgfCBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCxcclxuICAgICAgICBjb250YWluZXJPckJpbmRDb21wb25lbnRFdmVudEhhbmRsZXI6IEhUTUxFbGVtZW50IHwgVmlydHVhbExheW91dC5CaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyIHwgdW5kZWZpbmVkLFxyXG4gICAgICAgIHVuYmluZENvbXBvbmVudEV2ZW50SGFuZGxlcjogVmlydHVhbExheW91dC5VbmJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIgfCB1bmRlZmluZWQgfCBOb2RlIHwgbnVsbCxcclxuICAgICAgICBza2lwSW5pdDogdHJ1ZSxcclxuICAgICk7XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWdPck9wdGlvbmFsQ29udGFpbmVyOiBMYXlvdXRDb25maWcgfCBIVE1MRWxlbWVudCB8IHVuZGVmaW5lZCxcclxuICAgICAgICBjb250YWluZXJPckJpbmRDb21wb25lbnRFdmVudEhhbmRsZXI/OiBIVE1MRWxlbWVudCB8IFZpcnR1YWxMYXlvdXQuQmluZENvbXBvbmVudEV2ZW50SGFuZGxlcixcclxuICAgICAgICB1bmJpbmRDb21wb25lbnRFdmVudEhhbmRsZXI/OiBWaXJ0dWFsTGF5b3V0LlVuYmluZENvbXBvbmVudEV2ZW50SGFuZGxlcnwgTm9kZSB8IG51bGwsXHJcbiAgICAgICAgc2tpcEluaXQ/OiB0cnVlLFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoVmlydHVhbExheW91dC5jcmVhdGVMYXlvdXRNYW5hZ2VyQ29uc3RydWN0b3JQYXJhbWV0ZXJzKGNvbmZpZ09yT3B0aW9uYWxDb250YWluZXIsIGNvbnRhaW5lck9yQmluZENvbXBvbmVudEV2ZW50SGFuZGxlciwgdW5iaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyKSk7XHJcbiAgICAgICAgaWYgKGNvbnRhaW5lck9yQmluZENvbXBvbmVudEV2ZW50SGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGFpbmVyT3JCaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmRDb21wb25lbnRFdmVudCA9IGNvbnRhaW5lck9yQmluZENvbXBvbmVudEV2ZW50SGFuZGxlcjtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRDb21wb25lbnRFdmVudEhhbmxkZXJQYXNzZWRJbkNvbnN0cnVjdG9yID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHVuYmluZENvbXBvbmVudEV2ZW50SGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5iaW5kQ29tcG9uZW50RXZlbnQgPSB1bmJpbmRDb21wb25lbnRFdmVudEhhbmRsZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5fYmluZENvbXBvbmVudEV2ZW50SGFubGRlclBhc3NlZEluQ29uc3RydWN0b3IpIHtcclxuICAgICAgICAgICAgLy8gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNTdWJXaW5kb3cpIHtcclxuICAgICAgICAgICAgICAgIC8vIGRvY3VtZW50LmJvZHkuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG4gICAgICAgICAgICAgICAgLy8gU2V0IHVwIGxheW91dENvbmZpZyBzaW5jZSBjb25zdHJ1Y3RvciBpcyBub3QgZGV0ZXJtaW5hdGUgYW5kIG1heSBleGl0IGVhcmx5LiBPdGhlciBmdW5jdGlvbnMgbWF5IG5lZWRcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMubGF5b3V0Q29uZmlnLiB0aGlzLmxheW91dENvbmZpZyBpcyBhZ2FpbiBjYWxjdWxhdGVkIGluIHRoZSBzYW1lIHdheSB3aGVuIGluaXQoKSBjb21wbGV0ZXMuXHJcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhpcyB3aGVuIGNvbnN0cnVjdG9yIGlzIGRldGVybWluYXRlLlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnN0cnVjdG9yT3JTdWJXaW5kb3dMYXlvdXRDb25maWcgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbmV4cGVjdGVkVW5kZWZpbmVkRXJyb3IoJ1ZMQzk4ODIzJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkTGF5b3V0Q29uZmlnID0gTGF5b3V0Q29uZmlnLnJlc29sdmUodGhpcy5fY29uc3RydWN0b3JPclN1YldpbmRvd0xheW91dENvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHJvb3QgZnJvbSBsYXlvdXRDb25maWdcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxheW91dENvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucmVzb2x2ZWRMYXlvdXRDb25maWcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChza2lwSW5pdCAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZGVwcmVjYXRlZENvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZSBkZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYmluZENvbXBvbmVudEV2ZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMudW5iaW5kQ29tcG9uZW50RXZlbnQgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHRoZSBhY3R1YWwgbGF5b3V0LiBNdXN0IGJlIGNhbGxlZCBhZnRlciBhbGwgaW5pdGlhbCBjb21wb25lbnRzXHJcbiAgICAgKiBhcmUgcmVnaXN0ZXJlZC4gUmVjdXJzZXMgdGhyb3VnaCB0aGUgY29uZmlndXJhdGlvbiBhbmQgc2V0cyB1cFxyXG4gICAgICogdGhlIGl0ZW0gdHJlZS5cclxuICAgICAqXHJcbiAgICAgKiBJZiBjYWxsZWQgYmVmb3JlIHRoZSBkb2N1bWVudCBpcyByZWFkeSBpdCBhZGRzIGl0c2VsZiBhcyBhIGxpc3RlbmVyXHJcbiAgICAgKiB0byB0aGUgZG9jdW1lbnQucmVhZHkgZXZlbnRcclxuICAgICAqIEBkZXByZWNhdGVkIExheW91dENvbmZpZyBzaG91bGQgbm90IGJlIGxvYWRlZCBpbiB7QGxpbmsgKExheW91dE1hbmFnZXI6Y2xhc3MpfSBjb25zdHJ1Y3RvciwgYnV0IHJhdGhlciBpbiBhXHJcbiAgICAgKiB7QGxpbmsgKExheW91dE1hbmFnZXI6Y2xhc3MpLmxvYWRMYXlvdXR9IGNhbGwuICBJZiBMYXlvdXRDb25maWcgaXMgbm90IHNwZWNpZmllZCBpbiB7QGxpbmsgKExheW91dE1hbmFnZXI6Y2xhc3MpfSBjb25zdHJ1Y3RvcixcclxuICAgICAqIHRoZW4gaW5pdCgpIHdpbGwgYmUgYXV0b21hdGljYWxseSBjYWxsZWQgaW50ZXJuYWxseSBhbmQgc2hvdWxkIG5vdCBiZSBjYWxsZWQgZXh0ZXJuYWxseS5cclxuICAgICAqL1xyXG4gICAgb3ZlcnJpZGUgaW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSWYgdGhlIGRvY3VtZW50IGlzbid0IHJlYWR5IHlldCwgd2FpdCBmb3IgaXQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYgKCF0aGlzLl9iaW5kQ29tcG9uZW50RXZlbnRIYW5sZGVyUGFzc2VkSW5Db25zdHJ1Y3RvciAmJiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnIHx8IGRvY3VtZW50LmJvZHkgPT09IG51bGwpKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB0aGlzLmluaXQoKSwgeyBwYXNzaXZlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJZiB0aGlzIGlzIGEgc3Vid2luZG93LCB3YWl0IGEgZmV3IG1pbGxpc2Vjb25kcyBmb3IgdGhlIG9yaWdpbmFsXHJcbiAgICAgICAgICogcGFnZSdzIGpzIGNhbGxzIHRvIGJlIGV4ZWN1dGVkLCB0aGVuIHJlcGxhY2UgdGhlIGJvZGllcyBjb250ZW50XHJcbiAgICAgICAgICogd2l0aCBHb2xkZW5MYXlvdXRcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAoIXRoaXMuX2JpbmRDb21wb25lbnRFdmVudEhhbmxkZXJQYXNzZWRJbkNvbnN0cnVjdG9yICYmIHRoaXMuaXNTdWJXaW5kb3cgPT09IHRydWUgJiYgIXRoaXMuX2NyZWF0aW9uVGltZW91dFBhc3NlZCkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuaW5pdCgpLCA3KTtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRpb25UaW1lb3V0UGFzc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNTdWJXaW5kb3cgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9iaW5kQ29tcG9uZW50RXZlbnRIYW5sZGVyUGFzc2VkSW5Db25zdHJ1Y3Rvcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckh0bWxBbmRBZGp1c3RTdHlsZXNGb3JTdWJXaW5kb3coKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gRXhwb3NlIHRoaXMgaW5zdGFuY2Ugb24gdGhlIHdpbmRvdyBvYmplY3QgdG8gYWxsb3cgdGhlIG9wZW5pbmcgd2luZG93IHRvIGludGVyYWN0IHdpdGggaXRcclxuICAgICAgICAgICAgd2luZG93Ll9fZ2xJbnN0YW5jZSA9IHRoaXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdXBlci5pbml0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgZXhpc3RpbmcgSFRNTCBhbmQgYWRqdXN0cyBzdHlsZSB0byBtYWtlIHdpbmRvdyBzdWl0YWJsZSB0byBiZSBhIHBvcG91dCBzdWIgd2luZG93XHJcbiAgICAgKiBDdXJlbnRseSBpcyBhdXRvbWF0aWNhbGx5IGNhbGxlZCB3aGVuIHdpbmRvdyBpcyBhIHN1YldpbmRvdyBhbmQgYmluZENvbXBvbmVudEV2ZW50IGlzIG5vdCBwYXNzZWQgaW4gdGhlIGNvbnN0cnVjdG9yXHJcbiAgICAgKiBJZiBiaW5kQ29tcG9uZW50RXZlbnQgaXMgbm90IHBhc3NlZCBpbiB0aGUgY29uc3RydWN0b3IsIHRoZSBhcHBsaWNhdGlvbiBtdXN0IGVpdGhlciBjYWxsIHRoaXMgZnVuY3Rpb24gZXhwbGljaXRseSBvclxyXG4gICAgICogKHByZWZlcmFibHkpIG1ha2UgdGhlIHdpbmRvdyBzdWl0YWJsZSBhcyBhIHN1YndpbmRvdy5cclxuICAgICAqIEluIHRoZSBmdXR1cmUsIGl0IGlzIHBsYW5uZWQgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIE5PVCBhdXRvbWF0aWNhbGx5IGNhbGxlZCBpbiBhbnkgY2lyY3Vtc3RhbmNlcy4gIEFwcGxpY2F0aW9ucyB3aWxsXHJcbiAgICAgKiBuZWVkIHRvIGRldGVybWluZSB3aGV0aGVyIGEgd2luZG93IGlzIGEgR29sZGVuIExheW91dCBwb3BvdXQgd2luZG93IGFuZCBlaXRoZXIgY2FsbCB0aGlzIGZ1bmN0aW9uIGV4cGxpY2l0bHkgb3JcclxuICAgICAqIGhpZGUgSFRNTCBub3QgcmVsZXZhbnQgdG8gdGhlIHBvcG91dC5cclxuICAgICAqIFNlZSBhcGl0ZXN0IGZvciBhbiBleGFtcGxlIG9mIGhvdyBIVE1MIGlzIGhpZGRlbiB3aGVuIHBvcG91dCB3aW5kb3dzIGFyZSBkaXNwbGF5ZWRcclxuICAgICAqL1xyXG4gICAgY2xlYXJIdG1sQW5kQWRqdXN0U3R5bGVzRm9yU3ViV2luZG93KCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGhlYWRFbGVtZW50ID0gZG9jdW1lbnQuaGVhZDtcclxuXHJcbiAgICAgICAgY29uc3QgYXBwZW5kTm9kZUxpc3RzID0gbmV3IEFycmF5PE5vZGVMaXN0T2Y8RWxlbWVudD4+KDQpO1xyXG4gICAgICAgIGFwcGVuZE5vZGVMaXN0c1swXSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2JvZHkgbGluaycpO1xyXG4gICAgICAgIGFwcGVuZE5vZGVMaXN0c1sxXSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2JvZHkgc3R5bGUnKTtcclxuICAgICAgICBhcHBlbmROb2RlTGlzdHNbMl0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCd0ZW1wbGF0ZScpO1xyXG4gICAgICAgIGFwcGVuZE5vZGVMaXN0c1szXSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5nbF9rZWVwJyk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGxpc3RJZHggPSAwOyBsaXN0SWR4IDwgYXBwZW5kTm9kZUxpc3RzLmxlbmd0aDsgbGlzdElkeCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFwcGVuZE5vZGVMaXN0ID0gYXBwZW5kTm9kZUxpc3RzW2xpc3RJZHhdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBub2RlSWR4ID0gMDsgbm9kZUlkeCA8IGFwcGVuZE5vZGVMaXN0Lmxlbmd0aDsgbm9kZUlkeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlID0gYXBwZW5kTm9kZUxpc3Rbbm9kZUlkeF07XHJcbiAgICAgICAgICAgICAgICBoZWFkRWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYm9keUVsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xyXG4gICAgICAgIGJvZHlFbGVtZW50LmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgIGJvZHlFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICAgICAgdGhpcy5jaGVja0FkZERlZmF1bHRQb3BpbkJ1dHRvbigpO1xyXG5cclxuICAgICAgICAvKlxyXG4gICAgICAgICogVGhpcyBzZWVtcyBhIGJpdCBwb2ludGxlc3MsIGJ1dCBhY3R1YWxseSBjYXVzZXMgYSByZWZsb3cvcmUtZXZhbHVhdGlvbiBnZXR0aW5nIGFyb3VuZFxyXG4gICAgICAgICogc2xpY2tncmlkJ3MgXCJDYW5ub3QgZmluZCBzdHlsZXNoZWV0LlwiIGJ1ZyBpbiBjaHJvbWVcclxuICAgICAgICAqL1xyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgICAgICBjb25zdCB4ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdpbGwgYWRkIGJ1dHRvbiBpZiBub3QgcG9waW5PbkNsb3NlIHNwZWNpZmllZCBpbiBzZXR0aW5nc1xyXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBhZGRlZCBvdGhlcndpc2UgZmFsc2VcclxuICAgICAqL1xyXG4gICAgY2hlY2tBZGREZWZhdWx0UG9waW5CdXR0b24oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHRoaXMubGF5b3V0Q29uZmlnLnNldHRpbmdzLnBvcEluT25DbG9zZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcG9wSW5CdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHBvcEluQnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKERvbUNvbnN0YW50cy5DbGFzc05hbWUuUG9waW4pO1xyXG4gICAgICAgICAgICBwb3BJbkJ1dHRvbkVsZW1lbnQuc2V0QXR0cmlidXRlKCd0aXRsZScsIHRoaXMubGF5b3V0Q29uZmlnLmhlYWRlci5kb2NrKTtcclxuICAgICAgICAgICAgY29uc3QgaWNvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgaWNvbkVsZW1lbnQuY2xhc3NMaXN0LmFkZChEb21Db25zdGFudHMuQ2xhc3NOYW1lLkljb24pO1xyXG4gICAgICAgICAgICBjb25zdCBiZ0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgYmdFbGVtZW50LmNsYXNzTGlzdC5hZGQoRG9tQ29uc3RhbnRzLkNsYXNzTmFtZS5CZyk7XHJcbiAgICAgICAgICAgIHBvcEluQnV0dG9uRWxlbWVudC5hcHBlbmRDaGlsZChpY29uRWxlbWVudCk7XHJcbiAgICAgICAgICAgIHBvcEluQnV0dG9uRWxlbWVudC5hcHBlbmRDaGlsZChiZ0VsZW1lbnQpO1xyXG4gICAgICAgICAgICBwb3BJbkJ1dHRvbkVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmVtaXQoJ3BvcEluJykpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHBvcEluQnV0dG9uRWxlbWVudCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiAqIEBpbnRlcm5hbCAqIC9cclxuICAgIG92ZXJyaWRlIGJpbmRDb21wb25lbnQoY29udGFpbmVyOiBDb21wb25lbnRDb250YWluZXIsIGl0ZW1Db25maWc6IFJlc29sdmVkQ29tcG9uZW50SXRlbUNvbmZpZyk6IENvbXBvbmVudENvbnRhaW5lci5IYW5kbGUge1xyXG4gICAgICAgIGlmICh0aGlzLmJpbmRDb21wb25lbnRFdmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJpbmRhYmxlQ29tcG9uZW50ID0gdGhpcy5iaW5kQ29tcG9uZW50RXZlbnQoY29udGFpbmVyLCBpdGVtQ29uZmlnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGJpbmRhYmxlQ29tcG9uZW50O1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAqL1xyXG5cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIG92ZXJyaWRlIHVuYmluZENvbXBvbmVudChjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lciwgaGFuZGxlOiBDb21wb25lbnRDb250YWluZXIuSGFuZGxlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMudW5iaW5kQ29tcG9uZW50RXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnVuYmluZENvbXBvbmVudEV2ZW50KGNvbnRhaW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKiogQHB1YmxpYyAqL1xyXG5leHBvcnQgbmFtZXNwYWNlIFZpcnR1YWxMYXlvdXQge1xyXG4gICAgZXhwb3J0IHR5cGUgQmluZENvbXBvbmVudEV2ZW50SGFuZGxlciA9XHJcbiAgICAgICAgKHRoaXM6IHZvaWQsIGNvbnRhaW5lcjogQ29tcG9uZW50Q29udGFpbmVyLCBpdGVtQ29uZmlnOiBSZXNvbHZlZENvbXBvbmVudEl0ZW1Db25maWcpID0+IENvbXBvbmVudENvbnRhaW5lci5IYW5kbGU7XHJcbiAgICBleHBvcnQgdHlwZSBVbmJpbmRDb21wb25lbnRFdmVudEhhbmRsZXIgPVxyXG4gICAgICAgICh0aGlzOiB2b2lkLCBjb250YWluZXI6IENvbXBvbmVudENvbnRhaW5lcikgPT4gdm9pZDtcclxuXHJcbiAgICBleHBvcnQgdHlwZSBCZWZvcmVWaXJ0dWFsUmVjdGluZ0V2ZW50ID0gKHRoaXM6IHZvaWQpID0+IHZvaWQ7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbFxyXG4gICAgICogVmVyaWFibGUgdG8gaG9sZCB0aGUgc3RhdGUgd2hldGhlciB3ZSBhbHJlYWR5IGNoZWNrZWQgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gYSBzdWIgd2luZG93LlxyXG4gICAgICogRml4ZXMgcG9wb3V0IGFuZCBjcmVhdGlvbiBvZiBuZXN0ZWQgZ29sZGVuLWxheW91dHMuXHJcbiAgICAgKi9cclxuICAgIGxldCBzdWJXaW5kb3dDaGVja2VkID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUxheW91dE1hbmFnZXJDb25zdHJ1Y3RvclBhcmFtZXRlcnMoY29uZmlnT3JPcHRpb25hbENvbnRhaW5lcjogTGF5b3V0Q29uZmlnIHwgSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQsXHJcbiAgICAgICAgY29udGFpbmVyT3JCaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyPzogSFRNTEVsZW1lbnQgfCBOb2RlIHwgbnVsbCB8IFZpcnR1YWxMYXlvdXQuQmluZENvbXBvbmVudEV2ZW50SGFuZGxlcixcclxuICAgICAgICB1bmJpbmRDb21wb25lbnRFdmVudEhhbmRsZXI/OiBWaXJ0dWFsTGF5b3V0LlVuYmluZENvbXBvbmVudEV2ZW50SGFuZGxlcnwgTm9kZSB8IG51bGwpXHJcbiAgICA6IExheW91dE1hbmFnZXIuQ29uc3RydWN0b3JQYXJhbWV0ZXJzXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWdPck9wdGlvbmFsQ29udGFpbmVyID09PSAnb2JqZWN0J1xyXG4gICAgICAgICAgICAmJiAhIChjb25maWdPck9wdGlvbmFsQ29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpXHJcbiAgICAgICAgICAgICYmIGNvbmZpZ09yT3B0aW9uYWxDb250YWluZXIuc2V0dGluZ3NcclxuICAgICAgICAgICAgJiYgY29uZmlnT3JPcHRpb25hbENvbnRhaW5lci5zZXR0aW5ncy5jaGVja0dsV2luZG93S2V5ID09PSBmYWxzZSlcclxuICAgICAgICAgICAgc3ViV2luZG93Q2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgY29uc3Qgd2luZG93Q29uZmlnS2V5ID0gc3ViV2luZG93Q2hlY2tlZCA/IG51bGwgOiBuZXcgVVJMKGRvY3VtZW50LmxvY2F0aW9uLmhyZWYpLnNlYXJjaFBhcmFtcy5nZXQoJ2dsLXdpbmRvdycpO1xyXG4gICAgICAgIHN1YldpbmRvd0NoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIGNvbnN0IGlzU3ViV2luZG93ID0gd2luZG93Q29uZmlnS2V5ICE9PSBudWxsO1xyXG5cclxuICAgICAgICBsZXQgY29udGFpbmVyRWxlbWVudDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IGNvbnRhaW5lclBvc2l0aW9uOiBOb2RlIHwgbnVsbCA9IG51bGw7XHJcbiAgICAgICAgbGV0IGNvbmZpZzogTGF5b3V0Q29uZmlnIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICh3aW5kb3dDb25maWdLZXkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3Qgd2luZG93Q29uZmlnU3RyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0od2luZG93Q29uZmlnS2V5KTtcclxuICAgICAgICAgICAgaWYgKHdpbmRvd0NvbmZpZ1N0ciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOdWxsIGdsLXdpbmRvdyBDb25maWcnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSh3aW5kb3dDb25maWdLZXkpO1xyXG4gICAgICAgICAgICBjb25zdCBtaW5pZmllZFdpbmRvd0NvbmZpZyA9IEpTT04ucGFyc2Uod2luZG93Q29uZmlnU3RyKSBhcyBSZXNvbHZlZFBvcG91dExheW91dENvbmZpZztcclxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWRDb25maWcgPSBSZXNvbHZlZExheW91dENvbmZpZy51bm1pbmlmeUNvbmZpZyhtaW5pZmllZFdpbmRvd0NvbmZpZyk7XHJcbiAgICAgICAgICAgIGNvbmZpZyA9IExheW91dENvbmZpZy5mcm9tUmVzb2x2ZWQocmVzb2x2ZWRDb25maWcpXHJcblxyXG4gICAgICAgICAgICBpZiAoY29uZmlnT3JPcHRpb25hbENvbnRhaW5lciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50ID0gY29uZmlnT3JPcHRpb25hbENvbnRhaW5lcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjb25maWdPck9wdGlvbmFsQ29udGFpbmVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb25maWdPck9wdGlvbmFsQ29udGFpbmVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudCA9IGNvbmZpZ09yT3B0aW9uYWxDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnT3JPcHRpb25hbENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvbnRhaW5lckVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lck9yQmluZENvbXBvbmVudEV2ZW50SGFuZGxlciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudCA9IGNvbnRhaW5lck9yQmluZENvbXBvbmVudEV2ZW50SGFuZGxlcjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodW5iaW5kQ29tcG9uZW50RXZlbnRIYW5kbGVyIGluc3RhbmNlb2YgTm9kZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyUG9zaXRpb24gPSB1bmJpbmRDb21wb25lbnRFdmVudEhhbmRsZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yT3JTdWJXaW5kb3dMYXlvdXRDb25maWc6IGNvbmZpZyxcclxuICAgICAgICAgICAgaXNTdWJXaW5kb3csXHJcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQsXHJcbiAgICAgICAgICAgIGNvbnRhaW5lclBvc2l0aW9uLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJleHBvcnQgKiBmcm9tICcuL3RzL2NvbmZpZy9jb25maWcnO1xyXG5leHBvcnQgKiBmcm9tICcuL3RzL2NvbmZpZy9yZXNvbHZlZC1jb25maWcnO1xyXG5leHBvcnQgeyBDb21wb25lbnRDb250YWluZXIgfSBmcm9tICcuL3RzL2NvbnRhaW5lci9jb21wb25lbnQtY29udGFpbmVyJztcclxuZXhwb3J0IHsgQnJvd3NlclBvcG91dCB9IGZyb20gJy4vdHMvY29udHJvbHMvYnJvd3Nlci1wb3BvdXQnO1xyXG5leHBvcnQgeyBEcmFnU291cmNlIH0gZnJvbSAnLi90cy9jb250cm9scy9kcmFnLXNvdXJjZSc7XHJcbmV4cG9ydCB7IEhlYWRlciB9IGZyb20gJy4vdHMvY29udHJvbHMvaGVhZGVyJztcclxuZXhwb3J0IHsgVGFiIH0gZnJvbSAnLi90cy9jb250cm9scy90YWInO1xyXG5leHBvcnQgKiBmcm9tICcuL3RzL2Vycm9ycy9leHRlcm5hbC1lcnJvcic7XHJcbmV4cG9ydCB7IEdvbGRlbkxheW91dCB9IGZyb20gJy4vdHMvZ29sZGVuLWxheW91dCc7XHJcbmV4cG9ydCB7IENvbXBvbmVudEl0ZW0gfSBmcm9tICcuL3RzL2l0ZW1zL2NvbXBvbmVudC1pdGVtJztcclxuZXhwb3J0IHsgQ29udGVudEl0ZW0gfSBmcm9tICcuL3RzL2l0ZW1zL2NvbnRlbnQtaXRlbSc7XHJcbmV4cG9ydCB7IFJvd09yQ29sdW1uIH0gZnJvbSAnLi90cy9pdGVtcy9yb3ctb3ItY29sdW1uJztcclxuZXhwb3J0IHsgU3RhY2sgfSBmcm9tICcuL3RzL2l0ZW1zL3N0YWNrJztcclxuZXhwb3J0IHsgTGF5b3V0TWFuYWdlciB9IGZyb20gJy4vdHMvbGF5b3V0LW1hbmFnZXInO1xyXG5leHBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICcuL3RzL3V0aWxzL2V2ZW50LWVtaXR0ZXInO1xyXG5leHBvcnQgeyBFdmVudEh1YiB9IGZyb20gJy4vdHMvdXRpbHMvZXZlbnQtaHViJztcclxuZXhwb3J0ICogZnJvbSAnLi90cy91dGlscy9pMThuLXN0cmluZ3MnO1xyXG5leHBvcnQgeyBTdHlsZUNvbnN0YW50cyB9IGZyb20gJy4vdHMvdXRpbHMvc3R5bGUtY29uc3RhbnRzJztcclxuZXhwb3J0ICogZnJvbSAnLi90cy91dGlscy90eXBlcyc7XHJcbmV4cG9ydCB7IFZpcnR1YWxMYXlvdXQgfSBmcm9tICcuL3RzL3ZpcnR1YWwtbGF5b3V0JztcclxuXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==