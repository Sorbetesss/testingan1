import BlazorComponent from"../../../_content/BootstrapBlazor/modules/base/blazor-component.js";import EventHandler from"../../../_content/BootstrapBlazor/modules/base/event-handler.js";import{vibrate as n}from"../../../_content/BootstrapBlazor/modules/base/utility.js";export class BarcodeReader extends BlazorComponent{_init(){if(this._reader=new ZXing.BrowserMultiFormatReader,this._scanType=this._config.scan,this._invoker=this._config.arguments[0],this._scanType==="Camera")this.scan=()=>{this._invoker.invokeMethodAsync("Start");const t=this._element.getAttribute("data-bb-deviceid"),i=this._element.querySelector("video").getAttribute("id");this._reader.decodeFromVideoDevice(t,i,(t,i)=>{if(t){n();console.log(t.text);this._invoker.invokeMethodAsync("GetResult",t.text);const i=this._element.getAttribute("data-bb-autostop")==="true";i&&this.stop()}!i||i instanceof ZXing.NotFoundException||(console.error(i),this._invoker.invokeMethodAsync("GetError",i))})},this.stop=()=>{this._reader.reset(),this._invoker.invokeMethodAsync("Stop")},this._reader.getVideoInputDevices().then(n=>{this._invoker.invokeMethodAsync("InitDevices",n).then(()=>{const t=this._element.getAttribute("data-bb-autostart")==="true";if(this._config.autoStart&&n.length>0){const n=this._element.querySelector('[data-bb-method="scan"]');n.click()}})});else{const t=()=>{const t=this._reader.file.files;if(t.length!==0){const i=new FileReader;i.onloadend=t=>{this._reader.decodeFromImageUrl(t.target.result).then(t=>{t&&(n(),console.log(t.text),this._invoker.invokeMethodAsync("GetResult",t.text))}).catch(n=>{n&&(console.log(n),this._invoker.invokeMethodAsync("GetError",n.message))})};i.readAsDataURL(t[0])}},i=()=>{let n=this._element.querySelector('[type="file"]');n&&(EventHandler.off(n,"change"),n.remove());n=document.createElement("input");n.setAttribute("type","file");n.setAttribute("hidden","true");n.setAttribute("accept","image/*");this._element.append(n);EventHandler.on(n,"change",t);return this._reader.file=n,n};this.scanImage=()=>{let n=i();n.click()}}const t=n=>{let i=n.delegateTarget;const r=i.getAttribute("data-bb-method"),t=this[r];typeof t=="function"&&t()};EventHandler.on(this._element,"click","[data-bb-method]",t)}_dispose(){EventHandler.off(this._element,"click","[data-bb-method]");this._reader.reset()}}