@page "/theme-provider"
@layout MainLayout

<h3>主题服务 <code>IThemeProvider</code></h3>
<h4>组件库内置了主题服务</h4>

<p class="code-label">1. 服务注入</p>

<Pre>[Inject]
[NotNull]
private IThemeProvider? ThemeProvider { get; set; }</Pre>

<p class="code-label">2. 使用服务</p>
<p>调用 <code>ThemeProvider</code> 实例方法 <code>SetThemeAsync</code> 即可</p>

<Pre>ThemeProvider.SetThemeAsync("light")</Pre>

<p class="code-label">3. 使用方法</p>

<ul class="ul-demo">
    <li>主题服务是组件 <code>ThemeProvider</code> 的一种补充方法，允许开发人员通过代码切换主题</li>
    <li><code>ThemeProvider</code> 组件已实现所有功能</li>
    <li><code>ThemeProvider</code> 组件已内置支持 <code>bootstrap</code> <code>fontawesome</code> <code>material</code> 三种图标库</li>
    <li><code>ThemeProvider</code> 组件选中主题后，默认使用 <code>localstorage</code> 对值进行了本地存储</li>
</ul>

<Pre>&lt;ThemeProvider&gt;&lt;/ThemeProvider&gt;</Pre>

<p>页面首次加载时，会读取本地存储值，可通过如下代码实现</p>

<Pre>import { getPreferredTheme, setTheme } from "../../_content/BootstrapBlazor/modules/utility.js"

setTheme(getPreferredTheme(), false)
</Pre>

<p>完整解决方案是，在 <code>App.razor</code> 文件中的 <code>Head</code> 中加载脚本，在页面渲染前读取主题；以上代码内置到 <code>lib/theme.js</code> 文件内</p>

<Pre>&lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;Link Href="css/site.css" /&gt;
    &lt;Script Src="lib/theme.js" type="module"&gt;&lt;/Script&gt;
&lt;/head&gt;</Pre>

<p><code>Script</code> 标签内置版本控制类似 <code>MVC</code> 模式下 <code>TagHelper</code> <code>asp-append-version</code></p>
