@inherits LayoutComponentBase
@implements IDisposable
@layout BaseLayout
@inject NavigationManager NavigationManager
@inject IOptionsMonitor<WebsiteOptions> WebsiteOption
@inject IStringLocalizer<HomeLayout> Localizer
@inject PackageVersionService VersionService
@inject ICacheManager Cache
@inject IConnectionService ConnectionService

@Body

<footer>
    <div class="footer-body">
        <div>
            <h4>@Localizer["FooterH1"]</h4>
            <ul>
                <li>
                    <a class="footer-link" href="@WebsiteOption.CurrentValue.BootstrapAdminLink" target="_blank">Bootstrap Admin</a>
                </li>
                <li>
                    <a class="footer-link" href="https://gitee.com/Longbow/SliderCaptcha" target="_blank">@Localizer["FooterLi1"]</a>
                </li>
                <li>
                    <a class="footer-link" href="https://gitee.com/Longbow/longbow-select" target="_blank">Longbow-select</a>
                </li>
                <li>
                    <a class="footer-link" href="https://gitee.com/Longbow/longbow-validate" target="_blank">Longbow-validate</a>
                </li>
            </ul>
        </div>
        <div>
            <h4>@Localizer["FriendLink"]</h4>
            <ul>
                @foreach (var link in WebsiteOption.CurrentValue.Links)
                {
                    <li>
                        <a class="footer-link" href="@link.Value" target="_blank">@link.Key</a>
                    </li>
                }
            </ul>
        </div>
        <div>
            <h4>@Localizer["Community"]</h4>
            <ul>
                <li>
                    <div class="footer-link">@Localizer["CommunityLi2"]</div>
                </li>
                <li>
                    <div class="footer-link">@Localizer["CommunityLi1"]</div>
                </li>
                <li>
                    <div class="footer-link">@Localizer["CommunityLi3"]</div>
                </li>
            </ul>
        </div>
        <div>
            <h4>@Localizer["SpecialAcknowledgements"]</h4>
            <ul>
                <li>
                    <div class="footer-link">上海智通建设发展股份有限公司</div>
                </li>
            </ul>
        </div>
    </div>
    <div class="footer-info d-flex">
        <div class="d-flex">
            <div>Powered by .NET @Version on @OS</div>
            <div class="ms-1">BB @VersionService.Version</div>
            <div class="d-none d-sm-block ms-2">Run @Runtime</div>
            <div class="d-none d-md-block ms-2">@ConnectionService.Count</div>
        </div>
        <div class="d-flex flex-fill align-items-center justify-content-center">
            <a class="d-none d-md-block me-3" href="@WebsiteOption.CurrentValue.GiteeRepositoryUrl" target="_blank">@Localizer["Footer"]</a>
            <a class="d-none d-lg-block me-3" href="https://beian.miit.gov.cn/" target="_blank">苏ICP备16047547号-2</a>
        </div>
        <div class="d-md-flex d-none">
            <img alt="global" class="footer-lang" src="./images/global.svg" />
            <a @onclick:preventDefault @onclick="@(e => SetLang("zh-CN"))">简 体</a>
            <span class="mx-1">/</span>
            <a @onclick:preventDefault @onclick="@(e => SetLang("en-US"))">English</a>
        </div>
    </div>
</footer>

@code {
    private static string Version => Environment.Version.ToString();

    [NotNull]
    private string? OS { get; set; }

    private string? Runtime { get; set; }

    private string SelectedCulture { get; set; } = CultureInfo.CurrentUICulture.Name;

    private CancellationTokenSource DisposeTokenSource { get; } = new();

    /// <summary>
    /// <inheritdoc />
    /// </summary>
    protected override void OnInitialized()
    {
        if (System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(System.Runtime.InteropServices.OSPlatform.Windows))
        {
            OS = "Windows";
        }
        else if (System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(System.Runtime.InteropServices.OSPlatform.OSX))
        {
            OS = "OSX";
        }
        else if (System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(System.Runtime.InteropServices.OSPlatform.Linux))
        {
            OS = "Linux";
        }
        else
        {
            OS = "Unknown";
        }

        UpdateRuntime();
    }

    /// <summary>
    /// <inheritdoc />
    /// </summary>
    /// <param name="firstRender"></param>
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _ = Task.Run(async () =>
            {
                while (!DisposeTokenSource.IsCancellationRequested)
                {
                    try
                    {
                        await Task.Delay(1000, DisposeTokenSource.Token);
                    }
                    catch (TaskCanceledException)
                    {

                    }
                    if (!DisposeTokenSource.IsCancellationRequested)
                    {
                        UpdateRuntime();
                        await InvokeAsync(StateHasChanged);
                    }
                }
            });
        }
    }

    private void UpdateRuntime()
    {
        var ts = DateTimeOffset.Now - Cache.GetStartTime();
        Runtime = ts.ToString("dd\\.hh\\:mm\\:ss");
    }

    private Task SetLang(string cultureName)
    {
        // 使用 api 方式 适用于 Server-Side 模式
        if (SelectedCulture != cultureName)
        {
            var uri = new Uri(NavigationManager.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
            var query = $"?culture={Uri.EscapeDataString(cultureName)}&redirectUri={Uri.EscapeDataString(uri)}";

            // use a path that matches your culture redirect controller from the previous steps
            NavigationManager.NavigateTo("/Culture/SetCulture" + query, forceLoad: true);
        }

        return Task.CompletedTask;
    }

    private void Dispose(bool disposing)
    {
        if (disposing)
        {
            DisposeTokenSource.Cancel();
            DisposeTokenSource.Dispose();
        }
    }

    /// <summary>
    /// <inheritdoc/>
    /// </summary>
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }
}
