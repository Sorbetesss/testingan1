@namespace BootstrapBlazor.Components
@inherits IdComponentBase

<div id="@Id" class="input-group mb-3">
    @if (ShowLabel)
    {
        <span class="input-group-text">@DisplayText</span>
    }
    @if (ShowValueInput)
    {
        <div>
            <BootstrapInputNumber style="border-radius: 0;" Step="@Step" @oninput=OninputAsync TValue="double" @bind-Value="@Value" IsSelectAllTextOnFocus="true" IsDisabled="@IsDisabled" Max="@($"{Max}")" Min="@($"{Min}")" />
        </div>
    }
    <div class="form-control">
        <input type="range" class="form-range" style="height:auto;" step="@Step" @oninput=OninputAsync disabled="@IsDisabled" value="@Value" min="@Min" max="@Max">
    </div>
</div>

@code {
    /// <summary>
    /// 获得/设置 组件当前值
    /// </summary>
    [Parameter]
    public double Value { get; set; }

    /// <summary>
    /// ValueChanged 回调方法
    /// </summary>
    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }

    /// <summary>
    /// 获得/设置 值变化时回调方法
    /// </summary>
    [Parameter]
    public Func<double, Task>? OnValueChanged { get; set; }

    /// <summary>
    /// 获得/设置 是否禁用
    /// </summary>
    [Parameter]
    public bool IsDisabled { get; set; }

    /// <summary>
    /// 获得/设置 最大值
    /// </summary>
    [Parameter]
    public double Max { get; set; } = 100;

    /// <summary>
    /// 获得/设置 最小值
    /// </summary>
    [Parameter]
    public double Min { get; set; } = 0;

    /// <summary>
    /// 获得/设置 步长
    /// </summary>
    [Parameter]
    public string Step { get; set; } = "1";

    /// <summary>
    /// 获得/设置 显示Value值
    /// </summary>
    [Parameter]
    public bool ShowValueInput { get; set; } = true;

    /// <summary>
    /// 获得/设置 显示名称
    /// </summary>
    [Parameter]
    public string? DisplayText { get; set; }

    /// <summary>
    /// 获得/设置 是否显示前置标签 默认显示标签
    /// </summary>
    [Parameter]
    public bool ShowLabel { get; set; } = true;

    /// <summary>
    /// 获得 样式集合
    /// </summary>
    private string? ClassName => CssBuilder.Default("range-slider")
        .AddClassFromAttributes(AdditionalAttributes)
        .Build();

    private async Task OninputAsync(ChangeEventArgs args)
    {
        Value = Convert.ToDouble(args.Value);
        if (OnValueChanged != null)
        {
            await OnValueChanged(Value);
        }

        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(Value);
        }
    }
}
