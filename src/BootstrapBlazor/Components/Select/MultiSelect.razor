@namespace BootstrapBlazor.Components
@typeparam TValue
@inherits ValidateBase<TValue>

@if (IsShowLabel)
{
    <BootstrapLabel required="@Required" for="@Id" ShowLabelTooltip="ShowLabelTooltip" Value="@DisplayText" />
}
<div class="@ClassString" @ref="SelectElement">
    <div class="@ToggleClassString" tabindex="0" hidefocus="true" outline="0" id="@Id" @onclick="@ToggleMenu">
        <div class="@PlaceHolderClassString">@PlaceHolder</div>
        <div class="multi-select-items">
            @foreach (var item in SelectedItems)
            {
                @if (ShowCloseButton)
                {
                    <div class="multi-select-item-group">
                        <span class="multi-select-close" @onclick:stopPropagation @onclick="@(e => ToggleRow(item))">
                            <i class="@ClearIcon"></i>
                        </span>
                        <span class="multi-select-item">@item.Text</span>
                    </div>
                }
                else
                {
                    <span class="multi-select-item">@item.Text</span>
                }
            }
        </div>
    </div>
    <div class="dropdown-menu shadow">
        @if (ShowSearch)
        {
            <div class="search">
                <input type="text" class="form-control" @bind="@SearchText" @bind:event="oninput" />
                <i class="@SearchIcon"></i>
            </div>
        }
        @if (ShowToolbar)
        {
            <div class="toolbar">
                @if (ShowDefaultButtons)
                {
                    <button class="btn" type="button" @onclick="@SelectAll">@SelectAllText</button>
                    <button class="btn" type="button" @onclick="@InvertSelect">@ReverseSelectText</button>
                    <button class="btn" type="button" @onclick="@Clear">@ClearText</button>
                }
                @ButtonTemplate
            </div>
        }
        @foreach (var itemGroup in GetData().GroupBy(i => i.GroupName))
        {
            if (!string.IsNullOrEmpty(itemGroup.Key))
            {
                <Divider Text="@itemGroup.Key" />
            }
            @foreach (var item in itemGroup)
            {
                <DynamicElement OnClick="() => ToggleRow(item, true)" TriggerClick="@CheckCanTrigger(item)" class="@GetItemClassString(item)">
                    <Checkbox Value="GetCheckedState(item)" ShowLabel="false" IsDisabled="@CheckCanSelect(item)"></Checkbox>
                    @if (ItemTemplate == null)
                    {
                        <span>@item.Text</span>
                    }
                    else
                    {
                        @ItemTemplate(item)
                    }
                </DynamicElement>
            }
        }
    </div>
    <div class="dropdown-menu-arrow"></div>
</div>
